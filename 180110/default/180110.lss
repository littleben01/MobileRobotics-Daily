
180110.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012c  00800100  0000235c  000023f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000235c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  0080022c  0080022c  0000251c  2**0
                  ALLOC
  3 .stab         00001cc8  00000000  00000000  0000251c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000064a  00000000  00000000  000041e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000482e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004a0  00000000  00000000  00004a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002ef8  00000000  00000000  00004eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000165e  00000000  00000000  00007da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000024b9  00000000  00000000  00009404  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000400  00000000  00000000  0000b8c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006a4  00000000  00000000  0000bcc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001746  00000000  00000000  0000c364  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000666  00000000  00000000  0000daaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  0000e110  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 ce 09 	jmp	0x139c	; 0x139c <__vector_18>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_30>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <backwall_follow+0xa4>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d0 e1       	ldi	r29, 0x10	; 16
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	12 e0       	ldi	r17, 0x02	; 2
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	ec e5       	ldi	r30, 0x5C	; 92
      be:	f3 e2       	ldi	r31, 0x23	; 35
      c0:	00 e0       	ldi	r16, 0x00	; 0
      c2:	0b bf       	out	0x3b, r16	; 59
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
      c6:	07 90       	elpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	ac 32       	cpi	r26, 0x2C	; 44
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
      d0:	12 e0       	ldi	r17, 0x02	; 2
      d2:	ac e2       	ldi	r26, 0x2C	; 44
      d4:	b2 e0       	ldi	r27, 0x02	; 2
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	aa 34       	cpi	r26, 0x4A	; 74
      dc:	b1 07       	cpc	r27, r17
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	0e 94 24 06 	call	0xc48	; 0xc48 <main>
      e4:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <MCU_init>:
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART1 Receiver: On
	// USART1 Transmitter: On
	// USART1 Mode: Asynchronous
	// USART1 Baud Rate: 9600
	UCSR1A=0x00;
      ec:	10 92 9b 00 	sts	0x009B, r1
	UCSR1B=0x98;
      f0:	88 e9       	ldi	r24, 0x98	; 152
      f2:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C=0x06;
      f6:	86 e0       	ldi	r24, 0x06	; 6
      f8:	80 93 9d 00 	sts	0x009D, r24
	UBRR1H=0x00;
      fc:	10 92 98 00 	sts	0x0098, r1
	UBRR1L=0x5F;
     100:	8f e5       	ldi	r24, 0x5F	; 95
     102:	80 93 99 00 	sts	0x0099, r24

	sei();
     106:	78 94       	sei
}
     108:	08 95       	ret

0000010a <__vector_30>:

ISR(USART1_RX_vect)
{
     10a:	1f 92       	push	r1
     10c:	0f 92       	push	r0
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	0f 92       	push	r0
     112:	11 24       	eor	r1, r1
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
	char data;
	
	data=UDR1;
     118:	90 91 9c 00 	lds	r25, 0x009C
	while(!(UCSR1A&0xB8)); //수신완료 및 에러 검출되지 않을시
     11c:	80 91 9b 00 	lds	r24, 0x009B
     120:	88 7b       	andi	r24, 0xB8	; 184
     122:	e1 f3       	breq	.-8      	; 0x11c <__vector_30+0x12>
	rx1_flg=1;              //수신완료 플레그 set
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	80 93 2c 02 	sts	0x022C, r24
	rx1_buff=data;	
     12a:	90 93 2d 02 	sts	0x022D, r25
}
     12e:	9f 91       	pop	r25
     130:	8f 91       	pop	r24
     132:	0f 90       	pop	r0
     134:	0f be       	out	0x3f, r0	; 63
     136:	0f 90       	pop	r0
     138:	1f 90       	pop	r1
     13a:	18 95       	reti

0000013c <getchar1>:

char getchar1(void)  //uart 수신하기
{
	char data;
	
	data=rx1_buff;
     13c:	80 91 2d 02 	lds	r24, 0x022D
	rx1_buff=0;
     140:	10 92 2d 02 	sts	0x022D, r1
	cli();           //글로벌 인터럽트 disable
     144:	f8 94       	cli
	rx1_flg=0;       //수신완료 플레그 reset
     146:	10 92 2c 02 	sts	0x022C, r1
	sei();           //글로벌 인터럽트 enable          
     14a:	78 94       	sei
	return data;     //수신데이터 반환
}
     14c:	08 95       	ret

0000014e <putchar1>:

void putchar1(char data) //uart 송신화기
{
	while(!(UCSR1A&0x20));  //송신 준비 완료시
     14e:	90 91 9b 00 	lds	r25, 0x009B
     152:	95 ff       	sbrs	r25, 5
     154:	fc cf       	rjmp	.-8      	; 0x14e <putchar1>
	UDR1=data;              //송신 버퍼에 데이터 쓰기
     156:	80 93 9c 00 	sts	0x009C, r24
}
     15a:	08 95       	ret

0000015c <Interface_init>:
// Parameter : 없음
// Return    : 없음
void Interface_init(void)
{
    // LCD / EX I/O Expander
	TWDR = 0xFF;
     15c:	8f ef       	ldi	r24, 0xFF	; 255
     15e:	80 93 73 00 	sts	0x0073, r24
	TWBR = 0x48;
     162:	88 e4       	ldi	r24, 0x48	; 72
     164:	80 93 70 00 	sts	0x0070, r24
}
     168:	08 95       	ret

0000016a <lcd_write_data>:
//          data - 전송할 한바이트 데이터
// Return    : 없음
void lcd_write_data(unsigned char data)
{
	// 시작
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     16a:	94 ea       	ldi	r25, 0xA4	; 164
     16c:	90 93 74 00 	sts	0x0074, r25
	// 준비상태 체크
    while(!(TWCR & (1 << TWINT)));
     170:	90 91 74 00 	lds	r25, 0x0074
     174:	97 ff       	sbrs	r25, 7
     176:	fc cf       	rjmp	.-8      	; 0x170 <lcd_write_data+0x6>
	
	// 주소 전송
    TWDR = SLA << 1;
     178:	9e e0       	ldi	r25, 0x0E	; 14
     17a:	90 93 73 00 	sts	0x0073, r25
	
	TWCR = (1 << TWINT) | (1 << TWEN);
     17e:	94 e8       	ldi	r25, 0x84	; 132
     180:	90 93 74 00 	sts	0x0074, r25
	while(!(TWCR & (1 << TWINT)));
     184:	90 91 74 00 	lds	r25, 0x0074
     188:	97 ff       	sbrs	r25, 7
     18a:	fc cf       	rjmp	.-8      	; 0x184 <lcd_write_data+0x1a>
	
	TWDR = data;
     18c:	80 93 73 00 	sts	0x0073, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
     190:	84 e8       	ldi	r24, 0x84	; 132
     192:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1 << TWINT)));
     196:	80 91 74 00 	lds	r24, 0x0074
     19a:	87 ff       	sbrs	r24, 7
     19c:	fc cf       	rjmp	.-8      	; 0x196 <lcd_write_data+0x2c>
	
    // 정지
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     19e:	84 e9       	ldi	r24, 0x94	; 148
     1a0:	80 93 74 00 	sts	0x0074, r24
}
     1a4:	08 95       	ret

000001a6 <lcd_display_str>:
// Parameter :
//          line   - 출력할 라인번호(0~3)
//          string - 출력할 문자열(최대 20자)
// Return    : 없음
void lcd_display_str(unsigned char Y_line, unsigned char X_line,char *string) //lcd 스트링데이터 쓰기
{
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <lcd_display_str+0xe>
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	08 2f       	mov	r16, r24
     1ba:	16 2f       	mov	r17, r22
    int i=X_line;

	if((Y_line<4) && (X_line<20)){
     1bc:	84 30       	cpi	r24, 0x04	; 4
     1be:	68 f5       	brcc	.+90     	; 0x21a <lcd_display_str+0x74>
     1c0:	64 31       	cpi	r22, 0x14	; 20
     1c2:	58 f5       	brcc	.+86     	; 0x21a <lcd_display_str+0x74>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     1c4:	8b e1       	ldi	r24, 0x1B	; 27
     1c6:	49 83       	std	Y+1, r20	; 0x01
     1c8:	5a 83       	std	Y+2, r21	; 0x02
     1ca:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1ce:	8c e4       	ldi	r24, 0x4C	; 76
     1d0:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     1d4:	81 2f       	mov	r24, r17
     1d6:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1da:	80 2f       	mov	r24, r16
     1dc:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e0:	81 e2       	ldi	r24, 0x21	; 33
     1e2:	8a 95       	dec	r24
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_display_str+0x3c>
     1e6:	00 00       	nop
     1e8:	e1 2e       	mov	r14, r17
     1ea:	ff 24       	eor	r15, r15
     1ec:	49 81       	ldd	r20, Y+1	; 0x01
     1ee:	5a 81       	ldd	r21, Y+2	; 0x02
     1f0:	04 2f       	mov	r16, r20
     1f2:	15 2f       	mov	r17, r21
     1f4:	06 c0       	rjmp	.+12     	; 0x202 <lcd_display_str+0x5c>
		_delay_us(100);
    	while(((i++)<20)&&*string){
        	lcd_write_data(*string++);
     1f6:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1fa:	ed e0       	ldi	r30, 0x0D	; 13
     1fc:	ea 95       	dec	r30
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_display_str+0x56>
     200:	00 00       	nop

	if((Y_line<4) && (X_line<20)){
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
		lcd_write_data(X_line); lcd_write_data(Y_line);
		_delay_us(100);
    	while(((i++)<20)&&*string){
     202:	f4 e1       	ldi	r31, 0x14	; 20
     204:	ef 16       	cp	r14, r31
     206:	f1 04       	cpc	r15, r1
     208:	44 f4       	brge	.+16     	; 0x21a <lcd_display_str+0x74>
     20a:	f8 01       	movw	r30, r16
     20c:	81 91       	ld	r24, Z+
     20e:	8f 01       	movw	r16, r30
     210:	08 94       	sec
     212:	e1 1c       	adc	r14, r1
     214:	f1 1c       	adc	r15, r1
     216:	88 23       	and	r24, r24
     218:	71 f7       	brne	.-36     	; 0x1f6 <lcd_display_str+0x50>
        	lcd_write_data(*string++);
			_delay_us(40);
		}
    }
}
     21a:	0f 90       	pop	r0
     21c:	0f 90       	pop	r0
     21e:	cf 91       	pop	r28
     220:	df 91       	pop	r29
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	08 95       	ret

0000022c <write_lcd_data>:

void write_lcd_data(unsigned char Y_line, unsigned char X_line, long data) //lcd데이터 쓰기
{
     22c:	1f 93       	push	r17
     22e:	df 93       	push	r29
     230:	cf 93       	push	r28
     232:	00 d0       	rcall	.+0      	; 0x234 <write_lcd_data+0x8>
     234:	cd b7       	in	r28, 0x3d	; 61
     236:	de b7       	in	r29, 0x3e	; 62
     238:	18 2f       	mov	r17, r24
    if(Y_line<4 && X_line<20){
     23a:	84 30       	cpi	r24, 0x04	; 4
     23c:	e8 f4       	brcc	.+58     	; 0x278 <write_lcd_data+0x4c>
     23e:	64 31       	cpi	r22, 0x14	; 20
     240:	d8 f4       	brcc	.+54     	; 0x278 <write_lcd_data+0x4c>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     242:	8b e1       	ldi	r24, 0x1B	; 27
     244:	2a 83       	std	Y+2, r18	; 0x02
     246:	69 83       	std	Y+1, r22	; 0x01
     248:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     24c:	8c e4       	ldi	r24, 0x4C	; 76
     24e:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     252:	69 81       	ldd	r22, Y+1	; 0x01
     254:	86 2f       	mov	r24, r22
     256:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     25a:	81 2f       	mov	r24, r17
     25c:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     260:	81 e2       	ldi	r24, 0x21	; 33
     262:	8a 95       	dec	r24
     264:	f1 f7       	brne	.-4      	; 0x262 <write_lcd_data+0x36>
     266:	00 00       	nop
		_delay_us(100);
		lcd_write_data(data);
     268:	2a 81       	ldd	r18, Y+2	; 0x02
     26a:	82 2f       	mov	r24, r18
     26c:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     270:	ed e0       	ldi	r30, 0x0D	; 13
     272:	ea 95       	dec	r30
     274:	f1 f7       	brne	.-4      	; 0x272 <write_lcd_data+0x46>
     276:	00 00       	nop
		_delay_us(40);
    }
}
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	cf 91       	pop	r28
     27e:	df 91       	pop	r29
     280:	1f 91       	pop	r17
     282:	08 95       	ret

00000284 <lcd_clear_screen>:

void lcd_clear_screen(void){ lcd_write_data(0x1B); lcd_write_data(0x43); _delay_ms(20); } //lcd전체화면 클리어
     284:	8b e1       	ldi	r24, 0x1B	; 27
     286:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     28a:	83 e4       	ldi	r24, 0x43	; 67
     28c:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     290:	87 e8       	ldi	r24, 0x87	; 135
     292:	93 e1       	ldi	r25, 0x13	; 19
     294:	01 97       	sbiw	r24, 0x01	; 1
     296:	f1 f7       	brne	.-4      	; 0x294 <lcd_clear_screen+0x10>
     298:	00 c0       	rjmp	.+0      	; 0x29a <lcd_clear_screen+0x16>
     29a:	00 00       	nop
     29c:	08 95       	ret

0000029e <display_char>:
void display_char(unsigned char line, unsigned char col, unsigned char data) ////lcd char 데이터 표시
{
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	18 2f       	mov	r17, r24
     2a8:	f6 2e       	mov	r15, r22
     2aa:	e4 2e       	mov	r14, r20
    unsigned char val=0, val_buff=0;

	val=data;   

	val_buff=val/100;             
     2ac:	84 2f       	mov	r24, r20
     2ae:	64 e6       	ldi	r22, 0x64	; 100
     2b0:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__udivmodqi4>
     2b4:	08 2f       	mov	r16, r24
	write_lcd_data(line, col, val_buff+'0' );
     2b6:	28 2f       	mov	r18, r24
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	20 5d       	subi	r18, 0xD0	; 208
     2bc:	3f 4f       	sbci	r19, 0xFF	; 255
     2be:	44 27       	eor	r20, r20
     2c0:	37 fd       	sbrc	r19, 7
     2c2:	40 95       	com	r20
     2c4:	54 2f       	mov	r21, r20
     2c6:	81 2f       	mov	r24, r17
     2c8:	6f 2d       	mov	r22, r15
     2ca:	0e 94 16 01 	call	0x22c	; 0x22c <write_lcd_data>
	val=val-(100*val_buff);
     2ce:	8c e9       	ldi	r24, 0x9C	; 156
     2d0:	08 9f       	mul	r16, r24
     2d2:	00 2d       	mov	r16, r0
     2d4:	11 24       	eor	r1, r1
     2d6:	0e 0d       	add	r16, r14

	val_buff=val/10;
     2d8:	80 2f       	mov	r24, r16
     2da:	6a e0       	ldi	r22, 0x0A	; 10
     2dc:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__udivmodqi4>
     2e0:	e8 2e       	mov	r14, r24
	write_lcd_data(line, 1+col, val_buff+'0' );
     2e2:	6f 2d       	mov	r22, r15
     2e4:	6f 5f       	subi	r22, 0xFF	; 255
     2e6:	28 2f       	mov	r18, r24
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	20 5d       	subi	r18, 0xD0	; 208
     2ec:	3f 4f       	sbci	r19, 0xFF	; 255
     2ee:	44 27       	eor	r20, r20
     2f0:	37 fd       	sbrc	r19, 7
     2f2:	40 95       	com	r20
     2f4:	54 2f       	mov	r21, r20
     2f6:	81 2f       	mov	r24, r17
     2f8:	0e 94 16 01 	call	0x22c	; 0x22c <write_lcd_data>
	val=val-(10*val_buff);

	write_lcd_data(line, 2+col, val+'0');
     2fc:	6f 2d       	mov	r22, r15
     2fe:	6e 5f       	subi	r22, 0xFE	; 254
	write_lcd_data(line, col, val_buff+'0' );
	val=val-(100*val_buff);

	val_buff=val/10;
	write_lcd_data(line, 1+col, val_buff+'0' );
	val=val-(10*val_buff);
     300:	26 ef       	ldi	r18, 0xF6	; 246
     302:	e2 9e       	mul	r14, r18
     304:	20 2d       	mov	r18, r0
     306:	11 24       	eor	r1, r1
     308:	20 0f       	add	r18, r16

	write_lcd_data(line, 2+col, val+'0');
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	20 5d       	subi	r18, 0xD0	; 208
     30e:	3f 4f       	sbci	r19, 0xFF	; 255
     310:	44 27       	eor	r20, r20
     312:	37 fd       	sbrc	r19, 7
     314:	40 95       	com	r20
     316:	54 2f       	mov	r21, r20
     318:	81 2f       	mov	r24, r17
     31a:	0e 94 16 01 	call	0x22c	; 0x22c <write_lcd_data>
}
     31e:	1f 91       	pop	r17
     320:	0f 91       	pop	r16
     322:	ff 90       	pop	r15
     324:	ef 90       	pop	r14
     326:	08 95       	ret

00000328 <HolonomicW>:
	}		
}



void HolonomicW(int f_agl, int f_speed, int fw_speed){
     328:	2f 92       	push	r2
     32a:	3f 92       	push	r3
     32c:	4f 92       	push	r4
     32e:	5f 92       	push	r5
     330:	6f 92       	push	r6
     332:	7f 92       	push	r7
     334:	8f 92       	push	r8
     336:	9f 92       	push	r9
     338:	af 92       	push	r10
     33a:	bf 92       	push	r11
     33c:	cf 92       	push	r12
     33e:	df 92       	push	r13
     340:	ef 92       	push	r14
     342:	ff 92       	push	r15
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	df 93       	push	r29
     34a:	cf 93       	push	r28
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	60 97       	sbiw	r28, 0x10	; 16
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	8c 01       	movw	r16, r24
     35e:	7b 01       	movw	r14, r22
     360:	1a 01       	movw	r2, r20
	double V[3]={0,0,0};

	unsigned char i=0;

	// 좌표계 변환
	if(f_agl <= 180) DesiredDirection = 180 - f_agl;
     362:	85 3b       	cpi	r24, 0xB5	; 181
     364:	91 05       	cpc	r25, r1
     366:	1c f4       	brge	.+6      	; 0x36e <HolonomicW+0x46>
     368:	64 eb       	ldi	r22, 0xB4	; 180
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	02 c0       	rjmp	.+4      	; 0x372 <HolonomicW+0x4a>
	else if(f_agl > 180) DesiredDirection = 540 - f_agl;
     36e:	6c e1       	ldi	r22, 0x1C	; 28
     370:	72 e0       	ldi	r23, 0x02	; 2
     372:	60 1b       	sub	r22, r16
     374:	71 0b       	sbc	r23, r17
	
	// 라디안 변환
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
     376:	88 27       	eor	r24, r24
     378:	77 fd       	sbrc	r23, 7
     37a:	80 95       	com	r24
     37c:	98 2f       	mov	r25, r24
     37e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__floatsisf>
     382:	5b 01       	movw	r10, r22
     384:	6c 01       	movw	r12, r24
     386:	60 e0       	ldi	r22, 0x00	; 0
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	84 e3       	ldi	r24, 0x34	; 52
     38c:	93 e4       	ldi	r25, 0x43	; 67
     38e:	a6 01       	movw	r20, r12
     390:	95 01       	movw	r18, r10
     392:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__subsf3>
     396:	28 e9       	ldi	r18, 0x98	; 152
     398:	39 ef       	ldi	r19, 0xF9	; 249
     39a:	4e e8       	ldi	r20, 0x8E	; 142
     39c:	5c e3       	ldi	r21, 0x3C	; 60
     39e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
	radianB = (90-(double)DesiredDirection) * 0.017453;

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
     3a2:	0e 94 1a 10 	call	0x2034	; 0x2034 <cos>
     3a6:	3b 01       	movw	r6, r22
     3a8:	4c 01       	movw	r8, r24
	if(f_agl <= 180) DesiredDirection = 180 - f_agl;
	else if(f_agl > 180) DesiredDirection = 540 - f_agl;
	
	// 라디안 변환
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
	radianB = (90-(double)DesiredDirection) * 0.017453;
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	84 eb       	ldi	r24, 0xB4	; 180
     3b0:	92 e4       	ldi	r25, 0x42	; 66
     3b2:	a6 01       	movw	r20, r12
     3b4:	95 01       	movw	r18, r10
     3b6:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__subsf3>
     3ba:	28 e9       	ldi	r18, 0x98	; 152
     3bc:	39 ef       	ldi	r19, 0xF9	; 249
     3be:	4e e8       	ldi	r20, 0x8E	; 142
     3c0:	5c e3       	ldi	r21, 0x3C	; 60
     3c2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
	Fy = f_speed * cos(radianB);
     3c6:	0e 94 1a 10 	call	0x2034	; 0x2034 <cos>
     3ca:	5b 01       	movw	r10, r22
     3cc:	6c 01       	movw	r12, r24
	Fw=fw_speed;

	if(f_agl<0 || f_agl>=360){
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	08 36       	cpi	r16, 0x68	; 104
     3d2:	18 07       	cpc	r17, r24
     3d4:	28 f5       	brcc	.+74     	; 0x420 <HolonomicW+0xf8>
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
	radianB = (90-(double)DesiredDirection) * 0.017453;

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
     3d6:	b7 01       	movw	r22, r14
     3d8:	88 27       	eor	r24, r24
     3da:	77 fd       	sbrc	r23, 7
     3dc:	80 95       	com	r24
     3de:	98 2f       	mov	r25, r24
     3e0:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__floatsisf>
     3e4:	7b 01       	movw	r14, r22
     3e6:	8c 01       	movw	r16, r24
     3e8:	a4 01       	movw	r20, r8
     3ea:	93 01       	movw	r18, r6
     3ec:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     3f0:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixsfsi>
     3f4:	66 2e       	mov	r6, r22
     3f6:	77 2e       	mov	r7, r23
     3f8:	88 2e       	mov	r8, r24
     3fa:	99 2e       	mov	r9, r25
	Fy = f_speed * cos(radianB);
     3fc:	c8 01       	movw	r24, r16
     3fe:	b7 01       	movw	r22, r14
     400:	a6 01       	movw	r20, r12
     402:	95 01       	movw	r18, r10
     404:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     408:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixsfsi>
     40c:	e6 2e       	mov	r14, r22
     40e:	f7 2e       	mov	r15, r23
     410:	08 2f       	mov	r16, r24
     412:	19 2f       	mov	r17, r25
	Fw=fw_speed;
     414:	51 01       	movw	r10, r2
     416:	cc 24       	eor	r12, r12
     418:	b7 fc       	sbrc	r11, 7
     41a:	c0 94       	com	r12
     41c:	dc 2c       	mov	r13, r12
     41e:	11 c0       	rjmp	.+34     	; 0x442 <HolonomicW+0x11a>

	if(f_agl<0 || f_agl>=360){
		if(f_agl<0)Fw = -f_speed;
     420:	17 ff       	sbrs	r17, 7
     422:	04 c0       	rjmp	.+8      	; 0x42c <HolonomicW+0x104>
     424:	f0 94       	com	r15
     426:	e1 94       	neg	r14
     428:	f1 08       	sbc	r15, r1
     42a:	f3 94       	inc	r15
		else if(f_agl>=360)Fw = f_speed;
     42c:	57 01       	movw	r10, r14
     42e:	cc 24       	eor	r12, r12
     430:	b7 fc       	sbrc	r11, 7
     432:	c0 94       	com	r12
     434:	dc 2c       	mov	r13, r12
		Fx=0;
		Fy=0;
     436:	ee 24       	eor	r14, r14
     438:	ff 24       	eor	r15, r15
     43a:	87 01       	movw	r16, r14
	Fw=fw_speed;

	if(f_agl<0 || f_agl>=360){
		if(f_agl<0)Fw = -f_speed;
		else if(f_agl>=360)Fw = f_speed;
		Fx=0;
     43c:	66 24       	eor	r6, r6
     43e:	77 24       	eor	r7, r7
     440:	43 01       	movw	r8, r6
		Fy=0;
	}
		
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
     442:	c4 01       	movw	r24, r8
     444:	b3 01       	movw	r22, r6
     446:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__floatsisf>
     44a:	6d 87       	std	Y+13, r22	; 0x0d
     44c:	7e 87       	std	Y+14, r23	; 0x0e
     44e:	8f 87       	std	Y+15, r24	; 0x0f
     450:	98 8b       	std	Y+16, r25	; 0x10
     452:	c8 01       	movw	r24, r16
     454:	b7 01       	movw	r22, r14
     456:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__floatsisf>
     45a:	1b 01       	movw	r2, r22
     45c:	2c 01       	movw	r4, r24
     45e:	22 e0       	ldi	r18, 0x02	; 2
     460:	3b e2       	ldi	r19, 0x2B	; 43
     462:	47 e0       	ldi	r20, 0x07	; 7
     464:	5d e3       	ldi	r21, 0x3D	; 61
     466:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     46a:	16 2f       	mov	r17, r22
     46c:	f7 2e       	mov	r15, r23
     46e:	98 2e       	mov	r9, r24
     470:	89 2e       	mov	r8, r25
     472:	c6 01       	movw	r24, r12
     474:	b5 01       	movw	r22, r10
     476:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__floatsisf>
     47a:	2e e4       	ldi	r18, 0x4E	; 78
     47c:	32 e6       	ldi	r19, 0x62	; 98
     47e:	40 e1       	ldi	r20, 0x10	; 16
     480:	5e e3       	ldi	r21, 0x3E	; 62
     482:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     486:	a6 2e       	mov	r10, r22
     488:	e7 2e       	mov	r14, r23
     48a:	08 2f       	mov	r16, r24
     48c:	69 2e       	mov	r6, r25
     48e:	6d 85       	ldd	r22, Y+13	; 0x0d
     490:	7e 85       	ldd	r23, Y+14	; 0x0e
     492:	8f 85       	ldd	r24, Y+15	; 0x0f
     494:	98 89       	ldd	r25, Y+16	; 0x10
     496:	25 ed       	ldi	r18, 0xD5	; 213
     498:	38 e7       	ldi	r19, 0x78	; 120
     49a:	49 e6       	ldi	r20, 0x69	; 105
     49c:	5d e3       	ldi	r21, 0x3D	; 61
     49e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     4a2:	f4 01       	movw	r30, r8
     4a4:	21 2f       	mov	r18, r17
     4a6:	3f 2d       	mov	r19, r15
     4a8:	4f 2f       	mov	r20, r31
     4aa:	5e 2f       	mov	r21, r30
     4ac:	0e 94 83 0b 	call	0x1706	; 0x1706 <__addsf3>
     4b0:	2a 2d       	mov	r18, r10
     4b2:	3e 2d       	mov	r19, r14
     4b4:	40 2f       	mov	r20, r16
     4b6:	56 2d       	mov	r21, r6
     4b8:	0e 94 83 0b 	call	0x1706	; 0x1706 <__addsf3>
     4bc:	69 83       	std	Y+1, r22	; 0x01
     4be:	7a 83       	std	Y+2, r23	; 0x02
     4c0:	8b 83       	std	Y+3, r24	; 0x03
     4c2:	9c 83       	std	Y+4, r25	; 0x04
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
     4c4:	c2 01       	movw	r24, r4
     4c6:	b1 01       	movw	r22, r2
     4c8:	28 eb       	ldi	r18, 0xB8	; 184
     4ca:	3e e1       	ldi	r19, 0x1E	; 30
     4cc:	45 e8       	ldi	r20, 0x85	; 133
     4ce:	5d eb       	ldi	r21, 0xBD	; 189
     4d0:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     4d4:	2a 2d       	mov	r18, r10
     4d6:	3e 2d       	mov	r19, r14
     4d8:	40 2f       	mov	r20, r16
     4da:	56 2d       	mov	r21, r6
     4dc:	0e 94 83 0b 	call	0x1706	; 0x1706 <__addsf3>
     4e0:	6d 83       	std	Y+5, r22	; 0x05
     4e2:	7e 83       	std	Y+6, r23	; 0x06
     4e4:	8f 83       	std	Y+7, r24	; 0x07
     4e6:	98 87       	std	Y+8, r25	; 0x08
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
     4e8:	6d 85       	ldd	r22, Y+13	; 0x0d
     4ea:	7e 85       	ldd	r23, Y+14	; 0x0e
     4ec:	8f 85       	ldd	r24, Y+15	; 0x0f
     4ee:	98 89       	ldd	r25, Y+16	; 0x10
     4f0:	25 ed       	ldi	r18, 0xD5	; 213
     4f2:	38 e7       	ldi	r19, 0x78	; 120
     4f4:	49 e6       	ldi	r20, 0x69	; 105
     4f6:	5d eb       	ldi	r21, 0xBD	; 189
     4f8:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     4fc:	f4 01       	movw	r30, r8
     4fe:	21 2f       	mov	r18, r17
     500:	3f 2d       	mov	r19, r15
     502:	4f 2f       	mov	r20, r31
     504:	5e 2f       	mov	r21, r30
     506:	0e 94 83 0b 	call	0x1706	; 0x1706 <__addsf3>
     50a:	2a 2d       	mov	r18, r10
     50c:	3e 2d       	mov	r19, r14
     50e:	40 2f       	mov	r20, r16
     510:	56 2d       	mov	r21, r6
     512:	0e 94 83 0b 	call	0x1706	; 0x1706 <__addsf3>
     516:	69 87       	std	Y+9, r22	; 0x09
     518:	7a 87       	std	Y+10, r23	; 0x0a
     51a:	8b 87       	std	Y+11, r24	; 0x0b
     51c:	9c 87       	std	Y+12, r25	; 0x0c
     51e:	8e 01       	movw	r16, r28
     520:	0f 5f       	subi	r16, 0xFF	; 255
     522:	1f 4f       	sbci	r17, 0xFF	; 255
	
    for(i=0;i<3;++i){
     524:	ee 24       	eor	r14, r14
	}		
}



void HolonomicW(int f_agl, int f_speed, int fw_speed){
     526:	58 01       	movw	r10, r16
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
	
    for(i=0;i<3;++i){
		if(V[i]>=40)V[i]=40;
     528:	f8 01       	movw	r30, r16
     52a:	60 81       	ld	r22, Z
     52c:	71 81       	ldd	r23, Z+1	; 0x01
     52e:	82 81       	ldd	r24, Z+2	; 0x02
     530:	93 81       	ldd	r25, Z+3	; 0x03
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	40 e2       	ldi	r20, 0x20	; 32
     538:	52 e4       	ldi	r21, 0x42	; 66
     53a:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__gesf2>
     53e:	87 fd       	sbrc	r24, 7
     540:	09 c0       	rjmp	.+18     	; 0x554 <HolonomicW+0x22c>
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	a0 e2       	ldi	r26, 0x20	; 32
     548:	b2 e4       	ldi	r27, 0x42	; 66
     54a:	f8 01       	movw	r30, r16
     54c:	80 83       	st	Z, r24
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	a2 83       	std	Z+2, r26	; 0x02
     552:	b3 83       	std	Z+3, r27	; 0x03
		if(V[i]<=(-40))V[i]=-40;
     554:	f8 01       	movw	r30, r16
     556:	60 81       	ld	r22, Z
     558:	71 81       	ldd	r23, Z+1	; 0x01
     55a:	82 81       	ldd	r24, Z+2	; 0x02
     55c:	93 81       	ldd	r25, Z+3	; 0x03
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	40 e2       	ldi	r20, 0x20	; 32
     564:	52 ec       	ldi	r21, 0xC2	; 194
     566:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__lesf2>
     56a:	18 16       	cp	r1, r24
     56c:	4c f0       	brlt	.+18     	; 0x580 <HolonomicW+0x258>
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	a0 e2       	ldi	r26, 0x20	; 32
     574:	b2 ec       	ldi	r27, 0xC2	; 194
     576:	f8 01       	movw	r30, r16
     578:	80 83       	st	Z, r24
     57a:	91 83       	std	Z+1, r25	; 0x01
     57c:	a2 83       	std	Z+2, r26	; 0x02
     57e:	b3 83       	std	Z+3, r27	; 0x03
     580:	0c 5f       	subi	r16, 0xFC	; 252
     582:	1f 4f       	sbci	r17, 0xFF	; 255
		SetVelocity(i, V[i]*65536);
     584:	f5 01       	movw	r30, r10
     586:	60 81       	ld	r22, Z
     588:	71 81       	ldd	r23, Z+1	; 0x01
     58a:	82 81       	ldd	r24, Z+2	; 0x02
     58c:	93 81       	ldd	r25, Z+3	; 0x03
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	40 e8       	ldi	r20, 0x80	; 128
     594:	57 e4       	ldi	r21, 0x47	; 71
     596:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     59a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixsfsi>
     59e:	ab 01       	movw	r20, r22
     5a0:	bc 01       	movw	r22, r24
     5a2:	8e 2d       	mov	r24, r14
     5a4:	0e 94 b3 07 	call	0xf66	; 0xf66 <SetVelocity>
		
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
	
    for(i=0;i<3;++i){
     5a8:	e3 94       	inc	r14
     5aa:	fe 2d       	mov	r31, r14
     5ac:	f3 30       	cpi	r31, 0x03	; 3
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <HolonomicW+0x28a>
     5b0:	ba cf       	rjmp	.-140    	; 0x526 <HolonomicW+0x1fe>
		if(V[i]>=40)V[i]=40;
		if(V[i]<=(-40))V[i]=-40;
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
     5b2:	0e 94 dd 08 	call	0x11ba	; 0x11ba <StartMotion>
}
     5b6:	60 96       	adiw	r28, 0x10	; 16
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	cf 91       	pop	r28
     5c4:	df 91       	pop	r29
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	df 90       	pop	r13
     5d0:	cf 90       	pop	r12
     5d2:	bf 90       	pop	r11
     5d4:	af 90       	pop	r10
     5d6:	9f 90       	pop	r9
     5d8:	8f 90       	pop	r8
     5da:	7f 90       	pop	r7
     5dc:	6f 90       	pop	r6
     5de:	5f 90       	pop	r5
     5e0:	4f 90       	pop	r4
     5e2:	3f 90       	pop	r3
     5e4:	2f 90       	pop	r2
     5e6:	08 95       	ret

000005e8 <non_Holonomic>:

void non_Holonomic(long Fx, long Fy, long Fw){
     5e8:	2f 92       	push	r2
     5ea:	3f 92       	push	r3
     5ec:	4f 92       	push	r4
     5ee:	5f 92       	push	r5
     5f0:	6f 92       	push	r6
     5f2:	7f 92       	push	r7
     5f4:	8f 92       	push	r8
     5f6:	9f 92       	push	r9
     5f8:	af 92       	push	r10
     5fa:	bf 92       	push	r11
     5fc:	cf 92       	push	r12
     5fe:	df 92       	push	r13
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	df 93       	push	r29
     60a:	cf 93       	push	r28
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	2d 97       	sbiw	r28, 0x0d	; 13
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	de bf       	out	0x3e, r29	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	cd bf       	out	0x3d, r28	; 61
     61c:	3b 01       	movw	r6, r22
     61e:	4c 01       	movw	r8, r24
     620:	59 01       	movw	r10, r18
     622:	6a 01       	movw	r12, r20

	unsigned char i=0;
	double V[3]={0,0,0};
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	dc 01       	movw	r26, r24
     62a:	89 83       	std	Y+1, r24	; 0x01
     62c:	9a 83       	std	Y+2, r25	; 0x02
     62e:	ab 83       	std	Y+3, r26	; 0x03
     630:	bc 83       	std	Y+4, r27	; 0x04
     632:	8d 83       	std	Y+5, r24	; 0x05
     634:	9e 83       	std	Y+6, r25	; 0x06
     636:	af 83       	std	Y+7, r26	; 0x07
     638:	b8 87       	std	Y+8, r27	; 0x08
     63a:	89 87       	std	Y+9, r24	; 0x09
     63c:	9a 87       	std	Y+10, r25	; 0x0a
     63e:	ab 87       	std	Y+11, r26	; 0x0b
     640:	bc 87       	std	Y+12, r27	; 0x0c

	if(Fx==0 && Fy==0 && Fw==0)StopMotion(STOP_ABRUPTLY);
     642:	61 14       	cp	r6, r1
     644:	71 04       	cpc	r7, r1
     646:	81 04       	cpc	r8, r1
     648:	91 04       	cpc	r9, r1
     64a:	71 f4       	brne	.+28     	; 0x668 <non_Holonomic+0x80>
     64c:	21 15       	cp	r18, r1
     64e:	31 05       	cpc	r19, r1
     650:	41 05       	cpc	r20, r1
     652:	51 05       	cpc	r21, r1
     654:	49 f4       	brne	.+18     	; 0x668 <non_Holonomic+0x80>
     656:	e1 14       	cp	r14, r1
     658:	f1 04       	cpc	r15, r1
     65a:	01 05       	cpc	r16, r1
     65c:	11 05       	cpc	r17, r1
     65e:	21 f4       	brne	.+8      	; 0x668 <non_Holonomic+0x80>
     660:	89 e0       	ldi	r24, 0x09	; 9
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <StopMotion>

	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
     668:	c4 01       	movw	r24, r8
     66a:	b3 01       	movw	r22, r6
     66c:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__floatsisf>
     670:	1b 01       	movw	r2, r22
     672:	2c 01       	movw	r4, r24
     674:	c6 01       	movw	r24, r12
     676:	b5 01       	movw	r22, r10
     678:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__floatsisf>
     67c:	3b 01       	movw	r6, r22
     67e:	4c 01       	movw	r8, r24
     680:	22 e0       	ldi	r18, 0x02	; 2
     682:	3b e2       	ldi	r19, 0x2B	; 43
     684:	47 e0       	ldi	r20, 0x07	; 7
     686:	5d e3       	ldi	r21, 0x3D	; 61
     688:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     68c:	d6 2e       	mov	r13, r22
     68e:	c7 2e       	mov	r12, r23
     690:	b8 2e       	mov	r11, r24
     692:	9d 87       	std	Y+13, r25	; 0x0d
     694:	c8 01       	movw	r24, r16
     696:	b7 01       	movw	r22, r14
     698:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__floatsisf>
     69c:	29 e2       	ldi	r18, 0x29	; 41
     69e:	3c e5       	ldi	r19, 0x5C	; 92
     6a0:	4f e0       	ldi	r20, 0x0F	; 15
     6a2:	5e e3       	ldi	r21, 0x3E	; 62
     6a4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     6a8:	a6 2e       	mov	r10, r22
     6aa:	e7 2e       	mov	r14, r23
     6ac:	8c 01       	movw	r16, r24
     6ae:	c2 01       	movw	r24, r4
     6b0:	b1 01       	movw	r22, r2
     6b2:	22 e4       	ldi	r18, 0x42	; 66
     6b4:	30 e6       	ldi	r19, 0x60	; 96
     6b6:	45 e6       	ldi	r20, 0x65	; 101
     6b8:	5d e3       	ldi	r21, 0x3D	; 61
     6ba:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     6be:	d6 01       	movw	r26, r12
     6c0:	ed 85       	ldd	r30, Y+13	; 0x0d
     6c2:	2b 2f       	mov	r18, r27
     6c4:	3a 2f       	mov	r19, r26
     6c6:	4b 2d       	mov	r20, r11
     6c8:	5e 2f       	mov	r21, r30
     6ca:	0e 94 83 0b 	call	0x1706	; 0x1706 <__addsf3>
     6ce:	2a 2d       	mov	r18, r10
     6d0:	3e 2d       	mov	r19, r14
     6d2:	40 2f       	mov	r20, r16
     6d4:	51 2f       	mov	r21, r17
     6d6:	0e 94 83 0b 	call	0x1706	; 0x1706 <__addsf3>
     6da:	69 83       	std	Y+1, r22	; 0x01
     6dc:	7a 83       	std	Y+2, r23	; 0x02
     6de:	8b 83       	std	Y+3, r24	; 0x03
     6e0:	9c 83       	std	Y+4, r25	; 0x04
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
     6e2:	c4 01       	movw	r24, r8
     6e4:	b3 01       	movw	r22, r6
     6e6:	28 eb       	ldi	r18, 0xB8	; 184
     6e8:	3e e1       	ldi	r19, 0x1E	; 30
     6ea:	45 e8       	ldi	r20, 0x85	; 133
     6ec:	5d eb       	ldi	r21, 0xBD	; 189
     6ee:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     6f2:	2a 2d       	mov	r18, r10
     6f4:	3e 2d       	mov	r19, r14
     6f6:	40 2f       	mov	r20, r16
     6f8:	51 2f       	mov	r21, r17
     6fa:	0e 94 83 0b 	call	0x1706	; 0x1706 <__addsf3>
     6fe:	6d 83       	std	Y+5, r22	; 0x05
     700:	7e 83       	std	Y+6, r23	; 0x06
     702:	8f 83       	std	Y+7, r24	; 0x07
     704:	98 87       	std	Y+8, r25	; 0x08
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
     706:	c2 01       	movw	r24, r4
     708:	b1 01       	movw	r22, r2
     70a:	22 e4       	ldi	r18, 0x42	; 66
     70c:	30 e6       	ldi	r19, 0x60	; 96
     70e:	45 e6       	ldi	r20, 0x65	; 101
     710:	5d eb       	ldi	r21, 0xBD	; 189
     712:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     716:	d6 01       	movw	r26, r12
     718:	ed 85       	ldd	r30, Y+13	; 0x0d
     71a:	2b 2f       	mov	r18, r27
     71c:	3a 2f       	mov	r19, r26
     71e:	4b 2d       	mov	r20, r11
     720:	5e 2f       	mov	r21, r30
     722:	0e 94 83 0b 	call	0x1706	; 0x1706 <__addsf3>
     726:	2a 2d       	mov	r18, r10
     728:	3e 2d       	mov	r19, r14
     72a:	40 2f       	mov	r20, r16
     72c:	51 2f       	mov	r21, r17
     72e:	0e 94 83 0b 	call	0x1706	; 0x1706 <__addsf3>
     732:	69 87       	std	Y+9, r22	; 0x09
     734:	7a 87       	std	Y+10, r23	; 0x0a
     736:	8b 87       	std	Y+11, r24	; 0x0b
     738:	9c 87       	std	Y+12, r25	; 0x0c
     73a:	8e 01       	movw	r16, r28
     73c:	0f 5f       	subi	r16, 0xFF	; 255
     73e:	1f 4f       	sbci	r17, 0xFF	; 255

	for(i=0;i<3;++i){
     740:	ee 24       	eor	r14, r14
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
}

void non_Holonomic(long Fx, long Fy, long Fw){
     742:	58 01       	movw	r10, r16
	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));

	for(i=0;i<3;++i){
		if(V[i]>=40)V[i]=40;
     744:	f8 01       	movw	r30, r16
     746:	60 81       	ld	r22, Z
     748:	71 81       	ldd	r23, Z+1	; 0x01
     74a:	82 81       	ldd	r24, Z+2	; 0x02
     74c:	93 81       	ldd	r25, Z+3	; 0x03
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	40 e2       	ldi	r20, 0x20	; 32
     754:	52 e4       	ldi	r21, 0x42	; 66
     756:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__gesf2>
     75a:	87 fd       	sbrc	r24, 7
     75c:	09 c0       	rjmp	.+18     	; 0x770 <non_Holonomic+0x188>
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	a0 e2       	ldi	r26, 0x20	; 32
     764:	b2 e4       	ldi	r27, 0x42	; 66
     766:	f8 01       	movw	r30, r16
     768:	80 83       	st	Z, r24
     76a:	91 83       	std	Z+1, r25	; 0x01
     76c:	a2 83       	std	Z+2, r26	; 0x02
     76e:	b3 83       	std	Z+3, r27	; 0x03
		if(V[i]<=(-40))V[i]=-40;
     770:	f8 01       	movw	r30, r16
     772:	60 81       	ld	r22, Z
     774:	71 81       	ldd	r23, Z+1	; 0x01
     776:	82 81       	ldd	r24, Z+2	; 0x02
     778:	93 81       	ldd	r25, Z+3	; 0x03
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	40 e2       	ldi	r20, 0x20	; 32
     780:	52 ec       	ldi	r21, 0xC2	; 194
     782:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__lesf2>
     786:	18 16       	cp	r1, r24
     788:	4c f0       	brlt	.+18     	; 0x79c <non_Holonomic+0x1b4>
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	a0 e2       	ldi	r26, 0x20	; 32
     790:	b2 ec       	ldi	r27, 0xC2	; 194
     792:	f8 01       	movw	r30, r16
     794:	80 83       	st	Z, r24
     796:	91 83       	std	Z+1, r25	; 0x01
     798:	a2 83       	std	Z+2, r26	; 0x02
     79a:	b3 83       	std	Z+3, r27	; 0x03
     79c:	0c 5f       	subi	r16, 0xFC	; 252
     79e:	1f 4f       	sbci	r17, 0xFF	; 255
		SetVelocity(i, V[i]*65536);
     7a0:	f5 01       	movw	r30, r10
     7a2:	60 81       	ld	r22, Z
     7a4:	71 81       	ldd	r23, Z+1	; 0x01
     7a6:	82 81       	ldd	r24, Z+2	; 0x02
     7a8:	93 81       	ldd	r25, Z+3	; 0x03
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	40 e8       	ldi	r20, 0x80	; 128
     7b0:	57 e4       	ldi	r21, 0x47	; 71
     7b2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     7b6:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixsfsi>
     7ba:	ab 01       	movw	r20, r22
     7bc:	bc 01       	movw	r22, r24
     7be:	8e 2d       	mov	r24, r14
     7c0:	0e 94 b3 07 	call	0xf66	; 0xf66 <SetVelocity>

	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));

	for(i=0;i<3;++i){
     7c4:	e3 94       	inc	r14
     7c6:	fe 2d       	mov	r31, r14
     7c8:	f3 30       	cpi	r31, 0x03	; 3
     7ca:	09 f0       	breq	.+2      	; 0x7ce <non_Holonomic+0x1e6>
     7cc:	ba cf       	rjmp	.-140    	; 0x742 <non_Holonomic+0x15a>
		if(V[i]>=40)V[i]=40;
		if(V[i]<=(-40))V[i]=-40;
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
     7ce:	0e 94 dd 08 	call	0x11ba	; 0x11ba <StartMotion>
}
     7d2:	2d 96       	adiw	r28, 0x0d	; 13
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	cd bf       	out	0x3d, r28	; 61
     7de:	cf 91       	pop	r28
     7e0:	df 91       	pop	r29
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	df 90       	pop	r13
     7ec:	cf 90       	pop	r12
     7ee:	bf 90       	pop	r11
     7f0:	af 90       	pop	r10
     7f2:	9f 90       	pop	r9
     7f4:	8f 90       	pop	r8
     7f6:	7f 90       	pop	r7
     7f8:	6f 90       	pop	r6
     7fa:	5f 90       	pop	r5
     7fc:	4f 90       	pop	r4
     7fe:	3f 90       	pop	r3
     800:	2f 90       	pop	r2
     802:	08 95       	ret

00000804 <wall_reverse>:
		}
	}
}

//벽을 빠꾸치면서 타는 함수
void wall_reverse(int mode, int end){
     804:	cf 92       	push	r12
     806:	df 92       	push	r13
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	6b 01       	movw	r12, r22
	if(mode==1){
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	91 05       	cpc	r25, r1
     81a:	39 f5       	brne	.+78     	; 0x86a <wall_reverse+0x66>
		while(1){
			display_char(0,0,psd_value[3]);
			if(((psd_value[4] > 150)&&(psd_value[5] > 150)) && end == 1) break;
//			if(psd_value[1] < 100 && end == 2) break;
			
			non_Holonomic(-200,0,150-psd_value[3]);
     81c:	c6 e9       	ldi	r28, 0x96	; 150
     81e:	d0 e0       	ldi	r29, 0x00	; 0

//벽을 빠꾸치면서 타는 함수
void wall_reverse(int mode, int end){
	if(mode==1){
		while(1){
			display_char(0,0,psd_value[3]);
     820:	40 91 43 02 	lds	r20, 0x0243
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 4f 01 	call	0x29e	; 0x29e <display_char>
			if(((psd_value[4] > 150)&&(psd_value[5] > 150)) && end == 1) break;
     82c:	80 91 44 02 	lds	r24, 0x0244
     830:	87 39       	cpi	r24, 0x97	; 151
     832:	40 f0       	brcs	.+16     	; 0x844 <wall_reverse+0x40>
     834:	80 91 45 02 	lds	r24, 0x0245
     838:	87 39       	cpi	r24, 0x97	; 151
     83a:	20 f0       	brcs	.+8      	; 0x844 <wall_reverse+0x40>
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	c8 16       	cp	r12, r24
     840:	d1 04       	cpc	r13, r1
     842:	b9 f1       	breq	.+110    	; 0x8b2 <wall_reverse+0xae>
//			if(psd_value[1] < 100 && end == 2) break;
			
			non_Holonomic(-200,0,150-psd_value[3]);
     844:	80 91 43 02 	lds	r24, 0x0243
     848:	7e 01       	movw	r14, r28
     84a:	e8 1a       	sub	r14, r24
     84c:	f1 08       	sbc	r15, r1
     84e:	00 27       	eor	r16, r16
     850:	f7 fc       	sbrc	r15, 7
     852:	00 95       	com	r16
     854:	10 2f       	mov	r17, r16
     856:	68 e3       	ldi	r22, 0x38	; 56
     858:	7f ef       	ldi	r23, 0xFF	; 255
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	9f ef       	ldi	r25, 0xFF	; 255
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	a9 01       	movw	r20, r18
     864:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <non_Holonomic>
//			HolonomicW(0,-200,psd_value[3]-225);
		}
     868:	db cf       	rjmp	.-74     	; 0x820 <wall_reverse+0x1c>
	} else {
		while(1){
			if(psd_value[0] < 90 && end == 1) break;
			if(psd_value[8] < 100 && end == 2) break;
			display_char(0,0,psd_value[8]);
			HolonomicW(0,200,140-psd_value[1]);
     86a:	cc e8       	ldi	r28, 0x8C	; 140
     86c:	d0 e0       	ldi	r29, 0x00	; 0
//			HolonomicW(0,-200,psd_value[3]-225);
		}
		non_Holonomic(0,0,0);
	} else {
		while(1){
			if(psd_value[0] < 90 && end == 1) break;
     86e:	80 91 40 02 	lds	r24, 0x0240
     872:	8a 35       	cpi	r24, 0x5A	; 90
     874:	20 f4       	brcc	.+8      	; 0x87e <wall_reverse+0x7a>
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	c8 16       	cp	r12, r24
     87a:	d1 04       	cpc	r13, r1
     87c:	d1 f0       	breq	.+52     	; 0x8b2 <wall_reverse+0xae>
			if(psd_value[8] < 100 && end == 2) break;
     87e:	80 91 48 02 	lds	r24, 0x0248
     882:	84 36       	cpi	r24, 0x64	; 100
     884:	20 f4       	brcc	.+8      	; 0x88e <wall_reverse+0x8a>
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	c8 16       	cp	r12, r24
     88a:	d1 04       	cpc	r13, r1
     88c:	91 f0       	breq	.+36     	; 0x8b2 <wall_reverse+0xae>
			display_char(0,0,psd_value[8]);
     88e:	40 91 48 02 	lds	r20, 0x0248
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	0e 94 4f 01 	call	0x29e	; 0x29e <display_char>
			HolonomicW(0,200,140-psd_value[1]);
     89a:	80 91 41 02 	lds	r24, 0x0241
     89e:	ae 01       	movw	r20, r28
     8a0:	48 1b       	sub	r20, r24
     8a2:	51 09       	sbc	r21, r1
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	68 ec       	ldi	r22, 0xC8	; 200
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	0e 94 94 01 	call	0x328	; 0x328 <HolonomicW>
		}
     8b0:	de cf       	rjmp	.-68     	; 0x86e <wall_reverse+0x6a>
		non_Holonomic(0,0,0);
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	cb 01       	movw	r24, r22
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	a9 01       	movw	r20, r18
     8be:	ee 24       	eor	r14, r14
     8c0:	ff 24       	eor	r15, r15
     8c2:	87 01       	movw	r16, r14
     8c4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <non_Holonomic>
	}
}
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	ff 90       	pop	r15
     8d2:	ef 90       	pop	r14
     8d4:	df 90       	pop	r13
     8d6:	cf 90       	pop	r12
     8d8:	08 95       	ret

000008da <Holonomic_BW>:
	_delay_ms(100);
	BZ_OFF();
}

//두개의 벽 사이를 지나가는 함수 
void Holonomic_BW(){
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
	int direction=0;
	while(1){
		display_char(0,0,psd_value[1]);
     8e2:	40 91 41 02 	lds	r20, 0x0241
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	0e 94 4f 01 	call	0x29e	; 0x29e <display_char>
		display_char(0,5,psd_value[8]);
     8ee:	40 91 48 02 	lds	r20, 0x0248
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	65 e0       	ldi	r22, 0x05	; 5
     8f6:	0e 94 4f 01 	call	0x29e	; 0x29e <display_char>
		non_Holonomic(200,direction,0);
     8fa:	68 ec       	ldi	r22, 0xC8	; 200
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	a9 01       	movw	r20, r18
     908:	08 c0       	rjmp	.+16     	; 0x91a <Holonomic_BW+0x40>
		while(psd_value[1]>100){
			non_Holonomic(200,150,0);
     90a:	68 ec       	ldi	r22, 0xC8	; 200
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	26 e9       	ldi	r18, 0x96	; 150
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	40 e0       	ldi	r20, 0x00	; 0
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	ee 24       	eor	r14, r14
     91c:	ff 24       	eor	r15, r15
     91e:	87 01       	movw	r16, r14
     920:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <non_Holonomic>
	int direction=0;
	while(1){
		display_char(0,0,psd_value[1]);
		display_char(0,5,psd_value[8]);
		non_Holonomic(200,direction,0);
		while(psd_value[1]>100){
     924:	80 91 41 02 	lds	r24, 0x0241
     928:	85 36       	cpi	r24, 0x65	; 101
     92a:	78 f7       	brcc	.-34     	; 0x90a <Holonomic_BW+0x30>
     92c:	0d c0       	rjmp	.+26     	; 0x948 <Holonomic_BW+0x6e>
			non_Holonomic(200,150,0);
		}
		while(psd_value[8]>80){
			non_Holonomic(200,-150,0);
     92e:	68 ec       	ldi	r22, 0xC8	; 200
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	2a e6       	ldi	r18, 0x6A	; 106
     938:	3f ef       	ldi	r19, 0xFF	; 255
     93a:	4f ef       	ldi	r20, 0xFF	; 255
     93c:	5f ef       	ldi	r21, 0xFF	; 255
     93e:	ee 24       	eor	r14, r14
     940:	ff 24       	eor	r15, r15
     942:	87 01       	movw	r16, r14
     944:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <non_Holonomic>
		display_char(0,5,psd_value[8]);
		non_Holonomic(200,direction,0);
		while(psd_value[1]>100){
			non_Holonomic(200,150,0);
		}
		while(psd_value[8]>80){
     948:	80 91 48 02 	lds	r24, 0x0248
     94c:	81 35       	cpi	r24, 0x51	; 81
     94e:	48 f2       	brcs	.-110    	; 0x8e2 <Holonomic_BW+0x8>
     950:	ee cf       	rjmp	.-36     	; 0x92e <Holonomic_BW+0x54>

00000952 <backwall_follow>:
	}
}

//뒷벽 타는 함수 
//먼저 뒷벽에 대해 위치를 보정하고 옆으로 움직임 
void backwall_follow(int speed){
     952:	af 92       	push	r10
     954:	bf 92       	push	r11
     956:	cf 92       	push	r12
     958:	df 92       	push	r13
     95a:	ef 92       	push	r14
     95c:	ff 92       	push	r15
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	5c 01       	movw	r10, r24
	while(1){
		display_char(3,5,psd_value[4]);
     964:	40 91 44 02 	lds	r20, 0x0244
     968:	83 e0       	ldi	r24, 0x03	; 3
     96a:	65 e0       	ldi	r22, 0x05	; 5
     96c:	0e 94 4f 01 	call	0x29e	; 0x29e <display_char>
		display_char(3,8,psd_value[5]);
     970:	40 91 45 02 	lds	r20, 0x0245
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	68 e0       	ldi	r22, 0x08	; 8
     978:	0e 94 4f 01 	call	0x29e	; 0x29e <display_char>
		if((psd_value[5]>216)&&(psd_value[5]<220)) break;
     97c:	80 91 45 02 	lds	r24, 0x0245
     980:	89 3d       	cpi	r24, 0xD9	; 217
     982:	20 f0       	brcs	.+8      	; 0x98c <backwall_follow+0x3a>
     984:	80 91 45 02 	lds	r24, 0x0245
     988:	8c 3d       	cpi	r24, 0xDC	; 220
     98a:	e8 f0       	brcs	.+58     	; 0x9c6 <backwall_follow+0x74>
		non_Holonomic(psd_value[5]-217,0,(psd_value[4])-(psd_value[5]+30));
     98c:	60 91 45 02 	lds	r22, 0x0245
     990:	20 91 44 02 	lds	r18, 0x0244
     994:	40 91 45 02 	lds	r20, 0x0245
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	69 5d       	subi	r22, 0xD9	; 217
     99c:	70 40       	sbci	r23, 0x00	; 0
     99e:	88 27       	eor	r24, r24
     9a0:	77 fd       	sbrc	r23, 7
     9a2:	80 95       	com	r24
     9a4:	98 2f       	mov	r25, r24
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	2e 51       	subi	r18, 0x1E	; 30
     9aa:	30 40       	sbci	r19, 0x00	; 0
     9ac:	24 1b       	sub	r18, r20
     9ae:	31 09       	sbc	r19, r1
     9b0:	79 01       	movw	r14, r18
     9b2:	00 27       	eor	r16, r16
     9b4:	f7 fc       	sbrc	r15, 7
     9b6:	00 95       	com	r16
     9b8:	10 2f       	mov	r17, r16
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	a9 01       	movw	r20, r18
     9c0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <non_Holonomic>
	}
     9c4:	cf cf       	rjmp	.-98     	; 0x964 <backwall_follow+0x12>
//		display_char(3,8,psd_value[5]);
//		non_Holonomic(0,speed,(psd_value[4])-(psd_value[5]+20));
//		_delay_ms(10);
//
//	}
	BZ_ON();
     9c6:	c3 9a       	sbi	0x18, 3	; 24
     9c8:	87 ea       	ldi	r24, 0xA7	; 167
     9ca:	91 e6       	ldi	r25, 0x61	; 97
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <backwall_follow+0x7a>
     9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <backwall_follow+0x80>
     9d2:	00 00       	nop
	_delay_ms(100);
	BZ_OFF();
     9d4:	c3 98       	cbi	0x18, 3	; 24
	non_Holonomic(0,0,0);
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	cb 01       	movw	r24, r22
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	a9 01       	movw	r20, r18
     9e2:	ee 24       	eor	r14, r14
     9e4:	ff 24       	eor	r15, r15
     9e6:	87 01       	movw	r16, r14
     9e8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <non_Holonomic>
	while(1){
		if(psd_value[7]>150) break;
		non_Holonomic(psd_value[5]-215,speed,(psd_value[4])-(psd_value[5]+30));
     9ec:	cc 24       	eor	r12, r12
     9ee:	b7 fc       	sbrc	r11, 7
     9f0:	c0 94       	com	r12
     9f2:	dc 2c       	mov	r13, r12
	BZ_ON();
	_delay_ms(100);
	BZ_OFF();
	non_Holonomic(0,0,0);
	while(1){
		if(psd_value[7]>150) break;
     9f4:	80 91 47 02 	lds	r24, 0x0247
     9f8:	87 39       	cpi	r24, 0x97	; 151
     9fa:	e0 f4       	brcc	.+56     	; 0xa34 <backwall_follow+0xe2>
		non_Holonomic(psd_value[5]-215,speed,(psd_value[4])-(psd_value[5]+30));
     9fc:	60 91 45 02 	lds	r22, 0x0245
     a00:	20 91 44 02 	lds	r18, 0x0244
     a04:	40 91 45 02 	lds	r20, 0x0245
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	67 5d       	subi	r22, 0xD7	; 215
     a0c:	70 40       	sbci	r23, 0x00	; 0
     a0e:	88 27       	eor	r24, r24
     a10:	77 fd       	sbrc	r23, 7
     a12:	80 95       	com	r24
     a14:	98 2f       	mov	r25, r24
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	2e 51       	subi	r18, 0x1E	; 30
     a1a:	30 40       	sbci	r19, 0x00	; 0
     a1c:	24 1b       	sub	r18, r20
     a1e:	31 09       	sbc	r19, r1
     a20:	79 01       	movw	r14, r18
     a22:	00 27       	eor	r16, r16
     a24:	f7 fc       	sbrc	r15, 7
     a26:	00 95       	com	r16
     a28:	10 2f       	mov	r17, r16
     a2a:	a6 01       	movw	r20, r12
     a2c:	95 01       	movw	r18, r10
     a2e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <non_Holonomic>
	}
     a32:	e0 cf       	rjmp	.-64     	; 0x9f4 <backwall_follow+0xa2>
	non_Holonomic(0,0,0);
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	cb 01       	movw	r24, r22
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	a9 01       	movw	r20, r18
     a40:	ee 24       	eor	r14, r14
     a42:	ff 24       	eor	r15, r15
     a44:	87 01       	movw	r16, r14
     a46:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <non_Holonomic>
	BZ_ON();
     a4a:	c3 9a       	sbi	0x18, 3	; 24
     a4c:	87 ea       	ldi	r24, 0xA7	; 167
     a4e:	91 e6       	ldi	r25, 0x61	; 97
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	f1 f7       	brne	.-4      	; 0xa50 <backwall_follow+0xfe>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <backwall_follow+0x104>
     a56:	00 00       	nop
	_delay_ms(100);
	BZ_OFF();
     a58:	c3 98       	cbi	0x18, 3	; 24
}
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	ef 90       	pop	r14
     a62:	df 90       	pop	r13
     a64:	cf 90       	pop	r12
     a66:	bf 90       	pop	r11
     a68:	af 90       	pop	r10
     a6a:	08 95       	ret

00000a6c <wall_follow>:
}

//벽타는 함수
// mode - 모드1:왼쪽벽 모드 / 2:오른쪽 벽 
// end  - 1:앞벽 감지시 멈춤 / 2:타던 벽 사라질 시 멈춤
void wall_follow(int mode, int end){
     a6c:	ef 92       	push	r14
     a6e:	ff 92       	push	r15
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	eb 01       	movw	r28, r22
	if(mode==1){
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	91 05       	cpc	r25, r1
     a7e:	01 f5       	brne	.+64     	; 0xac0 <wall_follow+0x54>
		while(1){
			if(psd_value[0] < 90 && end == 1) break;
     a80:	80 91 40 02 	lds	r24, 0x0240
     a84:	8a 35       	cpi	r24, 0x5A	; 90
     a86:	18 f4       	brcc	.+6      	; 0xa8e <wall_follow+0x22>
     a88:	c1 30       	cpi	r28, 0x01	; 1
     a8a:	d1 05       	cpc	r29, r1
     a8c:	d9 f1       	breq	.+118    	; 0xb04 <wall_follow+0x98>
			if(psd_value[1] < 100 && end == 2) break;
     a8e:	80 91 41 02 	lds	r24, 0x0241
     a92:	84 36       	cpi	r24, 0x64	; 100
     a94:	18 f4       	brcc	.+6      	; 0xa9c <wall_follow+0x30>
     a96:	c2 30       	cpi	r28, 0x02	; 2
     a98:	d1 05       	cpc	r29, r1
     a9a:	a1 f1       	breq	.+104    	; 0xb04 <wall_follow+0x98>
			display_char(0,0,psd_value[1]);
     a9c:	40 91 41 02 	lds	r20, 0x0241
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	0e 94 4f 01 	call	0x29e	; 0x29e <display_char>
			HolonomicW(0,200,psd_value[1]-135);
     aa8:	40 91 41 02 	lds	r20, 0x0241
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	47 58       	subi	r20, 0x87	; 135
     ab0:	50 40       	sbci	r21, 0x00	; 0
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	68 ec       	ldi	r22, 0xC8	; 200
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	0e 94 94 01 	call	0x328	; 0x328 <HolonomicW>
		}
     abe:	e0 cf       	rjmp	.-64     	; 0xa80 <wall_follow+0x14>
	} else {
		while(1){
			if(psd_value[0] < 90 && end == 1) break;
			if(psd_value[8] < 100 && end == 2) break;
			display_char(0,0,psd_value[8]);
			HolonomicW(0,200,135-psd_value[8]);
     ac0:	07 e8       	ldi	r16, 0x87	; 135
     ac2:	10 e0       	ldi	r17, 0x00	; 0
			HolonomicW(0,200,psd_value[1]-135);
		}
		non_Holonomic(0,0,0);
	} else {
		while(1){
			if(psd_value[0] < 90 && end == 1) break;
     ac4:	80 91 40 02 	lds	r24, 0x0240
     ac8:	8a 35       	cpi	r24, 0x5A	; 90
     aca:	18 f4       	brcc	.+6      	; 0xad2 <wall_follow+0x66>
     acc:	c1 30       	cpi	r28, 0x01	; 1
     ace:	d1 05       	cpc	r29, r1
     ad0:	c9 f0       	breq	.+50     	; 0xb04 <wall_follow+0x98>
			if(psd_value[8] < 100 && end == 2) break;
     ad2:	80 91 48 02 	lds	r24, 0x0248
     ad6:	84 36       	cpi	r24, 0x64	; 100
     ad8:	18 f4       	brcc	.+6      	; 0xae0 <wall_follow+0x74>
     ada:	c2 30       	cpi	r28, 0x02	; 2
     adc:	d1 05       	cpc	r29, r1
     ade:	91 f0       	breq	.+36     	; 0xb04 <wall_follow+0x98>
			display_char(0,0,psd_value[8]);
     ae0:	40 91 48 02 	lds	r20, 0x0248
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	0e 94 4f 01 	call	0x29e	; 0x29e <display_char>
			HolonomicW(0,200,135-psd_value[8]);
     aec:	80 91 48 02 	lds	r24, 0x0248
     af0:	a8 01       	movw	r20, r16
     af2:	48 1b       	sub	r20, r24
     af4:	51 09       	sbc	r21, r1
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	68 ec       	ldi	r22, 0xC8	; 200
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	0e 94 94 01 	call	0x328	; 0x328 <HolonomicW>
		}
     b02:	e0 cf       	rjmp	.-64     	; 0xac4 <wall_follow+0x58>
		non_Holonomic(0,0,0);
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	cb 01       	movw	r24, r22
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	a9 01       	movw	r20, r18
     b10:	ee 24       	eor	r14, r14
     b12:	ff 24       	eor	r15, r15
     b14:	87 01       	movw	r16, r14
     b16:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <non_Holonomic>
	}
}
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	08 95       	ret

00000b28 <left_fix>:
	}
	non_Holonomic(0,0,0);
}

//왼쪽, 뒤쪽 벽 맞춰서 위치 보정하는 함수 
void left_fix(int length){
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	ec 01       	movw	r28, r24
	while(1){
		display_char(1,0,psd_value[1]);
     b36:	40 91 41 02 	lds	r20, 0x0241
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	0e 94 4f 01 	call	0x29e	; 0x29e <display_char>
		display_char(2,0,psd_value[3]);
     b42:	40 91 43 02 	lds	r20, 0x0243
     b46:	82 e0       	ldi	r24, 0x02	; 2
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	0e 94 4f 01 	call	0x29e	; 0x29e <display_char>
		display_char(3,5,psd_value[4]);
     b4e:	40 91 44 02 	lds	r20, 0x0244
     b52:	83 e0       	ldi	r24, 0x03	; 3
     b54:	65 e0       	ldi	r22, 0x05	; 5
     b56:	0e 94 4f 01 	call	0x29e	; 0x29e <display_char>
		display_char(3,8,psd_value[5]);
     b5a:	40 91 45 02 	lds	r20, 0x0245
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	68 e0       	ldi	r22, 0x08	; 8
     b62:	0e 94 4f 01 	call	0x29e	; 0x29e <display_char>
		non_Holonomic(psd_value[4]-250,psd_value[1]-(length),(psd_value[1]+52)-psd_value[3]);
     b66:	60 91 44 02 	lds	r22, 0x0244
     b6a:	20 91 41 02 	lds	r18, 0x0241
     b6e:	e0 91 41 02 	lds	r30, 0x0241
     b72:	a0 91 43 02 	lds	r26, 0x0243
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	6a 5f       	subi	r22, 0xFA	; 250
     b7a:	70 40       	sbci	r23, 0x00	; 0
     b7c:	88 27       	eor	r24, r24
     b7e:	77 fd       	sbrc	r23, 7
     b80:	80 95       	com	r24
     b82:	98 2f       	mov	r25, r24
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	2c 1b       	sub	r18, r28
     b88:	3d 0b       	sbc	r19, r29
     b8a:	44 27       	eor	r20, r20
     b8c:	37 fd       	sbrc	r19, 7
     b8e:	40 95       	com	r20
     b90:	54 2f       	mov	r21, r20
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	f4 96       	adiw	r30, 0x34	; 52
     b96:	ea 1b       	sub	r30, r26
     b98:	f1 09       	sbc	r31, r1
     b9a:	7f 01       	movw	r14, r30
     b9c:	00 27       	eor	r16, r16
     b9e:	f7 fc       	sbrc	r15, 7
     ba0:	00 95       	com	r16
     ba2:	10 2f       	mov	r17, r16
     ba4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <non_Holonomic>
     ba8:	83 ec       	ldi	r24, 0xC3	; 195
     baa:	99 e0       	ldi	r25, 0x09	; 9
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	f1 f7       	brne	.-4      	; 0xbac <left_fix+0x84>
     bb0:	00 c0       	rjmp	.+0      	; 0xbb2 <left_fix+0x8a>
     bb2:	00 00       	nop
		_delay_ms(10);
		
		if((((psd_value[1]<137)&&(psd_value[1]>135))&&((psd_value[3]<188)&&(psd_value[3]>186)))&&((psd_value[4]<250)&&(psd_value[4]>247))&&((psd_value[5]>220)&&(psd_value[5]<223))){
     bb4:	80 91 41 02 	lds	r24, 0x0241
     bb8:	89 38       	cpi	r24, 0x89	; 137
     bba:	08 f0       	brcs	.+2      	; 0xbbe <left_fix+0x96>
     bbc:	bc cf       	rjmp	.-136    	; 0xb36 <left_fix+0xe>
     bbe:	80 91 41 02 	lds	r24, 0x0241
     bc2:	88 38       	cpi	r24, 0x88	; 136
     bc4:	08 f4       	brcc	.+2      	; 0xbc8 <left_fix+0xa0>
     bc6:	b7 cf       	rjmp	.-146    	; 0xb36 <left_fix+0xe>
     bc8:	80 91 43 02 	lds	r24, 0x0243
     bcc:	8c 3b       	cpi	r24, 0xBC	; 188
     bce:	08 f0       	brcs	.+2      	; 0xbd2 <left_fix+0xaa>
     bd0:	b2 cf       	rjmp	.-156    	; 0xb36 <left_fix+0xe>
     bd2:	80 91 43 02 	lds	r24, 0x0243
     bd6:	8b 3b       	cpi	r24, 0xBB	; 187
     bd8:	08 f4       	brcc	.+2      	; 0xbdc <left_fix+0xb4>
     bda:	ad cf       	rjmp	.-166    	; 0xb36 <left_fix+0xe>
     bdc:	80 91 44 02 	lds	r24, 0x0244
     be0:	8a 3f       	cpi	r24, 0xFA	; 250
     be2:	08 f0       	brcs	.+2      	; 0xbe6 <left_fix+0xbe>
     be4:	a8 cf       	rjmp	.-176    	; 0xb36 <left_fix+0xe>
     be6:	80 91 44 02 	lds	r24, 0x0244
     bea:	88 3f       	cpi	r24, 0xF8	; 248
     bec:	08 f4       	brcc	.+2      	; 0xbf0 <left_fix+0xc8>
     bee:	a3 cf       	rjmp	.-186    	; 0xb36 <left_fix+0xe>
     bf0:	80 91 45 02 	lds	r24, 0x0245
     bf4:	8d 3d       	cpi	r24, 0xDD	; 221
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <left_fix+0xd2>
     bf8:	9e cf       	rjmp	.-196    	; 0xb36 <left_fix+0xe>
     bfa:	80 91 45 02 	lds	r24, 0x0245
     bfe:	8f 3d       	cpi	r24, 0xDF	; 223
     c00:	08 f0       	brcs	.+2      	; 0xc04 <left_fix+0xdc>
     c02:	99 cf       	rjmp	.-206    	; 0xb36 <left_fix+0xe>
			BZ_ON();
     c04:	c3 9a       	sbi	0x18, 3	; 24
     c06:	87 ea       	ldi	r24, 0xA7	; 167
     c08:	91 e6       	ldi	r25, 0x61	; 97
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	f1 f7       	brne	.-4      	; 0xc0a <left_fix+0xe2>
     c0e:	00 c0       	rjmp	.+0      	; 0xc10 <left_fix+0xe8>
     c10:	00 00       	nop
			_delay_ms(100);
			BZ_OFF();
     c12:	c3 98       	cbi	0x18, 3	; 24
			BZ_ON();
     c14:	c3 9a       	sbi	0x18, 3	; 24
     c16:	87 ea       	ldi	r24, 0xA7	; 167
     c18:	91 e6       	ldi	r25, 0x61	; 97
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <left_fix+0xf2>
     c1e:	00 c0       	rjmp	.+0      	; 0xc20 <left_fix+0xf8>
     c20:	00 00       	nop
			_delay_ms(100);
			BZ_OFF();
     c22:	c3 98       	cbi	0x18, 3	; 24
			non_Holonomic(0,0,0);
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	cb 01       	movw	r24, r22
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	a9 01       	movw	r20, r18
     c30:	ee 24       	eor	r14, r14
     c32:	ff 24       	eor	r15, r15
     c34:	87 01       	movw	r16, r14
     c36:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <non_Holonomic>
			return;
		}

	}
}
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	ff 90       	pop	r15
     c44:	ef 90       	pop	r14
     c46:	08 95       	ret

00000c48 <main>:
}

int main(void)
{    

    Interface_init(); //인터페이스 초기화
     c48:	0e 94 ae 00 	call	0x15c	; 0x15c <Interface_init>

	LM629_HW_Reset();
     c4c:	0e 94 23 08 	call	0x1046	; 0x1046 <LM629_HW_Reset>
	MCU_init();	   // MCU 초기화
     c50:	0e 94 76 00 	call	0xec	; 0xec <MCU_init>
	Motor_init();  // Motor 드라이버 초기화
     c54:	0e 94 82 07 	call	0xf04	; 0xf04 <Motor_init>

	Sensor_init();
     c58:	0e 94 ba 09 	call	0x1374	; 0x1374 <Sensor_init>

	DDRB=0x0F;		//LED, BZ, SW
     c5c:	8f e0       	ldi	r24, 0x0F	; 15
     c5e:	87 bb       	out	0x17, r24	; 23
	TCCR1A=0x00;	// Clock value: 14.400 kHz
     c60:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x05;
     c62:	85 e0       	ldi	r24, 0x05	; 5
     c64:	8e bd       	out	0x2e, r24	; 46

	TCNT1H=0xFF;	//0.01초
     c66:	8f ef       	ldi	r24, 0xFF	; 255
     c68:	8d bd       	out	0x2d, r24	; 45
	TCNT1L=0x70;
     c6a:	80 e7       	ldi	r24, 0x70	; 112
     c6c:	8c bd       	out	0x2c, r24	; 44
	TIMSK=0x04;
     c6e:	84 e0       	ldi	r24, 0x04	; 4
     c70:	87 bf       	out	0x37, r24	; 55
//	lcd_display_str(0,0,"START");
	sei();
     c72:	78 94       	sei
	while(1){


		if(SW1)
     c74:	b4 99       	sbic	0x16, 4	; 22
     c76:	1f c0       	rjmp	.+62     	; 0xcb6 <main+0x6e>
//				display_char(2,0,psd_value[3]);
				//1번에 50 보정
				//5번에 25 보정 
//			}
			while(1){
				display_char(1,0,psd_value[1]);
     c78:	40 91 41 02 	lds	r20, 0x0241
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	0e 94 4f 01 	call	0x29e	; 0x29e <display_char>
				display_char(2,0,psd_value[3]);
     c84:	40 91 43 02 	lds	r20, 0x0243
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	0e 94 4f 01 	call	0x29e	; 0x29e <display_char>
				display_char(3,5,psd_value[4]);
     c90:	40 91 44 02 	lds	r20, 0x0244
     c94:	83 e0       	ldi	r24, 0x03	; 3
     c96:	65 e0       	ldi	r22, 0x05	; 5
     c98:	0e 94 4f 01 	call	0x29e	; 0x29e <display_char>
				display_char(3,8,psd_value[5]);
     c9c:	40 91 45 02 	lds	r20, 0x0245
     ca0:	83 e0       	ldi	r24, 0x03	; 3
     ca2:	68 e0       	ldi	r22, 0x08	; 8
     ca4:	0e 94 4f 01 	call	0x29e	; 0x29e <display_char>
     ca8:	83 ec       	ldi	r24, 0xC3	; 195
     caa:	99 e0       	ldi	r25, 0x09	; 9
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <main+0x64>
     cb0:	00 c0       	rjmp	.+0      	; 0xcb2 <main+0x6a>
     cb2:	00 00       	nop
     cb4:	e1 cf       	rjmp	.-62     	; 0xc78 <main+0x30>
//				non_Holonomic(0,psd_value[1]-135,(psd_value[1]+52)-psd_value[3]);	
				_delay_ms(10);	
			}
		}

		if(SW2)
     cb6:	b5 99       	sbic	0x16, 5	; 22
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <main+0x7a>
		{	
//			while(psd_value[0]<70){
//				HolonomicW(0,200,0);
//			}
//			non_Holonomic(0,0,0);
			left_fix(135);
     cba:	87 e8       	ldi	r24, 0x87	; 135
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 94 05 	call	0xb28	; 0xb28 <left_fix>

		}

		if(SW3)
     cc2:	b6 99       	sbic	0x16, 6	; 22
     cc4:	d7 cf       	rjmp	.-82     	; 0xc74 <main+0x2c>
			
//			backwall_follow(200);
			
//			Holonomic_BW();					
			
			wall_reverse(1,1);		
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	0e 94 02 04 	call	0x804	; 0x804 <wall_reverse>
     cd2:	d0 cf       	rjmp	.-96     	; 0xc74 <main+0x2c>

00000cd4 <Holonomic_psd>:


/////////////////////////////////////////////////만든 함수 ////////////////////////////////////////////////

//전진하다가 앞벽감지시 멈추는 함수 
void Holonomic_psd(int sensor,int length,int speed){
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	eb 01       	movw	r28, r22
     ce2:	8a 01       	movw	r16, r20
	while(psd_value[sensor]<length){
     ce4:	20 e4       	ldi	r18, 0x40	; 64
     ce6:	e2 2e       	mov	r14, r18
     ce8:	22 e0       	ldi	r18, 0x02	; 2
     cea:	f2 2e       	mov	r15, r18
     cec:	e8 0e       	add	r14, r24
     cee:	f9 1e       	adc	r15, r25
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <Holonomic_psd+0x2c>
		HolonomicW(0,speed,0);
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	b8 01       	movw	r22, r16
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	0e 94 94 01 	call	0x328	; 0x328 <HolonomicW>

/////////////////////////////////////////////////만든 함수 ////////////////////////////////////////////////

//전진하다가 앞벽감지시 멈추는 함수 
void Holonomic_psd(int sensor,int length,int speed){
	while(psd_value[sensor]<length){
     d00:	f7 01       	movw	r30, r14
     d02:	80 81       	ld	r24, Z
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	8c 17       	cp	r24, r28
     d08:	9d 07       	cpc	r25, r29
     d0a:	9c f3       	brlt	.-26     	; 0xcf2 <Holonomic_psd+0x1e>
		HolonomicW(0,speed,0);
	}
	non_Holonomic(0,0,0);
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	cb 01       	movw	r24, r22
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	a9 01       	movw	r20, r18
     d18:	ee 24       	eor	r14, r14
     d1a:	ff 24       	eor	r15, r15
     d1c:	87 01       	movw	r16, r14
     d1e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <non_Holonomic>
}
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	ff 90       	pop	r15
     d2c:	ef 90       	pop	r14
     d2e:	08 95       	ret

00000d30 <ReadData>:
unsigned char ReadData(unsigned char motor)
{
    unsigned char data;

    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	fc 01       	movw	r30, r24
     d34:	b0 96       	adiw	r30, 0x20	; 32
     d36:	fe 2f       	mov	r31, r30
     d38:	ee 27       	eor	r30, r30
     d3a:	20 81       	ld	r18, Z
     d3c:	20 93 3c 02 	sts	0x023C, r18
     d40:	20 fd       	sbrc	r18, 0
     d42:	fb cf       	rjmp	.-10     	; 0xd3a <ReadData+0xa>
    // 데이터 입력
    data = MOTOR_DATA(motor);
     d44:	88 96       	adiw	r24, 0x28	; 40
     d46:	b8 2f       	mov	r27, r24
     d48:	aa 27       	eor	r26, r26
     d4a:	8c 91       	ld	r24, X

	CHECK_BUSY(motor, status);
     d4c:	90 81       	ld	r25, Z
     d4e:	90 93 3c 02 	sts	0x023C, r25
     d52:	90 fd       	sbrc	r25, 0
     d54:	fb cf       	rjmp	.-10     	; 0xd4c <ReadData+0x1c>
    // 입력된 데이터 리턴
    return data;
}    
     d56:	08 95       	ret

00000d58 <WriteCommand>:
// Return    : 없음

void WriteCommand(unsigned char motor, unsigned char cmd)
{
    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	80 96       	adiw	r24, 0x20	; 32
     d5c:	f8 2f       	mov	r31, r24
     d5e:	ee 27       	eor	r30, r30
     d60:	80 81       	ld	r24, Z
     d62:	80 93 3c 02 	sts	0x023C, r24
     d66:	80 fd       	sbrc	r24, 0
     d68:	fb cf       	rjmp	.-10     	; 0xd60 <WriteCommand+0x8>
    // 커맨드 출력
    MOTOR_CMD(motor) = cmd;
     d6a:	60 83       	st	Z, r22

	CHECK_BUSY(motor, status);
     d6c:	80 81       	ld	r24, Z
     d6e:	80 93 3c 02 	sts	0x023C, r24
     d72:	80 fd       	sbrc	r24, 0
     d74:	fb cf       	rjmp	.-10     	; 0xd6c <WriteCommand+0x14>
}
     d76:	08 95       	ret

00000d78 <WriteDataTwoByte>:
//      data  - 쓸 데이터
// Return    : 없음
void WriteDataTwoByte(unsigned char motor, int data)
{
    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
     d78:	a8 2f       	mov	r26, r24
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	fd 01       	movw	r30, r26
     d7e:	b0 96       	adiw	r30, 0x20	; 32
     d80:	fe 2f       	mov	r31, r30
     d82:	ee 27       	eor	r30, r30
     d84:	80 81       	ld	r24, Z
     d86:	80 93 3c 02 	sts	0x023C, r24
     d8a:	80 fd       	sbrc	r24, 0
     d8c:	fb cf       	rjmp	.-10     	; 0xd84 <WriteDataTwoByte+0xc>
    // 2 바이트 데이터 출력
    MOTOR_DATA(motor) = (uint8_t)((data >> 8)&0xFF);
     d8e:	98 96       	adiw	r26, 0x28	; 40
     d90:	ba 2f       	mov	r27, r26
     d92:	aa 27       	eor	r26, r26
     d94:	87 2f       	mov	r24, r23
     d96:	99 27       	eor	r25, r25
     d98:	87 fd       	sbrc	r24, 7
     d9a:	9a 95       	dec	r25
     d9c:	8c 93       	st	X, r24
	CHECK_BUSY(motor, status);
     d9e:	80 81       	ld	r24, Z
     da0:	80 93 3c 02 	sts	0x023C, r24
     da4:	80 fd       	sbrc	r24, 0
     da6:	fb cf       	rjmp	.-10     	; 0xd9e <WriteDataTwoByte+0x26>
    MOTOR_DATA(motor) = (uint8_t)(data&0xFF);
     da8:	6c 93       	st	X, r22
	CHECK_BUSY(motor, status);
     daa:	80 81       	ld	r24, Z
     dac:	80 93 3c 02 	sts	0x023C, r24
     db0:	80 fd       	sbrc	r24, 0
     db2:	fb cf       	rjmp	.-10     	; 0xdaa <WriteDataTwoByte+0x32>
}
     db4:	08 95       	ret

00000db6 <WriteDataFourByte>:
// Parameter :
//      motor - 선택할 모터
//      data  - 쓸 데이터
// Return    : 없음
void WriteDataFourByte(unsigned char motor, long data)
{
     db6:	df 92       	push	r13
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	d8 2e       	mov	r13, r24
     dc2:	7a 01       	movw	r14, r20
     dc4:	8b 01       	movw	r16, r22
    // 4 바이트의 데이터를 둘로 나누어서 WriteDataTwoByte함수를 두번 호출
    WriteDataTwoByte(motor, (int16_t)(data >> 16));
     dc6:	9b 01       	movw	r18, r22
     dc8:	55 27       	eor	r21, r21
     dca:	37 fd       	sbrc	r19, 7
     dcc:	50 95       	com	r21
     dce:	45 2f       	mov	r20, r21
     dd0:	b9 01       	movw	r22, r18
     dd2:	0e 94 bc 06 	call	0xd78	; 0xd78 <WriteDataTwoByte>
    WriteDataTwoByte(motor, (int16_t)(data));
     dd6:	8d 2d       	mov	r24, r13
     dd8:	b7 01       	movw	r22, r14
     dda:	0e 94 bc 06 	call	0xd78	; 0xd78 <WriteDataTwoByte>
}
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	ff 90       	pop	r15
     de4:	ef 90       	pop	r14
     de6:	df 90       	pop	r13
     de8:	08 95       	ret

00000dea <Motor_Reset>:
// Function  : LM629를 리셋한다.
// Parameter :
//      motor - 선택할 모터
// Return    : 없음
void Motor_Reset(uint8_t motor)
{
     dea:	1f 93       	push	r17
     dec:	18 2f       	mov	r17, r24
    // RESET 커맨드 출력
    WriteCommand(motor, RESET);
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	0e 94 ac 06 	call	0xd58	; 0xd58 <WriteCommand>
     df4:	83 ef       	ldi	r24, 0xF3	; 243
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <Motor_Reset+0xe>
     dfc:	00 c0       	rjmp	.+0      	; 0xdfe <Motor_Reset+0x14>
     dfe:	00 00       	nop
    // 리셋이 완료될 때까지 최소 1.5ms이상 대기
    _delay_ms(2);
	// Morot1 인터럽트 마스크 리셋
    WriteCommand(motor, RSTI);
     e00:	81 2f       	mov	r24, r17
     e02:	6d e1       	ldi	r22, 0x1D	; 29
     e04:	0e 94 ac 06 	call	0xd58	; 0xd58 <WriteCommand>
    WriteDataTwoByte(motor, 0x0000);
     e08:	81 2f       	mov	r24, r17
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	0e 94 bc 06 	call	0xd78	; 0xd78 <WriteDataTwoByte>
}
     e12:	1f 91       	pop	r17
     e14:	08 95       	ret

00000e16 <SetGain>:
//      kp    - P값
//      ki    - I값
//      kd    - D값
// Return    : 없음
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
{
     e16:	af 92       	push	r10
     e18:	bf 92       	push	r11
     e1a:	cf 92       	push	r12
     e1c:	df 92       	push	r13
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	f8 2e       	mov	r15, r24
     e2c:	6b 01       	movw	r12, r22
     e2e:	ea 01       	movw	r28, r20
     e30:	89 01       	movw	r16, r18
//      motor - 선택할 모터
//      kp    - P값
//      ki    - I값
//      kd    - D값
// Return    : 없음
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
     e32:	aa 24       	eor	r10, r10
     e34:	a3 94       	inc	r10
     e36:	61 15       	cp	r22, r1
     e38:	71 05       	cpc	r23, r1
     e3a:	09 f4       	brne	.+2      	; 0xe3e <SetGain+0x28>
     e3c:	aa 24       	eor	r10, r10
     e3e:	bb 24       	eor	r11, r11
     e40:	b3 94       	inc	r11
     e42:	20 97       	sbiw	r28, 0x00	; 0
     e44:	09 f4       	brne	.+2      	; 0xe48 <SetGain+0x32>
     e46:	bb 24       	eor	r11, r11
     e48:	ee 24       	eor	r14, r14
     e4a:	e3 94       	inc	r14
     e4c:	01 15       	cp	r16, r1
     e4e:	11 05       	cpc	r17, r1
     e50:	09 f4       	brne	.+2      	; 0xe54 <SetGain+0x3e>
     e52:	ee 24       	eor	r14, r14
	if(ki)LD_ki=1;
	else LD_ki=0;
	if(kd)LD_kd=1;
	else LD_kd=0;
	// LFIL 커맨드 출력
    WriteCommand(motor, LFIL);
     e54:	8f 2d       	mov	r24, r15
     e56:	6e e1       	ldi	r22, 0x1E	; 30
     e58:	0e 94 ac 06 	call	0xd58	; 0xd58 <WriteCommand>
    // 컨트롤 워드 출력, sampling interval은 341us 고정
    WriteDataTwoByte(motor, (0x0000) | (LD_kp << 3) | (LD_ki << 2) | (LD_kd << 1)  );
     e5c:	6b 2d       	mov	r22, r11
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	66 0f       	add	r22, r22
     e62:	77 1f       	adc	r23, r23
     e64:	66 0f       	add	r22, r22
     e66:	77 1f       	adc	r23, r23
     e68:	8a 2d       	mov	r24, r10
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	43 e0       	ldi	r20, 0x03	; 3
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	4a 95       	dec	r20
     e74:	e1 f7       	brne	.-8      	; 0xe6e <SetGain+0x58>
     e76:	68 2b       	or	r22, r24
     e78:	79 2b       	or	r23, r25
     e7a:	8e 2d       	mov	r24, r14
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	68 2b       	or	r22, r24
     e84:	79 2b       	or	r23, r25
     e86:	8f 2d       	mov	r24, r15
     e88:	0e 94 bc 06 	call	0xd78	; 0xd78 <WriteDataTwoByte>
    ////////////////////////////
	// P값 출력
	if(kp)WriteDataTwoByte(motor, kp);
     e8c:	aa 20       	and	r10, r10
     e8e:	21 f0       	breq	.+8      	; 0xe98 <SetGain+0x82>
     e90:	8f 2d       	mov	r24, r15
     e92:	b6 01       	movw	r22, r12
     e94:	0e 94 bc 06 	call	0xd78	; 0xd78 <WriteDataTwoByte>
    // I값 출력
    if(ki)WriteDataTwoByte(motor, ki);
     e98:	bb 20       	and	r11, r11
     e9a:	21 f0       	breq	.+8      	; 0xea4 <SetGain+0x8e>
     e9c:	8f 2d       	mov	r24, r15
     e9e:	be 01       	movw	r22, r28
     ea0:	0e 94 bc 06 	call	0xd78	; 0xd78 <WriteDataTwoByte>
    // D값 출력
    if(kd)WriteDataTwoByte(motor, kd);
     ea4:	ee 20       	and	r14, r14
     ea6:	21 f0       	breq	.+8      	; 0xeb0 <SetGain+0x9a>
     ea8:	8f 2d       	mov	r24, r15
     eaa:	b8 01       	movw	r22, r16
     eac:	0e 94 bc 06 	call	0xd78	; 0xd78 <WriteDataTwoByte>
    // 필터 업데이트
    WriteCommand(motor, UDF);
     eb0:	8f 2d       	mov	r24, r15
     eb2:	64 e0       	ldi	r22, 0x04	; 4
     eb4:	0e 94 ac 06 	call	0xd58	; 0xd58 <WriteCommand>
}
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	ff 90       	pop	r15
     ec2:	ef 90       	pop	r14
     ec4:	df 90       	pop	r13
     ec6:	cf 90       	pop	r12
     ec8:	bf 90       	pop	r11
     eca:	af 90       	pop	r10
     ecc:	08 95       	ret

00000ece <SetAcceleration>:
// Parameter :
//      motor - 선택할 모터
//      acc   - 가속도값
// Return    : 없음
void SetAcceleration(uint8_t motor, int32_t acc)
{
     ece:	df 92       	push	r13
     ed0:	ef 92       	push	r14
     ed2:	ff 92       	push	r15
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	d8 2e       	mov	r13, r24
     eda:	7a 01       	movw	r14, r20
     edc:	8b 01       	movw	r16, r22
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);
     ede:	6f e1       	ldi	r22, 0x1F	; 31
     ee0:	0e 94 ac 06 	call	0xd58	; 0xd58 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(motor, (1 << ACC_LOAD));
     ee4:	8d 2d       	mov	r24, r13
     ee6:	60 e2       	ldi	r22, 0x20	; 32
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	0e 94 bc 06 	call	0xd78	; 0xd78 <WriteDataTwoByte>
    // 가속도값 출력
    WriteDataFourByte(motor, acc);
     eee:	8d 2d       	mov	r24, r13
     ef0:	b8 01       	movw	r22, r16
     ef2:	a7 01       	movw	r20, r14
     ef4:	0e 94 db 06 	call	0xdb6	; 0xdb6 <WriteDataFourByte>
}
     ef8:	1f 91       	pop	r17
     efa:	0f 91       	pop	r16
     efc:	ff 90       	pop	r15
     efe:	ef 90       	pop	r14
     f00:	df 90       	pop	r13
     f02:	08 95       	ret

00000f04 <Motor_init>:
// Parameter : 없음
// Return    : 없음
void Motor_init(void)
{	
    // Motor1 게인 설정
    SetGain(MOTOR0, 7, 3, 1);
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	67 e0       	ldi	r22, 0x07	; 7
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	43 e0       	ldi	r20, 0x03	; 3
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	21 e0       	ldi	r18, 0x01	; 1
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	0e 94 0b 07 	call	0xe16	; 0xe16 <SetGain>
    // Motor2 게인 설정
    SetGain(MOTOR1, 7, 3, 1);
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	67 e0       	ldi	r22, 0x07	; 7
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	43 e0       	ldi	r20, 0x03	; 3
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	21 e0       	ldi	r18, 0x01	; 1
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	0e 94 0b 07 	call	0xe16	; 0xe16 <SetGain>
    // Motor3 게인 설정
    SetGain(MOTOR2, 7, 3, 1);
     f28:	82 e0       	ldi	r24, 0x02	; 2
     f2a:	67 e0       	ldi	r22, 0x07	; 7
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	43 e0       	ldi	r20, 0x03	; 3
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	21 e0       	ldi	r18, 0x01	; 1
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	0e 94 0b 07 	call	0xe16	; 0xe16 <SetGain>

    SetAcceleration(MOTOR0, 0x3FFFFFFF);
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	4f ef       	ldi	r20, 0xFF	; 255
     f3e:	5f ef       	ldi	r21, 0xFF	; 255
     f40:	6f ef       	ldi	r22, 0xFF	; 255
     f42:	7f e3       	ldi	r23, 0x3F	; 63
     f44:	0e 94 67 07 	call	0xece	; 0xece <SetAcceleration>
    SetAcceleration(MOTOR1, 0x3FFFFFFF);
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	4f ef       	ldi	r20, 0xFF	; 255
     f4c:	5f ef       	ldi	r21, 0xFF	; 255
     f4e:	6f ef       	ldi	r22, 0xFF	; 255
     f50:	7f e3       	ldi	r23, 0x3F	; 63
     f52:	0e 94 67 07 	call	0xece	; 0xece <SetAcceleration>
    SetAcceleration(MOTOR2, 0x3FFFFFFF);
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	4f ef       	ldi	r20, 0xFF	; 255
     f5a:	5f ef       	ldi	r21, 0xFF	; 255
     f5c:	6f ef       	ldi	r22, 0xFF	; 255
     f5e:	7f e3       	ldi	r23, 0x3F	; 63
     f60:	0e 94 67 07 	call	0xece	; 0xece <SetAcceleration>
}
     f64:	08 95       	ret

00000f66 <SetVelocity>:
// Parameter :
//      motor    - 선택할 모터
//      velocity - 속도 설정  (0 ~ 1,073,741,823) 음수 입력시 역방향으로 회전
// Return    : 없음
void SetVelocity(uint8_t motor, int32_t velocity)
{
     f66:	df 92       	push	r13
     f68:	ef 92       	push	r14
     f6a:	ff 92       	push	r15
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	0f 92       	push	r0
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	d8 2e       	mov	r13, r24
     f7c:	7a 01       	movw	r14, r20
     f7e:	8b 01       	movw	r16, r22
	unsigned char dir=1;

	if(velocity<0){
     f80:	77 ff       	sbrs	r23, 7
     f82:	0a c0       	rjmp	.+20     	; 0xf98 <SetVelocity+0x32>
		velocity*=(-1);
     f84:	10 95       	com	r17
     f86:	00 95       	com	r16
     f88:	f0 94       	com	r15
     f8a:	e0 94       	com	r14
     f8c:	e1 1c       	adc	r14, r1
     f8e:	f1 1c       	adc	r15, r1
     f90:	01 1d       	adc	r16, r1
     f92:	11 1d       	adc	r17, r1
		dir=0;
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <SetVelocity+0x34>
//      motor    - 선택할 모터
//      velocity - 속도 설정  (0 ~ 1,073,741,823) 음수 입력시 역방향으로 회전
// Return    : 없음
void SetVelocity(uint8_t motor, int32_t velocity)
{
	unsigned char dir=1;
     f98:	91 e0       	ldi	r25, 0x01	; 1
	if(velocity<0){
		velocity*=(-1);
		dir=0;
	}
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);        
     f9a:	8d 2d       	mov	r24, r13
     f9c:	6f e1       	ldi	r22, 0x1F	; 31
     f9e:	99 83       	std	Y+1, r25	; 0x01
     fa0:	0e 94 ac 06 	call	0xd58	; 0xd58 <WriteCommand>
    // 컨트롤 워드 출력        
    WriteDataTwoByte(motor,  (dir << FORWARD_DIR) | (1 << VELOCITY_MODE) | (1 << VELOCITY_LOAD));
     fa4:	99 81       	ldd	r25, Y+1	; 0x01
     fa6:	79 2f       	mov	r23, r25
     fa8:	72 95       	swap	r23
     faa:	70 7f       	andi	r23, 0xF0	; 240
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	68 60       	ori	r22, 0x08	; 8
     fb0:	78 60       	ori	r23, 0x08	; 8
     fb2:	8d 2d       	mov	r24, r13
     fb4:	0e 94 bc 06 	call	0xd78	; 0xd78 <WriteDataTwoByte>
    // 속도값 출력
    WriteDataFourByte(motor, velocity);
     fb8:	8d 2d       	mov	r24, r13
     fba:	b8 01       	movw	r22, r16
     fbc:	a7 01       	movw	r20, r14
     fbe:	0e 94 db 06 	call	0xdb6	; 0xdb6 <WriteDataFourByte>
}
     fc2:	0f 90       	pop	r0
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	ff 90       	pop	r15
     fce:	ef 90       	pop	r14
     fd0:	df 90       	pop	r13
     fd2:	08 95       	ret

00000fd4 <SetPosition>:
//		acc   - 가속도 설정  (0 ~ 1,073,741,823)
//   velocity - 속도 설정    (0 ~ 1,073,741,823)
//   position - 모터위치설정 (-1,073,741,824 ~ 1,073,741,823)counts
// Return    : 없음
void SetPosition(uint8_t motor, uint8_t mode, int32_t acc,int32_t velocity,int32_t position)
{
     fd4:	4f 92       	push	r4
     fd6:	5f 92       	push	r5
     fd8:	6f 92       	push	r6
     fda:	7f 92       	push	r7
     fdc:	8f 92       	push	r8
     fde:	9f 92       	push	r9
     fe0:	af 92       	push	r10
     fe2:	bf 92       	push	r11
     fe4:	cf 92       	push	r12
     fe6:	df 92       	push	r13
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	98 2e       	mov	r9, r24
     ff2:	86 2e       	mov	r8, r22
     ff4:	29 01       	movw	r4, r18
     ff6:	3a 01       	movw	r6, r20
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);
     ff8:	6f e1       	ldi	r22, 0x1F	; 31
     ffa:	0e 94 ac 06 	call	0xd58	; 0xd58 <WriteCommand>
    // 컨트롤 워드 출력
    // mode : 0 - Absolute Position, 1 - Relative Position
    // Position Mode로 설정
    
	WriteDataTwoByte(motor, (1 << ACC_LOAD) | (1 << VELOCITY_LOAD) | (1 << POSITION_LOAD) | (mode << POSITION_RELATIVE) );//WriteDataTwoByte(motor, 0x2A|mode);
     ffe:	68 2d       	mov	r22, r8
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	6a 62       	ori	r22, 0x2A	; 42
    1004:	89 2d       	mov	r24, r9
    1006:	0e 94 bc 06 	call	0xd78	; 0xd78 <WriteDataTwoByte>
    // 위치값 출력
	WriteDataFourByte(motor, acc);    
    100a:	89 2d       	mov	r24, r9
    100c:	b3 01       	movw	r22, r6
    100e:	a2 01       	movw	r20, r4
    1010:	0e 94 db 06 	call	0xdb6	; 0xdb6 <WriteDataFourByte>
	WriteDataFourByte(motor, velocity);
    1014:	89 2d       	mov	r24, r9
    1016:	b8 01       	movw	r22, r16
    1018:	a7 01       	movw	r20, r14
    101a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <WriteDataFourByte>
    WriteDataFourByte(motor, position);
    101e:	89 2d       	mov	r24, r9
    1020:	b6 01       	movw	r22, r12
    1022:	a5 01       	movw	r20, r10
    1024:	0e 94 db 06 	call	0xdb6	; 0xdb6 <WriteDataFourByte>
}
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	df 90       	pop	r13
    1032:	cf 90       	pop	r12
    1034:	bf 90       	pop	r11
    1036:	af 90       	pop	r10
    1038:	9f 90       	pop	r9
    103a:	8f 90       	pop	r8
    103c:	7f 90       	pop	r7
    103e:	6f 90       	pop	r6
    1040:	5f 90       	pop	r5
    1042:	4f 90       	pop	r4
    1044:	08 95       	ret

00001046 <LM629_HW_Reset>:

// Function  : LM629 H/W Reset. 최초 전원 인가시 반드시 실행해야한다.
// Parameter : 없음
// Return    : 없음
void LM629_HW_Reset(void){
    1046:	8f 92       	push	r8
    1048:	9f 92       	push	r9
    104a:	af 92       	push	r10
    104c:	bf 92       	push	r11
    104e:	cf 92       	push	r12
    1050:	df 92       	push	r13
    1052:	ef 92       	push	r14
    1054:	ff 92       	push	r15
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <LM629_HW_Reset+0x1a>
    1060:	0f 92       	push	r0
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
	unsigned char status[3]={0, }, i=0, step=0;
	
	DDRA=0x00;
    1066:	1a ba       	out	0x1a, r1	; 26

	PORTC=0x00;
    1068:	15 ba       	out	0x15, r1	; 21
	DDRC=0xFF;
    106a:	8f ef       	ldi	r24, 0xFF	; 255
    106c:	84 bb       	out	0x14, r24	; 20

	PORTG=0x00;
    106e:	10 92 65 00 	sts	0x0065, r1
	DDRG=0x03;
    1072:	83 e0       	ldi	r24, 0x03	; 3
    1074:	80 93 64 00 	sts	0x0064, r24
			}
		}
		
		if(step==1){
			// SRE : 외부 데이터 메모리 영역 활성화
			MCUCR = (1 << SRE) | (0 << SRW10);
    1078:	e0 e8       	ldi	r30, 0x80	; 128
    107a:	9e 2e       	mov	r9, r30
		    // SRL(0) : Upper Sector로만 사용 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
    107c:	72 e0       	ldi	r23, 0x02	; 2
    107e:	a7 2e       	mov	r10, r23
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
    1080:	64 e8       	ldi	r22, 0x84	; 132
    1082:	b6 2e       	mov	r11, r22
    1084:	6e 01       	movw	r12, r28
    1086:	08 94       	sec
    1088:	c1 1c       	adc	r12, r1
    108a:	d1 1c       	adc	r13, r1
	DDRG=0x03;

	while(1){
		if(step==0){
			while(1){
				PORTC |= 0x05; //Hw Rst Hi(decoder = Low)
    108c:	85 b3       	in	r24, 0x15	; 21
    108e:	85 60       	ori	r24, 0x05	; 5
    1090:	85 bb       	out	0x15, r24	; 21
    1092:	8d ee       	ldi	r24, 0xED	; 237
    1094:	92 e0       	ldi	r25, 0x02	; 2
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <LM629_HW_Reset+0x50>
    109a:	00 c0       	rjmp	.+0      	; 0x109c <LM629_HW_Reset+0x56>
    109c:	00 00       	nop
				_delay_ms(3);
				PORTC &= ~0x05; //Hw Rst Low(decoder = Hi)
    109e:	85 b3       	in	r24, 0x15	; 21
    10a0:	8a 7f       	andi	r24, 0xFA	; 250
    10a2:	85 bb       	out	0x15, r24	; 21
    10a4:	e3 ef       	ldi	r30, 0xF3	; 243
    10a6:	f1 e0       	ldi	r31, 0x01	; 1
    10a8:	31 97       	sbiw	r30, 0x01	; 1
    10aa:	f1 f7       	brne	.-4      	; 0x10a8 <LM629_HW_Reset+0x62>
    10ac:	00 c0       	rjmp	.+0      	; 0x10ae <LM629_HW_Reset+0x68>
    10ae:	00 00       	nop
				_delay_ms(2);

				PORTG &= ~0x02; //RD low
    10b0:	80 91 65 00 	lds	r24, 0x0065
    10b4:	8d 7f       	andi	r24, 0xFD	; 253
    10b6:	80 93 65 00 	sts	0x0065, r24
				PORTC &= ~0x08; //PS low
    10ba:	ab 98       	cbi	0x15, 3	; 21
		
				PORTC &=~0x07;	//cs motor0
    10bc:	85 b3       	in	r24, 0x15	; 21
    10be:	88 7f       	andi	r24, 0xF8	; 248
    10c0:	85 bb       	out	0x15, r24	; 21
				status[0]=PINA; //Read status motor0
    10c2:	29 b3       	in	r18, 0x19	; 25
    10c4:	29 83       	std	Y+1, r18	; 0x01
				
				PORTC |=0x01;	//cs motor1
    10c6:	a8 9a       	sbi	0x15, 0	; 21
				status[1]=PINA; //Read status motor0
    10c8:	99 b3       	in	r25, 0x19	; 25
    10ca:	9a 83       	std	Y+2, r25	; 0x02
				
				PORTC = (PORTC&0xF8)|0x02; 	//cs motor2
    10cc:	85 b3       	in	r24, 0x15	; 21
    10ce:	88 7f       	andi	r24, 0xF8	; 248
    10d0:	82 60       	ori	r24, 0x02	; 2
    10d2:	85 bb       	out	0x15, r24	; 21
				status[2]=PINA;  //Read status motor0
    10d4:	89 b3       	in	r24, 0x19	; 25
    10d6:	8b 83       	std	Y+3, r24	; 0x03

				if( (status[0]==0xC4||status[0]==0x84) && 
    10d8:	24 3c       	cpi	r18, 0xC4	; 196
    10da:	11 f0       	breq	.+4      	; 0x10e0 <LM629_HW_Reset+0x9a>
    10dc:	24 38       	cpi	r18, 0x84	; 132
    10de:	c1 f5       	brne	.+112    	; 0x1150 <__stack+0x51>
    10e0:	94 3c       	cpi	r25, 0xC4	; 196
    10e2:	11 f0       	breq	.+4      	; 0x10e8 <LM629_HW_Reset+0xa2>
					(status[1]==0xC4||status[1]==0x84) && 
    10e4:	94 38       	cpi	r25, 0x84	; 132
    10e6:	a1 f5       	brne	.+104    	; 0x1150 <__stack+0x51>
    10e8:	84 3c       	cpi	r24, 0xC4	; 196
    10ea:	11 f0       	breq	.+4      	; 0x10f0 <LM629_HW_Reset+0xaa>
					(status[2]==0xC4||status[2]==0x84) ){
    10ec:	84 38       	cpi	r24, 0x84	; 132
    10ee:	81 f5       	brne	.+96     	; 0x1150 <__stack+0x51>
			}
		}
		
		if(step==1){
			// SRE : 외부 데이터 메모리 영역 활성화
			MCUCR = (1 << SRE) | (0 << SRW10);
    10f0:	95 be       	out	0x35, r9	; 53
		    // SRL(0) : Upper Sector로만 사용 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
    10f2:	a0 92 6d 00 	sts	0x006D, r10
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
    10f6:	b0 92 6c 00 	sts	0x006C, r11
    10fa:	76 01       	movw	r14, r12
    10fc:	00 e0       	ldi	r16, 0x00	; 0
    10fe:	10 e2       	ldi	r17, 0x20	; 32
    1100:	8e 2c       	mov	r8, r14
    1102:	8c 18       	sub	r8, r12
			while(1){
				for(i=0;i<3;++i){
		        	WriteCommand(i, RSTI);
    1104:	88 2d       	mov	r24, r8
    1106:	6d e1       	ldi	r22, 0x1D	; 29
    1108:	0e 94 ac 06 	call	0xd58	; 0xd58 <WriteCommand>
					WriteDataTwoByte(i, 0x0000);
    110c:	88 2d       	mov	r24, r8
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	0e 94 bc 06 	call	0xd78	; 0xd78 <WriteDataTwoByte>
					READ_STATUS(i, status[i]);
    1116:	f8 01       	movw	r30, r16
    1118:	80 81       	ld	r24, Z
    111a:	f7 01       	movw	r30, r14
    111c:	81 93       	st	Z+, r24
    111e:	7f 01       	movw	r14, r30
    1120:	00 50       	subi	r16, 0x00	; 0
    1122:	1f 4f       	sbci	r17, 0xFF	; 255
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
			while(1){
				for(i=0;i<3;++i){
    1124:	f3 e2       	ldi	r31, 0x23	; 35
    1126:	00 30       	cpi	r16, 0x00	; 0
    1128:	1f 07       	cpc	r17, r31
    112a:	51 f7       	brne	.-44     	; 0x1100 <__stack+0x1>
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	80 3c       	cpi	r24, 0xC0	; 192
    1130:	11 f0       	breq	.+4      	; 0x1136 <__stack+0x37>
    1132:	80 38       	cpi	r24, 0x80	; 128
    1134:	51 f4       	brne	.+20     	; 0x114a <__stack+0x4b>
					(status[1]==0xC0||status[1]==0x80) && 
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
				for(i=0;i<3;++i){
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
    1138:	80 3c       	cpi	r24, 0xC0	; 192
    113a:	11 f0       	breq	.+4      	; 0x1140 <__stack+0x41>
					(status[1]==0xC0||status[1]==0x80) && 
    113c:	80 38       	cpi	r24, 0x80	; 128
    113e:	29 f4       	brne	.+10     	; 0x114a <__stack+0x4b>
					(status[2]==0xC0||status[2]==0x80) ){
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
					(status[1]==0xC0||status[1]==0x80) && 
    1142:	80 3c       	cpi	r24, 0xC0	; 192
    1144:	69 f0       	breq	.+26     	; 0x1160 <__stack+0x61>
					(status[2]==0xC0||status[2]==0x80) ){
    1146:	80 38       	cpi	r24, 0x80	; 128
    1148:	59 f0       	breq	.+22     	; 0x1160 <__stack+0x61>
					break;
				}
				else{	//다시 처음부터 LM629초기화
					step=0;	
					// SRE : 외부 데이터 메모리 영역 비활성화
					MCUCR &= ~(1 << SRE) & ~(1 << SRW10);
    114a:	85 b7       	in	r24, 0x35	; 53
    114c:	8f 73       	andi	r24, 0x3F	; 63
    114e:	85 bf       	out	0x35, r24	; 53
					PORTC=0x00;
    1150:	15 ba       	out	0x15, r1	; 21
					lcd_display_str(0,0,"Error. Restart");
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	51 e0       	ldi	r21, 0x01	; 1
    115a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_display_str>
    115e:	96 cf       	rjmp	.-212    	; 0x108c <LM629_HW_Reset+0x46>
					break;
				}
			}
		}
		if(step==2){
			lcd_display_str(0,0,"Initialize success.");
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	4f e0       	ldi	r20, 0x0F	; 15
    1166:	51 e0       	ldi	r21, 0x01	; 1
    1168:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_display_str>
    116c:	83 e0       	ldi	r24, 0x03	; 3
			for(i=0;i<3;++i){
				PORTB|=0x07;
    116e:	98 b3       	in	r25, 0x18	; 24
    1170:	97 60       	ori	r25, 0x07	; 7
    1172:	98 bb       	out	0x18, r25	; 24
    1174:	eb e7       	ldi	r30, 0x7B	; 123
    1176:	f2 e9       	ldi	r31, 0x92	; 146
    1178:	31 97       	sbiw	r30, 0x01	; 1
    117a:	f1 f7       	brne	.-4      	; 0x1178 <__stack+0x79>
    117c:	00 c0       	rjmp	.+0      	; 0x117e <__stack+0x7f>
    117e:	00 00       	nop
				_delay_ms(150);
				PORTB&=~0x07;
    1180:	98 b3       	in	r25, 0x18	; 24
    1182:	98 7f       	andi	r25, 0xF8	; 248
    1184:	98 bb       	out	0x18, r25	; 24
    1186:	eb e7       	ldi	r30, 0x7B	; 123
    1188:	f2 e9       	ldi	r31, 0x92	; 146
    118a:	31 97       	sbiw	r30, 0x01	; 1
    118c:	f1 f7       	brne	.-4      	; 0x118a <__stack+0x8b>
    118e:	00 c0       	rjmp	.+0      	; 0x1190 <__stack+0x91>
    1190:	00 00       	nop
    1192:	81 50       	subi	r24, 0x01	; 1
				}
			}
		}
		if(step==2){
			lcd_display_str(0,0,"Initialize success.");
			for(i=0;i<3;++i){
    1194:	61 f7       	brne	.-40     	; 0x116e <__stack+0x6f>
				PORTB|=0x07;
				_delay_ms(150);
				PORTB&=~0x07;
				_delay_ms(150);
			}
			lcd_clear_screen();
    1196:	0e 94 42 01 	call	0x284	; 0x284 <lcd_clear_screen>
			break;
		}
	}
}
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	df 90       	pop	r13
    11ae:	cf 90       	pop	r12
    11b0:	bf 90       	pop	r11
    11b2:	af 90       	pop	r10
    11b4:	9f 90       	pop	r9
    11b6:	8f 90       	pop	r8
    11b8:	08 95       	ret

000011ba <StartMotion>:
// Function  : 모든 모터의 모션을 시작한다.
// Parameter : 없음
// Return    : 없음
void StartMotion(void)
{
    WriteCommand(MOTOR0, STT);
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	61 e0       	ldi	r22, 0x01	; 1
    11be:	0e 94 ac 06 	call	0xd58	; 0xd58 <WriteCommand>
    WriteCommand(MOTOR1, STT);
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	61 e0       	ldi	r22, 0x01	; 1
    11c6:	0e 94 ac 06 	call	0xd58	; 0xd58 <WriteCommand>
    WriteCommand(MOTOR2, STT);
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	0e 94 ac 06 	call	0xd58	; 0xd58 <WriteCommand>
}
    11d2:	08 95       	ret

000011d4 <StopMotion>:

// Function  : 모든 모터의 모션을 정지한다.
// Parameter : 없음
// Return    : 없음
void StopMotion(uint16_t mode)
{
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	18 2f       	mov	r17, r24
    // Motor1 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR0, LTRJ);
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	6f e1       	ldi	r22, 0x1F	; 31
    11e0:	0e 94 ac 06 	call	0xd58	; 0xd58 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR0, (1 << mode));
    11e4:	c1 e0       	ldi	r28, 0x01	; 1
    11e6:	d0 e0       	ldi	r29, 0x00	; 0
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <StopMotion+0x1a>
    11ea:	cc 0f       	add	r28, r28
    11ec:	dd 1f       	adc	r29, r29
    11ee:	1a 95       	dec	r17
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <StopMotion+0x16>
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	be 01       	movw	r22, r28
    11f6:	0e 94 bc 06 	call	0xd78	; 0xd78 <WriteDataTwoByte>

    // Motor2 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR1, LTRJ);
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	6f e1       	ldi	r22, 0x1F	; 31
    11fe:	0e 94 ac 06 	call	0xd58	; 0xd58 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR1, (1 << mode));
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	be 01       	movw	r22, r28
    1206:	0e 94 bc 06 	call	0xd78	; 0xd78 <WriteDataTwoByte>

    // Motor3 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR2, LTRJ);
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	6f e1       	ldi	r22, 0x1F	; 31
    120e:	0e 94 ac 06 	call	0xd58	; 0xd58 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR2, (1 << mode));
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	be 01       	movw	r22, r28
    1216:	0e 94 bc 06 	call	0xd78	; 0xd78 <WriteDataTwoByte>

    // 모션 정지
    WriteCommand(MOTOR0, STT);
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	0e 94 ac 06 	call	0xd58	; 0xd58 <WriteCommand>
    WriteCommand(MOTOR1, STT);
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	61 e0       	ldi	r22, 0x01	; 1
    1226:	0e 94 ac 06 	call	0xd58	; 0xd58 <WriteCommand>
    WriteCommand(MOTOR2, STT);
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	61 e0       	ldi	r22, 0x01	; 1
    122e:	0e 94 ac 06 	call	0xd58	; 0xd58 <WriteCommand>
}
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	08 95       	ret

0000123a <MOTOR_CTR>:

void MOTOR_CTR(long MT0,long MT1,long MT2){
    123a:	af 92       	push	r10
    123c:	bf 92       	push	r11
    123e:	cf 92       	push	r12
    1240:	df 92       	push	r13
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	2c 97       	sbiw	r28, 0x0c	; 12
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	59 01       	movw	r10, r18
    1260:	6a 01       	movw	r12, r20
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};
    1262:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__floatsisf>
    1266:	69 83       	std	Y+1, r22	; 0x01
    1268:	7a 83       	std	Y+2, r23	; 0x02
    126a:	8b 83       	std	Y+3, r24	; 0x03
    126c:	9c 83       	std	Y+4, r25	; 0x04
    126e:	c6 01       	movw	r24, r12
    1270:	b5 01       	movw	r22, r10
    1272:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__floatsisf>
    1276:	6d 83       	std	Y+5, r22	; 0x05
    1278:	7e 83       	std	Y+6, r23	; 0x06
    127a:	8f 83       	std	Y+7, r24	; 0x07
    127c:	98 87       	std	Y+8, r25	; 0x08
    127e:	c8 01       	movw	r24, r16
    1280:	b7 01       	movw	r22, r14
    1282:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__floatsisf>
    1286:	69 87       	std	Y+9, r22	; 0x09
    1288:	7a 87       	std	Y+10, r23	; 0x0a
    128a:	8b 87       	std	Y+11, r24	; 0x0b
    128c:	9c 87       	std	Y+12, r25	; 0x0c
    128e:	8e 01       	movw	r16, r28
    1290:	0f 5f       	subi	r16, 0xFF	; 255
    1292:	1f 4f       	sbci	r17, 0xFF	; 255

	for(i=0;i<3;++i){
    1294:	ee 24       	eor	r14, r14
		
		V[i]=V[i]*0.2728;
    1296:	f8 01       	movw	r30, r16
    1298:	60 81       	ld	r22, Z
    129a:	71 81       	ldd	r23, Z+1	; 0x01
    129c:	82 81       	ldd	r24, Z+2	; 0x02
    129e:	93 81       	ldd	r25, Z+3	; 0x03
    12a0:	21 e7       	ldi	r18, 0x71	; 113
    12a2:	3c ea       	ldi	r19, 0xAC	; 172
    12a4:	4b e8       	ldi	r20, 0x8B	; 139
    12a6:	5e e3       	ldi	r21, 0x3E	; 62
    12a8:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
    12ac:	9b 01       	movw	r18, r22
    12ae:	ac 01       	movw	r20, r24
    12b0:	f8 01       	movw	r30, r16
    12b2:	21 93       	st	Z+, r18
    12b4:	31 93       	st	Z+, r19
    12b6:	41 93       	st	Z+, r20
    12b8:	51 93       	st	Z+, r21
    12ba:	8f 01       	movw	r16, r30

		SetVelocity(i, V[i]*65536);
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e8       	ldi	r20, 0x80	; 128
    12c2:	57 e4       	ldi	r21, 0x47	; 71
    12c4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
    12c8:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixsfsi>
    12cc:	ab 01       	movw	r20, r22
    12ce:	bc 01       	movw	r22, r24
    12d0:	8e 2d       	mov	r24, r14
    12d2:	0e 94 b3 07 	call	0xf66	; 0xf66 <SetVelocity>
void MOTOR_CTR(long MT0,long MT1,long MT2){
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};

	for(i=0;i<3;++i){
    12d6:	e3 94       	inc	r14
    12d8:	fe 2d       	mov	r31, r14
    12da:	f3 30       	cpi	r31, 0x03	; 3
    12dc:	e1 f6       	brne	.-72     	; 0x1296 <MOTOR_CTR+0x5c>
		
		V[i]=V[i]*0.2728;

		SetVelocity(i, V[i]*65536);
	}
	StartMotion();	
    12de:	0e 94 dd 08 	call	0x11ba	; 0x11ba <StartMotion>
}
    12e2:	2c 96       	adiw	r28, 0x0c	; 12
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	bf 90       	pop	r11
    1300:	af 90       	pop	r10
    1302:	08 95       	ret

00001304 <Camera_init>:


void Camera_init(void){
	unsigned char buff=0;
	while(1){	//우선순위 큰것부터
		putchar1(11);
    1304:	8b e0       	ldi	r24, 0x0B	; 11
    1306:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		while(!rx1_flg); 
    130a:	80 91 2c 02 	lds	r24, 0x022C
    130e:	88 23       	and	r24, r24
    1310:	e1 f3       	breq	.-8      	; 0x130a <Camera_init+0x6>
		buff=getchar1();
    1312:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
		if(buff){
    1316:	88 23       	and	r24, r24
    1318:	a9 f3       	breq	.-22     	; 0x1304 <Camera_init>
			buff=0;
			break;
		}
	}
	while(1){	//추적 할 최소 픽셀수  255픽셀
		putchar1(17);
    131a:	81 e1       	ldi	r24, 0x11	; 17
    131c:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		putchar1(255);
    1320:	8f ef       	ldi	r24, 0xFF	; 255
    1322:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		while(!rx1_flg);
    1326:	80 91 2c 02 	lds	r24, 0x022C
    132a:	88 23       	and	r24, r24
    132c:	e1 f3       	breq	.-8      	; 0x1326 <Camera_init+0x22>
		buff=getchar1();
    132e:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
		if(buff)break;
    1332:	88 23       	and	r24, r24
    1334:	91 f3       	breq	.-28     	; 0x131a <Camera_init+0x16>
	}
}
    1336:	08 95       	ret

00001338 <Camera_Cmd>:

unsigned char Camera_Cmd(unsigned char color, unsigned char cmd){
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	00 d0       	rcall	.+0      	; 0x133e <Camera_Cmd+0x6>
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
	
	volatile unsigned char buff=0, data=0;
    1342:	19 82       	std	Y+1, r1	; 0x01
    1344:	1a 82       	std	Y+2, r1	; 0x02
	
	data=cmd+(color*10);
    1346:	88 0f       	add	r24, r24
    1348:	98 2f       	mov	r25, r24
    134a:	99 0f       	add	r25, r25
    134c:	99 0f       	add	r25, r25
    134e:	98 0f       	add	r25, r24
    1350:	69 0f       	add	r22, r25
    1352:	6a 83       	std	Y+2, r22	; 0x02

	putchar1(data);
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
	while(!rx1_flg);
    135a:	80 91 2c 02 	lds	r24, 0x022C
    135e:	88 23       	and	r24, r24
    1360:	e1 f3       	breq	.-8      	; 0x135a <Camera_Cmd+0x22>
	buff=getchar1();
    1362:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
    1366:	89 83       	std	Y+1, r24	; 0x01
	
	return buff;
    1368:	89 81       	ldd	r24, Y+1	; 0x01
}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <Sensor_init>:
// Function  : IR, PSD 센서를 초기화
// Parameter : 없음
// Return    : 없음
void Sensor_init(void)
{
    DDRE  &= ~0x1C;
    1374:	82 b1       	in	r24, 0x02	; 2
    1376:	83 7e       	andi	r24, 0xE3	; 227
    1378:	82 b9       	out	0x02, r24	; 2
    DDRG  &= ~0x18;
    137a:	e4 e6       	ldi	r30, 0x64	; 100
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	87 7e       	andi	r24, 0xE7	; 231
    1382:	80 83       	st	Z, r24

    UCSR0A = 0x00;
    1384:	1b b8       	out	0x0b, r1	; 11
    UCSR0B = 0x98;
    1386:	88 e9       	ldi	r24, 0x98	; 152
    1388:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = 0x06;
    138a:	86 e0       	ldi	r24, 0x06	; 6
    138c:	80 93 95 00 	sts	0x0095, r24
    UBRR0H = 0x00;
    1390:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 0x0F;
    1394:	8f e0       	ldi	r24, 0x0F	; 15
    1396:	89 b9       	out	0x09, r24	; 9

    sei();
    1398:	78 94       	sei
}
    139a:	08 95       	ret

0000139c <__vector_18>:

// Function  : USART를 통해 전송되는 PSD 센서값을 전역변수에 저장하는 ISR
// Parameter : 없음
// Return    : 없음
ISR(USART0_RX_vect)
{
    139c:	1f 92       	push	r1
    139e:	0f 92       	push	r0
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	0f 92       	push	r0
    13a4:	0b b6       	in	r0, 0x3b	; 59
    13a6:	0f 92       	push	r0
    13a8:	11 24       	eor	r1, r1
    13aa:	2f 93       	push	r18
    13ac:	3f 93       	push	r19
    13ae:	8f 93       	push	r24
    13b0:	9f 93       	push	r25
    13b2:	ef 93       	push	r30
    13b4:	ff 93       	push	r31
    volatile static unsigned char rx_cnt = 0;
    volatile static unsigned char chksum = 0;
    volatile static unsigned char buf[11] = {0, };
    uint8_t rxbuf = 0, i;

    rxbuf = UDR0;
    13b6:	9c b1       	in	r25, 0x0c	; 12
    //수신완료 및 에러 검출되지 않을시
    while(!(UCSR0A & 0xB8));
    13b8:	8b b1       	in	r24, 0x0b	; 11
    13ba:	88 7b       	andi	r24, 0xB8	; 184
    13bc:	e9 f3       	breq	.-6      	; 0x13b8 <__vector_18+0x1c>

    if(rxbuf == 0xFF)
    13be:	9f 3f       	cpi	r25, 0xFF	; 255
    13c0:	21 f4       	brne	.+8      	; 0x13ca <__vector_18+0x2e>
    {
        //시작 버퍼 수신
        rx_en = 1;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	80 93 3b 02 	sts	0x023B, r24
    13c8:	47 c0       	rjmp	.+142    	; 0x1458 <__vector_18+0xbc>
    }
    else if(rx_en == 1)
    13ca:	80 91 3b 02 	lds	r24, 0x023B
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <__vector_18+0x38>
    13d2:	42 c0       	rjmp	.+132    	; 0x1458 <__vector_18+0xbc>
    {
        //데이터 받기
        //0번지부터 PSD0 저장
        buf[rx_cnt++] = rxbuf;
    13d4:	80 91 3a 02 	lds	r24, 0x023A
    13d8:	e8 2f       	mov	r30, r24
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	e2 5d       	subi	r30, 0xD2	; 210
    13de:	fd 4f       	sbci	r31, 0xFD	; 253
    13e0:	90 83       	st	Z, r25
    13e2:	8f 5f       	subi	r24, 0xFF	; 255
    13e4:	80 93 3a 02 	sts	0x023A, r24

        if(rx_cnt > 10)
    13e8:	80 91 3a 02 	lds	r24, 0x023A
    13ec:	8b 30       	cpi	r24, 0x0B	; 11
    13ee:	a0 f1       	brcs	.+104    	; 0x1458 <__vector_18+0xbc>
        {
            // PSD 10개, 체크섬 1개 수신 완료되면
            //플래그 리셋
            rx_en = rx_cnt = 0;
    13f0:	10 92 3a 02 	sts	0x023A, r1
    13f4:	80 91 3a 02 	lds	r24, 0x023A
    13f8:	80 93 3b 02 	sts	0x023B, r24
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0

            // 체크섬 계산
            for(i = 0 ; i < 10 ; i++)
                chksum += buf[i];
    1400:	30 91 39 02 	lds	r19, 0x0239
    1404:	fc 01       	movw	r30, r24
    1406:	e2 5d       	subi	r30, 0xD2	; 210
    1408:	fd 4f       	sbci	r31, 0xFD	; 253
    140a:	20 81       	ld	r18, Z
    140c:	23 0f       	add	r18, r19
    140e:	20 93 39 02 	sts	0x0239, r18
    1412:	01 96       	adiw	r24, 0x01	; 1
            // PSD 10개, 체크섬 1개 수신 완료되면
            //플래그 리셋
            rx_en = rx_cnt = 0;

            // 체크섬 계산
            for(i = 0 ; i < 10 ; i++)
    1414:	8a 30       	cpi	r24, 0x0A	; 10
    1416:	91 05       	cpc	r25, r1
    1418:	99 f7       	brne	.-26     	; 0x1400 <__vector_18+0x64>
                chksum += buf[i];

            //00~FE 이므로 FF나오면 +1 (오류방지)
            if(chksum == 0xFF)chksum++;
    141a:	80 91 39 02 	lds	r24, 0x0239
    141e:	8f 3f       	cpi	r24, 0xFF	; 255
    1420:	29 f4       	brne	.+10     	; 0x142c <__vector_18+0x90>
    1422:	80 91 39 02 	lds	r24, 0x0239
    1426:	8f 5f       	subi	r24, 0xFF	; 255
    1428:	80 93 39 02 	sts	0x0239, r24

            // 체크섬이 올바른지 체크 후 맞으면 전역변수로 이동
            if(chksum == buf[10])
    142c:	90 91 39 02 	lds	r25, 0x0239
    1430:	80 91 38 02 	lds	r24, 0x0238
    1434:	98 17       	cp	r25, r24
    1436:	71 f4       	brne	.+28     	; 0x1454 <__vector_18+0xb8>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e0       	ldi	r25, 0x00	; 0
                for(i = 0 ; i < 10 ; i++)
                    psd_value[i] = buf[i];
    143c:	fc 01       	movw	r30, r24
    143e:	e2 5d       	subi	r30, 0xD2	; 210
    1440:	fd 4f       	sbci	r31, 0xFD	; 253
    1442:	20 81       	ld	r18, Z
    1444:	fc 01       	movw	r30, r24
    1446:	e0 5c       	subi	r30, 0xC0	; 192
    1448:	fd 4f       	sbci	r31, 0xFD	; 253
    144a:	20 83       	st	Z, r18
    144c:	01 96       	adiw	r24, 0x01	; 1
            //00~FE 이므로 FF나오면 +1 (오류방지)
            if(chksum == 0xFF)chksum++;

            // 체크섬이 올바른지 체크 후 맞으면 전역변수로 이동
            if(chksum == buf[10])
                for(i = 0 ; i < 10 ; i++)
    144e:	8a 30       	cpi	r24, 0x0A	; 10
    1450:	91 05       	cpc	r25, r1
    1452:	a1 f7       	brne	.-24     	; 0x143c <__vector_18+0xa0>
                    psd_value[i] = buf[i];

            //체크섬 리셋
            chksum = 0;
    1454:	10 92 39 02 	sts	0x0239, r1
    	}
    }
}
    1458:	ff 91       	pop	r31
    145a:	ef 91       	pop	r30
    145c:	9f 91       	pop	r25
    145e:	8f 91       	pop	r24
    1460:	3f 91       	pop	r19
    1462:	2f 91       	pop	r18
    1464:	0f 90       	pop	r0
    1466:	0b be       	out	0x3b, r0	; 59
    1468:	0f 90       	pop	r0
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	0f 90       	pop	r0
    146e:	1f 90       	pop	r1
    1470:	18 95       	reti

00001472 <_fpadd_parts>:
    1472:	a0 e0       	ldi	r26, 0x00	; 0
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	ef e3       	ldi	r30, 0x3F	; 63
    1478:	fa e0       	ldi	r31, 0x0A	; 10
    147a:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__prologue_saves__+0x8>
    147e:	fc 01       	movw	r30, r24
    1480:	ea 01       	movw	r28, r20
    1482:	80 81       	ld	r24, Z
    1484:	82 30       	cpi	r24, 0x02	; 2
    1486:	08 f4       	brcc	.+2      	; 0x148a <_fpadd_parts+0x18>
    1488:	38 c1       	rjmp	.+624    	; 0x16fa <_fpadd_parts+0x288>
    148a:	db 01       	movw	r26, r22
    148c:	9c 91       	ld	r25, X
    148e:	92 30       	cpi	r25, 0x02	; 2
    1490:	08 f4       	brcc	.+2      	; 0x1494 <_fpadd_parts+0x22>
    1492:	30 c1       	rjmp	.+608    	; 0x16f4 <_fpadd_parts+0x282>
    1494:	84 30       	cpi	r24, 0x04	; 4
    1496:	59 f4       	brne	.+22     	; 0x14ae <_fpadd_parts+0x3c>
    1498:	94 30       	cpi	r25, 0x04	; 4
    149a:	09 f0       	breq	.+2      	; 0x149e <_fpadd_parts+0x2c>
    149c:	2e c1       	rjmp	.+604    	; 0x16fa <_fpadd_parts+0x288>
    149e:	91 81       	ldd	r25, Z+1	; 0x01
    14a0:	11 96       	adiw	r26, 0x01	; 1
    14a2:	8c 91       	ld	r24, X
    14a4:	11 97       	sbiw	r26, 0x01	; 1
    14a6:	98 17       	cp	r25, r24
    14a8:	09 f0       	breq	.+2      	; 0x14ac <_fpadd_parts+0x3a>
    14aa:	21 c1       	rjmp	.+578    	; 0x16ee <_fpadd_parts+0x27c>
    14ac:	26 c1       	rjmp	.+588    	; 0x16fa <_fpadd_parts+0x288>
    14ae:	94 30       	cpi	r25, 0x04	; 4
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <_fpadd_parts+0x42>
    14b2:	20 c1       	rjmp	.+576    	; 0x16f4 <_fpadd_parts+0x282>
    14b4:	92 30       	cpi	r25, 0x02	; 2
    14b6:	b1 f4       	brne	.+44     	; 0x14e4 <_fpadd_parts+0x72>
    14b8:	82 30       	cpi	r24, 0x02	; 2
    14ba:	09 f0       	breq	.+2      	; 0x14be <_fpadd_parts+0x4c>
    14bc:	1e c1       	rjmp	.+572    	; 0x16fa <_fpadd_parts+0x288>
    14be:	ca 01       	movw	r24, r20
    14c0:	af 01       	movw	r20, r30
    14c2:	28 e0       	ldi	r18, 0x08	; 8
    14c4:	da 01       	movw	r26, r20
    14c6:	0d 90       	ld	r0, X+
    14c8:	ad 01       	movw	r20, r26
    14ca:	dc 01       	movw	r26, r24
    14cc:	0d 92       	st	X+, r0
    14ce:	cd 01       	movw	r24, r26
    14d0:	21 50       	subi	r18, 0x01	; 1
    14d2:	c1 f7       	brne	.-16     	; 0x14c4 <_fpadd_parts+0x52>
    14d4:	db 01       	movw	r26, r22
    14d6:	11 96       	adiw	r26, 0x01	; 1
    14d8:	8c 91       	ld	r24, X
    14da:	11 97       	sbiw	r26, 0x01	; 1
    14dc:	91 81       	ldd	r25, Z+1	; 0x01
    14de:	89 23       	and	r24, r25
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	0a c1       	rjmp	.+532    	; 0x16f8 <_fpadd_parts+0x286>
    14e4:	82 30       	cpi	r24, 0x02	; 2
    14e6:	09 f4       	brne	.+2      	; 0x14ea <_fpadd_parts+0x78>
    14e8:	05 c1       	rjmp	.+522    	; 0x16f4 <_fpadd_parts+0x282>
    14ea:	c2 80       	ldd	r12, Z+2	; 0x02
    14ec:	d3 80       	ldd	r13, Z+3	; 0x03
    14ee:	db 01       	movw	r26, r22
    14f0:	12 96       	adiw	r26, 0x02	; 2
    14f2:	6d 90       	ld	r6, X+
    14f4:	7c 90       	ld	r7, X
    14f6:	13 97       	sbiw	r26, 0x03	; 3
    14f8:	24 81       	ldd	r18, Z+4	; 0x04
    14fa:	35 81       	ldd	r19, Z+5	; 0x05
    14fc:	46 81       	ldd	r20, Z+6	; 0x06
    14fe:	57 81       	ldd	r21, Z+7	; 0x07
    1500:	14 96       	adiw	r26, 0x04	; 4
    1502:	ed 90       	ld	r14, X+
    1504:	fd 90       	ld	r15, X+
    1506:	0d 91       	ld	r16, X+
    1508:	1c 91       	ld	r17, X
    150a:	17 97       	sbiw	r26, 0x07	; 7
    150c:	c6 01       	movw	r24, r12
    150e:	86 19       	sub	r24, r6
    1510:	97 09       	sbc	r25, r7
    1512:	5c 01       	movw	r10, r24
    1514:	97 ff       	sbrs	r25, 7
    1516:	04 c0       	rjmp	.+8      	; 0x1520 <_fpadd_parts+0xae>
    1518:	aa 24       	eor	r10, r10
    151a:	bb 24       	eor	r11, r11
    151c:	a8 1a       	sub	r10, r24
    151e:	b9 0a       	sbc	r11, r25
    1520:	b0 e2       	ldi	r27, 0x20	; 32
    1522:	ab 16       	cp	r10, r27
    1524:	b1 04       	cpc	r11, r1
    1526:	0c f0       	brlt	.+2      	; 0x152a <_fpadd_parts+0xb8>
    1528:	61 c0       	rjmp	.+194    	; 0x15ec <_fpadd_parts+0x17a>
    152a:	18 16       	cp	r1, r24
    152c:	19 06       	cpc	r1, r25
    152e:	6c f5       	brge	.+90     	; 0x158a <_fpadd_parts+0x118>
    1530:	37 01       	movw	r6, r14
    1532:	48 01       	movw	r8, r16
    1534:	0a 2c       	mov	r0, r10
    1536:	04 c0       	rjmp	.+8      	; 0x1540 <_fpadd_parts+0xce>
    1538:	96 94       	lsr	r9
    153a:	87 94       	ror	r8
    153c:	77 94       	ror	r7
    153e:	67 94       	ror	r6
    1540:	0a 94       	dec	r0
    1542:	d2 f7       	brpl	.-12     	; 0x1538 <_fpadd_parts+0xc6>
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	a0 e0       	ldi	r26, 0x00	; 0
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	0a 2c       	mov	r0, r10
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <_fpadd_parts+0xe6>
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	aa 1f       	adc	r26, r26
    1556:	bb 1f       	adc	r27, r27
    1558:	0a 94       	dec	r0
    155a:	d2 f7       	brpl	.-12     	; 0x1550 <_fpadd_parts+0xde>
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	a1 09       	sbc	r26, r1
    1560:	b1 09       	sbc	r27, r1
    1562:	8e 21       	and	r24, r14
    1564:	9f 21       	and	r25, r15
    1566:	a0 23       	and	r26, r16
    1568:	b1 23       	and	r27, r17
    156a:	ee 24       	eor	r14, r14
    156c:	ff 24       	eor	r15, r15
    156e:	87 01       	movw	r16, r14
    1570:	e3 94       	inc	r14
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	a1 05       	cpc	r26, r1
    1576:	b1 05       	cpc	r27, r1
    1578:	19 f4       	brne	.+6      	; 0x1580 <_fpadd_parts+0x10e>
    157a:	ee 24       	eor	r14, r14
    157c:	ff 24       	eor	r15, r15
    157e:	87 01       	movw	r16, r14
    1580:	e6 28       	or	r14, r6
    1582:	f7 28       	or	r15, r7
    1584:	08 29       	or	r16, r8
    1586:	19 29       	or	r17, r9
    1588:	3c c0       	rjmp	.+120    	; 0x1602 <_fpadd_parts+0x190>
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	d1 f1       	breq	.+116    	; 0x1602 <_fpadd_parts+0x190>
    158e:	ca 0c       	add	r12, r10
    1590:	db 1c       	adc	r13, r11
    1592:	39 01       	movw	r6, r18
    1594:	4a 01       	movw	r8, r20
    1596:	0a 2c       	mov	r0, r10
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <_fpadd_parts+0x130>
    159a:	96 94       	lsr	r9
    159c:	87 94       	ror	r8
    159e:	77 94       	ror	r7
    15a0:	67 94       	ror	r6
    15a2:	0a 94       	dec	r0
    15a4:	d2 f7       	brpl	.-12     	; 0x159a <_fpadd_parts+0x128>
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	a0 e0       	ldi	r26, 0x00	; 0
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	0a 2c       	mov	r0, r10
    15b0:	04 c0       	rjmp	.+8      	; 0x15ba <_fpadd_parts+0x148>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	aa 1f       	adc	r26, r26
    15b8:	bb 1f       	adc	r27, r27
    15ba:	0a 94       	dec	r0
    15bc:	d2 f7       	brpl	.-12     	; 0x15b2 <_fpadd_parts+0x140>
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	a1 09       	sbc	r26, r1
    15c2:	b1 09       	sbc	r27, r1
    15c4:	82 23       	and	r24, r18
    15c6:	93 23       	and	r25, r19
    15c8:	a4 23       	and	r26, r20
    15ca:	b5 23       	and	r27, r21
    15cc:	21 e0       	ldi	r18, 0x01	; 1
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	50 e0       	ldi	r21, 0x00	; 0
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	a1 05       	cpc	r26, r1
    15d8:	b1 05       	cpc	r27, r1
    15da:	19 f4       	brne	.+6      	; 0x15e2 <_fpadd_parts+0x170>
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	a9 01       	movw	r20, r18
    15e2:	26 29       	or	r18, r6
    15e4:	37 29       	or	r19, r7
    15e6:	48 29       	or	r20, r8
    15e8:	59 29       	or	r21, r9
    15ea:	0b c0       	rjmp	.+22     	; 0x1602 <_fpadd_parts+0x190>
    15ec:	6c 14       	cp	r6, r12
    15ee:	7d 04       	cpc	r7, r13
    15f0:	24 f4       	brge	.+8      	; 0x15fa <_fpadd_parts+0x188>
    15f2:	ee 24       	eor	r14, r14
    15f4:	ff 24       	eor	r15, r15
    15f6:	87 01       	movw	r16, r14
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <_fpadd_parts+0x190>
    15fa:	63 01       	movw	r12, r6
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	a9 01       	movw	r20, r18
    1602:	81 81       	ldd	r24, Z+1	; 0x01
    1604:	fb 01       	movw	r30, r22
    1606:	91 81       	ldd	r25, Z+1	; 0x01
    1608:	89 17       	cp	r24, r25
    160a:	09 f4       	brne	.+2      	; 0x160e <_fpadd_parts+0x19c>
    160c:	45 c0       	rjmp	.+138    	; 0x1698 <_fpadd_parts+0x226>
    160e:	88 23       	and	r24, r24
    1610:	49 f0       	breq	.+18     	; 0x1624 <_fpadd_parts+0x1b2>
    1612:	d8 01       	movw	r26, r16
    1614:	c7 01       	movw	r24, r14
    1616:	82 1b       	sub	r24, r18
    1618:	93 0b       	sbc	r25, r19
    161a:	a4 0b       	sbc	r26, r20
    161c:	b5 0b       	sbc	r27, r21
    161e:	9c 01       	movw	r18, r24
    1620:	ad 01       	movw	r20, r26
    1622:	04 c0       	rjmp	.+8      	; 0x162c <_fpadd_parts+0x1ba>
    1624:	2e 19       	sub	r18, r14
    1626:	3f 09       	sbc	r19, r15
    1628:	40 0b       	sbc	r20, r16
    162a:	51 0b       	sbc	r21, r17
    162c:	57 fd       	sbrc	r21, 7
    162e:	04 c0       	rjmp	.+8      	; 0x1638 <_fpadd_parts+0x1c6>
    1630:	19 82       	std	Y+1, r1	; 0x01
    1632:	db 82       	std	Y+3, r13	; 0x03
    1634:	ca 82       	std	Y+2, r12	; 0x02
    1636:	0b c0       	rjmp	.+22     	; 0x164e <_fpadd_parts+0x1dc>
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	db 82       	std	Y+3, r13	; 0x03
    163e:	ca 82       	std	Y+2, r12	; 0x02
    1640:	50 95       	com	r21
    1642:	40 95       	com	r20
    1644:	30 95       	com	r19
    1646:	21 95       	neg	r18
    1648:	3f 4f       	sbci	r19, 0xFF	; 255
    164a:	4f 4f       	sbci	r20, 0xFF	; 255
    164c:	5f 4f       	sbci	r21, 0xFF	; 255
    164e:	2c 83       	std	Y+4, r18	; 0x04
    1650:	3d 83       	std	Y+5, r19	; 0x05
    1652:	4e 83       	std	Y+6, r20	; 0x06
    1654:	5f 83       	std	Y+7, r21	; 0x07
    1656:	0d c0       	rjmp	.+26     	; 0x1672 <_fpadd_parts+0x200>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	aa 1f       	adc	r26, r26
    165e:	bb 1f       	adc	r27, r27
    1660:	8c 83       	std	Y+4, r24	; 0x04
    1662:	9d 83       	std	Y+5, r25	; 0x05
    1664:	ae 83       	std	Y+6, r26	; 0x06
    1666:	bf 83       	std	Y+7, r27	; 0x07
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	9b 81       	ldd	r25, Y+3	; 0x03
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	9b 83       	std	Y+3, r25	; 0x03
    1670:	8a 83       	std	Y+2, r24	; 0x02
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
    1674:	9d 81       	ldd	r25, Y+5	; 0x05
    1676:	ae 81       	ldd	r26, Y+6	; 0x06
    1678:	bf 81       	ldd	r27, Y+7	; 0x07
    167a:	9c 01       	movw	r18, r24
    167c:	ad 01       	movw	r20, r26
    167e:	21 50       	subi	r18, 0x01	; 1
    1680:	30 40       	sbci	r19, 0x00	; 0
    1682:	40 40       	sbci	r20, 0x00	; 0
    1684:	50 40       	sbci	r21, 0x00	; 0
    1686:	2f 3f       	cpi	r18, 0xFF	; 255
    1688:	ef ef       	ldi	r30, 0xFF	; 255
    168a:	3e 07       	cpc	r19, r30
    168c:	ef ef       	ldi	r30, 0xFF	; 255
    168e:	4e 07       	cpc	r20, r30
    1690:	ef e3       	ldi	r30, 0x3F	; 63
    1692:	5e 07       	cpc	r21, r30
    1694:	08 f3       	brcs	.-62     	; 0x1658 <_fpadd_parts+0x1e6>
    1696:	0b c0       	rjmp	.+22     	; 0x16ae <_fpadd_parts+0x23c>
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	db 82       	std	Y+3, r13	; 0x03
    169c:	ca 82       	std	Y+2, r12	; 0x02
    169e:	2e 0d       	add	r18, r14
    16a0:	3f 1d       	adc	r19, r15
    16a2:	40 1f       	adc	r20, r16
    16a4:	51 1f       	adc	r21, r17
    16a6:	2c 83       	std	Y+4, r18	; 0x04
    16a8:	3d 83       	std	Y+5, r19	; 0x05
    16aa:	4e 83       	std	Y+6, r20	; 0x06
    16ac:	5f 83       	std	Y+7, r21	; 0x07
    16ae:	83 e0       	ldi	r24, 0x03	; 3
    16b0:	88 83       	st	Y, r24
    16b2:	2c 81       	ldd	r18, Y+4	; 0x04
    16b4:	3d 81       	ldd	r19, Y+5	; 0x05
    16b6:	4e 81       	ldd	r20, Y+6	; 0x06
    16b8:	5f 81       	ldd	r21, Y+7	; 0x07
    16ba:	57 ff       	sbrs	r21, 7
    16bc:	1d c0       	rjmp	.+58     	; 0x16f8 <_fpadd_parts+0x286>
    16be:	da 01       	movw	r26, r20
    16c0:	c9 01       	movw	r24, r18
    16c2:	81 70       	andi	r24, 0x01	; 1
    16c4:	90 70       	andi	r25, 0x00	; 0
    16c6:	a0 70       	andi	r26, 0x00	; 0
    16c8:	b0 70       	andi	r27, 0x00	; 0
    16ca:	56 95       	lsr	r21
    16cc:	47 95       	ror	r20
    16ce:	37 95       	ror	r19
    16d0:	27 95       	ror	r18
    16d2:	82 2b       	or	r24, r18
    16d4:	93 2b       	or	r25, r19
    16d6:	a4 2b       	or	r26, r20
    16d8:	b5 2b       	or	r27, r21
    16da:	8c 83       	std	Y+4, r24	; 0x04
    16dc:	9d 83       	std	Y+5, r25	; 0x05
    16de:	ae 83       	std	Y+6, r26	; 0x06
    16e0:	bf 83       	std	Y+7, r27	; 0x07
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	9b 81       	ldd	r25, Y+3	; 0x03
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	9b 83       	std	Y+3, r25	; 0x03
    16ea:	8a 83       	std	Y+2, r24	; 0x02
    16ec:	05 c0       	rjmp	.+10     	; 0x16f8 <_fpadd_parts+0x286>
    16ee:	e3 e2       	ldi	r30, 0x23	; 35
    16f0:	f1 e0       	ldi	r31, 0x01	; 1
    16f2:	03 c0       	rjmp	.+6      	; 0x16fa <_fpadd_parts+0x288>
    16f4:	fb 01       	movw	r30, r22
    16f6:	01 c0       	rjmp	.+2      	; 0x16fa <_fpadd_parts+0x288>
    16f8:	fe 01       	movw	r30, r28
    16fa:	cf 01       	movw	r24, r30
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	ee e0       	ldi	r30, 0x0E	; 14
    1702:	0c 94 03 10 	jmp	0x2006	; 0x2006 <__epilogue_restores__+0x8>

00001706 <__addsf3>:
    1706:	a0 e2       	ldi	r26, 0x20	; 32
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e9 e8       	ldi	r30, 0x89	; 137
    170c:	fb e0       	ldi	r31, 0x0B	; 11
    170e:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__prologue_saves__+0x18>
    1712:	69 83       	std	Y+1, r22	; 0x01
    1714:	7a 83       	std	Y+2, r23	; 0x02
    1716:	8b 83       	std	Y+3, r24	; 0x03
    1718:	9c 83       	std	Y+4, r25	; 0x04
    171a:	2d 83       	std	Y+5, r18	; 0x05
    171c:	3e 83       	std	Y+6, r19	; 0x06
    171e:	4f 83       	std	Y+7, r20	; 0x07
    1720:	58 87       	std	Y+8, r21	; 0x08
    1722:	89 e0       	ldi	r24, 0x09	; 9
    1724:	e8 2e       	mov	r14, r24
    1726:	f1 2c       	mov	r15, r1
    1728:	ec 0e       	add	r14, r28
    172a:	fd 1e       	adc	r15, r29
    172c:	ce 01       	movw	r24, r28
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	b7 01       	movw	r22, r14
    1732:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__unpack_f>
    1736:	8e 01       	movw	r16, r28
    1738:	0f 5e       	subi	r16, 0xEF	; 239
    173a:	1f 4f       	sbci	r17, 0xFF	; 255
    173c:	ce 01       	movw	r24, r28
    173e:	05 96       	adiw	r24, 0x05	; 5
    1740:	b8 01       	movw	r22, r16
    1742:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__unpack_f>
    1746:	c7 01       	movw	r24, r14
    1748:	b8 01       	movw	r22, r16
    174a:	ae 01       	movw	r20, r28
    174c:	47 5e       	subi	r20, 0xE7	; 231
    174e:	5f 4f       	sbci	r21, 0xFF	; 255
    1750:	0e 94 39 0a 	call	0x1472	; 0x1472 <_fpadd_parts>
    1754:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__pack_f>
    1758:	a0 96       	adiw	r28, 0x20	; 32
    175a:	e6 e0       	ldi	r30, 0x06	; 6
    175c:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__epilogue_restores__+0x18>

00001760 <__subsf3>:
    1760:	a0 e2       	ldi	r26, 0x20	; 32
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e6 eb       	ldi	r30, 0xB6	; 182
    1766:	fb e0       	ldi	r31, 0x0B	; 11
    1768:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__prologue_saves__+0x18>
    176c:	69 83       	std	Y+1, r22	; 0x01
    176e:	7a 83       	std	Y+2, r23	; 0x02
    1770:	8b 83       	std	Y+3, r24	; 0x03
    1772:	9c 83       	std	Y+4, r25	; 0x04
    1774:	2d 83       	std	Y+5, r18	; 0x05
    1776:	3e 83       	std	Y+6, r19	; 0x06
    1778:	4f 83       	std	Y+7, r20	; 0x07
    177a:	58 87       	std	Y+8, r21	; 0x08
    177c:	8e 01       	movw	r16, r28
    177e:	07 5f       	subi	r16, 0xF7	; 247
    1780:	1f 4f       	sbci	r17, 0xFF	; 255
    1782:	ce 01       	movw	r24, r28
    1784:	01 96       	adiw	r24, 0x01	; 1
    1786:	b8 01       	movw	r22, r16
    1788:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__unpack_f>
    178c:	91 e1       	ldi	r25, 0x11	; 17
    178e:	e9 2e       	mov	r14, r25
    1790:	f1 2c       	mov	r15, r1
    1792:	ec 0e       	add	r14, r28
    1794:	fd 1e       	adc	r15, r29
    1796:	ce 01       	movw	r24, r28
    1798:	05 96       	adiw	r24, 0x05	; 5
    179a:	b7 01       	movw	r22, r14
    179c:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__unpack_f>
    17a0:	8a 89       	ldd	r24, Y+18	; 0x12
    17a2:	91 e0       	ldi	r25, 0x01	; 1
    17a4:	89 27       	eor	r24, r25
    17a6:	8a 8b       	std	Y+18, r24	; 0x12
    17a8:	c8 01       	movw	r24, r16
    17aa:	b7 01       	movw	r22, r14
    17ac:	ae 01       	movw	r20, r28
    17ae:	47 5e       	subi	r20, 0xE7	; 231
    17b0:	5f 4f       	sbci	r21, 0xFF	; 255
    17b2:	0e 94 39 0a 	call	0x1472	; 0x1472 <_fpadd_parts>
    17b6:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__pack_f>
    17ba:	a0 96       	adiw	r28, 0x20	; 32
    17bc:	e6 e0       	ldi	r30, 0x06	; 6
    17be:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__epilogue_restores__+0x18>

000017c2 <__mulsf3>:
    17c2:	a0 e2       	ldi	r26, 0x20	; 32
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e7 ee       	ldi	r30, 0xE7	; 231
    17c8:	fb e0       	ldi	r31, 0x0B	; 11
    17ca:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__prologue_saves__>
    17ce:	69 83       	std	Y+1, r22	; 0x01
    17d0:	7a 83       	std	Y+2, r23	; 0x02
    17d2:	8b 83       	std	Y+3, r24	; 0x03
    17d4:	9c 83       	std	Y+4, r25	; 0x04
    17d6:	2d 83       	std	Y+5, r18	; 0x05
    17d8:	3e 83       	std	Y+6, r19	; 0x06
    17da:	4f 83       	std	Y+7, r20	; 0x07
    17dc:	58 87       	std	Y+8, r21	; 0x08
    17de:	ce 01       	movw	r24, r28
    17e0:	01 96       	adiw	r24, 0x01	; 1
    17e2:	be 01       	movw	r22, r28
    17e4:	67 5f       	subi	r22, 0xF7	; 247
    17e6:	7f 4f       	sbci	r23, 0xFF	; 255
    17e8:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__unpack_f>
    17ec:	ce 01       	movw	r24, r28
    17ee:	05 96       	adiw	r24, 0x05	; 5
    17f0:	be 01       	movw	r22, r28
    17f2:	6f 5e       	subi	r22, 0xEF	; 239
    17f4:	7f 4f       	sbci	r23, 0xFF	; 255
    17f6:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__unpack_f>
    17fa:	99 85       	ldd	r25, Y+9	; 0x09
    17fc:	92 30       	cpi	r25, 0x02	; 2
    17fe:	78 f0       	brcs	.+30     	; 0x181e <__mulsf3+0x5c>
    1800:	89 89       	ldd	r24, Y+17	; 0x11
    1802:	82 30       	cpi	r24, 0x02	; 2
    1804:	c0 f0       	brcs	.+48     	; 0x1836 <__mulsf3+0x74>
    1806:	94 30       	cpi	r25, 0x04	; 4
    1808:	19 f4       	brne	.+6      	; 0x1810 <__mulsf3+0x4e>
    180a:	82 30       	cpi	r24, 0x02	; 2
    180c:	41 f4       	brne	.+16     	; 0x181e <__mulsf3+0x5c>
    180e:	cb c0       	rjmp	.+406    	; 0x19a6 <__mulsf3+0x1e4>
    1810:	84 30       	cpi	r24, 0x04	; 4
    1812:	19 f4       	brne	.+6      	; 0x181a <__mulsf3+0x58>
    1814:	92 30       	cpi	r25, 0x02	; 2
    1816:	79 f4       	brne	.+30     	; 0x1836 <__mulsf3+0x74>
    1818:	c6 c0       	rjmp	.+396    	; 0x19a6 <__mulsf3+0x1e4>
    181a:	92 30       	cpi	r25, 0x02	; 2
    181c:	51 f4       	brne	.+20     	; 0x1832 <__mulsf3+0x70>
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	2a 85       	ldd	r18, Y+10	; 0x0a
    1822:	9a 89       	ldd	r25, Y+18	; 0x12
    1824:	29 17       	cp	r18, r25
    1826:	09 f4       	brne	.+2      	; 0x182a <__mulsf3+0x68>
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	8a 87       	std	Y+10, r24	; 0x0a
    182c:	ce 01       	movw	r24, r28
    182e:	09 96       	adiw	r24, 0x09	; 9
    1830:	bc c0       	rjmp	.+376    	; 0x19aa <__mulsf3+0x1e8>
    1832:	82 30       	cpi	r24, 0x02	; 2
    1834:	51 f4       	brne	.+20     	; 0x184a <__mulsf3+0x88>
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	2a 85       	ldd	r18, Y+10	; 0x0a
    183a:	9a 89       	ldd	r25, Y+18	; 0x12
    183c:	29 17       	cp	r18, r25
    183e:	09 f4       	brne	.+2      	; 0x1842 <__mulsf3+0x80>
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	8a 8b       	std	Y+18, r24	; 0x12
    1844:	ce 01       	movw	r24, r28
    1846:	41 96       	adiw	r24, 0x11	; 17
    1848:	b0 c0       	rjmp	.+352    	; 0x19aa <__mulsf3+0x1e8>
    184a:	6d 84       	ldd	r6, Y+13	; 0x0d
    184c:	7e 84       	ldd	r7, Y+14	; 0x0e
    184e:	8f 84       	ldd	r8, Y+15	; 0x0f
    1850:	98 88       	ldd	r9, Y+16	; 0x10
    1852:	ed 88       	ldd	r14, Y+21	; 0x15
    1854:	fe 88       	ldd	r15, Y+22	; 0x16
    1856:	0f 89       	ldd	r16, Y+23	; 0x17
    1858:	18 8d       	ldd	r17, Y+24	; 0x18
    185a:	e0 e2       	ldi	r30, 0x20	; 32
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	dc 01       	movw	r26, r24
    1864:	aa 24       	eor	r10, r10
    1866:	bb 24       	eor	r11, r11
    1868:	65 01       	movw	r12, r10
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	a9 01       	movw	r20, r18
    1870:	b3 01       	movw	r22, r6
    1872:	61 70       	andi	r22, 0x01	; 1
    1874:	70 70       	andi	r23, 0x00	; 0
    1876:	61 15       	cp	r22, r1
    1878:	71 05       	cpc	r23, r1
    187a:	d1 f0       	breq	.+52     	; 0x18b0 <__mulsf3+0xee>
    187c:	2e 0d       	add	r18, r14
    187e:	3f 1d       	adc	r19, r15
    1880:	40 1f       	adc	r20, r16
    1882:	51 1f       	adc	r21, r17
    1884:	15 01       	movw	r2, r10
    1886:	26 01       	movw	r4, r12
    1888:	28 0e       	add	r2, r24
    188a:	39 1e       	adc	r3, r25
    188c:	4a 1e       	adc	r4, r26
    188e:	5b 1e       	adc	r5, r27
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	a0 e0       	ldi	r26, 0x00	; 0
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	2e 15       	cp	r18, r14
    189a:	3f 05       	cpc	r19, r15
    189c:	40 07       	cpc	r20, r16
    189e:	51 07       	cpc	r21, r17
    18a0:	18 f0       	brcs	.+6      	; 0x18a8 <__mulsf3+0xe6>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	dc 01       	movw	r26, r24
    18a8:	82 0d       	add	r24, r2
    18aa:	93 1d       	adc	r25, r3
    18ac:	a4 1d       	adc	r26, r4
    18ae:	b5 1d       	adc	r27, r5
    18b0:	aa 0c       	add	r10, r10
    18b2:	bb 1c       	adc	r11, r11
    18b4:	cc 1c       	adc	r12, r12
    18b6:	dd 1c       	adc	r13, r13
    18b8:	17 ff       	sbrs	r17, 7
    18ba:	09 c0       	rjmp	.+18     	; 0x18ce <__mulsf3+0x10c>
    18bc:	61 e0       	ldi	r22, 0x01	; 1
    18be:	26 2e       	mov	r2, r22
    18c0:	31 2c       	mov	r3, r1
    18c2:	41 2c       	mov	r4, r1
    18c4:	51 2c       	mov	r5, r1
    18c6:	a2 28       	or	r10, r2
    18c8:	b3 28       	or	r11, r3
    18ca:	c4 28       	or	r12, r4
    18cc:	d5 28       	or	r13, r5
    18ce:	31 97       	sbiw	r30, 0x01	; 1
    18d0:	49 f0       	breq	.+18     	; 0x18e4 <__mulsf3+0x122>
    18d2:	ee 0c       	add	r14, r14
    18d4:	ff 1c       	adc	r15, r15
    18d6:	00 1f       	adc	r16, r16
    18d8:	11 1f       	adc	r17, r17
    18da:	96 94       	lsr	r9
    18dc:	87 94       	ror	r8
    18de:	77 94       	ror	r7
    18e0:	67 94       	ror	r6
    18e2:	c6 cf       	rjmp	.-116    	; 0x1870 <__mulsf3+0xae>
    18e4:	6b 89       	ldd	r22, Y+19	; 0x13
    18e6:	7c 89       	ldd	r23, Y+20	; 0x14
    18e8:	eb 85       	ldd	r30, Y+11	; 0x0b
    18ea:	fc 85       	ldd	r31, Y+12	; 0x0c
    18ec:	6e 0f       	add	r22, r30
    18ee:	7f 1f       	adc	r23, r31
    18f0:	6e 5f       	subi	r22, 0xFE	; 254
    18f2:	7f 4f       	sbci	r23, 0xFF	; 255
    18f4:	7c 8f       	std	Y+28, r23	; 0x1c
    18f6:	6b 8f       	std	Y+27, r22	; 0x1b
    18f8:	61 e0       	ldi	r22, 0x01	; 1
    18fa:	ea 85       	ldd	r30, Y+10	; 0x0a
    18fc:	7a 89       	ldd	r23, Y+18	; 0x12
    18fe:	e7 17       	cp	r30, r23
    1900:	09 f4       	brne	.+2      	; 0x1904 <__mulsf3+0x142>
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	6a 8f       	std	Y+26, r22	; 0x1a
    1906:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1908:	7c 8d       	ldd	r23, Y+28	; 0x1c
    190a:	10 c0       	rjmp	.+32     	; 0x192c <__mulsf3+0x16a>
    190c:	fc 01       	movw	r30, r24
    190e:	e1 70       	andi	r30, 0x01	; 1
    1910:	f0 70       	andi	r31, 0x00	; 0
    1912:	30 97       	sbiw	r30, 0x00	; 0
    1914:	29 f0       	breq	.+10     	; 0x1920 <__mulsf3+0x15e>
    1916:	56 95       	lsr	r21
    1918:	47 95       	ror	r20
    191a:	37 95       	ror	r19
    191c:	27 95       	ror	r18
    191e:	50 68       	ori	r21, 0x80	; 128
    1920:	b6 95       	lsr	r27
    1922:	a7 95       	ror	r26
    1924:	97 95       	ror	r25
    1926:	87 95       	ror	r24
    1928:	6f 5f       	subi	r22, 0xFF	; 255
    192a:	7f 4f       	sbci	r23, 0xFF	; 255
    192c:	b7 fd       	sbrc	r27, 7
    192e:	ee cf       	rjmp	.-36     	; 0x190c <__mulsf3+0x14a>
    1930:	0c c0       	rjmp	.+24     	; 0x194a <__mulsf3+0x188>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	aa 1f       	adc	r26, r26
    1938:	bb 1f       	adc	r27, r27
    193a:	57 fd       	sbrc	r21, 7
    193c:	81 60       	ori	r24, 0x01	; 1
    193e:	22 0f       	add	r18, r18
    1940:	33 1f       	adc	r19, r19
    1942:	44 1f       	adc	r20, r20
    1944:	55 1f       	adc	r21, r21
    1946:	61 50       	subi	r22, 0x01	; 1
    1948:	70 40       	sbci	r23, 0x00	; 0
    194a:	80 30       	cpi	r24, 0x00	; 0
    194c:	e0 e0       	ldi	r30, 0x00	; 0
    194e:	9e 07       	cpc	r25, r30
    1950:	e0 e0       	ldi	r30, 0x00	; 0
    1952:	ae 07       	cpc	r26, r30
    1954:	e0 e4       	ldi	r30, 0x40	; 64
    1956:	be 07       	cpc	r27, r30
    1958:	60 f3       	brcs	.-40     	; 0x1932 <__mulsf3+0x170>
    195a:	6b 8f       	std	Y+27, r22	; 0x1b
    195c:	7c 8f       	std	Y+28, r23	; 0x1c
    195e:	6f e7       	ldi	r22, 0x7F	; 127
    1960:	e6 2e       	mov	r14, r22
    1962:	f1 2c       	mov	r15, r1
    1964:	01 2d       	mov	r16, r1
    1966:	11 2d       	mov	r17, r1
    1968:	e8 22       	and	r14, r24
    196a:	f9 22       	and	r15, r25
    196c:	0a 23       	and	r16, r26
    196e:	1b 23       	and	r17, r27
    1970:	60 e4       	ldi	r22, 0x40	; 64
    1972:	e6 16       	cp	r14, r22
    1974:	f1 04       	cpc	r15, r1
    1976:	01 05       	cpc	r16, r1
    1978:	11 05       	cpc	r17, r1
    197a:	61 f4       	brne	.+24     	; 0x1994 <__mulsf3+0x1d2>
    197c:	87 fd       	sbrc	r24, 7
    197e:	0a c0       	rjmp	.+20     	; 0x1994 <__mulsf3+0x1d2>
    1980:	21 15       	cp	r18, r1
    1982:	31 05       	cpc	r19, r1
    1984:	41 05       	cpc	r20, r1
    1986:	51 05       	cpc	r21, r1
    1988:	29 f0       	breq	.+10     	; 0x1994 <__mulsf3+0x1d2>
    198a:	80 5c       	subi	r24, 0xC0	; 192
    198c:	9f 4f       	sbci	r25, 0xFF	; 255
    198e:	af 4f       	sbci	r26, 0xFF	; 255
    1990:	bf 4f       	sbci	r27, 0xFF	; 255
    1992:	80 78       	andi	r24, 0x80	; 128
    1994:	8d 8f       	std	Y+29, r24	; 0x1d
    1996:	9e 8f       	std	Y+30, r25	; 0x1e
    1998:	af 8f       	std	Y+31, r26	; 0x1f
    199a:	b8 a3       	std	Y+32, r27	; 0x20
    199c:	83 e0       	ldi	r24, 0x03	; 3
    199e:	89 8f       	std	Y+25, r24	; 0x19
    19a0:	ce 01       	movw	r24, r28
    19a2:	49 96       	adiw	r24, 0x19	; 25
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <__mulsf3+0x1e8>
    19a6:	83 e2       	ldi	r24, 0x23	; 35
    19a8:	91 e0       	ldi	r25, 0x01	; 1
    19aa:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__pack_f>
    19ae:	a0 96       	adiw	r28, 0x20	; 32
    19b0:	e2 e1       	ldi	r30, 0x12	; 18
    19b2:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__epilogue_restores__>

000019b6 <__gesf2>:
    19b6:	a8 e1       	ldi	r26, 0x18	; 24
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e1 ee       	ldi	r30, 0xE1	; 225
    19bc:	fc e0       	ldi	r31, 0x0C	; 12
    19be:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__prologue_saves__+0x18>
    19c2:	69 83       	std	Y+1, r22	; 0x01
    19c4:	7a 83       	std	Y+2, r23	; 0x02
    19c6:	8b 83       	std	Y+3, r24	; 0x03
    19c8:	9c 83       	std	Y+4, r25	; 0x04
    19ca:	2d 83       	std	Y+5, r18	; 0x05
    19cc:	3e 83       	std	Y+6, r19	; 0x06
    19ce:	4f 83       	std	Y+7, r20	; 0x07
    19d0:	58 87       	std	Y+8, r21	; 0x08
    19d2:	8e 01       	movw	r16, r28
    19d4:	07 5f       	subi	r16, 0xF7	; 247
    19d6:	1f 4f       	sbci	r17, 0xFF	; 255
    19d8:	ce 01       	movw	r24, r28
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	b8 01       	movw	r22, r16
    19de:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__unpack_f>
    19e2:	81 e1       	ldi	r24, 0x11	; 17
    19e4:	e8 2e       	mov	r14, r24
    19e6:	f1 2c       	mov	r15, r1
    19e8:	ec 0e       	add	r14, r28
    19ea:	fd 1e       	adc	r15, r29
    19ec:	ce 01       	movw	r24, r28
    19ee:	05 96       	adiw	r24, 0x05	; 5
    19f0:	b7 01       	movw	r22, r14
    19f2:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__unpack_f>
    19f6:	89 85       	ldd	r24, Y+9	; 0x09
    19f8:	82 30       	cpi	r24, 0x02	; 2
    19fa:	40 f0       	brcs	.+16     	; 0x1a0c <__gesf2+0x56>
    19fc:	89 89       	ldd	r24, Y+17	; 0x11
    19fe:	82 30       	cpi	r24, 0x02	; 2
    1a00:	28 f0       	brcs	.+10     	; 0x1a0c <__gesf2+0x56>
    1a02:	c8 01       	movw	r24, r16
    1a04:	b7 01       	movw	r22, r14
    1a06:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__fpcmp_parts_f>
    1a0a:	01 c0       	rjmp	.+2      	; 0x1a0e <__gesf2+0x58>
    1a0c:	8f ef       	ldi	r24, 0xFF	; 255
    1a0e:	68 96       	adiw	r28, 0x18	; 24
    1a10:	e6 e0       	ldi	r30, 0x06	; 6
    1a12:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__epilogue_restores__+0x18>

00001a16 <__lesf2>:
    1a16:	a8 e1       	ldi	r26, 0x18	; 24
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e1 e1       	ldi	r30, 0x11	; 17
    1a1c:	fd e0       	ldi	r31, 0x0D	; 13
    1a1e:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__prologue_saves__+0x18>
    1a22:	69 83       	std	Y+1, r22	; 0x01
    1a24:	7a 83       	std	Y+2, r23	; 0x02
    1a26:	8b 83       	std	Y+3, r24	; 0x03
    1a28:	9c 83       	std	Y+4, r25	; 0x04
    1a2a:	2d 83       	std	Y+5, r18	; 0x05
    1a2c:	3e 83       	std	Y+6, r19	; 0x06
    1a2e:	4f 83       	std	Y+7, r20	; 0x07
    1a30:	58 87       	std	Y+8, r21	; 0x08
    1a32:	8e 01       	movw	r16, r28
    1a34:	07 5f       	subi	r16, 0xF7	; 247
    1a36:	1f 4f       	sbci	r17, 0xFF	; 255
    1a38:	ce 01       	movw	r24, r28
    1a3a:	01 96       	adiw	r24, 0x01	; 1
    1a3c:	b8 01       	movw	r22, r16
    1a3e:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__unpack_f>
    1a42:	81 e1       	ldi	r24, 0x11	; 17
    1a44:	e8 2e       	mov	r14, r24
    1a46:	f1 2c       	mov	r15, r1
    1a48:	ec 0e       	add	r14, r28
    1a4a:	fd 1e       	adc	r15, r29
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	05 96       	adiw	r24, 0x05	; 5
    1a50:	b7 01       	movw	r22, r14
    1a52:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__unpack_f>
    1a56:	89 85       	ldd	r24, Y+9	; 0x09
    1a58:	82 30       	cpi	r24, 0x02	; 2
    1a5a:	40 f0       	brcs	.+16     	; 0x1a6c <__lesf2+0x56>
    1a5c:	89 89       	ldd	r24, Y+17	; 0x11
    1a5e:	82 30       	cpi	r24, 0x02	; 2
    1a60:	28 f0       	brcs	.+10     	; 0x1a6c <__lesf2+0x56>
    1a62:	c8 01       	movw	r24, r16
    1a64:	b7 01       	movw	r22, r14
    1a66:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__fpcmp_parts_f>
    1a6a:	01 c0       	rjmp	.+2      	; 0x1a6e <__lesf2+0x58>
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	68 96       	adiw	r28, 0x18	; 24
    1a70:	e6 e0       	ldi	r30, 0x06	; 6
    1a72:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__epilogue_restores__+0x18>

00001a76 <__floatsisf>:
    1a76:	a8 e0       	ldi	r26, 0x08	; 8
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e1 e4       	ldi	r30, 0x41	; 65
    1a7c:	fd e0       	ldi	r31, 0x0D	; 13
    1a7e:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__prologue_saves__+0x18>
    1a82:	7b 01       	movw	r14, r22
    1a84:	8c 01       	movw	r16, r24
    1a86:	83 e0       	ldi	r24, 0x03	; 3
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	d8 01       	movw	r26, r16
    1a8c:	c7 01       	movw	r24, r14
    1a8e:	88 27       	eor	r24, r24
    1a90:	b7 fd       	sbrc	r27, 7
    1a92:	83 95       	inc	r24
    1a94:	99 27       	eor	r25, r25
    1a96:	aa 27       	eor	r26, r26
    1a98:	bb 27       	eor	r27, r27
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	8a 83       	std	Y+2, r24	; 0x02
    1a9e:	e1 14       	cp	r14, r1
    1aa0:	f1 04       	cpc	r15, r1
    1aa2:	01 05       	cpc	r16, r1
    1aa4:	11 05       	cpc	r17, r1
    1aa6:	19 f4       	brne	.+6      	; 0x1aae <__floatsisf+0x38>
    1aa8:	82 e0       	ldi	r24, 0x02	; 2
    1aaa:	89 83       	std	Y+1, r24	; 0x01
    1aac:	37 c0       	rjmp	.+110    	; 0x1b1c <__floatsisf+0xa6>
    1aae:	8e e1       	ldi	r24, 0x1E	; 30
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9c 83       	std	Y+4, r25	; 0x04
    1ab4:	8b 83       	std	Y+3, r24	; 0x03
    1ab6:	22 23       	and	r18, r18
    1ab8:	89 f0       	breq	.+34     	; 0x1adc <__floatsisf+0x66>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	e8 16       	cp	r14, r24
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	f8 06       	cpc	r15, r24
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	08 07       	cpc	r16, r24
    1ac6:	80 e8       	ldi	r24, 0x80	; 128
    1ac8:	18 07       	cpc	r17, r24
    1aca:	69 f1       	breq	.+90     	; 0x1b26 <__floatsisf+0xb0>
    1acc:	10 95       	com	r17
    1ace:	00 95       	com	r16
    1ad0:	f0 94       	com	r15
    1ad2:	e0 94       	com	r14
    1ad4:	e1 1c       	adc	r14, r1
    1ad6:	f1 1c       	adc	r15, r1
    1ad8:	01 1d       	adc	r16, r1
    1ada:	11 1d       	adc	r17, r1
    1adc:	ed 82       	std	Y+5, r14	; 0x05
    1ade:	fe 82       	std	Y+6, r15	; 0x06
    1ae0:	0f 83       	std	Y+7, r16	; 0x07
    1ae2:	18 87       	std	Y+8, r17	; 0x08
    1ae4:	c8 01       	movw	r24, r16
    1ae6:	b7 01       	movw	r22, r14
    1ae8:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__clzsi2>
    1aec:	9c 01       	movw	r18, r24
    1aee:	21 50       	subi	r18, 0x01	; 1
    1af0:	30 40       	sbci	r19, 0x00	; 0
    1af2:	12 16       	cp	r1, r18
    1af4:	13 06       	cpc	r1, r19
    1af6:	94 f4       	brge	.+36     	; 0x1b1c <__floatsisf+0xa6>
    1af8:	02 2e       	mov	r0, r18
    1afa:	04 c0       	rjmp	.+8      	; 0x1b04 <__floatsisf+0x8e>
    1afc:	ee 0c       	add	r14, r14
    1afe:	ff 1c       	adc	r15, r15
    1b00:	00 1f       	adc	r16, r16
    1b02:	11 1f       	adc	r17, r17
    1b04:	0a 94       	dec	r0
    1b06:	d2 f7       	brpl	.-12     	; 0x1afc <__floatsisf+0x86>
    1b08:	ed 82       	std	Y+5, r14	; 0x05
    1b0a:	fe 82       	std	Y+6, r15	; 0x06
    1b0c:	0f 83       	std	Y+7, r16	; 0x07
    1b0e:	18 87       	std	Y+8, r17	; 0x08
    1b10:	8e e1       	ldi	r24, 0x1E	; 30
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	82 1b       	sub	r24, r18
    1b16:	93 0b       	sbc	r25, r19
    1b18:	9c 83       	std	Y+4, r25	; 0x04
    1b1a:	8b 83       	std	Y+3, r24	; 0x03
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__pack_f>
    1b24:	04 c0       	rjmp	.+8      	; 0x1b2e <__floatsisf+0xb8>
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	9f ec       	ldi	r25, 0xCF	; 207
    1b2e:	28 96       	adiw	r28, 0x08	; 8
    1b30:	e6 e0       	ldi	r30, 0x06	; 6
    1b32:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__epilogue_restores__+0x18>

00001b36 <__fixsfsi>:
    1b36:	ac e0       	ldi	r26, 0x0C	; 12
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e1 ea       	ldi	r30, 0xA1	; 161
    1b3c:	fd e0       	ldi	r31, 0x0D	; 13
    1b3e:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__prologue_saves__+0x20>
    1b42:	69 83       	std	Y+1, r22	; 0x01
    1b44:	7a 83       	std	Y+2, r23	; 0x02
    1b46:	8b 83       	std	Y+3, r24	; 0x03
    1b48:	9c 83       	std	Y+4, r25	; 0x04
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	be 01       	movw	r22, r28
    1b50:	6b 5f       	subi	r22, 0xFB	; 251
    1b52:	7f 4f       	sbci	r23, 0xFF	; 255
    1b54:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__unpack_f>
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	82 30       	cpi	r24, 0x02	; 2
    1b5c:	81 f1       	breq	.+96     	; 0x1bbe <__fixsfsi+0x88>
    1b5e:	82 30       	cpi	r24, 0x02	; 2
    1b60:	70 f1       	brcs	.+92     	; 0x1bbe <__fixsfsi+0x88>
    1b62:	84 30       	cpi	r24, 0x04	; 4
    1b64:	21 f4       	brne	.+8      	; 0x1b6e <__fixsfsi+0x38>
    1b66:	8e 81       	ldd	r24, Y+6	; 0x06
    1b68:	88 23       	and	r24, r24
    1b6a:	69 f1       	breq	.+90     	; 0x1bc6 <__fixsfsi+0x90>
    1b6c:	0a c0       	rjmp	.+20     	; 0x1b82 <__fixsfsi+0x4c>
    1b6e:	2f 81       	ldd	r18, Y+7	; 0x07
    1b70:	38 85       	ldd	r19, Y+8	; 0x08
    1b72:	37 fd       	sbrc	r19, 7
    1b74:	24 c0       	rjmp	.+72     	; 0x1bbe <__fixsfsi+0x88>
    1b76:	6e 81       	ldd	r22, Y+6	; 0x06
    1b78:	2f 31       	cpi	r18, 0x1F	; 31
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	3c f0       	brlt	.+14     	; 0x1b8c <__fixsfsi+0x56>
    1b7e:	66 23       	and	r22, r22
    1b80:	11 f1       	breq	.+68     	; 0x1bc6 <__fixsfsi+0x90>
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e0       	ldi	r20, 0x00	; 0
    1b88:	50 e8       	ldi	r21, 0x80	; 128
    1b8a:	21 c0       	rjmp	.+66     	; 0x1bce <__fixsfsi+0x98>
    1b8c:	8e e1       	ldi	r24, 0x1E	; 30
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	82 1b       	sub	r24, r18
    1b92:	93 0b       	sbc	r25, r19
    1b94:	29 85       	ldd	r18, Y+9	; 0x09
    1b96:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b98:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b9a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b9c:	04 c0       	rjmp	.+8      	; 0x1ba6 <__fixsfsi+0x70>
    1b9e:	56 95       	lsr	r21
    1ba0:	47 95       	ror	r20
    1ba2:	37 95       	ror	r19
    1ba4:	27 95       	ror	r18
    1ba6:	8a 95       	dec	r24
    1ba8:	d2 f7       	brpl	.-12     	; 0x1b9e <__fixsfsi+0x68>
    1baa:	66 23       	and	r22, r22
    1bac:	81 f0       	breq	.+32     	; 0x1bce <__fixsfsi+0x98>
    1bae:	50 95       	com	r21
    1bb0:	40 95       	com	r20
    1bb2:	30 95       	com	r19
    1bb4:	21 95       	neg	r18
    1bb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb8:	4f 4f       	sbci	r20, 0xFF	; 255
    1bba:	5f 4f       	sbci	r21, 0xFF	; 255
    1bbc:	08 c0       	rjmp	.+16     	; 0x1bce <__fixsfsi+0x98>
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	a9 01       	movw	r20, r18
    1bc4:	04 c0       	rjmp	.+8      	; 0x1bce <__fixsfsi+0x98>
    1bc6:	2f ef       	ldi	r18, 0xFF	; 255
    1bc8:	3f ef       	ldi	r19, 0xFF	; 255
    1bca:	4f ef       	ldi	r20, 0xFF	; 255
    1bcc:	5f e7       	ldi	r21, 0x7F	; 127
    1bce:	b9 01       	movw	r22, r18
    1bd0:	ca 01       	movw	r24, r20
    1bd2:	2c 96       	adiw	r28, 0x0c	; 12
    1bd4:	e2 e0       	ldi	r30, 0x02	; 2
    1bd6:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__epilogue_restores__+0x20>

00001bda <__clzsi2>:
    1bda:	af 92       	push	r10
    1bdc:	bf 92       	push	r11
    1bde:	cf 92       	push	r12
    1be0:	df 92       	push	r13
    1be2:	ef 92       	push	r14
    1be4:	ff 92       	push	r15
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	7b 01       	movw	r14, r22
    1bec:	8c 01       	movw	r16, r24
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	e8 16       	cp	r14, r24
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	f8 06       	cpc	r15, r24
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	08 07       	cpc	r16, r24
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	18 07       	cpc	r17, r24
    1bfe:	58 f4       	brcc	.+22     	; 0x1c16 <__clzsi2+0x3c>
    1c00:	ef ef       	ldi	r30, 0xFF	; 255
    1c02:	ee 16       	cp	r14, r30
    1c04:	f1 04       	cpc	r15, r1
    1c06:	01 05       	cpc	r16, r1
    1c08:	11 05       	cpc	r17, r1
    1c0a:	09 f0       	breq	.+2      	; 0x1c0e <__clzsi2+0x34>
    1c0c:	90 f4       	brcc	.+36     	; 0x1c32 <__clzsi2+0x58>
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	dc 01       	movw	r26, r24
    1c14:	17 c0       	rjmp	.+46     	; 0x1c44 <__clzsi2+0x6a>
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	ef 16       	cp	r14, r31
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	ff 06       	cpc	r15, r31
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	0f 07       	cpc	r16, r31
    1c22:	f1 e0       	ldi	r31, 0x01	; 1
    1c24:	1f 07       	cpc	r17, r31
    1c26:	50 f4       	brcc	.+20     	; 0x1c3c <__clzsi2+0x62>
    1c28:	80 e1       	ldi	r24, 0x10	; 16
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a0 e0       	ldi	r26, 0x00	; 0
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	09 c0       	rjmp	.+18     	; 0x1c44 <__clzsi2+0x6a>
    1c32:	88 e0       	ldi	r24, 0x08	; 8
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	a0 e0       	ldi	r26, 0x00	; 0
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	04 c0       	rjmp	.+8      	; 0x1c44 <__clzsi2+0x6a>
    1c3c:	88 e1       	ldi	r24, 0x18	; 24
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	a0 e0       	ldi	r26, 0x00	; 0
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	20 e2       	ldi	r18, 0x20	; 32
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e0       	ldi	r20, 0x00	; 0
    1c4a:	50 e0       	ldi	r21, 0x00	; 0
    1c4c:	28 1b       	sub	r18, r24
    1c4e:	39 0b       	sbc	r19, r25
    1c50:	4a 0b       	sbc	r20, r26
    1c52:	5b 0b       	sbc	r21, r27
    1c54:	57 01       	movw	r10, r14
    1c56:	68 01       	movw	r12, r16
    1c58:	04 c0       	rjmp	.+8      	; 0x1c62 <__clzsi2+0x88>
    1c5a:	d6 94       	lsr	r13
    1c5c:	c7 94       	ror	r12
    1c5e:	b7 94       	ror	r11
    1c60:	a7 94       	ror	r10
    1c62:	8a 95       	dec	r24
    1c64:	d2 f7       	brpl	.-12     	; 0x1c5a <__clzsi2+0x80>
    1c66:	d6 01       	movw	r26, r12
    1c68:	c5 01       	movw	r24, r10
    1c6a:	85 5d       	subi	r24, 0xD5	; 213
    1c6c:	9e 4f       	sbci	r25, 0xFE	; 254
    1c6e:	fc 01       	movw	r30, r24
    1c70:	80 81       	ld	r24, Z
    1c72:	28 1b       	sub	r18, r24
    1c74:	31 09       	sbc	r19, r1
    1c76:	41 09       	sbc	r20, r1
    1c78:	51 09       	sbc	r21, r1
    1c7a:	c9 01       	movw	r24, r18
    1c7c:	1f 91       	pop	r17
    1c7e:	0f 91       	pop	r16
    1c80:	ff 90       	pop	r15
    1c82:	ef 90       	pop	r14
    1c84:	df 90       	pop	r13
    1c86:	cf 90       	pop	r12
    1c88:	bf 90       	pop	r11
    1c8a:	af 90       	pop	r10
    1c8c:	08 95       	ret

00001c8e <__pack_f>:
    1c8e:	ef 92       	push	r14
    1c90:	ff 92       	push	r15
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	24 81       	ldd	r18, Z+4	; 0x04
    1c9e:	35 81       	ldd	r19, Z+5	; 0x05
    1ca0:	46 81       	ldd	r20, Z+6	; 0x06
    1ca2:	57 81       	ldd	r21, Z+7	; 0x07
    1ca4:	61 81       	ldd	r22, Z+1	; 0x01
    1ca6:	80 81       	ld	r24, Z
    1ca8:	82 30       	cpi	r24, 0x02	; 2
    1caa:	20 f4       	brcc	.+8      	; 0x1cb4 <__pack_f+0x26>
    1cac:	40 61       	ori	r20, 0x10	; 16
    1cae:	ef ef       	ldi	r30, 0xFF	; 255
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	a3 c0       	rjmp	.+326    	; 0x1dfa <__pack_f+0x16c>
    1cb4:	84 30       	cpi	r24, 0x04	; 4
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <__pack_f+0x2c>
    1cb8:	9b c0       	rjmp	.+310    	; 0x1df0 <__pack_f+0x162>
    1cba:	82 30       	cpi	r24, 0x02	; 2
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <__pack_f+0x32>
    1cbe:	92 c0       	rjmp	.+292    	; 0x1de4 <__pack_f+0x156>
    1cc0:	21 15       	cp	r18, r1
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	41 05       	cpc	r20, r1
    1cc6:	51 05       	cpc	r21, r1
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <__pack_f+0x3e>
    1cca:	8f c0       	rjmp	.+286    	; 0x1dea <__pack_f+0x15c>
    1ccc:	02 80       	ldd	r0, Z+2	; 0x02
    1cce:	f3 81       	ldd	r31, Z+3	; 0x03
    1cd0:	e0 2d       	mov	r30, r0
    1cd2:	8f ef       	ldi	r24, 0xFF	; 255
    1cd4:	e2 38       	cpi	r30, 0x82	; 130
    1cd6:	f8 07       	cpc	r31, r24
    1cd8:	0c f0       	brlt	.+2      	; 0x1cdc <__pack_f+0x4e>
    1cda:	5a c0       	rjmp	.+180    	; 0x1d90 <__pack_f+0x102>
    1cdc:	c2 e8       	ldi	r28, 0x82	; 130
    1cde:	df ef       	ldi	r29, 0xFF	; 255
    1ce0:	ce 1b       	sub	r28, r30
    1ce2:	df 0b       	sbc	r29, r31
    1ce4:	ca 31       	cpi	r28, 0x1A	; 26
    1ce6:	d1 05       	cpc	r29, r1
    1ce8:	6c f5       	brge	.+90     	; 0x1d44 <__pack_f+0xb6>
    1cea:	79 01       	movw	r14, r18
    1cec:	8a 01       	movw	r16, r20
    1cee:	0c 2e       	mov	r0, r28
    1cf0:	04 c0       	rjmp	.+8      	; 0x1cfa <__pack_f+0x6c>
    1cf2:	16 95       	lsr	r17
    1cf4:	07 95       	ror	r16
    1cf6:	f7 94       	ror	r15
    1cf8:	e7 94       	ror	r14
    1cfa:	0a 94       	dec	r0
    1cfc:	d2 f7       	brpl	.-12     	; 0x1cf2 <__pack_f+0x64>
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	a0 e0       	ldi	r26, 0x00	; 0
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	0c 2e       	mov	r0, r28
    1d08:	04 c0       	rjmp	.+8      	; 0x1d12 <__pack_f+0x84>
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	aa 1f       	adc	r26, r26
    1d10:	bb 1f       	adc	r27, r27
    1d12:	0a 94       	dec	r0
    1d14:	d2 f7       	brpl	.-12     	; 0x1d0a <__pack_f+0x7c>
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	a1 09       	sbc	r26, r1
    1d1a:	b1 09       	sbc	r27, r1
    1d1c:	82 23       	and	r24, r18
    1d1e:	93 23       	and	r25, r19
    1d20:	a4 23       	and	r26, r20
    1d22:	b5 23       	and	r27, r21
    1d24:	21 e0       	ldi	r18, 0x01	; 1
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e0       	ldi	r20, 0x00	; 0
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	a1 05       	cpc	r26, r1
    1d30:	b1 05       	cpc	r27, r1
    1d32:	19 f4       	brne	.+6      	; 0x1d3a <__pack_f+0xac>
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	a9 01       	movw	r20, r18
    1d3a:	2e 29       	or	r18, r14
    1d3c:	3f 29       	or	r19, r15
    1d3e:	40 2b       	or	r20, r16
    1d40:	51 2b       	or	r21, r17
    1d42:	03 c0       	rjmp	.+6      	; 0x1d4a <__pack_f+0xbc>
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	a9 01       	movw	r20, r18
    1d4a:	da 01       	movw	r26, r20
    1d4c:	c9 01       	movw	r24, r18
    1d4e:	8f 77       	andi	r24, 0x7F	; 127
    1d50:	90 70       	andi	r25, 0x00	; 0
    1d52:	a0 70       	andi	r26, 0x00	; 0
    1d54:	b0 70       	andi	r27, 0x00	; 0
    1d56:	80 34       	cpi	r24, 0x40	; 64
    1d58:	91 05       	cpc	r25, r1
    1d5a:	a1 05       	cpc	r26, r1
    1d5c:	b1 05       	cpc	r27, r1
    1d5e:	39 f4       	brne	.+14     	; 0x1d6e <__pack_f+0xe0>
    1d60:	27 ff       	sbrs	r18, 7
    1d62:	09 c0       	rjmp	.+18     	; 0x1d76 <__pack_f+0xe8>
    1d64:	20 5c       	subi	r18, 0xC0	; 192
    1d66:	3f 4f       	sbci	r19, 0xFF	; 255
    1d68:	4f 4f       	sbci	r20, 0xFF	; 255
    1d6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d6c:	04 c0       	rjmp	.+8      	; 0x1d76 <__pack_f+0xe8>
    1d6e:	21 5c       	subi	r18, 0xC1	; 193
    1d70:	3f 4f       	sbci	r19, 0xFF	; 255
    1d72:	4f 4f       	sbci	r20, 0xFF	; 255
    1d74:	5f 4f       	sbci	r21, 0xFF	; 255
    1d76:	e1 e0       	ldi	r30, 0x01	; 1
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	20 30       	cpi	r18, 0x00	; 0
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	38 07       	cpc	r19, r24
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	48 07       	cpc	r20, r24
    1d84:	80 e4       	ldi	r24, 0x40	; 64
    1d86:	58 07       	cpc	r21, r24
    1d88:	28 f5       	brcc	.+74     	; 0x1dd4 <__pack_f+0x146>
    1d8a:	e0 e0       	ldi	r30, 0x00	; 0
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	22 c0       	rjmp	.+68     	; 0x1dd4 <__pack_f+0x146>
    1d90:	e0 38       	cpi	r30, 0x80	; 128
    1d92:	f1 05       	cpc	r31, r1
    1d94:	6c f5       	brge	.+90     	; 0x1df0 <__pack_f+0x162>
    1d96:	e1 58       	subi	r30, 0x81	; 129
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	da 01       	movw	r26, r20
    1d9c:	c9 01       	movw	r24, r18
    1d9e:	8f 77       	andi	r24, 0x7F	; 127
    1da0:	90 70       	andi	r25, 0x00	; 0
    1da2:	a0 70       	andi	r26, 0x00	; 0
    1da4:	b0 70       	andi	r27, 0x00	; 0
    1da6:	80 34       	cpi	r24, 0x40	; 64
    1da8:	91 05       	cpc	r25, r1
    1daa:	a1 05       	cpc	r26, r1
    1dac:	b1 05       	cpc	r27, r1
    1dae:	39 f4       	brne	.+14     	; 0x1dbe <__pack_f+0x130>
    1db0:	27 ff       	sbrs	r18, 7
    1db2:	09 c0       	rjmp	.+18     	; 0x1dc6 <__pack_f+0x138>
    1db4:	20 5c       	subi	r18, 0xC0	; 192
    1db6:	3f 4f       	sbci	r19, 0xFF	; 255
    1db8:	4f 4f       	sbci	r20, 0xFF	; 255
    1dba:	5f 4f       	sbci	r21, 0xFF	; 255
    1dbc:	04 c0       	rjmp	.+8      	; 0x1dc6 <__pack_f+0x138>
    1dbe:	21 5c       	subi	r18, 0xC1	; 193
    1dc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc2:	4f 4f       	sbci	r20, 0xFF	; 255
    1dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc6:	57 ff       	sbrs	r21, 7
    1dc8:	05 c0       	rjmp	.+10     	; 0x1dd4 <__pack_f+0x146>
    1dca:	56 95       	lsr	r21
    1dcc:	47 95       	ror	r20
    1dce:	37 95       	ror	r19
    1dd0:	27 95       	ror	r18
    1dd2:	31 96       	adiw	r30, 0x01	; 1
    1dd4:	87 e0       	ldi	r24, 0x07	; 7
    1dd6:	56 95       	lsr	r21
    1dd8:	47 95       	ror	r20
    1dda:	37 95       	ror	r19
    1ddc:	27 95       	ror	r18
    1dde:	8a 95       	dec	r24
    1de0:	d1 f7       	brne	.-12     	; 0x1dd6 <__pack_f+0x148>
    1de2:	0b c0       	rjmp	.+22     	; 0x1dfa <__pack_f+0x16c>
    1de4:	e0 e0       	ldi	r30, 0x00	; 0
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	05 c0       	rjmp	.+10     	; 0x1df4 <__pack_f+0x166>
    1dea:	e0 e0       	ldi	r30, 0x00	; 0
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	05 c0       	rjmp	.+10     	; 0x1dfa <__pack_f+0x16c>
    1df0:	ef ef       	ldi	r30, 0xFF	; 255
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	a9 01       	movw	r20, r18
    1dfa:	8e 2f       	mov	r24, r30
    1dfc:	87 95       	ror	r24
    1dfe:	88 27       	eor	r24, r24
    1e00:	87 95       	ror	r24
    1e02:	94 2f       	mov	r25, r20
    1e04:	9f 77       	andi	r25, 0x7F	; 127
    1e06:	67 95       	ror	r22
    1e08:	66 27       	eor	r22, r22
    1e0a:	67 95       	ror	r22
    1e0c:	e6 95       	lsr	r30
    1e0e:	e2 2e       	mov	r14, r18
    1e10:	a9 2f       	mov	r26, r25
    1e12:	a8 2b       	or	r26, r24
    1e14:	fe 2f       	mov	r31, r30
    1e16:	f6 2b       	or	r31, r22
    1e18:	62 2f       	mov	r22, r18
    1e1a:	73 2f       	mov	r23, r19
    1e1c:	8a 2f       	mov	r24, r26
    1e1e:	9f 2f       	mov	r25, r31
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	e6 e0       	ldi	r30, 0x06	; 6
    1e26:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__epilogue_restores__+0x18>

00001e2a <__unpack_f>:
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	fb 01       	movw	r30, r22
    1e2e:	2c 91       	ld	r18, X
    1e30:	11 96       	adiw	r26, 0x01	; 1
    1e32:	3c 91       	ld	r19, X
    1e34:	11 97       	sbiw	r26, 0x01	; 1
    1e36:	12 96       	adiw	r26, 0x02	; 2
    1e38:	8c 91       	ld	r24, X
    1e3a:	12 97       	sbiw	r26, 0x02	; 2
    1e3c:	48 2f       	mov	r20, r24
    1e3e:	4f 77       	andi	r20, 0x7F	; 127
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	98 2f       	mov	r25, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	99 27       	eor	r25, r25
    1e48:	99 1f       	adc	r25, r25
    1e4a:	13 96       	adiw	r26, 0x03	; 3
    1e4c:	6c 91       	ld	r22, X
    1e4e:	13 97       	sbiw	r26, 0x03	; 3
    1e50:	86 2f       	mov	r24, r22
    1e52:	88 0f       	add	r24, r24
    1e54:	89 2b       	or	r24, r25
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	66 1f       	adc	r22, r22
    1e5a:	66 27       	eor	r22, r22
    1e5c:	66 1f       	adc	r22, r22
    1e5e:	61 83       	std	Z+1, r22	; 0x01
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	39 f5       	brne	.+78     	; 0x1eb2 <__unpack_f+0x88>
    1e64:	21 15       	cp	r18, r1
    1e66:	31 05       	cpc	r19, r1
    1e68:	41 05       	cpc	r20, r1
    1e6a:	51 05       	cpc	r21, r1
    1e6c:	11 f4       	brne	.+4      	; 0x1e72 <__unpack_f+0x48>
    1e6e:	82 e0       	ldi	r24, 0x02	; 2
    1e70:	29 c0       	rjmp	.+82     	; 0x1ec4 <__unpack_f+0x9a>
    1e72:	82 e8       	ldi	r24, 0x82	; 130
    1e74:	9f ef       	ldi	r25, 0xFF	; 255
    1e76:	93 83       	std	Z+3, r25	; 0x03
    1e78:	82 83       	std	Z+2, r24	; 0x02
    1e7a:	67 e0       	ldi	r22, 0x07	; 7
    1e7c:	22 0f       	add	r18, r18
    1e7e:	33 1f       	adc	r19, r19
    1e80:	44 1f       	adc	r20, r20
    1e82:	55 1f       	adc	r21, r21
    1e84:	6a 95       	dec	r22
    1e86:	d1 f7       	brne	.-12     	; 0x1e7c <__unpack_f+0x52>
    1e88:	83 e0       	ldi	r24, 0x03	; 3
    1e8a:	80 83       	st	Z, r24
    1e8c:	09 c0       	rjmp	.+18     	; 0x1ea0 <__unpack_f+0x76>
    1e8e:	22 0f       	add	r18, r18
    1e90:	33 1f       	adc	r19, r19
    1e92:	44 1f       	adc	r20, r20
    1e94:	55 1f       	adc	r21, r21
    1e96:	82 81       	ldd	r24, Z+2	; 0x02
    1e98:	93 81       	ldd	r25, Z+3	; 0x03
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	93 83       	std	Z+3, r25	; 0x03
    1e9e:	82 83       	std	Z+2, r24	; 0x02
    1ea0:	20 30       	cpi	r18, 0x00	; 0
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	38 07       	cpc	r19, r24
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	48 07       	cpc	r20, r24
    1eaa:	80 e4       	ldi	r24, 0x40	; 64
    1eac:	58 07       	cpc	r21, r24
    1eae:	78 f3       	brcs	.-34     	; 0x1e8e <__unpack_f+0x64>
    1eb0:	20 c0       	rjmp	.+64     	; 0x1ef2 <__unpack_f+0xc8>
    1eb2:	8f 3f       	cpi	r24, 0xFF	; 255
    1eb4:	91 05       	cpc	r25, r1
    1eb6:	79 f4       	brne	.+30     	; 0x1ed6 <__unpack_f+0xac>
    1eb8:	21 15       	cp	r18, r1
    1eba:	31 05       	cpc	r19, r1
    1ebc:	41 05       	cpc	r20, r1
    1ebe:	51 05       	cpc	r21, r1
    1ec0:	19 f4       	brne	.+6      	; 0x1ec8 <__unpack_f+0x9e>
    1ec2:	84 e0       	ldi	r24, 0x04	; 4
    1ec4:	80 83       	st	Z, r24
    1ec6:	08 95       	ret
    1ec8:	44 ff       	sbrs	r20, 4
    1eca:	03 c0       	rjmp	.+6      	; 0x1ed2 <__unpack_f+0xa8>
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	80 83       	st	Z, r24
    1ed0:	10 c0       	rjmp	.+32     	; 0x1ef2 <__unpack_f+0xc8>
    1ed2:	10 82       	st	Z, r1
    1ed4:	0e c0       	rjmp	.+28     	; 0x1ef2 <__unpack_f+0xc8>
    1ed6:	8f 57       	subi	r24, 0x7F	; 127
    1ed8:	90 40       	sbci	r25, 0x00	; 0
    1eda:	93 83       	std	Z+3, r25	; 0x03
    1edc:	82 83       	std	Z+2, r24	; 0x02
    1ede:	83 e0       	ldi	r24, 0x03	; 3
    1ee0:	80 83       	st	Z, r24
    1ee2:	87 e0       	ldi	r24, 0x07	; 7
    1ee4:	22 0f       	add	r18, r18
    1ee6:	33 1f       	adc	r19, r19
    1ee8:	44 1f       	adc	r20, r20
    1eea:	55 1f       	adc	r21, r21
    1eec:	8a 95       	dec	r24
    1eee:	d1 f7       	brne	.-12     	; 0x1ee4 <__unpack_f+0xba>
    1ef0:	50 64       	ori	r21, 0x40	; 64
    1ef2:	24 83       	std	Z+4, r18	; 0x04
    1ef4:	35 83       	std	Z+5, r19	; 0x05
    1ef6:	46 83       	std	Z+6, r20	; 0x06
    1ef8:	57 83       	std	Z+7, r21	; 0x07
    1efa:	08 95       	ret

00001efc <__fpcmp_parts_f>:
    1efc:	fc 01       	movw	r30, r24
    1efe:	db 01       	movw	r26, r22
    1f00:	90 81       	ld	r25, Z
    1f02:	92 30       	cpi	r25, 0x02	; 2
    1f04:	08 f4       	brcc	.+2      	; 0x1f08 <__fpcmp_parts_f+0xc>
    1f06:	49 c0       	rjmp	.+146    	; 0x1f9a <__fpcmp_parts_f+0x9e>
    1f08:	8c 91       	ld	r24, X
    1f0a:	82 30       	cpi	r24, 0x02	; 2
    1f0c:	08 f4       	brcc	.+2      	; 0x1f10 <__fpcmp_parts_f+0x14>
    1f0e:	45 c0       	rjmp	.+138    	; 0x1f9a <__fpcmp_parts_f+0x9e>
    1f10:	94 30       	cpi	r25, 0x04	; 4
    1f12:	51 f4       	brne	.+20     	; 0x1f28 <__fpcmp_parts_f+0x2c>
    1f14:	61 81       	ldd	r22, Z+1	; 0x01
    1f16:	84 30       	cpi	r24, 0x04	; 4
    1f18:	b1 f5       	brne	.+108    	; 0x1f86 <__fpcmp_parts_f+0x8a>
    1f1a:	11 96       	adiw	r26, 0x01	; 1
    1f1c:	2c 91       	ld	r18, X
    1f1e:	11 97       	sbiw	r26, 0x01	; 1
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	26 1b       	sub	r18, r22
    1f24:	31 09       	sbc	r19, r1
    1f26:	41 c0       	rjmp	.+130    	; 0x1faa <__fpcmp_parts_f+0xae>
    1f28:	84 30       	cpi	r24, 0x04	; 4
    1f2a:	21 f0       	breq	.+8      	; 0x1f34 <__fpcmp_parts_f+0x38>
    1f2c:	92 30       	cpi	r25, 0x02	; 2
    1f2e:	41 f4       	brne	.+16     	; 0x1f40 <__fpcmp_parts_f+0x44>
    1f30:	82 30       	cpi	r24, 0x02	; 2
    1f32:	b1 f1       	breq	.+108    	; 0x1fa0 <__fpcmp_parts_f+0xa4>
    1f34:	11 96       	adiw	r26, 0x01	; 1
    1f36:	8c 91       	ld	r24, X
    1f38:	11 97       	sbiw	r26, 0x01	; 1
    1f3a:	88 23       	and	r24, r24
    1f3c:	a1 f1       	breq	.+104    	; 0x1fa6 <__fpcmp_parts_f+0xaa>
    1f3e:	2d c0       	rjmp	.+90     	; 0x1f9a <__fpcmp_parts_f+0x9e>
    1f40:	61 81       	ldd	r22, Z+1	; 0x01
    1f42:	82 30       	cpi	r24, 0x02	; 2
    1f44:	01 f1       	breq	.+64     	; 0x1f86 <__fpcmp_parts_f+0x8a>
    1f46:	11 96       	adiw	r26, 0x01	; 1
    1f48:	8c 91       	ld	r24, X
    1f4a:	11 97       	sbiw	r26, 0x01	; 1
    1f4c:	68 17       	cp	r22, r24
    1f4e:	d9 f4       	brne	.+54     	; 0x1f86 <__fpcmp_parts_f+0x8a>
    1f50:	22 81       	ldd	r18, Z+2	; 0x02
    1f52:	33 81       	ldd	r19, Z+3	; 0x03
    1f54:	12 96       	adiw	r26, 0x02	; 2
    1f56:	8d 91       	ld	r24, X+
    1f58:	9c 91       	ld	r25, X
    1f5a:	13 97       	sbiw	r26, 0x03	; 3
    1f5c:	82 17       	cp	r24, r18
    1f5e:	93 07       	cpc	r25, r19
    1f60:	94 f0       	brlt	.+36     	; 0x1f86 <__fpcmp_parts_f+0x8a>
    1f62:	28 17       	cp	r18, r24
    1f64:	39 07       	cpc	r19, r25
    1f66:	bc f0       	brlt	.+46     	; 0x1f96 <__fpcmp_parts_f+0x9a>
    1f68:	24 81       	ldd	r18, Z+4	; 0x04
    1f6a:	35 81       	ldd	r19, Z+5	; 0x05
    1f6c:	46 81       	ldd	r20, Z+6	; 0x06
    1f6e:	57 81       	ldd	r21, Z+7	; 0x07
    1f70:	14 96       	adiw	r26, 0x04	; 4
    1f72:	8d 91       	ld	r24, X+
    1f74:	9d 91       	ld	r25, X+
    1f76:	0d 90       	ld	r0, X+
    1f78:	bc 91       	ld	r27, X
    1f7a:	a0 2d       	mov	r26, r0
    1f7c:	82 17       	cp	r24, r18
    1f7e:	93 07       	cpc	r25, r19
    1f80:	a4 07       	cpc	r26, r20
    1f82:	b5 07       	cpc	r27, r21
    1f84:	18 f4       	brcc	.+6      	; 0x1f8c <__fpcmp_parts_f+0x90>
    1f86:	66 23       	and	r22, r22
    1f88:	41 f0       	breq	.+16     	; 0x1f9a <__fpcmp_parts_f+0x9e>
    1f8a:	0d c0       	rjmp	.+26     	; 0x1fa6 <__fpcmp_parts_f+0xaa>
    1f8c:	28 17       	cp	r18, r24
    1f8e:	39 07       	cpc	r19, r25
    1f90:	4a 07       	cpc	r20, r26
    1f92:	5b 07       	cpc	r21, r27
    1f94:	28 f4       	brcc	.+10     	; 0x1fa0 <__fpcmp_parts_f+0xa4>
    1f96:	66 23       	and	r22, r22
    1f98:	31 f0       	breq	.+12     	; 0x1fa6 <__fpcmp_parts_f+0xaa>
    1f9a:	21 e0       	ldi	r18, 0x01	; 1
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	05 c0       	rjmp	.+10     	; 0x1faa <__fpcmp_parts_f+0xae>
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <__fpcmp_parts_f+0xae>
    1fa6:	2f ef       	ldi	r18, 0xFF	; 255
    1fa8:	3f ef       	ldi	r19, 0xFF	; 255
    1faa:	c9 01       	movw	r24, r18
    1fac:	08 95       	ret

00001fae <__udivmodqi4>:
    1fae:	99 1b       	sub	r25, r25
    1fb0:	79 e0       	ldi	r23, 0x09	; 9
    1fb2:	04 c0       	rjmp	.+8      	; 0x1fbc <__udivmodqi4_ep>

00001fb4 <__udivmodqi4_loop>:
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	96 17       	cp	r25, r22
    1fb8:	08 f0       	brcs	.+2      	; 0x1fbc <__udivmodqi4_ep>
    1fba:	96 1b       	sub	r25, r22

00001fbc <__udivmodqi4_ep>:
    1fbc:	88 1f       	adc	r24, r24
    1fbe:	7a 95       	dec	r23
    1fc0:	c9 f7       	brne	.-14     	; 0x1fb4 <__udivmodqi4_loop>
    1fc2:	80 95       	com	r24
    1fc4:	08 95       	ret

00001fc6 <__prologue_saves__>:
    1fc6:	2f 92       	push	r2
    1fc8:	3f 92       	push	r3
    1fca:	4f 92       	push	r4
    1fcc:	5f 92       	push	r5
    1fce:	6f 92       	push	r6
    1fd0:	7f 92       	push	r7
    1fd2:	8f 92       	push	r8
    1fd4:	9f 92       	push	r9
    1fd6:	af 92       	push	r10
    1fd8:	bf 92       	push	r11
    1fda:	cf 92       	push	r12
    1fdc:	df 92       	push	r13
    1fde:	ef 92       	push	r14
    1fe0:	ff 92       	push	r15
    1fe2:	0f 93       	push	r16
    1fe4:	1f 93       	push	r17
    1fe6:	cf 93       	push	r28
    1fe8:	df 93       	push	r29
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	ca 1b       	sub	r28, r26
    1ff0:	db 0b       	sbc	r29, r27
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	de bf       	out	0x3e, r29	; 62
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	cd bf       	out	0x3d, r28	; 61
    1ffc:	09 94       	ijmp

00001ffe <__epilogue_restores__>:
    1ffe:	2a 88       	ldd	r2, Y+18	; 0x12
    2000:	39 88       	ldd	r3, Y+17	; 0x11
    2002:	48 88       	ldd	r4, Y+16	; 0x10
    2004:	5f 84       	ldd	r5, Y+15	; 0x0f
    2006:	6e 84       	ldd	r6, Y+14	; 0x0e
    2008:	7d 84       	ldd	r7, Y+13	; 0x0d
    200a:	8c 84       	ldd	r8, Y+12	; 0x0c
    200c:	9b 84       	ldd	r9, Y+11	; 0x0b
    200e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2010:	b9 84       	ldd	r11, Y+9	; 0x09
    2012:	c8 84       	ldd	r12, Y+8	; 0x08
    2014:	df 80       	ldd	r13, Y+7	; 0x07
    2016:	ee 80       	ldd	r14, Y+6	; 0x06
    2018:	fd 80       	ldd	r15, Y+5	; 0x05
    201a:	0c 81       	ldd	r16, Y+4	; 0x04
    201c:	1b 81       	ldd	r17, Y+3	; 0x03
    201e:	aa 81       	ldd	r26, Y+2	; 0x02
    2020:	b9 81       	ldd	r27, Y+1	; 0x01
    2022:	ce 0f       	add	r28, r30
    2024:	d1 1d       	adc	r29, r1
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	ed 01       	movw	r28, r26
    2032:	08 95       	ret

00002034 <cos>:
    2034:	03 d0       	rcall	.+6      	; 0x203c <__fp_rempio2>
    2036:	e3 95       	inc	r30
    2038:	28 c0       	rjmp	.+80     	; 0x208a <__fp_sinus>
    203a:	ce c0       	rjmp	.+412    	; 0x21d8 <__fp_nan>

0000203c <__fp_rempio2>:
    203c:	3f d0       	rcall	.+126    	; 0x20bc <__fp_splitA>
    203e:	e8 f3       	brcs	.-6      	; 0x203a <cos+0x6>
    2040:	e8 94       	clt
    2042:	e0 e0       	ldi	r30, 0x00	; 0
    2044:	bb 27       	eor	r27, r27
    2046:	9f 57       	subi	r25, 0x7F	; 127
    2048:	f0 f0       	brcs	.+60     	; 0x2086 <__fp_rempio2+0x4a>
    204a:	2a ed       	ldi	r18, 0xDA	; 218
    204c:	3f e0       	ldi	r19, 0x0F	; 15
    204e:	49 ec       	ldi	r20, 0xC9	; 201
    2050:	06 c0       	rjmp	.+12     	; 0x205e <__fp_rempio2+0x22>
    2052:	ee 0f       	add	r30, r30
    2054:	bb 0f       	add	r27, r27
    2056:	66 1f       	adc	r22, r22
    2058:	77 1f       	adc	r23, r23
    205a:	88 1f       	adc	r24, r24
    205c:	28 f0       	brcs	.+10     	; 0x2068 <__fp_rempio2+0x2c>
    205e:	b2 3a       	cpi	r27, 0xA2	; 162
    2060:	62 07       	cpc	r22, r18
    2062:	73 07       	cpc	r23, r19
    2064:	84 07       	cpc	r24, r20
    2066:	28 f0       	brcs	.+10     	; 0x2072 <__fp_rempio2+0x36>
    2068:	b2 5a       	subi	r27, 0xA2	; 162
    206a:	62 0b       	sbc	r22, r18
    206c:	73 0b       	sbc	r23, r19
    206e:	84 0b       	sbc	r24, r20
    2070:	e3 95       	inc	r30
    2072:	9a 95       	dec	r25
    2074:	72 f7       	brpl	.-36     	; 0x2052 <__fp_rempio2+0x16>
    2076:	80 38       	cpi	r24, 0x80	; 128
    2078:	30 f4       	brcc	.+12     	; 0x2086 <__fp_rempio2+0x4a>
    207a:	9a 95       	dec	r25
    207c:	bb 0f       	add	r27, r27
    207e:	66 1f       	adc	r22, r22
    2080:	77 1f       	adc	r23, r23
    2082:	88 1f       	adc	r24, r24
    2084:	d2 f7       	brpl	.-12     	; 0x207a <__fp_rempio2+0x3e>
    2086:	90 48       	sbci	r25, 0x80	; 128
    2088:	9b c0       	rjmp	.+310    	; 0x21c0 <__fp_mpack_finite>

0000208a <__fp_sinus>:
    208a:	ef 93       	push	r30
    208c:	e0 ff       	sbrs	r30, 0
    208e:	06 c0       	rjmp	.+12     	; 0x209c <__fp_sinus+0x12>
    2090:	a2 ea       	ldi	r26, 0xA2	; 162
    2092:	2a ed       	ldi	r18, 0xDA	; 218
    2094:	3f e0       	ldi	r19, 0x0F	; 15
    2096:	49 ec       	ldi	r20, 0xC9	; 201
    2098:	5f eb       	ldi	r21, 0xBF	; 191
    209a:	37 d0       	rcall	.+110    	; 0x210a <__addsf3x>
    209c:	bf d0       	rcall	.+382    	; 0x221c <__fp_round>
    209e:	0f 90       	pop	r0
    20a0:	03 94       	inc	r0
    20a2:	01 fc       	sbrc	r0, 1
    20a4:	90 58       	subi	r25, 0x80	; 128
    20a6:	ec e8       	ldi	r30, 0x8C	; 140
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	99 c0       	rjmp	.+306    	; 0x21de <__fp_powsodd>

000020ac <__fp_split3>:
    20ac:	57 fd       	sbrc	r21, 7
    20ae:	90 58       	subi	r25, 0x80	; 128
    20b0:	44 0f       	add	r20, r20
    20b2:	55 1f       	adc	r21, r21
    20b4:	59 f0       	breq	.+22     	; 0x20cc <__fp_splitA+0x10>
    20b6:	5f 3f       	cpi	r21, 0xFF	; 255
    20b8:	71 f0       	breq	.+28     	; 0x20d6 <__fp_splitA+0x1a>
    20ba:	47 95       	ror	r20

000020bc <__fp_splitA>:
    20bc:	88 0f       	add	r24, r24
    20be:	97 fb       	bst	r25, 7
    20c0:	99 1f       	adc	r25, r25
    20c2:	61 f0       	breq	.+24     	; 0x20dc <__fp_splitA+0x20>
    20c4:	9f 3f       	cpi	r25, 0xFF	; 255
    20c6:	79 f0       	breq	.+30     	; 0x20e6 <__fp_splitA+0x2a>
    20c8:	87 95       	ror	r24
    20ca:	08 95       	ret
    20cc:	12 16       	cp	r1, r18
    20ce:	13 06       	cpc	r1, r19
    20d0:	14 06       	cpc	r1, r20
    20d2:	55 1f       	adc	r21, r21
    20d4:	f2 cf       	rjmp	.-28     	; 0x20ba <__fp_split3+0xe>
    20d6:	46 95       	lsr	r20
    20d8:	f1 df       	rcall	.-30     	; 0x20bc <__fp_splitA>
    20da:	08 c0       	rjmp	.+16     	; 0x20ec <__fp_splitA+0x30>
    20dc:	16 16       	cp	r1, r22
    20de:	17 06       	cpc	r1, r23
    20e0:	18 06       	cpc	r1, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	f1 cf       	rjmp	.-30     	; 0x20c8 <__fp_splitA+0xc>
    20e6:	86 95       	lsr	r24
    20e8:	71 05       	cpc	r23, r1
    20ea:	61 05       	cpc	r22, r1
    20ec:	08 94       	sec
    20ee:	08 95       	ret
    20f0:	87 d0       	rcall	.+270    	; 0x2200 <__fp_pscA>
    20f2:	30 f0       	brcs	.+12     	; 0x2100 <__fp_splitA+0x44>
    20f4:	8c d0       	rcall	.+280    	; 0x220e <__fp_pscB>
    20f6:	20 f0       	brcs	.+8      	; 0x2100 <__fp_splitA+0x44>
    20f8:	31 f4       	brne	.+12     	; 0x2106 <__fp_splitA+0x4a>
    20fa:	9f 3f       	cpi	r25, 0xFF	; 255
    20fc:	11 f4       	brne	.+4      	; 0x2102 <__fp_splitA+0x46>
    20fe:	1e f4       	brtc	.+6      	; 0x2106 <__fp_splitA+0x4a>
    2100:	6b c0       	rjmp	.+214    	; 0x21d8 <__fp_nan>
    2102:	0e f4       	brtc	.+2      	; 0x2106 <__fp_splitA+0x4a>
    2104:	e0 95       	com	r30
    2106:	e7 fb       	bst	r30, 7
    2108:	53 c0       	rjmp	.+166    	; 0x21b0 <__fp_inf>

0000210a <__addsf3x>:
    210a:	e9 2f       	mov	r30, r25
    210c:	cf df       	rcall	.-98     	; 0x20ac <__fp_split3>
    210e:	80 f3       	brcs	.-32     	; 0x20f0 <__fp_splitA+0x34>
    2110:	ba 17       	cp	r27, r26
    2112:	62 07       	cpc	r22, r18
    2114:	73 07       	cpc	r23, r19
    2116:	84 07       	cpc	r24, r20
    2118:	95 07       	cpc	r25, r21
    211a:	18 f0       	brcs	.+6      	; 0x2122 <__addsf3x+0x18>
    211c:	71 f4       	brne	.+28     	; 0x213a <__addsf3x+0x30>
    211e:	9e f5       	brtc	.+102    	; 0x2186 <__addsf3x+0x7c>
    2120:	8e c0       	rjmp	.+284    	; 0x223e <__fp_zero>
    2122:	0e f4       	brtc	.+2      	; 0x2126 <__addsf3x+0x1c>
    2124:	e0 95       	com	r30
    2126:	0b 2e       	mov	r0, r27
    2128:	ba 2f       	mov	r27, r26
    212a:	a0 2d       	mov	r26, r0
    212c:	0b 01       	movw	r0, r22
    212e:	b9 01       	movw	r22, r18
    2130:	90 01       	movw	r18, r0
    2132:	0c 01       	movw	r0, r24
    2134:	ca 01       	movw	r24, r20
    2136:	a0 01       	movw	r20, r0
    2138:	11 24       	eor	r1, r1
    213a:	ff 27       	eor	r31, r31
    213c:	59 1b       	sub	r21, r25
    213e:	99 f0       	breq	.+38     	; 0x2166 <__addsf3x+0x5c>
    2140:	59 3f       	cpi	r21, 0xF9	; 249
    2142:	50 f4       	brcc	.+20     	; 0x2158 <__addsf3x+0x4e>
    2144:	50 3e       	cpi	r21, 0xE0	; 224
    2146:	68 f1       	brcs	.+90     	; 0x21a2 <__addsf3x+0x98>
    2148:	1a 16       	cp	r1, r26
    214a:	f0 40       	sbci	r31, 0x00	; 0
    214c:	a2 2f       	mov	r26, r18
    214e:	23 2f       	mov	r18, r19
    2150:	34 2f       	mov	r19, r20
    2152:	44 27       	eor	r20, r20
    2154:	58 5f       	subi	r21, 0xF8	; 248
    2156:	f3 cf       	rjmp	.-26     	; 0x213e <__addsf3x+0x34>
    2158:	46 95       	lsr	r20
    215a:	37 95       	ror	r19
    215c:	27 95       	ror	r18
    215e:	a7 95       	ror	r26
    2160:	f0 40       	sbci	r31, 0x00	; 0
    2162:	53 95       	inc	r21
    2164:	c9 f7       	brne	.-14     	; 0x2158 <__addsf3x+0x4e>
    2166:	7e f4       	brtc	.+30     	; 0x2186 <__addsf3x+0x7c>
    2168:	1f 16       	cp	r1, r31
    216a:	ba 0b       	sbc	r27, r26
    216c:	62 0b       	sbc	r22, r18
    216e:	73 0b       	sbc	r23, r19
    2170:	84 0b       	sbc	r24, r20
    2172:	ba f0       	brmi	.+46     	; 0x21a2 <__addsf3x+0x98>
    2174:	91 50       	subi	r25, 0x01	; 1
    2176:	a1 f0       	breq	.+40     	; 0x21a0 <__addsf3x+0x96>
    2178:	ff 0f       	add	r31, r31
    217a:	bb 1f       	adc	r27, r27
    217c:	66 1f       	adc	r22, r22
    217e:	77 1f       	adc	r23, r23
    2180:	88 1f       	adc	r24, r24
    2182:	c2 f7       	brpl	.-16     	; 0x2174 <__addsf3x+0x6a>
    2184:	0e c0       	rjmp	.+28     	; 0x21a2 <__addsf3x+0x98>
    2186:	ba 0f       	add	r27, r26
    2188:	62 1f       	adc	r22, r18
    218a:	73 1f       	adc	r23, r19
    218c:	84 1f       	adc	r24, r20
    218e:	48 f4       	brcc	.+18     	; 0x21a2 <__addsf3x+0x98>
    2190:	87 95       	ror	r24
    2192:	77 95       	ror	r23
    2194:	67 95       	ror	r22
    2196:	b7 95       	ror	r27
    2198:	f7 95       	ror	r31
    219a:	9e 3f       	cpi	r25, 0xFE	; 254
    219c:	08 f0       	brcs	.+2      	; 0x21a0 <__addsf3x+0x96>
    219e:	b3 cf       	rjmp	.-154    	; 0x2106 <__fp_splitA+0x4a>
    21a0:	93 95       	inc	r25
    21a2:	88 0f       	add	r24, r24
    21a4:	08 f0       	brcs	.+2      	; 0x21a8 <__addsf3x+0x9e>
    21a6:	99 27       	eor	r25, r25
    21a8:	ee 0f       	add	r30, r30
    21aa:	97 95       	ror	r25
    21ac:	87 95       	ror	r24
    21ae:	08 95       	ret

000021b0 <__fp_inf>:
    21b0:	97 f9       	bld	r25, 7
    21b2:	9f 67       	ori	r25, 0x7F	; 127
    21b4:	80 e8       	ldi	r24, 0x80	; 128
    21b6:	70 e0       	ldi	r23, 0x00	; 0
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	08 95       	ret

000021bc <__fp_mpack>:
    21bc:	9f 3f       	cpi	r25, 0xFF	; 255
    21be:	31 f0       	breq	.+12     	; 0x21cc <__fp_mpack_finite+0xc>

000021c0 <__fp_mpack_finite>:
    21c0:	91 50       	subi	r25, 0x01	; 1
    21c2:	20 f4       	brcc	.+8      	; 0x21cc <__fp_mpack_finite+0xc>
    21c4:	87 95       	ror	r24
    21c6:	77 95       	ror	r23
    21c8:	67 95       	ror	r22
    21ca:	b7 95       	ror	r27
    21cc:	88 0f       	add	r24, r24
    21ce:	91 1d       	adc	r25, r1
    21d0:	96 95       	lsr	r25
    21d2:	87 95       	ror	r24
    21d4:	97 f9       	bld	r25, 7
    21d6:	08 95       	ret

000021d8 <__fp_nan>:
    21d8:	9f ef       	ldi	r25, 0xFF	; 255
    21da:	80 ec       	ldi	r24, 0xC0	; 192
    21dc:	08 95       	ret

000021de <__fp_powsodd>:
    21de:	9f 93       	push	r25
    21e0:	8f 93       	push	r24
    21e2:	7f 93       	push	r23
    21e4:	6f 93       	push	r22
    21e6:	ff 93       	push	r31
    21e8:	ef 93       	push	r30
    21ea:	9b 01       	movw	r18, r22
    21ec:	ac 01       	movw	r20, r24
    21ee:	e9 da       	rcall	.-2606   	; 0x17c2 <__mulsf3>
    21f0:	ef 91       	pop	r30
    21f2:	ff 91       	pop	r31
    21f4:	2b d0       	rcall	.+86     	; 0x224c <__fp_powser>
    21f6:	2f 91       	pop	r18
    21f8:	3f 91       	pop	r19
    21fa:	4f 91       	pop	r20
    21fc:	5f 91       	pop	r21
    21fe:	e1 ca       	rjmp	.-2622   	; 0x17c2 <__mulsf3>

00002200 <__fp_pscA>:
    2200:	00 24       	eor	r0, r0
    2202:	0a 94       	dec	r0
    2204:	16 16       	cp	r1, r22
    2206:	17 06       	cpc	r1, r23
    2208:	18 06       	cpc	r1, r24
    220a:	09 06       	cpc	r0, r25
    220c:	08 95       	ret

0000220e <__fp_pscB>:
    220e:	00 24       	eor	r0, r0
    2210:	0a 94       	dec	r0
    2212:	12 16       	cp	r1, r18
    2214:	13 06       	cpc	r1, r19
    2216:	14 06       	cpc	r1, r20
    2218:	05 06       	cpc	r0, r21
    221a:	08 95       	ret

0000221c <__fp_round>:
    221c:	09 2e       	mov	r0, r25
    221e:	03 94       	inc	r0
    2220:	00 0c       	add	r0, r0
    2222:	11 f4       	brne	.+4      	; 0x2228 <__fp_round+0xc>
    2224:	88 23       	and	r24, r24
    2226:	52 f0       	brmi	.+20     	; 0x223c <__fp_round+0x20>
    2228:	bb 0f       	add	r27, r27
    222a:	40 f4       	brcc	.+16     	; 0x223c <__fp_round+0x20>
    222c:	bf 2b       	or	r27, r31
    222e:	11 f4       	brne	.+4      	; 0x2234 <__fp_round+0x18>
    2230:	60 ff       	sbrs	r22, 0
    2232:	04 c0       	rjmp	.+8      	; 0x223c <__fp_round+0x20>
    2234:	6f 5f       	subi	r22, 0xFF	; 255
    2236:	7f 4f       	sbci	r23, 0xFF	; 255
    2238:	8f 4f       	sbci	r24, 0xFF	; 255
    223a:	9f 4f       	sbci	r25, 0xFF	; 255
    223c:	08 95       	ret

0000223e <__fp_zero>:
    223e:	e8 94       	clt

00002240 <__fp_szero>:
    2240:	bb 27       	eor	r27, r27
    2242:	66 27       	eor	r22, r22
    2244:	77 27       	eor	r23, r23
    2246:	cb 01       	movw	r24, r22
    2248:	97 f9       	bld	r25, 7
    224a:	08 95       	ret

0000224c <__fp_powser>:
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	1f 93       	push	r17
    2252:	0f 93       	push	r16
    2254:	ff 92       	push	r15
    2256:	ef 92       	push	r14
    2258:	df 92       	push	r13
    225a:	7b 01       	movw	r14, r22
    225c:	8c 01       	movw	r16, r24
    225e:	68 94       	set
    2260:	05 c0       	rjmp	.+10     	; 0x226c <__fp_powser+0x20>
    2262:	da 2e       	mov	r13, r26
    2264:	ef 01       	movw	r28, r30
    2266:	21 d0       	rcall	.+66     	; 0x22aa <__mulsf3x>
    2268:	fe 01       	movw	r30, r28
    226a:	e8 94       	clt
    226c:	a5 91       	lpm	r26, Z+
    226e:	25 91       	lpm	r18, Z+
    2270:	35 91       	lpm	r19, Z+
    2272:	45 91       	lpm	r20, Z+
    2274:	55 91       	lpm	r21, Z+
    2276:	ae f3       	brts	.-22     	; 0x2262 <__fp_powser+0x16>
    2278:	ef 01       	movw	r28, r30
    227a:	47 df       	rcall	.-370    	; 0x210a <__addsf3x>
    227c:	fe 01       	movw	r30, r28
    227e:	97 01       	movw	r18, r14
    2280:	a8 01       	movw	r20, r16
    2282:	da 94       	dec	r13
    2284:	79 f7       	brne	.-34     	; 0x2264 <__fp_powser+0x18>
    2286:	df 90       	pop	r13
    2288:	ef 90       	pop	r14
    228a:	ff 90       	pop	r15
    228c:	0f 91       	pop	r16
    228e:	1f 91       	pop	r17
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret
    2296:	b4 df       	rcall	.-152    	; 0x2200 <__fp_pscA>
    2298:	28 f0       	brcs	.+10     	; 0x22a4 <__fp_powser+0x58>
    229a:	b9 df       	rcall	.-142    	; 0x220e <__fp_pscB>
    229c:	18 f0       	brcs	.+6      	; 0x22a4 <__fp_powser+0x58>
    229e:	95 23       	and	r25, r21
    22a0:	09 f0       	breq	.+2      	; 0x22a4 <__fp_powser+0x58>
    22a2:	86 cf       	rjmp	.-244    	; 0x21b0 <__fp_inf>
    22a4:	99 cf       	rjmp	.-206    	; 0x21d8 <__fp_nan>
    22a6:	11 24       	eor	r1, r1
    22a8:	cb cf       	rjmp	.-106    	; 0x2240 <__fp_szero>

000022aa <__mulsf3x>:
    22aa:	00 df       	rcall	.-512    	; 0x20ac <__fp_split3>
    22ac:	a0 f3       	brcs	.-24     	; 0x2296 <__fp_powser+0x4a>

000022ae <__mulsf3_pse>:
    22ae:	95 9f       	mul	r25, r21
    22b0:	d1 f3       	breq	.-12     	; 0x22a6 <__fp_powser+0x5a>
    22b2:	95 0f       	add	r25, r21
    22b4:	50 e0       	ldi	r21, 0x00	; 0
    22b6:	55 1f       	adc	r21, r21
    22b8:	62 9f       	mul	r22, r18
    22ba:	f0 01       	movw	r30, r0
    22bc:	72 9f       	mul	r23, r18
    22be:	bb 27       	eor	r27, r27
    22c0:	f0 0d       	add	r31, r0
    22c2:	b1 1d       	adc	r27, r1
    22c4:	63 9f       	mul	r22, r19
    22c6:	aa 27       	eor	r26, r26
    22c8:	f0 0d       	add	r31, r0
    22ca:	b1 1d       	adc	r27, r1
    22cc:	aa 1f       	adc	r26, r26
    22ce:	64 9f       	mul	r22, r20
    22d0:	66 27       	eor	r22, r22
    22d2:	b0 0d       	add	r27, r0
    22d4:	a1 1d       	adc	r26, r1
    22d6:	66 1f       	adc	r22, r22
    22d8:	82 9f       	mul	r24, r18
    22da:	22 27       	eor	r18, r18
    22dc:	b0 0d       	add	r27, r0
    22de:	a1 1d       	adc	r26, r1
    22e0:	62 1f       	adc	r22, r18
    22e2:	73 9f       	mul	r23, r19
    22e4:	b0 0d       	add	r27, r0
    22e6:	a1 1d       	adc	r26, r1
    22e8:	62 1f       	adc	r22, r18
    22ea:	83 9f       	mul	r24, r19
    22ec:	a0 0d       	add	r26, r0
    22ee:	61 1d       	adc	r22, r1
    22f0:	22 1f       	adc	r18, r18
    22f2:	74 9f       	mul	r23, r20
    22f4:	33 27       	eor	r19, r19
    22f6:	a0 0d       	add	r26, r0
    22f8:	61 1d       	adc	r22, r1
    22fa:	23 1f       	adc	r18, r19
    22fc:	84 9f       	mul	r24, r20
    22fe:	60 0d       	add	r22, r0
    2300:	21 1d       	adc	r18, r1
    2302:	82 2f       	mov	r24, r18
    2304:	76 2f       	mov	r23, r22
    2306:	6a 2f       	mov	r22, r26
    2308:	11 24       	eor	r1, r1
    230a:	9f 57       	subi	r25, 0x7F	; 127
    230c:	50 40       	sbci	r21, 0x00	; 0
    230e:	8a f0       	brmi	.+34     	; 0x2332 <__mulsf3_pse+0x84>
    2310:	e1 f0       	breq	.+56     	; 0x234a <__mulsf3_pse+0x9c>
    2312:	88 23       	and	r24, r24
    2314:	4a f0       	brmi	.+18     	; 0x2328 <__mulsf3_pse+0x7a>
    2316:	ee 0f       	add	r30, r30
    2318:	ff 1f       	adc	r31, r31
    231a:	bb 1f       	adc	r27, r27
    231c:	66 1f       	adc	r22, r22
    231e:	77 1f       	adc	r23, r23
    2320:	88 1f       	adc	r24, r24
    2322:	91 50       	subi	r25, 0x01	; 1
    2324:	50 40       	sbci	r21, 0x00	; 0
    2326:	a9 f7       	brne	.-22     	; 0x2312 <__mulsf3_pse+0x64>
    2328:	9e 3f       	cpi	r25, 0xFE	; 254
    232a:	51 05       	cpc	r21, r1
    232c:	70 f0       	brcs	.+28     	; 0x234a <__mulsf3_pse+0x9c>
    232e:	40 cf       	rjmp	.-384    	; 0x21b0 <__fp_inf>
    2330:	87 cf       	rjmp	.-242    	; 0x2240 <__fp_szero>
    2332:	5f 3f       	cpi	r21, 0xFF	; 255
    2334:	ec f3       	brlt	.-6      	; 0x2330 <__mulsf3_pse+0x82>
    2336:	98 3e       	cpi	r25, 0xE8	; 232
    2338:	dc f3       	brlt	.-10     	; 0x2330 <__mulsf3_pse+0x82>
    233a:	86 95       	lsr	r24
    233c:	77 95       	ror	r23
    233e:	67 95       	ror	r22
    2340:	b7 95       	ror	r27
    2342:	f7 95       	ror	r31
    2344:	e7 95       	ror	r30
    2346:	9f 5f       	subi	r25, 0xFF	; 255
    2348:	c1 f7       	brne	.-16     	; 0x233a <__mulsf3_pse+0x8c>
    234a:	fe 2b       	or	r31, r30
    234c:	88 0f       	add	r24, r24
    234e:	91 1d       	adc	r25, r1
    2350:	96 95       	lsr	r25
    2352:	87 95       	ror	r24
    2354:	97 f9       	bld	r25, 7
    2356:	08 95       	ret

00002358 <_exit>:
    2358:	f8 94       	cli

0000235a <__stop_program>:
    235a:	ff cf       	rjmp	.-2      	; 0x235a <__stop_program>
