
180117.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800100  000036f6  0000378a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000036f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fa  00800234  00800234  000038be  2**0
                  ALLOC
  3 .stab         00001cc8  00000000  00000000  000038c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000064a  00000000  00000000  00005588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00005bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000065f  00000000  00000000  00005e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003ce1  00000000  00000000  00006471  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001b75  00000000  00000000  0000a152  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002fe4  00000000  00000000  0000bcc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000510  00000000  00000000  0000ecac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007ef  00000000  00000000  0000f1bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002219  00000000  00000000  0000f9ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000007fb  00000000  00000000  00011bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000078  00000000  00000000  000123bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 82 0d 	jmp	0x1b04	; 0x1b04 <__vector_14>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__vector_18>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_30>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <Holonomic_distance+0x140>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d0 e1       	ldi	r29, 0x10	; 16
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	12 e0       	ldi	r17, 0x02	; 2
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	e6 ef       	ldi	r30, 0xF6	; 246
      be:	f6 e3       	ldi	r31, 0x36	; 54
      c0:	00 e0       	ldi	r16, 0x00	; 0
      c2:	0b bf       	out	0x3b, r16	; 59
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
      c6:	07 90       	elpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a4 33       	cpi	r26, 0x34	; 52
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
      d0:	13 e0       	ldi	r17, 0x03	; 3
      d2:	a4 e3       	ldi	r26, 0x34	; 52
      d4:	b2 e0       	ldi	r27, 0x02	; 2
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	ae 32       	cpi	r26, 0x2E	; 46
      dc:	b1 07       	cpc	r27, r17
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	0e 94 4f 0b 	call	0x169e	; 0x169e <main>
      e4:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <MCU_init>:
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART1 Receiver: On
	// USART1 Transmitter: On
	// USART1 Mode: Asynchronous
	// USART1 Baud Rate: 9600
	UCSR1A=0x00;
      ec:	10 92 9b 00 	sts	0x009B, r1
	UCSR1B=0x98;
      f0:	88 e9       	ldi	r24, 0x98	; 152
      f2:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C=0x06;
      f6:	86 e0       	ldi	r24, 0x06	; 6
      f8:	80 93 9d 00 	sts	0x009D, r24
	UBRR1H=0x00;
      fc:	10 92 98 00 	sts	0x0098, r1
	UBRR1L=0x5F;
     100:	8f e5       	ldi	r24, 0x5F	; 95
     102:	80 93 99 00 	sts	0x0099, r24

	sei();
     106:	78 94       	sei
}
     108:	08 95       	ret

0000010a <__vector_30>:

ISR(USART1_RX_vect)
{
     10a:	1f 92       	push	r1
     10c:	0f 92       	push	r0
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	0f 92       	push	r0
     112:	11 24       	eor	r1, r1
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
	char data;
	
	data=UDR1;
     118:	90 91 9c 00 	lds	r25, 0x009C
	while(!(UCSR1A&0xB8)); //수신완료 및 에러 검출되지 않을시
     11c:	80 91 9b 00 	lds	r24, 0x009B
     120:	88 7b       	andi	r24, 0xB8	; 184
     122:	e1 f3       	breq	.-8      	; 0x11c <__vector_30+0x12>
	rx1_flg=1;              //수신완료 플레그 set
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	80 93 34 02 	sts	0x0234, r24
	rx1_buff=data;	
     12a:	90 93 35 02 	sts	0x0235, r25
}
     12e:	9f 91       	pop	r25
     130:	8f 91       	pop	r24
     132:	0f 90       	pop	r0
     134:	0f be       	out	0x3f, r0	; 63
     136:	0f 90       	pop	r0
     138:	1f 90       	pop	r1
     13a:	18 95       	reti

0000013c <getchar1>:

char getchar1(void)  //uart 수신하기
{
	char data;
	
	data=rx1_buff;
     13c:	80 91 35 02 	lds	r24, 0x0235
	rx1_buff=0;
     140:	10 92 35 02 	sts	0x0235, r1
	cli();           //글로벌 인터럽트 disable
     144:	f8 94       	cli
	rx1_flg=0;       //수신완료 플레그 reset
     146:	10 92 34 02 	sts	0x0234, r1
	sei();           //글로벌 인터럽트 enable          
     14a:	78 94       	sei
	return data;     //수신데이터 반환
}
     14c:	08 95       	ret

0000014e <putchar1>:

void putchar1(char data) //uart 송신화기
{
	while(!(UCSR1A&0x20));  //송신 준비 완료시
     14e:	90 91 9b 00 	lds	r25, 0x009B
     152:	95 ff       	sbrs	r25, 5
     154:	fc cf       	rjmp	.-8      	; 0x14e <putchar1>
	UDR1=data;              //송신 버퍼에 데이터 쓰기
     156:	80 93 9c 00 	sts	0x009C, r24
}
     15a:	08 95       	ret

0000015c <Interface_init>:
// Parameter : 없음
// Return    : 없음
void Interface_init(void)
{
    // LCD / EX I/O Expander
	TWDR = 0xFF;
     15c:	8f ef       	ldi	r24, 0xFF	; 255
     15e:	80 93 73 00 	sts	0x0073, r24
	TWBR = 0x48;
     162:	88 e4       	ldi	r24, 0x48	; 72
     164:	80 93 70 00 	sts	0x0070, r24
}
     168:	08 95       	ret

0000016a <lcd_write_data>:
//          data - 전송할 한바이트 데이터
// Return    : 없음
void lcd_write_data(unsigned char data)
{
	// 시작
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     16a:	94 ea       	ldi	r25, 0xA4	; 164
     16c:	90 93 74 00 	sts	0x0074, r25
	// 준비상태 체크
    while(!(TWCR & (1 << TWINT)));
     170:	90 91 74 00 	lds	r25, 0x0074
     174:	97 ff       	sbrs	r25, 7
     176:	fc cf       	rjmp	.-8      	; 0x170 <lcd_write_data+0x6>
	
	// 주소 전송
    TWDR = SLA << 1;
     178:	9e e0       	ldi	r25, 0x0E	; 14
     17a:	90 93 73 00 	sts	0x0073, r25
	
	TWCR = (1 << TWINT) | (1 << TWEN);
     17e:	94 e8       	ldi	r25, 0x84	; 132
     180:	90 93 74 00 	sts	0x0074, r25
	while(!(TWCR & (1 << TWINT)));
     184:	90 91 74 00 	lds	r25, 0x0074
     188:	97 ff       	sbrs	r25, 7
     18a:	fc cf       	rjmp	.-8      	; 0x184 <lcd_write_data+0x1a>
	
	TWDR = data;
     18c:	80 93 73 00 	sts	0x0073, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
     190:	84 e8       	ldi	r24, 0x84	; 132
     192:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1 << TWINT)));
     196:	80 91 74 00 	lds	r24, 0x0074
     19a:	87 ff       	sbrs	r24, 7
     19c:	fc cf       	rjmp	.-8      	; 0x196 <lcd_write_data+0x2c>
	
    // 정지
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     19e:	84 e9       	ldi	r24, 0x94	; 148
     1a0:	80 93 74 00 	sts	0x0074, r24
}
     1a4:	08 95       	ret

000001a6 <lcd_display_str>:
// Parameter :
//          line   - 출력할 라인번호(0~3)
//          string - 출력할 문자열(최대 20자)
// Return    : 없음
void lcd_display_str(unsigned char Y_line, unsigned char X_line,char *string) //lcd 스트링데이터 쓰기
{
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <lcd_display_str+0xe>
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	08 2f       	mov	r16, r24
     1ba:	16 2f       	mov	r17, r22
    int i=X_line;

	if((Y_line<4) && (X_line<20)){
     1bc:	84 30       	cpi	r24, 0x04	; 4
     1be:	70 f5       	brcc	.+92     	; 0x21c <lcd_display_str+0x76>
     1c0:	64 31       	cpi	r22, 0x14	; 20
     1c2:	60 f5       	brcc	.+88     	; 0x21c <lcd_display_str+0x76>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     1c4:	8b e1       	ldi	r24, 0x1B	; 27
     1c6:	49 83       	std	Y+1, r20	; 0x01
     1c8:	5a 83       	std	Y+2, r21	; 0x02
     1ca:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1ce:	8c e4       	ldi	r24, 0x4C	; 76
     1d0:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     1d4:	81 2f       	mov	r24, r17
     1d6:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1da:	80 2f       	mov	r24, r16
     1dc:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e0:	80 e7       	ldi	r24, 0x70	; 112
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	01 97       	sbiw	r24, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_display_str+0x3e>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_display_str+0x44>
     1ea:	e1 2e       	mov	r14, r17
     1ec:	ff 24       	eor	r15, r15
     1ee:	49 81       	ldd	r20, Y+1	; 0x01
     1f0:	5a 81       	ldd	r21, Y+2	; 0x02
     1f2:	04 2f       	mov	r16, r20
     1f4:	15 2f       	mov	r17, r21
     1f6:	06 c0       	rjmp	.+12     	; 0x204 <lcd_display_str+0x5e>
		_delay_us(100);
    	while(((i++)<20)&&*string){
        	lcd_write_data(*string++);
     1f8:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1fc:	94 ec       	ldi	r25, 0xC4	; 196
     1fe:	9a 95       	dec	r25
     200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_display_str+0x58>
     202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_display_str+0x5e>

	if((Y_line<4) && (X_line<20)){
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
		lcd_write_data(X_line); lcd_write_data(Y_line);
		_delay_us(100);
    	while(((i++)<20)&&*string){
     204:	e4 e1       	ldi	r30, 0x14	; 20
     206:	ee 16       	cp	r14, r30
     208:	f1 04       	cpc	r15, r1
     20a:	44 f4       	brge	.+16     	; 0x21c <lcd_display_str+0x76>
     20c:	f8 01       	movw	r30, r16
     20e:	81 91       	ld	r24, Z+
     210:	8f 01       	movw	r16, r30
     212:	08 94       	sec
     214:	e1 1c       	adc	r14, r1
     216:	f1 1c       	adc	r15, r1
     218:	88 23       	and	r24, r24
     21a:	71 f7       	brne	.-36     	; 0x1f8 <lcd_display_str+0x52>
        	lcd_write_data(*string++);
			_delay_us(40);
		}
    }
}
     21c:	0f 90       	pop	r0
     21e:	0f 90       	pop	r0
     220:	cf 91       	pop	r28
     222:	df 91       	pop	r29
     224:	1f 91       	pop	r17
     226:	0f 91       	pop	r16
     228:	ff 90       	pop	r15
     22a:	ef 90       	pop	r14
     22c:	08 95       	ret

0000022e <write_lcd_data>:

void write_lcd_data(unsigned char Y_line, unsigned char X_line, long data) //lcd데이터 쓰기
{
     22e:	1f 93       	push	r17
     230:	df 93       	push	r29
     232:	cf 93       	push	r28
     234:	00 d0       	rcall	.+0      	; 0x236 <write_lcd_data+0x8>
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	18 2f       	mov	r17, r24
    if(Y_line<4 && X_line<20){
     23c:	84 30       	cpi	r24, 0x04	; 4
     23e:	f0 f4       	brcc	.+60     	; 0x27c <write_lcd_data+0x4e>
     240:	64 31       	cpi	r22, 0x14	; 20
     242:	e0 f4       	brcc	.+56     	; 0x27c <write_lcd_data+0x4e>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     244:	8b e1       	ldi	r24, 0x1B	; 27
     246:	2a 83       	std	Y+2, r18	; 0x02
     248:	69 83       	std	Y+1, r22	; 0x01
     24a:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     24e:	8c e4       	ldi	r24, 0x4C	; 76
     250:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     254:	69 81       	ldd	r22, Y+1	; 0x01
     256:	86 2f       	mov	r24, r22
     258:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     25c:	81 2f       	mov	r24, r17
     25e:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     262:	80 e7       	ldi	r24, 0x70	; 112
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <write_lcd_data+0x38>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <write_lcd_data+0x3e>
		_delay_us(100);
		lcd_write_data(data);
     26c:	2a 81       	ldd	r18, Y+2	; 0x02
     26e:	82 2f       	mov	r24, r18
     270:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     274:	94 ec       	ldi	r25, 0xC4	; 196
     276:	9a 95       	dec	r25
     278:	f1 f7       	brne	.-4      	; 0x276 <write_lcd_data+0x48>
     27a:	00 c0       	rjmp	.+0      	; 0x27c <write_lcd_data+0x4e>
		_delay_us(40);
    }
}
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	cf 91       	pop	r28
     282:	df 91       	pop	r29
     284:	1f 91       	pop	r17
     286:	08 95       	ret

00000288 <lcd_clear_screen>:

void lcd_clear_screen(void){ lcd_write_data(0x1B); lcd_write_data(0x43); _delay_ms(20); } //lcd전체화면 클리어
     288:	8b e1       	ldi	r24, 0x1B	; 27
     28a:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     28e:	83 e4       	ldi	r24, 0x43	; 67
     290:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     294:	86 e6       	ldi	r24, 0x66	; 102
     296:	96 ee       	ldi	r25, 0xE6	; 230
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	81 50       	subi	r24, 0x01	; 1
     29c:	90 40       	sbci	r25, 0x00	; 0
     29e:	a0 40       	sbci	r26, 0x00	; 0
     2a0:	e1 f7       	brne	.-8      	; 0x29a <lcd_clear_screen+0x12>
     2a2:	08 95       	ret

000002a4 <display_char>:
void display_char(unsigned char line, unsigned char col, unsigned char data) ////lcd char 데이터 표시
{
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	18 2f       	mov	r17, r24
     2ae:	f6 2e       	mov	r15, r22
     2b0:	e4 2e       	mov	r14, r20
    unsigned char val=0, val_buff=0;

	val=data;   

	val_buff=val/100;             
     2b2:	84 2f       	mov	r24, r20
     2b4:	64 e6       	ldi	r22, 0x64	; 100
     2b6:	0e 94 a4 19 	call	0x3348	; 0x3348 <__udivmodqi4>
     2ba:	08 2f       	mov	r16, r24
	write_lcd_data(line, col, val_buff+'0' );
     2bc:	28 2f       	mov	r18, r24
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	20 5d       	subi	r18, 0xD0	; 208
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
     2c4:	44 27       	eor	r20, r20
     2c6:	37 fd       	sbrc	r19, 7
     2c8:	40 95       	com	r20
     2ca:	54 2f       	mov	r21, r20
     2cc:	81 2f       	mov	r24, r17
     2ce:	6f 2d       	mov	r22, r15
     2d0:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
	val=val-(100*val_buff);
     2d4:	8c e9       	ldi	r24, 0x9C	; 156
     2d6:	08 9f       	mul	r16, r24
     2d8:	00 2d       	mov	r16, r0
     2da:	11 24       	eor	r1, r1
     2dc:	0e 0d       	add	r16, r14

	val_buff=val/10;
     2de:	80 2f       	mov	r24, r16
     2e0:	6a e0       	ldi	r22, 0x0A	; 10
     2e2:	0e 94 a4 19 	call	0x3348	; 0x3348 <__udivmodqi4>
     2e6:	e8 2e       	mov	r14, r24
	write_lcd_data(line, 1+col, val_buff+'0' );
     2e8:	6f 2d       	mov	r22, r15
     2ea:	6f 5f       	subi	r22, 0xFF	; 255
     2ec:	28 2f       	mov	r18, r24
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	20 5d       	subi	r18, 0xD0	; 208
     2f2:	3f 4f       	sbci	r19, 0xFF	; 255
     2f4:	44 27       	eor	r20, r20
     2f6:	37 fd       	sbrc	r19, 7
     2f8:	40 95       	com	r20
     2fa:	54 2f       	mov	r21, r20
     2fc:	81 2f       	mov	r24, r17
     2fe:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
	val=val-(10*val_buff);

	write_lcd_data(line, 2+col, val+'0');
     302:	6f 2d       	mov	r22, r15
     304:	6e 5f       	subi	r22, 0xFE	; 254
	write_lcd_data(line, col, val_buff+'0' );
	val=val-(100*val_buff);

	val_buff=val/10;
	write_lcd_data(line, 1+col, val_buff+'0' );
	val=val-(10*val_buff);
     306:	26 ef       	ldi	r18, 0xF6	; 246
     308:	e2 9e       	mul	r14, r18
     30a:	20 2d       	mov	r18, r0
     30c:	11 24       	eor	r1, r1
     30e:	20 0f       	add	r18, r16

	write_lcd_data(line, 2+col, val+'0');
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	20 5d       	subi	r18, 0xD0	; 208
     314:	3f 4f       	sbci	r19, 0xFF	; 255
     316:	44 27       	eor	r20, r20
     318:	37 fd       	sbrc	r19, 7
     31a:	40 95       	com	r20
     31c:	54 2f       	mov	r21, r20
     31e:	81 2f       	mov	r24, r17
     320:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
}
     324:	1f 91       	pop	r17
     326:	0f 91       	pop	r16
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	08 95       	ret

0000032e <NextCross>:
			
	}

}

int NextCross(int now,int dir){
     32e:	9c 01       	movw	r18, r24

	if(dir == E)	return (now + 1);
     330:	61 15       	cp	r22, r1
     332:	71 05       	cpc	r23, r1
     334:	19 f4       	brne	.+6      	; 0x33c <NextCross+0xe>
     336:	2f 5f       	subi	r18, 0xFF	; 255
     338:	3f 4f       	sbci	r19, 0xFF	; 255
     33a:	02 c0       	rjmp	.+4      	; 0x340 <NextCross+0x12>
	else if(dir == E)	return (now - 1);
	else if(dir == E)	return (now + 7);
	else return (now + 7);
     33c:	29 5f       	subi	r18, 0xF9	; 249
     33e:	3f 4f       	sbci	r19, 0xFF	; 255

}
     340:	c9 01       	movw	r24, r18
     342:	08 95       	ret

00000344 <NextTurn>:
int NextTurn(int now){
	for(int i=0;i<100;i++){
		if(cross[now][0] == 0){
     344:	fc 01       	movw	r30, r24
     346:	83 e0       	ldi	r24, 0x03	; 3
     348:	ee 0f       	add	r30, r30
     34a:	ff 1f       	adc	r31, r31
     34c:	8a 95       	dec	r24
     34e:	e1 f7       	brne	.-8      	; 0x348 <NextTurn+0x4>
     350:	e6 59       	subi	r30, 0x96	; 150
     352:	fd 4f       	sbci	r31, 0xFD	; 253
     354:	80 81       	ld	r24, Z
     356:	91 81       	ldd	r25, Z+1	; 0x01
     358:	00 97       	sbiw	r24, 0x00	; 0
     35a:	39 f4       	brne	.+14     	; 0x36a <NextTurn+0x26>
			cross[now][0]++;
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	91 83       	std	Z+1, r25	; 0x01
     362:	80 83       	st	Z, r24
			return E;
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	1d c0       	rjmp	.+58     	; 0x3a4 <NextTurn+0x60>
		} else if(cross[now][1] == 0) {
     36a:	82 81       	ldd	r24, Z+2	; 0x02
     36c:	93 81       	ldd	r25, Z+3	; 0x03
     36e:	00 97       	sbiw	r24, 0x00	; 0
     370:	39 f4       	brne	.+14     	; 0x380 <NextTurn+0x3c>
			cross[now][1]++;
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	93 83       	std	Z+3, r25	; 0x03
     378:	82 83       	std	Z+2, r24	; 0x02
			return S;
     37a:	21 e0       	ldi	r18, 0x01	; 1
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	12 c0       	rjmp	.+36     	; 0x3a4 <NextTurn+0x60>
		} else if(cross[now][2] == 0) {
     380:	84 81       	ldd	r24, Z+4	; 0x04
     382:	95 81       	ldd	r25, Z+5	; 0x05
     384:	00 97       	sbiw	r24, 0x00	; 0
     386:	39 f4       	brne	.+14     	; 0x396 <NextTurn+0x52>
			cross[now][2]++;
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	95 83       	std	Z+5, r25	; 0x05
     38e:	84 83       	std	Z+4, r24	; 0x04
			return W;
     390:	22 e0       	ldi	r18, 0x02	; 2
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	07 c0       	rjmp	.+14     	; 0x3a4 <NextTurn+0x60>
		} else {
		   	cross[now][3]++;
     396:	86 81       	ldd	r24, Z+6	; 0x06
     398:	97 81       	ldd	r25, Z+7	; 0x07
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	97 83       	std	Z+7, r25	; 0x07
     39e:	86 83       	std	Z+6, r24	; 0x06
			return N;
     3a0:	23 e0       	ldi	r18, 0x03	; 3
     3a2:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	return 0;
}
     3a4:	c9 01       	movw	r24, r18
     3a6:	08 95       	ret

000003a8 <SmartTurn>:

int SmartTurn(int nowdir,int next){
	if(nowdir == E && next == W)		return 180;
     3a8:	00 97       	sbiw	r24, 0x00	; 0
     3aa:	31 f4       	brne	.+12     	; 0x3b8 <SmartTurn+0x10>
     3ac:	62 30       	cpi	r22, 0x02	; 2
     3ae:	71 05       	cpc	r23, r1
     3b0:	31 f0       	breq	.+12     	; 0x3be <SmartTurn+0x16>
	else if(nowdir == E && next == N)	return 270;
     3b2:	63 30       	cpi	r22, 0x03	; 3
     3b4:	71 05       	cpc	r23, r1
     3b6:	31 f0       	breq	.+12     	; 0x3c4 <SmartTurn+0x1c>
	else 								return  90;
     3b8:	2a e5       	ldi	r18, 0x5A	; 90
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <SmartTurn+0x20>
	}
	return 0;
}

int SmartTurn(int nowdir,int next){
	if(nowdir == E && next == W)		return 180;
     3be:	24 eb       	ldi	r18, 0xB4	; 180
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <SmartTurn+0x20>
	else if(nowdir == E && next == N)	return 270;
     3c4:	2e e0       	ldi	r18, 0x0E	; 14
     3c6:	31 e0       	ldi	r19, 0x01	; 1
	else 								return  90;

}
     3c8:	c9 01       	movw	r24, r18
     3ca:	08 95       	ret

000003cc <SmartLine>:

int SmartLine(int speed){
	while(1){
		if(READ_SENSOR() == 28)			return 1;
     3cc:	80 91 63 00 	lds	r24, 0x0063
     3d0:	21 b1       	in	r18, 0x01	; 1
     3d2:	86 95       	lsr	r24
     3d4:	86 95       	lsr	r24
     3d6:	86 95       	lsr	r24
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	80 95       	com	r24
     3dc:	90 95       	com	r25
     3de:	83 70       	andi	r24, 0x03	; 3
     3e0:	90 70       	andi	r25, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	20 95       	com	r18
     3e6:	30 95       	com	r19
     3e8:	2c 71       	andi	r18, 0x1C	; 28
     3ea:	30 70       	andi	r19, 0x00	; 0
     3ec:	82 2b       	or	r24, r18
     3ee:	93 2b       	or	r25, r19
     3f0:	8c 31       	cpi	r24, 0x1C	; 28
     3f2:	91 05       	cpc	r25, r1
     3f4:	89 f1       	breq	.+98     	; 0x458 <SmartLine+0x8c>
		else if (READ_SENSOR() == 14)		return 2;
     3f6:	80 91 63 00 	lds	r24, 0x0063
     3fa:	21 b1       	in	r18, 0x01	; 1
     3fc:	86 95       	lsr	r24
     3fe:	86 95       	lsr	r24
     400:	86 95       	lsr	r24
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	80 95       	com	r24
     406:	90 95       	com	r25
     408:	83 70       	andi	r24, 0x03	; 3
     40a:	90 70       	andi	r25, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	20 95       	com	r18
     410:	30 95       	com	r19
     412:	2c 71       	andi	r18, 0x1C	; 28
     414:	30 70       	andi	r19, 0x00	; 0
     416:	82 2b       	or	r24, r18
     418:	93 2b       	or	r25, r19
     41a:	8e 30       	cpi	r24, 0x0E	; 14
     41c:	91 05       	cpc	r25, r1
     41e:	f9 f0       	breq	.+62     	; 0x45e <SmartLine+0x92>
		else if (READ_SENSOR() == 24)		return 3;
     420:	80 91 63 00 	lds	r24, 0x0063
     424:	21 b1       	in	r18, 0x01	; 1
     426:	86 95       	lsr	r24
     428:	86 95       	lsr	r24
     42a:	86 95       	lsr	r24
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	80 95       	com	r24
     430:	90 95       	com	r25
     432:	83 70       	andi	r24, 0x03	; 3
     434:	90 70       	andi	r25, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	20 95       	com	r18
     43a:	30 95       	com	r19
     43c:	2c 71       	andi	r18, 0x1C	; 28
     43e:	30 70       	andi	r19, 0x00	; 0
     440:	82 2b       	or	r24, r18
     442:	93 2b       	or	r25, r19
     444:	88 31       	cpi	r24, 0x18	; 24
     446:	91 05       	cpc	r25, r1
     448:	69 f0       	breq	.+26     	; 0x464 <SmartLine+0x98>
		else if (psd_value[0] > 70)		return 5;
     44a:	80 91 24 03 	lds	r24, 0x0324
     44e:	87 34       	cpi	r24, 0x47	; 71
     450:	60 f0       	brcs	.+24     	; 0x46a <SmartLine+0x9e>
     452:	25 e0       	ldi	r18, 0x05	; 5
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	0b c0       	rjmp	.+22     	; 0x46e <SmartLine+0xa2>

}

int SmartLine(int speed){
	while(1){
		if(READ_SENSOR() == 28)			return 1;
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	08 c0       	rjmp	.+16     	; 0x46e <SmartLine+0xa2>
		else if (READ_SENSOR() == 14)		return 2;
     45e:	22 e0       	ldi	r18, 0x02	; 2
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	05 c0       	rjmp	.+10     	; 0x46e <SmartLine+0xa2>
		else if (READ_SENSOR() == 24)		return 3;
     464:	23 e0       	ldi	r18, 0x03	; 3
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	02 c0       	rjmp	.+4      	; 0x46e <SmartLine+0xa2>
		else if (psd_value[0] > 70)		return 5;
		else 							return 4;
     46a:	24 e0       	ldi	r18, 0x04	; 4
     46c:	30 e0       	ldi	r19, 0x00	; 0

		if(READ_SENSOR() != 8)	non_Holonomic(speed, 30,0);
		if(READ_SENSOR() == 8)	non_Holonomic(speed,-30,0);

	}
}
     46e:	c9 01       	movw	r24, r18
     470:	08 95       	ret

00000472 <Smartcross>:
int nowdir = E, nextdir = 0;
int nowcross = 0;
int cross[21][4] = {{0,}};


void Smartcross(){
     472:	af 92       	push	r10
     474:	bf 92       	push	r11
     476:	cf 92       	push	r12
     478:	df 92       	push	r13
     47a:	ef 92       	push	r14
     47c:	ff 92       	push	r15
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
	
	int result = 0, block = 0, dir = 0;
	nowcross = 0; //0,7,14
     486:	10 92 69 02 	sts	0x0269, r1
     48a:	10 92 68 02 	sts	0x0268, r1
			
			} else {
				nextdir = NextTurn(nowcross);
				dir = SmartTurn(nowdir,nextdir);
				nowdir = nextdir;
				Turn_and_Drive(0,0,100,0,dir,0,dir-10);
     48e:	b9 e0       	ldi	r27, 0x09	; 9
     490:	ab 2e       	mov	r10, r27
     492:	b5 e0       	ldi	r27, 0x05	; 5
     494:	bb 2e       	mov	r11, r27
void Smartcross(){
	
	int result = 0, block = 0, dir = 0;
	nowcross = 0; //0,7,14
	
	while(nowcross != 6 && nowcross != 13 && nowcross != 20){
     496:	95 c0       	rjmp	.+298    	; 0x5c2 <Smartcross+0x150>
			block = psd_value[0];
     498:	20 91 24 03 	lds	r18, 0x0324
     49c:	30 e0       	ldi	r19, 0x00	; 0
			if(block < 50){
     49e:	22 33       	cpi	r18, 0x32	; 50
     4a0:	31 05       	cpc	r19, r1
     4a2:	2c f4       	brge	.+10     	; 0x4ae <Smartcross+0x3c>
				//라인타기 
				result = SmartLine(200);
     4a4:	88 ec       	ldi	r24, 0xC8	; 200
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <SmartLine>
     4ac:	8a c0       	rjmp	.+276    	; 0x5c2 <Smartcross+0x150>
			
			} else {
				nextdir = NextTurn(nowcross);
     4ae:	0e 94 a2 01 	call	0x344	; 0x344 <NextTurn>
     4b2:	6c 01       	movw	r12, r24
     4b4:	90 93 67 02 	sts	0x0267, r25
     4b8:	80 93 66 02 	sts	0x0266, r24
				dir = SmartTurn(nowdir,nextdir);
     4bc:	80 91 64 02 	lds	r24, 0x0264
     4c0:	90 91 65 02 	lds	r25, 0x0265
     4c4:	b6 01       	movw	r22, r12
     4c6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <SmartTurn>
     4ca:	ec 01       	movw	r28, r24
				nowdir = nextdir;
     4cc:	d0 92 65 02 	sts	0x0265, r13
     4d0:	c0 92 64 02 	sts	0x0264, r12
				Turn_and_Drive(0,0,100,0,dir,0,dir-10);
     4d4:	a6 ef       	ldi	r26, 0xF6	; 246
     4d6:	ca 2e       	mov	r12, r26
     4d8:	af ef       	ldi	r26, 0xFF	; 255
     4da:	da 2e       	mov	r13, r26
     4dc:	c8 0e       	add	r12, r24
     4de:	d9 1e       	adc	r13, r25
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	44 e6       	ldi	r20, 0x64	; 100
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	8e 01       	movw	r16, r28
     4f2:	ee 24       	eor	r14, r14
     4f4:	ff 24       	eor	r15, r15
     4f6:	f5 01       	movw	r30, r10
     4f8:	09 95       	icall
				if(psd_value[0] > 70){
     4fa:	80 91 24 03 	lds	r24, 0x0324
     4fe:	87 34       	cpi	r24, 0x47	; 71
     500:	90 f0       	brcs	.+36     	; 0x526 <Smartcross+0xb4>
					nextdir = NextTurn(nowcross);
     502:	80 91 68 02 	lds	r24, 0x0268
     506:	90 91 69 02 	lds	r25, 0x0269
     50a:	0e 94 a2 01 	call	0x344	; 0x344 <NextTurn>
     50e:	bc 01       	movw	r22, r24
     510:	90 93 67 02 	sts	0x0267, r25
     514:	80 93 66 02 	sts	0x0266, r24
					dir = SmartTurn(nowdir,nextdir);
     518:	80 91 64 02 	lds	r24, 0x0264
     51c:	90 91 65 02 	lds	r25, 0x0265
     520:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <SmartTurn>
     524:	ec 01       	movw	r28, r24
				}
				result = SmartLine(200);
     526:	88 ec       	ldi	r24, 0xC8	; 200
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <SmartLine>
				if(dir == 270)			Turn_and_Drive(0,0,-100,0,90,0,dir-10);
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	ce 30       	cpi	r28, 0x0E	; 14
     532:	d8 07       	cpc	r29, r24
     534:	89 f4       	brne	.+34     	; 0x558 <Smartcross+0xe6>
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	4c e9       	ldi	r20, 0x9C	; 156
     540:	5f ef       	ldi	r21, 0xFF	; 255
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	0a e5       	ldi	r16, 0x5A	; 90
     548:	10 e0       	ldi	r17, 0x00	; 0
     54a:	ee 24       	eor	r14, r14
     54c:	ff 24       	eor	r15, r15
     54e:	f4 e0       	ldi	r31, 0x04	; 4
     550:	cf 2e       	mov	r12, r31
     552:	f1 e0       	ldi	r31, 0x01	; 1
     554:	df 2e       	mov	r13, r31
     556:	25 c0       	rjmp	.+74     	; 0x5a2 <Smartcross+0x130>
				else if(dir == 180)		Turn_and_Drive(0,0, 100,0,90,0,dir-10);
     558:	c4 3b       	cpi	r28, 0xB4	; 180
     55a:	d1 05       	cpc	r29, r1
     55c:	81 f4       	brne	.+32     	; 0x57e <Smartcross+0x10c>
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	44 e6       	ldi	r20, 0x64	; 100
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	0a e5       	ldi	r16, 0x5A	; 90
     570:	10 e0       	ldi	r17, 0x00	; 0
     572:	ee 24       	eor	r14, r14
     574:	ff 24       	eor	r15, r15
     576:	ea ea       	ldi	r30, 0xAA	; 170
     578:	ce 2e       	mov	r12, r30
     57a:	d1 2c       	mov	r13, r1
     57c:	12 c0       	rjmp	.+36     	; 0x5a2 <Smartcross+0x130>
				else 					Turn_and_Drive(0,0, 100,0,180,0,dir-10);
     57e:	96 ef       	ldi	r25, 0xF6	; 246
     580:	c9 2e       	mov	r12, r25
     582:	9f ef       	ldi	r25, 0xFF	; 255
     584:	d9 2e       	mov	r13, r25
     586:	cc 0e       	add	r12, r28
     588:	dd 1e       	adc	r13, r29
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	44 e6       	ldi	r20, 0x64	; 100
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	04 eb       	ldi	r16, 0xB4	; 180
     59c:	10 e0       	ldi	r17, 0x00	; 0
     59e:	ee 24       	eor	r14, r14
     5a0:	ff 24       	eor	r15, r15
     5a2:	f5 01       	movw	r30, r10
     5a4:	09 95       	icall
				nowcross = NextCross(nowcross , nextdir);
     5a6:	60 91 66 02 	lds	r22, 0x0266
     5aa:	70 91 67 02 	lds	r23, 0x0267
     5ae:	80 91 68 02 	lds	r24, 0x0268
     5b2:	90 91 69 02 	lds	r25, 0x0269
     5b6:	0e 94 97 01 	call	0x32e	; 0x32e <NextCross>
     5ba:	90 93 69 02 	sts	0x0269, r25
     5be:	80 93 68 02 	sts	0x0268, r24
void Smartcross(){
	
	int result = 0, block = 0, dir = 0;
	nowcross = 0; //0,7,14
	
	while(nowcross != 6 && nowcross != 13 && nowcross != 20){
     5c2:	80 91 68 02 	lds	r24, 0x0268
     5c6:	90 91 69 02 	lds	r25, 0x0269
     5ca:	86 30       	cpi	r24, 0x06	; 6
     5cc:	91 05       	cpc	r25, r1
     5ce:	39 f0       	breq	.+14     	; 0x5de <Smartcross+0x16c>
     5d0:	8d 30       	cpi	r24, 0x0D	; 13
     5d2:	91 05       	cpc	r25, r1
     5d4:	21 f0       	breq	.+8      	; 0x5de <Smartcross+0x16c>
     5d6:	84 31       	cpi	r24, 0x14	; 20
     5d8:	91 05       	cpc	r25, r1
     5da:	09 f0       	breq	.+2      	; 0x5de <Smartcross+0x16c>
     5dc:	5d cf       	rjmp	.-326    	; 0x498 <Smartcross+0x26>
				nowcross = NextCross(nowcross , nextdir);
			}
			
	}

}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	ff 90       	pop	r15
     5e8:	ef 90       	pop	r14
     5ea:	df 90       	pop	r13
     5ec:	cf 90       	pop	r12
     5ee:	bf 90       	pop	r11
     5f0:	af 90       	pop	r10
     5f2:	08 95       	ret

000005f4 <cross_left>:
						{1,1,1,1,1,1}
					};
	


}
     5f4:	08 95       	ret

000005f6 <HolonomicW>:

void HolonomicW(int f_agl, int f_speed, int fw_speed){
     5f6:	2f 92       	push	r2
     5f8:	3f 92       	push	r3
     5fa:	4f 92       	push	r4
     5fc:	5f 92       	push	r5
     5fe:	6f 92       	push	r6
     600:	7f 92       	push	r7
     602:	8f 92       	push	r8
     604:	9f 92       	push	r9
     606:	af 92       	push	r10
     608:	bf 92       	push	r11
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	df 93       	push	r29
     618:	cf 93       	push	r28
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	60 97       	sbiw	r28, 0x10	; 16
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	8c 01       	movw	r16, r24
     62c:	7b 01       	movw	r14, r22
     62e:	1a 01       	movw	r2, r20
	double V[3]={0,0,0};

	unsigned char i=0;

	// 좌표계 변환
	if(f_agl <= 180) DesiredDirection = 180 - f_agl;
     630:	85 3b       	cpi	r24, 0xB5	; 181
     632:	91 05       	cpc	r25, r1
     634:	1c f4       	brge	.+6      	; 0x63c <HolonomicW+0x46>
     636:	64 eb       	ldi	r22, 0xB4	; 180
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	02 c0       	rjmp	.+4      	; 0x640 <HolonomicW+0x4a>
	else if(f_agl > 180) DesiredDirection = 540 - f_agl;
     63c:	6c e1       	ldi	r22, 0x1C	; 28
     63e:	72 e0       	ldi	r23, 0x02	; 2
     640:	60 1b       	sub	r22, r16
     642:	71 0b       	sbc	r23, r17
	
	// 라디안 변환
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
     644:	88 27       	eor	r24, r24
     646:	77 fd       	sbrc	r23, 7
     648:	80 95       	com	r24
     64a:	98 2f       	mov	r25, r24
     64c:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__floatsisf>
     650:	5b 01       	movw	r10, r22
     652:	6c 01       	movw	r12, r24
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	84 e3       	ldi	r24, 0x34	; 52
     65a:	93 e4       	ldi	r25, 0x43	; 67
     65c:	a6 01       	movw	r20, r12
     65e:	95 01       	movw	r18, r10
     660:	0e 94 a5 14 	call	0x294a	; 0x294a <__subsf3>
     664:	28 e9       	ldi	r18, 0x98	; 152
     666:	39 ef       	ldi	r19, 0xF9	; 249
     668:	4e e8       	ldi	r20, 0x8E	; 142
     66a:	5c e3       	ldi	r21, 0x3C	; 60
     66c:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
	radianB = (90-(double)DesiredDirection) * 0.017453;

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
     670:	0e 94 e7 19 	call	0x33ce	; 0x33ce <cos>
     674:	3b 01       	movw	r6, r22
     676:	4c 01       	movw	r8, r24
	if(f_agl <= 180) DesiredDirection = 180 - f_agl;
	else if(f_agl > 180) DesiredDirection = 540 - f_agl;
	
	// 라디안 변환
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
	radianB = (90-(double)DesiredDirection) * 0.017453;
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	84 eb       	ldi	r24, 0xB4	; 180
     67e:	92 e4       	ldi	r25, 0x42	; 66
     680:	a6 01       	movw	r20, r12
     682:	95 01       	movw	r18, r10
     684:	0e 94 a5 14 	call	0x294a	; 0x294a <__subsf3>
     688:	28 e9       	ldi	r18, 0x98	; 152
     68a:	39 ef       	ldi	r19, 0xF9	; 249
     68c:	4e e8       	ldi	r20, 0x8E	; 142
     68e:	5c e3       	ldi	r21, 0x3C	; 60
     690:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
	Fy = f_speed * cos(radianB);
     694:	0e 94 e7 19 	call	0x33ce	; 0x33ce <cos>
     698:	5b 01       	movw	r10, r22
     69a:	6c 01       	movw	r12, r24
	Fw=fw_speed;

	if(f_agl<0 || f_agl>=360){
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	08 36       	cpi	r16, 0x68	; 104
     6a0:	18 07       	cpc	r17, r24
     6a2:	28 f5       	brcc	.+74     	; 0x6ee <HolonomicW+0xf8>
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
	radianB = (90-(double)DesiredDirection) * 0.017453;

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
     6a4:	b7 01       	movw	r22, r14
     6a6:	88 27       	eor	r24, r24
     6a8:	77 fd       	sbrc	r23, 7
     6aa:	80 95       	com	r24
     6ac:	98 2f       	mov	r25, r24
     6ae:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__floatsisf>
     6b2:	7b 01       	movw	r14, r22
     6b4:	8c 01       	movw	r16, r24
     6b6:	a4 01       	movw	r20, r8
     6b8:	93 01       	movw	r18, r6
     6ba:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
     6be:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__fixsfsi>
     6c2:	66 2e       	mov	r6, r22
     6c4:	77 2e       	mov	r7, r23
     6c6:	88 2e       	mov	r8, r24
     6c8:	99 2e       	mov	r9, r25
	Fy = f_speed * cos(radianB);
     6ca:	c8 01       	movw	r24, r16
     6cc:	b7 01       	movw	r22, r14
     6ce:	a6 01       	movw	r20, r12
     6d0:	95 01       	movw	r18, r10
     6d2:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
     6d6:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__fixsfsi>
     6da:	e6 2e       	mov	r14, r22
     6dc:	f7 2e       	mov	r15, r23
     6de:	08 2f       	mov	r16, r24
     6e0:	19 2f       	mov	r17, r25
	Fw=fw_speed;
     6e2:	51 01       	movw	r10, r2
     6e4:	cc 24       	eor	r12, r12
     6e6:	b7 fc       	sbrc	r11, 7
     6e8:	c0 94       	com	r12
     6ea:	dc 2c       	mov	r13, r12
     6ec:	11 c0       	rjmp	.+34     	; 0x710 <HolonomicW+0x11a>

	if(f_agl<0 || f_agl>=360){
		if(f_agl<0)Fw = -f_speed;
     6ee:	17 ff       	sbrs	r17, 7
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <HolonomicW+0x104>
     6f2:	f0 94       	com	r15
     6f4:	e1 94       	neg	r14
     6f6:	f1 08       	sbc	r15, r1
     6f8:	f3 94       	inc	r15
		else if(f_agl>=360)Fw = f_speed;
     6fa:	57 01       	movw	r10, r14
     6fc:	cc 24       	eor	r12, r12
     6fe:	b7 fc       	sbrc	r11, 7
     700:	c0 94       	com	r12
     702:	dc 2c       	mov	r13, r12
		Fx=0;
		Fy=0;
     704:	ee 24       	eor	r14, r14
     706:	ff 24       	eor	r15, r15
     708:	87 01       	movw	r16, r14
	Fw=fw_speed;

	if(f_agl<0 || f_agl>=360){
		if(f_agl<0)Fw = -f_speed;
		else if(f_agl>=360)Fw = f_speed;
		Fx=0;
     70a:	66 24       	eor	r6, r6
     70c:	77 24       	eor	r7, r7
     70e:	43 01       	movw	r8, r6
		Fy=0;
	}
		
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
     710:	c4 01       	movw	r24, r8
     712:	b3 01       	movw	r22, r6
     714:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__floatsisf>
     718:	6d 87       	std	Y+13, r22	; 0x0d
     71a:	7e 87       	std	Y+14, r23	; 0x0e
     71c:	8f 87       	std	Y+15, r24	; 0x0f
     71e:	98 8b       	std	Y+16, r25	; 0x10
     720:	c8 01       	movw	r24, r16
     722:	b7 01       	movw	r22, r14
     724:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__floatsisf>
     728:	1b 01       	movw	r2, r22
     72a:	2c 01       	movw	r4, r24
     72c:	22 e0       	ldi	r18, 0x02	; 2
     72e:	3b e2       	ldi	r19, 0x2B	; 43
     730:	47 e0       	ldi	r20, 0x07	; 7
     732:	5d e3       	ldi	r21, 0x3D	; 61
     734:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
     738:	16 2f       	mov	r17, r22
     73a:	f7 2e       	mov	r15, r23
     73c:	98 2e       	mov	r9, r24
     73e:	89 2e       	mov	r8, r25
     740:	c6 01       	movw	r24, r12
     742:	b5 01       	movw	r22, r10
     744:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__floatsisf>
     748:	2e e4       	ldi	r18, 0x4E	; 78
     74a:	32 e6       	ldi	r19, 0x62	; 98
     74c:	40 e1       	ldi	r20, 0x10	; 16
     74e:	5e e3       	ldi	r21, 0x3E	; 62
     750:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
     754:	a6 2e       	mov	r10, r22
     756:	e7 2e       	mov	r14, r23
     758:	08 2f       	mov	r16, r24
     75a:	69 2e       	mov	r6, r25
     75c:	6d 85       	ldd	r22, Y+13	; 0x0d
     75e:	7e 85       	ldd	r23, Y+14	; 0x0e
     760:	8f 85       	ldd	r24, Y+15	; 0x0f
     762:	98 89       	ldd	r25, Y+16	; 0x10
     764:	25 ed       	ldi	r18, 0xD5	; 213
     766:	38 e7       	ldi	r19, 0x78	; 120
     768:	49 e6       	ldi	r20, 0x69	; 105
     76a:	5d e3       	ldi	r21, 0x3D	; 61
     76c:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
     770:	f4 01       	movw	r30, r8
     772:	21 2f       	mov	r18, r17
     774:	3f 2d       	mov	r19, r15
     776:	4f 2f       	mov	r20, r31
     778:	5e 2f       	mov	r21, r30
     77a:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
     77e:	2a 2d       	mov	r18, r10
     780:	3e 2d       	mov	r19, r14
     782:	40 2f       	mov	r20, r16
     784:	56 2d       	mov	r21, r6
     786:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
     78a:	69 83       	std	Y+1, r22	; 0x01
     78c:	7a 83       	std	Y+2, r23	; 0x02
     78e:	8b 83       	std	Y+3, r24	; 0x03
     790:	9c 83       	std	Y+4, r25	; 0x04
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
     792:	c2 01       	movw	r24, r4
     794:	b1 01       	movw	r22, r2
     796:	28 eb       	ldi	r18, 0xB8	; 184
     798:	3e e1       	ldi	r19, 0x1E	; 30
     79a:	45 e8       	ldi	r20, 0x85	; 133
     79c:	5d eb       	ldi	r21, 0xBD	; 189
     79e:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
     7a2:	2a 2d       	mov	r18, r10
     7a4:	3e 2d       	mov	r19, r14
     7a6:	40 2f       	mov	r20, r16
     7a8:	56 2d       	mov	r21, r6
     7aa:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
     7ae:	6d 83       	std	Y+5, r22	; 0x05
     7b0:	7e 83       	std	Y+6, r23	; 0x06
     7b2:	8f 83       	std	Y+7, r24	; 0x07
     7b4:	98 87       	std	Y+8, r25	; 0x08
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
     7b6:	6d 85       	ldd	r22, Y+13	; 0x0d
     7b8:	7e 85       	ldd	r23, Y+14	; 0x0e
     7ba:	8f 85       	ldd	r24, Y+15	; 0x0f
     7bc:	98 89       	ldd	r25, Y+16	; 0x10
     7be:	25 ed       	ldi	r18, 0xD5	; 213
     7c0:	38 e7       	ldi	r19, 0x78	; 120
     7c2:	49 e6       	ldi	r20, 0x69	; 105
     7c4:	5d eb       	ldi	r21, 0xBD	; 189
     7c6:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
     7ca:	f4 01       	movw	r30, r8
     7cc:	21 2f       	mov	r18, r17
     7ce:	3f 2d       	mov	r19, r15
     7d0:	4f 2f       	mov	r20, r31
     7d2:	5e 2f       	mov	r21, r30
     7d4:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
     7d8:	2a 2d       	mov	r18, r10
     7da:	3e 2d       	mov	r19, r14
     7dc:	40 2f       	mov	r20, r16
     7de:	56 2d       	mov	r21, r6
     7e0:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
     7e4:	69 87       	std	Y+9, r22	; 0x09
     7e6:	7a 87       	std	Y+10, r23	; 0x0a
     7e8:	8b 87       	std	Y+11, r24	; 0x0b
     7ea:	9c 87       	std	Y+12, r25	; 0x0c
     7ec:	8e 01       	movw	r16, r28
     7ee:	0f 5f       	subi	r16, 0xFF	; 255
     7f0:	1f 4f       	sbci	r17, 0xFF	; 255
	
    for(i=0;i<3;++i){
     7f2:	ee 24       	eor	r14, r14
	


}

void HolonomicW(int f_agl, int f_speed, int fw_speed){
     7f4:	58 01       	movw	r10, r16
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
	
    for(i=0;i<3;++i){
		if(V[i]>=40)V[i]=40;
     7f6:	f8 01       	movw	r30, r16
     7f8:	60 81       	ld	r22, Z
     7fa:	71 81       	ldd	r23, Z+1	; 0x01
     7fc:	82 81       	ldd	r24, Z+2	; 0x02
     7fe:	93 81       	ldd	r25, Z+3	; 0x03
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	40 e2       	ldi	r20, 0x20	; 32
     806:	52 e4       	ldi	r21, 0x42	; 66
     808:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__gesf2>
     80c:	87 fd       	sbrc	r24, 7
     80e:	09 c0       	rjmp	.+18     	; 0x822 <HolonomicW+0x22c>
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	a0 e2       	ldi	r26, 0x20	; 32
     816:	b2 e4       	ldi	r27, 0x42	; 66
     818:	f8 01       	movw	r30, r16
     81a:	80 83       	st	Z, r24
     81c:	91 83       	std	Z+1, r25	; 0x01
     81e:	a2 83       	std	Z+2, r26	; 0x02
     820:	b3 83       	std	Z+3, r27	; 0x03
		if(V[i]<=(-40))V[i]=-40;
     822:	f8 01       	movw	r30, r16
     824:	60 81       	ld	r22, Z
     826:	71 81       	ldd	r23, Z+1	; 0x01
     828:	82 81       	ldd	r24, Z+2	; 0x02
     82a:	93 81       	ldd	r25, Z+3	; 0x03
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	40 e2       	ldi	r20, 0x20	; 32
     832:	52 ec       	ldi	r21, 0xC2	; 194
     834:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__lesf2>
     838:	18 16       	cp	r1, r24
     83a:	4c f0       	brlt	.+18     	; 0x84e <HolonomicW+0x258>
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	a0 e2       	ldi	r26, 0x20	; 32
     842:	b2 ec       	ldi	r27, 0xC2	; 194
     844:	f8 01       	movw	r30, r16
     846:	80 83       	st	Z, r24
     848:	91 83       	std	Z+1, r25	; 0x01
     84a:	a2 83       	std	Z+2, r26	; 0x02
     84c:	b3 83       	std	Z+3, r27	; 0x03
     84e:	0c 5f       	subi	r16, 0xFC	; 252
     850:	1f 4f       	sbci	r17, 0xFF	; 255
		SetVelocity(i, V[i]*65536);
     852:	f5 01       	movw	r30, r10
     854:	60 81       	ld	r22, Z
     856:	71 81       	ldd	r23, Z+1	; 0x01
     858:	82 81       	ldd	r24, Z+2	; 0x02
     85a:	93 81       	ldd	r25, Z+3	; 0x03
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	40 e8       	ldi	r20, 0x80	; 128
     862:	57 e4       	ldi	r21, 0x47	; 71
     864:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
     868:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__fixsfsi>
     86c:	ab 01       	movw	r20, r22
     86e:	bc 01       	movw	r22, r24
     870:	8e 2d       	mov	r24, r14
     872:	0e 94 a4 10 	call	0x2148	; 0x2148 <SetVelocity>
		
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
	
    for(i=0;i<3;++i){
     876:	e3 94       	inc	r14
     878:	fe 2d       	mov	r31, r14
     87a:	f3 30       	cpi	r31, 0x03	; 3
     87c:	09 f0       	breq	.+2      	; 0x880 <HolonomicW+0x28a>
     87e:	ba cf       	rjmp	.-140    	; 0x7f4 <HolonomicW+0x1fe>
		if(V[i]>=40)V[i]=40;
		if(V[i]<=(-40))V[i]=-40;
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
     880:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <StartMotion>
}
     884:	60 96       	adiw	r28, 0x10	; 16
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	de bf       	out	0x3e, r29	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	cd bf       	out	0x3d, r28	; 61
     890:	cf 91       	pop	r28
     892:	df 91       	pop	r29
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	ff 90       	pop	r15
     89a:	ef 90       	pop	r14
     89c:	df 90       	pop	r13
     89e:	cf 90       	pop	r12
     8a0:	bf 90       	pop	r11
     8a2:	af 90       	pop	r10
     8a4:	9f 90       	pop	r9
     8a6:	8f 90       	pop	r8
     8a8:	7f 90       	pop	r7
     8aa:	6f 90       	pop	r6
     8ac:	5f 90       	pop	r5
     8ae:	4f 90       	pop	r4
     8b0:	3f 90       	pop	r3
     8b2:	2f 90       	pop	r2
     8b4:	08 95       	ret

000008b6 <Holonomic_distance>:
		if(flg0 && flg1)
			break;
	}
}

void Holonomic_distance(int f_agl,int f_speed,unsigned int distance,unsigned stop){
     8b6:	2f 92       	push	r2
     8b8:	3f 92       	push	r3
     8ba:	4f 92       	push	r4
     8bc:	5f 92       	push	r5
     8be:	6f 92       	push	r6
     8c0:	7f 92       	push	r7
     8c2:	8f 92       	push	r8
     8c4:	9f 92       	push	r9
     8c6:	af 92       	push	r10
     8c8:	bf 92       	push	r11
     8ca:	cf 92       	push	r12
     8cc:	df 92       	push	r13
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	df 93       	push	r29
     8d8:	cf 93       	push	r28
     8da:	00 d0       	rcall	.+0      	; 0x8dc <Holonomic_distance+0x26>
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
     8e0:	9a 83       	std	Y+2, r25	; 0x02
     8e2:	89 83       	std	Y+1, r24	; 0x01
     8e4:	1a 01       	movw	r2, r20
     8e6:	79 01       	movw	r14, r18
//1.각도	2.속도	3.거리	4.감속지점	
	next_speed=f_speed;
     8e8:	88 27       	eor	r24, r24
     8ea:	77 fd       	sbrc	r23, 7
     8ec:	80 95       	com	r24
     8ee:	98 2f       	mov	r25, r24
     8f0:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__floatsisf>
     8f4:	60 93 3c 02 	sts	0x023C, r22
     8f8:	70 93 3d 02 	sts	0x023D, r23
     8fc:	80 93 3e 02 	sts	0x023E, r24
     900:	90 93 3f 02 	sts	0x023F, r25
	acc=5;
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	a0 ea       	ldi	r26, 0xA0	; 160
     90a:	b0 e4       	ldi	r27, 0x40	; 64
     90c:	80 93 00 01 	sts	0x0100, r24
     910:	90 93 01 01 	sts	0x0101, r25
     914:	a0 93 02 01 	sts	0x0102, r26
     918:	b0 93 03 01 	sts	0x0103, r27
	TCNT1H=0xFF; TCNT1L=0x70;	//0.01초
     91c:	8f ef       	ldi	r24, 0xFF	; 255
     91e:	8d bd       	out	0x2d, r24	; 45
     920:	80 e7       	ldi	r24, 0x70	; 112
     922:	8c bd       	out	0x2c, r24	; 44
	sec=0;
     924:	10 92 37 02 	sts	0x0237, r1
     928:	10 92 36 02 	sts	0x0236, r1
	disMD=0;	//거리 초기화
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	dc 01       	movw	r26, r24
     932:	80 93 54 02 	sts	0x0254, r24
     936:	90 93 55 02 	sts	0x0255, r25
     93a:	a0 93 56 02 	sts	0x0256, r26
     93e:	b0 93 57 02 	sts	0x0257, r27
	
	while(1){
	
		HolonomicW(f_agl,speed,0);
	
		if(disMD>=distance) break;
     942:	44 24       	eor	r4, r4
     944:	55 24       	eor	r5, r5
		else if(disMD>=stop) next_speed=50;
     946:	57 01       	movw	r10, r14
     948:	cc 24       	eor	r12, r12
     94a:	dd 24       	eor	r13, r13
     94c:	0f 2e       	mov	r0, r31
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	6f 2e       	mov	r6, r31
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	7f 2e       	mov	r7, r31
     956:	f8 e4       	ldi	r31, 0x48	; 72
     958:	8f 2e       	mov	r8, r31
     95a:	f2 e4       	ldi	r31, 0x42	; 66
     95c:	9f 2e       	mov	r9, r31
     95e:	f0 2d       	mov	r31, r0
	sec=0;
	disMD=0;	//거리 초기화
	
	while(1){
	
		HolonomicW(f_agl,speed,0);
     960:	60 91 38 02 	lds	r22, 0x0238
     964:	70 91 39 02 	lds	r23, 0x0239
     968:	80 91 3a 02 	lds	r24, 0x023A
     96c:	90 91 3b 02 	lds	r25, 0x023B
     970:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__fixsfsi>
     974:	9b 01       	movw	r18, r22
     976:	ac 01       	movw	r20, r24
     978:	89 81       	ldd	r24, Y+1	; 0x01
     97a:	9a 81       	ldd	r25, Y+2	; 0x02
     97c:	b9 01       	movw	r22, r18
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <HolonomicW>
	
		if(disMD>=distance) break;
     986:	e0 90 54 02 	lds	r14, 0x0254
     98a:	f0 90 55 02 	lds	r15, 0x0255
     98e:	00 91 56 02 	lds	r16, 0x0256
     992:	10 91 57 02 	lds	r17, 0x0257
     996:	c2 01       	movw	r24, r4
     998:	b1 01       	movw	r22, r2
     99a:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__floatunsisf>
     99e:	9b 01       	movw	r18, r22
     9a0:	ac 01       	movw	r20, r24
     9a2:	c8 01       	movw	r24, r16
     9a4:	b7 01       	movw	r22, r14
     9a6:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__gesf2>
     9aa:	87 ff       	sbrs	r24, 7
     9ac:	1d c0       	rjmp	.+58     	; 0x9e8 <Holonomic_distance+0x132>
		else if(disMD>=stop) next_speed=50;
     9ae:	e0 90 54 02 	lds	r14, 0x0254
     9b2:	f0 90 55 02 	lds	r15, 0x0255
     9b6:	00 91 56 02 	lds	r16, 0x0256
     9ba:	10 91 57 02 	lds	r17, 0x0257
     9be:	c6 01       	movw	r24, r12
     9c0:	b5 01       	movw	r22, r10
     9c2:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__floatunsisf>
     9c6:	9b 01       	movw	r18, r22
     9c8:	ac 01       	movw	r20, r24
     9ca:	c8 01       	movw	r24, r16
     9cc:	b7 01       	movw	r22, r14
     9ce:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__gesf2>
     9d2:	87 fd       	sbrc	r24, 7
     9d4:	c5 cf       	rjmp	.-118    	; 0x960 <Holonomic_distance+0xaa>
     9d6:	60 92 3c 02 	sts	0x023C, r6
     9da:	70 92 3d 02 	sts	0x023D, r7
     9de:	80 92 3e 02 	sts	0x023E, r8
     9e2:	90 92 3f 02 	sts	0x023F, r9
     9e6:	bc cf       	rjmp	.-136    	; 0x960 <Holonomic_distance+0xaa>
	}
}
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	cf 91       	pop	r28
     9ee:	df 91       	pop	r29
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	df 90       	pop	r13
     9fa:	cf 90       	pop	r12
     9fc:	bf 90       	pop	r11
     9fe:	af 90       	pop	r10
     a00:	9f 90       	pop	r9
     a02:	8f 90       	pop	r8
     a04:	7f 90       	pop	r7
     a06:	6f 90       	pop	r6
     a08:	5f 90       	pop	r5
     a0a:	4f 90       	pop	r4
     a0c:	3f 90       	pop	r3
     a0e:	2f 90       	pop	r2
     a10:	08 95       	ret

00000a12 <Turn_and_Drive>:
//5. 회전이동거리 (회전 각도)
//6. 정지 시점
//7. 회전정지시점

void Turn_and_Drive(double f_agl, int f_speed, int fw_speed, unsigned int mm,int dgree, unsigned int stop, unsigned int wstop)
{
     a12:	2f 92       	push	r2
     a14:	3f 92       	push	r3
     a16:	4f 92       	push	r4
     a18:	5f 92       	push	r5
     a1a:	6f 92       	push	r6
     a1c:	7f 92       	push	r7
     a1e:	8f 92       	push	r8
     a20:	9f 92       	push	r9
     a22:	af 92       	push	r10
     a24:	bf 92       	push	r11
     a26:	cf 92       	push	r12
     a28:	df 92       	push	r13
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	df 93       	push	r29
     a34:	cf 93       	push	r28
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
     a3a:	a6 97       	sbiw	r28, 0x26	; 38
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	96 2e       	mov	r9, r22
     a48:	87 2e       	mov	r8, r23
     a4a:	78 2e       	mov	r7, r24
     a4c:	69 2e       	mov	r6, r25
     a4e:	29 01       	movw	r4, r18
     a50:	dc 86       	std	Y+12, r13	; 0x0c
     a52:	cb 86       	std	Y+11, r12	; 0x0b
     a54:	be 86       	std	Y+14, r11	; 0x0e
     a56:	ad 86       	std	Y+13, r10	; 0x0d
	double distance=0, distanceW=0;
	float S_distance=0, S_distanceW=0;
	unsigned char flg0=0, flg1=0;

	TCNT1H=0xFF; TCNT1L=0x70;
     a58:	8f ef       	ldi	r24, 0xFF	; 255
     a5a:	8d bd       	out	0x2d, r24	; 45
     a5c:	80 e7       	ldi	r24, 0x70	; 112
     a5e:	8c bd       	out	0x2c, r24	; 44
	sec=1;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	90 93 37 02 	sts	0x0237, r25
     a68:	80 93 36 02 	sts	0x0236, r24

	acc=5;	accW=3;
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 ea       	ldi	r26, 0xA0	; 160
     a72:	b0 e4       	ldi	r27, 0x40	; 64
     a74:	80 93 00 01 	sts	0x0100, r24
     a78:	90 93 01 01 	sts	0x0101, r25
     a7c:	a0 93 02 01 	sts	0x0102, r26
     a80:	b0 93 03 01 	sts	0x0103, r27
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	a0 e4       	ldi	r26, 0x40	; 64
     a8a:	b0 e4       	ldi	r27, 0x40	; 64
     a8c:	80 93 04 01 	sts	0x0104, r24
     a90:	90 93 05 01 	sts	0x0105, r25
     a94:	a0 93 06 01 	sts	0x0106, r26
     a98:	b0 93 07 01 	sts	0x0107, r27
	next_speed=f_speed;
     a9c:	ba 01       	movw	r22, r20
     a9e:	88 27       	eor	r24, r24
     aa0:	77 fd       	sbrc	r23, 7
     aa2:	80 95       	com	r24
     aa4:	98 2f       	mov	r25, r24
     aa6:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__floatsisf>
     aaa:	60 93 3c 02 	sts	0x023C, r22
     aae:	70 93 3d 02 	sts	0x023D, r23
     ab2:	80 93 3e 02 	sts	0x023E, r24
     ab6:	90 93 3f 02 	sts	0x023F, r25
	next_wspeed=fw_speed;
     aba:	b2 01       	movw	r22, r4
     abc:	88 27       	eor	r24, r24
     abe:	77 fd       	sbrc	r23, 7
     ac0:	80 95       	com	r24
     ac2:	98 2f       	mov	r25, r24
     ac4:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__floatsisf>
     ac8:	60 93 44 02 	sts	0x0244, r22
     acc:	70 93 45 02 	sts	0x0245, r23
     ad0:	80 93 46 02 	sts	0x0246, r24
     ad4:	90 93 47 02 	sts	0x0247, r25

void Turn_and_Drive(double f_agl, int f_speed, int fw_speed, unsigned int mm,int dgree, unsigned int stop, unsigned int wstop)
{
	double distance=0, distanceW=0;
	float S_distance=0, S_distanceW=0;
	unsigned char flg0=0, flg1=0;
     ad8:	1a 86       	std	Y+10, r1	; 0x0a
     ada:	19 86       	std	Y+9, r1	; 0x09
//6. 정지 시점
//7. 회전정지시점

void Turn_and_Drive(double f_agl, int f_speed, int fw_speed, unsigned int mm,int dgree, unsigned int stop, unsigned int wstop)
{
	double distance=0, distanceW=0;
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	dc 01       	movw	r26, r24
     ae2:	8d 83       	std	Y+5, r24	; 0x05
     ae4:	9e 83       	std	Y+6, r25	; 0x06
     ae6:	af 83       	std	Y+7, r26	; 0x07
     ae8:	b8 87       	std	Y+8, r27	; 0x08
     aea:	89 83       	std	Y+1, r24	; 0x01
     aec:	9a 83       	std	Y+2, r25	; 0x02
     aee:	ab 83       	std	Y+3, r26	; 0x03
     af0:	bc 83       	std	Y+4, r27	; 0x04

			HolonomicW((int)(f_agl),speed,wspeed);

			distance+=S_distance;
			distanceW+=S_distanceW;
			if(distance>=stop && stop!=0)next_speed=100;
     af2:	ab 85       	ldd	r26, Y+11	; 0x0b
     af4:	bc 85       	ldd	r27, Y+12	; 0x0c
     af6:	cd 01       	movw	r24, r26
     af8:	a0 e0       	ldi	r26, 0x00	; 0
     afa:	b0 e0       	ldi	r27, 0x00	; 0
     afc:	8f 8b       	std	Y+23, r24	; 0x17
     afe:	98 8f       	std	Y+24, r25	; 0x18
     b00:	a9 8f       	std	Y+25, r26	; 0x19
     b02:	ba 8f       	std	Y+26, r27	; 0x1a
			if(fabs(distanceW)>=wstop && wstop!=0){
     b04:	ad 85       	ldd	r26, Y+13	; 0x0d
     b06:	be 85       	ldd	r27, Y+14	; 0x0e
     b08:	cd 01       	movw	r24, r26
     b0a:	a0 e0       	ldi	r26, 0x00	; 0
     b0c:	b0 e0       	ldi	r27, 0x00	; 0
     b0e:	8b 8f       	std	Y+27, r24	; 0x1b
     b10:	9c 8f       	std	Y+28, r25	; 0x1c
     b12:	ad 8f       	std	Y+29, r26	; 0x1d
     b14:	be 8f       	std	Y+30, r27	; 0x1e
				next_wspeed=20;
				if(wspeed<=0)next_wspeed=-20;
			}

			if(distance>=mm || (distance*-1)>=mm){
     b16:	c8 01       	movw	r24, r16
     b18:	a0 e0       	ldi	r26, 0x00	; 0
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
     b1c:	8f 8f       	std	Y+31, r24	; 0x1f
     b1e:	98 a3       	std	Y+32, r25	; 0x20
     b20:	a9 a3       	std	Y+33, r26	; 0x21
     b22:	ba a3       	std	Y+34, r27	; 0x22
				flg0=1;
				next_speed=0;
				speed=0;
			}
			if(fabs(distanceW)>=dgree){
     b24:	c7 01       	movw	r24, r14
     b26:	aa 27       	eor	r26, r26
     b28:	97 fd       	sbrc	r25, 7
     b2a:	a0 95       	com	r26
     b2c:	ba 2f       	mov	r27, r26
     b2e:	8b a3       	std	Y+35, r24	; 0x23
     b30:	9c a3       	std	Y+36, r25	; 0x24
     b32:	ad a3       	std	Y+37, r26	; 0x25
     b34:	be a3       	std	Y+38, r27	; 0x26
	next_speed=f_speed;
	next_wspeed=fw_speed;

	while(1){

		if(sec){
     b36:	80 91 36 02 	lds	r24, 0x0236
     b3a:	90 91 37 02 	lds	r25, 0x0237
     b3e:	00 97       	sbiw	r24, 0x00	; 0
     b40:	09 f4       	brne	.+2      	; 0xb44 <Turn_and_Drive+0x132>
     b42:	82 c1       	rjmp	.+772    	; 0xe48 <Turn_and_Drive+0x436>
			sec=0;
     b44:	10 92 37 02 	sts	0x0237, r1
     b48:	10 92 36 02 	sts	0x0236, r1

			S_distance=speed*0.01;	//0.01 순간 이동거리
     b4c:	60 91 38 02 	lds	r22, 0x0238
     b50:	70 91 39 02 	lds	r23, 0x0239
     b54:	80 91 3a 02 	lds	r24, 0x023A
     b58:	90 91 3b 02 	lds	r25, 0x023B
     b5c:	2a e0       	ldi	r18, 0x0A	; 10
     b5e:	37 ed       	ldi	r19, 0xD7	; 215
     b60:	43 e2       	ldi	r20, 0x23	; 35
     b62:	5c e3       	ldi	r21, 0x3C	; 60
     b64:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
     b68:	6b 8b       	std	Y+19, r22	; 0x13
     b6a:	7c 8b       	std	Y+20, r23	; 0x14
     b6c:	8d 8b       	std	Y+21, r24	; 0x15
     b6e:	9e 8b       	std	Y+22, r25	; 0x16
			S_distanceW=wspeed*0.01;	//0.01 순간 이동거리 
     b70:	60 91 40 02 	lds	r22, 0x0240
     b74:	70 91 41 02 	lds	r23, 0x0241
     b78:	80 91 42 02 	lds	r24, 0x0242
     b7c:	90 91 43 02 	lds	r25, 0x0243
     b80:	2a e0       	ldi	r18, 0x0A	; 10
     b82:	37 ed       	ldi	r19, 0xD7	; 215
     b84:	43 e2       	ldi	r20, 0x23	; 35
     b86:	5c e3       	ldi	r21, 0x3C	; 60
     b88:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
     b8c:	56 2e       	mov	r5, r22
     b8e:	47 2e       	mov	r4, r23
     b90:	38 2e       	mov	r3, r24
     b92:	29 2e       	mov	r2, r25

			f_agl=f_agl-S_distanceW;
     b94:	a4 01       	movw	r20, r8
     b96:	93 01       	movw	r18, r6
     b98:	65 2f       	mov	r22, r21
     b9a:	78 2d       	mov	r23, r8
     b9c:	83 2f       	mov	r24, r19
     b9e:	96 2d       	mov	r25, r6
     ba0:	d2 01       	movw	r26, r4
     ba2:	f1 01       	movw	r30, r2
     ba4:	2b 2f       	mov	r18, r27
     ba6:	3a 2f       	mov	r19, r26
     ba8:	4f 2f       	mov	r20, r31
     baa:	5e 2f       	mov	r21, r30
     bac:	0e 94 a5 14 	call	0x294a	; 0x294a <__subsf3>
     bb0:	96 2e       	mov	r9, r22
     bb2:	87 2e       	mov	r8, r23
     bb4:	78 2e       	mov	r7, r24
     bb6:	69 2e       	mov	r6, r25

			if(f_agl<0)f_agl+=360;
     bb8:	a4 01       	movw	r20, r8
     bba:	93 01       	movw	r18, r6
     bbc:	65 2f       	mov	r22, r21
     bbe:	74 2f       	mov	r23, r20
     bc0:	83 2f       	mov	r24, r19
     bc2:	92 2f       	mov	r25, r18
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	a9 01       	movw	r20, r18
     bca:	0e 94 30 16 	call	0x2c60	; 0x2c60 <__ltsf2>
     bce:	87 ff       	sbrs	r24, 7
     bd0:	0d c0       	rjmp	.+26     	; 0xbec <Turn_and_Drive+0x1da>
     bd2:	a4 01       	movw	r20, r8
     bd4:	93 01       	movw	r18, r6
     bd6:	65 2f       	mov	r22, r21
     bd8:	74 2f       	mov	r23, r20
     bda:	83 2f       	mov	r24, r19
     bdc:	92 2f       	mov	r25, r18
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	44 eb       	ldi	r20, 0xB4	; 180
     be4:	53 e4       	ldi	r21, 0x43	; 67
     be6:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
     bea:	1a c0       	rjmp	.+52     	; 0xc20 <Turn_and_Drive+0x20e>
			else if(f_agl>=360)f_agl-=360;
     bec:	a4 01       	movw	r20, r8
     bee:	93 01       	movw	r18, r6
     bf0:	65 2f       	mov	r22, r21
     bf2:	74 2f       	mov	r23, r20
     bf4:	83 2f       	mov	r24, r19
     bf6:	92 2f       	mov	r25, r18
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	44 eb       	ldi	r20, 0xB4	; 180
     bfe:	53 e4       	ldi	r21, 0x43	; 67
     c00:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__gesf2>
     c04:	87 fd       	sbrc	r24, 7
     c06:	10 c0       	rjmp	.+32     	; 0xc28 <Turn_and_Drive+0x216>
     c08:	a4 01       	movw	r20, r8
     c0a:	93 01       	movw	r18, r6
     c0c:	65 2f       	mov	r22, r21
     c0e:	74 2f       	mov	r23, r20
     c10:	83 2f       	mov	r24, r19
     c12:	92 2f       	mov	r25, r18
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	44 eb       	ldi	r20, 0xB4	; 180
     c1a:	53 e4       	ldi	r21, 0x43	; 67
     c1c:	0e 94 a5 14 	call	0x294a	; 0x294a <__subsf3>
     c20:	96 2e       	mov	r9, r22
     c22:	87 2e       	mov	r8, r23
     c24:	78 2e       	mov	r7, r24
     c26:	69 2e       	mov	r6, r25

			HolonomicW((int)(f_agl),speed,wspeed);
     c28:	e0 90 38 02 	lds	r14, 0x0238
     c2c:	f0 90 39 02 	lds	r15, 0x0239
     c30:	00 91 3a 02 	lds	r16, 0x023A
     c34:	10 91 3b 02 	lds	r17, 0x023B
     c38:	a0 90 40 02 	lds	r10, 0x0240
     c3c:	b0 90 41 02 	lds	r11, 0x0241
     c40:	c0 90 42 02 	lds	r12, 0x0242
     c44:	d0 90 43 02 	lds	r13, 0x0243
     c48:	a4 01       	movw	r20, r8
     c4a:	93 01       	movw	r18, r6
     c4c:	65 2f       	mov	r22, r21
     c4e:	78 2d       	mov	r23, r8
     c50:	83 2f       	mov	r24, r19
     c52:	96 2d       	mov	r25, r6
     c54:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__fixsfsi>
     c58:	6f 87       	std	Y+15, r22	; 0x0f
     c5a:	78 8b       	std	Y+16, r23	; 0x10
     c5c:	89 8b       	std	Y+17, r24	; 0x11
     c5e:	9a 8b       	std	Y+18, r25	; 0x12
     c60:	c8 01       	movw	r24, r16
     c62:	b7 01       	movw	r22, r14
     c64:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__fixsfsi>
     c68:	7b 01       	movw	r14, r22
     c6a:	8c 01       	movw	r16, r24
     c6c:	c6 01       	movw	r24, r12
     c6e:	b5 01       	movw	r22, r10
     c70:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__fixsfsi>
     c74:	9b 01       	movw	r18, r22
     c76:	ac 01       	movw	r20, r24
     c78:	8f 85       	ldd	r24, Y+15	; 0x0f
     c7a:	98 89       	ldd	r25, Y+16	; 0x10
     c7c:	b7 01       	movw	r22, r14
     c7e:	a9 01       	movw	r20, r18
     c80:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <HolonomicW>

			distance+=S_distance;
     c84:	69 81       	ldd	r22, Y+1	; 0x01
     c86:	7a 81       	ldd	r23, Y+2	; 0x02
     c88:	8b 81       	ldd	r24, Y+3	; 0x03
     c8a:	9c 81       	ldd	r25, Y+4	; 0x04
     c8c:	bb 89       	ldd	r27, Y+19	; 0x13
     c8e:	ac 89       	ldd	r26, Y+20	; 0x14
     c90:	1d 89       	ldd	r17, Y+21	; 0x15
     c92:	0e 89       	ldd	r16, Y+22	; 0x16
     c94:	2b 2f       	mov	r18, r27
     c96:	3a 2f       	mov	r19, r26
     c98:	41 2f       	mov	r20, r17
     c9a:	50 2f       	mov	r21, r16
     c9c:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
     ca0:	16 2f       	mov	r17, r22
     ca2:	07 2f       	mov	r16, r23
     ca4:	e8 2e       	mov	r14, r24
     ca6:	a9 2e       	mov	r10, r25
     ca8:	86 2f       	mov	r24, r22
     caa:	90 2f       	mov	r25, r16
     cac:	ae 2d       	mov	r26, r14
     cae:	ba 2d       	mov	r27, r10
     cb0:	89 83       	std	Y+1, r24	; 0x01
     cb2:	9a 83       	std	Y+2, r25	; 0x02
     cb4:	ab 83       	std	Y+3, r26	; 0x03
     cb6:	bc 83       	std	Y+4, r27	; 0x04
			distanceW+=S_distanceW;
     cb8:	6d 81       	ldd	r22, Y+5	; 0x05
     cba:	7e 81       	ldd	r23, Y+6	; 0x06
     cbc:	8f 81       	ldd	r24, Y+7	; 0x07
     cbe:	98 85       	ldd	r25, Y+8	; 0x08
     cc0:	d2 01       	movw	r26, r4
     cc2:	f1 01       	movw	r30, r2
     cc4:	2b 2f       	mov	r18, r27
     cc6:	34 2d       	mov	r19, r4
     cc8:	4f 2f       	mov	r20, r31
     cca:	52 2d       	mov	r21, r2
     ccc:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
     cd0:	26 2f       	mov	r18, r22
     cd2:	37 2f       	mov	r19, r23
     cd4:	48 2f       	mov	r20, r24
     cd6:	59 2f       	mov	r21, r25
     cd8:	2d 83       	std	Y+5, r18	; 0x05
     cda:	3e 83       	std	Y+6, r19	; 0x06
     cdc:	4f 83       	std	Y+7, r20	; 0x07
     cde:	58 87       	std	Y+8, r21	; 0x08
			if(distance>=stop && stop!=0)next_speed=100;
     ce0:	6f 89       	ldd	r22, Y+23	; 0x17
     ce2:	78 8d       	ldd	r23, Y+24	; 0x18
     ce4:	89 8d       	ldd	r24, Y+25	; 0x19
     ce6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ce8:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__floatunsisf>
     cec:	9b 01       	movw	r18, r22
     cee:	ac 01       	movw	r20, r24
     cf0:	61 2f       	mov	r22, r17
     cf2:	70 2f       	mov	r23, r16
     cf4:	8e 2d       	mov	r24, r14
     cf6:	9a 2d       	mov	r25, r10
     cf8:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__gesf2>
     cfc:	87 fd       	sbrc	r24, 7
     cfe:	10 c0       	rjmp	.+32     	; 0xd20 <Turn_and_Drive+0x30e>
     d00:	ab 85       	ldd	r26, Y+11	; 0x0b
     d02:	bc 85       	ldd	r27, Y+12	; 0x0c
     d04:	10 97       	sbiw	r26, 0x00	; 0
     d06:	61 f0       	breq	.+24     	; 0xd20 <Turn_and_Drive+0x30e>
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	a8 ec       	ldi	r26, 0xC8	; 200
     d0e:	b2 e4       	ldi	r27, 0x42	; 66
     d10:	80 93 3c 02 	sts	0x023C, r24
     d14:	90 93 3d 02 	sts	0x023D, r25
     d18:	a0 93 3e 02 	sts	0x023E, r26
     d1c:	b0 93 3f 02 	sts	0x023F, r27
			if(fabs(distanceW)>=wstop && wstop!=0){
     d20:	ad 80       	ldd	r10, Y+5	; 0x05
     d22:	be 80       	ldd	r11, Y+6	; 0x06
     d24:	cf 80       	ldd	r12, Y+7	; 0x07
     d26:	d8 84       	ldd	r13, Y+8	; 0x08
     d28:	e8 94       	clt
     d2a:	d7 f8       	bld	r13, 7
     d2c:	6b 8d       	ldd	r22, Y+27	; 0x1b
     d2e:	7c 8d       	ldd	r23, Y+28	; 0x1c
     d30:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d32:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d34:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__floatunsisf>
     d38:	9b 01       	movw	r18, r22
     d3a:	ac 01       	movw	r20, r24
     d3c:	c6 01       	movw	r24, r12
     d3e:	b5 01       	movw	r22, r10
     d40:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__gesf2>
     d44:	87 fd       	sbrc	r24, 7
     d46:	2b c0       	rjmp	.+86     	; 0xd9e <Turn_and_Drive+0x38c>
     d48:	ad 85       	ldd	r26, Y+13	; 0x0d
     d4a:	be 85       	ldd	r27, Y+14	; 0x0e
     d4c:	10 97       	sbiw	r26, 0x00	; 0
     d4e:	39 f1       	breq	.+78     	; 0xd9e <Turn_and_Drive+0x38c>
				next_wspeed=20;
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	a0 ea       	ldi	r26, 0xA0	; 160
     d56:	b1 e4       	ldi	r27, 0x41	; 65
     d58:	80 93 44 02 	sts	0x0244, r24
     d5c:	90 93 45 02 	sts	0x0245, r25
     d60:	a0 93 46 02 	sts	0x0246, r26
     d64:	b0 93 47 02 	sts	0x0247, r27
				if(wspeed<=0)next_wspeed=-20;
     d68:	60 91 40 02 	lds	r22, 0x0240
     d6c:	70 91 41 02 	lds	r23, 0x0241
     d70:	80 91 42 02 	lds	r24, 0x0242
     d74:	90 91 43 02 	lds	r25, 0x0243
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	a9 01       	movw	r20, r18
     d7e:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__lesf2>
     d82:	18 16       	cp	r1, r24
     d84:	64 f0       	brlt	.+24     	; 0xd9e <Turn_and_Drive+0x38c>
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	a0 ea       	ldi	r26, 0xA0	; 160
     d8c:	b1 ec       	ldi	r27, 0xC1	; 193
     d8e:	80 93 44 02 	sts	0x0244, r24
     d92:	90 93 45 02 	sts	0x0245, r25
     d96:	a0 93 46 02 	sts	0x0246, r26
     d9a:	b0 93 47 02 	sts	0x0247, r27
			}

			if(distance>=mm || (distance*-1)>=mm){
     d9e:	6f 8d       	ldd	r22, Y+31	; 0x1f
     da0:	78 a1       	ldd	r23, Y+32	; 0x20
     da2:	89 a1       	ldd	r24, Y+33	; 0x21
     da4:	9a a1       	ldd	r25, Y+34	; 0x22
     da6:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__floatunsisf>
     daa:	7b 01       	movw	r14, r22
     dac:	8c 01       	movw	r16, r24
     dae:	69 81       	ldd	r22, Y+1	; 0x01
     db0:	7a 81       	ldd	r23, Y+2	; 0x02
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	9c 81       	ldd	r25, Y+4	; 0x04
     db6:	a8 01       	movw	r20, r16
     db8:	97 01       	movw	r18, r14
     dba:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__gesf2>
     dbe:	87 ff       	sbrs	r24, 7
     dc0:	0b c0       	rjmp	.+22     	; 0xdd8 <Turn_and_Drive+0x3c6>
     dc2:	69 81       	ldd	r22, Y+1	; 0x01
     dc4:	7a 81       	ldd	r23, Y+2	; 0x02
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	9c 81       	ldd	r25, Y+4	; 0x04
     dca:	90 58       	subi	r25, 0x80	; 128
     dcc:	a8 01       	movw	r20, r16
     dce:	97 01       	movw	r18, r14
     dd0:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__gesf2>
     dd4:	87 fd       	sbrc	r24, 7
     dd6:	15 c0       	rjmp	.+42     	; 0xe02 <Turn_and_Drive+0x3f0>
				flg0=1;
				next_speed=0;
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	dc 01       	movw	r26, r24
     dde:	80 93 3c 02 	sts	0x023C, r24
     de2:	90 93 3d 02 	sts	0x023D, r25
     de6:	a0 93 3e 02 	sts	0x023E, r26
     dea:	b0 93 3f 02 	sts	0x023F, r27
				speed=0;
     dee:	80 93 38 02 	sts	0x0238, r24
     df2:	90 93 39 02 	sts	0x0239, r25
     df6:	a0 93 3a 02 	sts	0x023A, r26
     dfa:	b0 93 3b 02 	sts	0x023B, r27
				next_wspeed=20;
				if(wspeed<=0)next_wspeed=-20;
			}

			if(distance>=mm || (distance*-1)>=mm){
				flg0=1;
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	99 87       	std	Y+9, r25	; 0x09
				next_speed=0;
				speed=0;
			}
			if(fabs(distanceW)>=dgree){
     e02:	6b a1       	ldd	r22, Y+35	; 0x23
     e04:	7c a1       	ldd	r23, Y+36	; 0x24
     e06:	8d a1       	ldd	r24, Y+37	; 0x25
     e08:	9e a1       	ldd	r25, Y+38	; 0x26
     e0a:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__floatsisf>
     e0e:	9b 01       	movw	r18, r22
     e10:	ac 01       	movw	r20, r24
     e12:	c6 01       	movw	r24, r12
     e14:	b5 01       	movw	r22, r10
     e16:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__gesf2>
     e1a:	87 fd       	sbrc	r24, 7
     e1c:	15 c0       	rjmp	.+42     	; 0xe48 <Turn_and_Drive+0x436>
				flg1=1;
				next_wspeed=0;
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	dc 01       	movw	r26, r24
     e24:	80 93 44 02 	sts	0x0244, r24
     e28:	90 93 45 02 	sts	0x0245, r25
     e2c:	a0 93 46 02 	sts	0x0246, r26
     e30:	b0 93 47 02 	sts	0x0247, r27
				wspeed=0;
     e34:	80 93 40 02 	sts	0x0240, r24
     e38:	90 93 41 02 	sts	0x0241, r25
     e3c:	a0 93 42 02 	sts	0x0242, r26
     e40:	b0 93 43 02 	sts	0x0243, r27
				flg0=1;
				next_speed=0;
				speed=0;
			}
			if(fabs(distanceW)>=dgree){
				flg1=1;
     e44:	a1 e0       	ldi	r26, 0x01	; 1
     e46:	aa 87       	std	Y+10, r26	; 0x0a
				next_wspeed=0;
				wspeed=0;
			}
		}
		if(flg0 && flg1)
     e48:	b9 85       	ldd	r27, Y+9	; 0x09
     e4a:	bb 23       	and	r27, r27
     e4c:	09 f4       	brne	.+2      	; 0xe50 <Turn_and_Drive+0x43e>
     e4e:	73 ce       	rjmp	.-794    	; 0xb36 <Turn_and_Drive+0x124>
     e50:	ea 85       	ldd	r30, Y+10	; 0x0a
     e52:	ee 23       	and	r30, r30
     e54:	09 f4       	brne	.+2      	; 0xe58 <Turn_and_Drive+0x446>
     e56:	6f ce       	rjmp	.-802    	; 0xb36 <Turn_and_Drive+0x124>
			break;
	}
}
     e58:	a6 96       	adiw	r28, 0x26	; 38
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	bf 90       	pop	r11
     e76:	af 90       	pop	r10
     e78:	9f 90       	pop	r9
     e7a:	8f 90       	pop	r8
     e7c:	7f 90       	pop	r7
     e7e:	6f 90       	pop	r6
     e80:	5f 90       	pop	r5
     e82:	4f 90       	pop	r4
     e84:	3f 90       	pop	r3
     e86:	2f 90       	pop	r2
     e88:	08 95       	ret

00000e8a <non_Holonomic>:
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
}

void non_Holonomic(long Fx, long Fy, long Fw){
     e8a:	2f 92       	push	r2
     e8c:	3f 92       	push	r3
     e8e:	4f 92       	push	r4
     e90:	5f 92       	push	r5
     e92:	6f 92       	push	r6
     e94:	7f 92       	push	r7
     e96:	8f 92       	push	r8
     e98:	9f 92       	push	r9
     e9a:	af 92       	push	r10
     e9c:	bf 92       	push	r11
     e9e:	cf 92       	push	r12
     ea0:	df 92       	push	r13
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	2d 97       	sbiw	r28, 0x0d	; 13
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	3b 01       	movw	r6, r22
     ec0:	4c 01       	movw	r8, r24
     ec2:	59 01       	movw	r10, r18
     ec4:	6a 01       	movw	r12, r20

	unsigned char i=0;
	double V[3]={0,0,0};
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	dc 01       	movw	r26, r24
     ecc:	89 83       	std	Y+1, r24	; 0x01
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	ab 83       	std	Y+3, r26	; 0x03
     ed2:	bc 83       	std	Y+4, r27	; 0x04
     ed4:	8d 83       	std	Y+5, r24	; 0x05
     ed6:	9e 83       	std	Y+6, r25	; 0x06
     ed8:	af 83       	std	Y+7, r26	; 0x07
     eda:	b8 87       	std	Y+8, r27	; 0x08
     edc:	89 87       	std	Y+9, r24	; 0x09
     ede:	9a 87       	std	Y+10, r25	; 0x0a
     ee0:	ab 87       	std	Y+11, r26	; 0x0b
     ee2:	bc 87       	std	Y+12, r27	; 0x0c

	if(Fx==0 && Fy==0 && Fw==0)StopMotion(STOP_ABRUPTLY);
     ee4:	61 14       	cp	r6, r1
     ee6:	71 04       	cpc	r7, r1
     ee8:	81 04       	cpc	r8, r1
     eea:	91 04       	cpc	r9, r1
     eec:	71 f4       	brne	.+28     	; 0xf0a <non_Holonomic+0x80>
     eee:	21 15       	cp	r18, r1
     ef0:	31 05       	cpc	r19, r1
     ef2:	41 05       	cpc	r20, r1
     ef4:	51 05       	cpc	r21, r1
     ef6:	49 f4       	brne	.+18     	; 0xf0a <non_Holonomic+0x80>
     ef8:	e1 14       	cp	r14, r1
     efa:	f1 04       	cpc	r15, r1
     efc:	01 05       	cpc	r16, r1
     efe:	11 05       	cpc	r17, r1
     f00:	21 f4       	brne	.+8      	; 0xf0a <non_Holonomic+0x80>
     f02:	89 e0       	ldi	r24, 0x09	; 9
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 df 11 	call	0x23be	; 0x23be <StopMotion>

	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
     f0a:	c4 01       	movw	r24, r8
     f0c:	b3 01       	movw	r22, r6
     f0e:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__floatsisf>
     f12:	1b 01       	movw	r2, r22
     f14:	2c 01       	movw	r4, r24
     f16:	c6 01       	movw	r24, r12
     f18:	b5 01       	movw	r22, r10
     f1a:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__floatsisf>
     f1e:	3b 01       	movw	r6, r22
     f20:	4c 01       	movw	r8, r24
     f22:	22 e0       	ldi	r18, 0x02	; 2
     f24:	3b e2       	ldi	r19, 0x2B	; 43
     f26:	47 e0       	ldi	r20, 0x07	; 7
     f28:	5d e3       	ldi	r21, 0x3D	; 61
     f2a:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
     f2e:	d6 2e       	mov	r13, r22
     f30:	c7 2e       	mov	r12, r23
     f32:	b8 2e       	mov	r11, r24
     f34:	9d 87       	std	Y+13, r25	; 0x0d
     f36:	c8 01       	movw	r24, r16
     f38:	b7 01       	movw	r22, r14
     f3a:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__floatsisf>
     f3e:	29 e2       	ldi	r18, 0x29	; 41
     f40:	3c e5       	ldi	r19, 0x5C	; 92
     f42:	4f e0       	ldi	r20, 0x0F	; 15
     f44:	5e e3       	ldi	r21, 0x3E	; 62
     f46:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
     f4a:	a6 2e       	mov	r10, r22
     f4c:	e7 2e       	mov	r14, r23
     f4e:	8c 01       	movw	r16, r24
     f50:	c2 01       	movw	r24, r4
     f52:	b1 01       	movw	r22, r2
     f54:	22 e4       	ldi	r18, 0x42	; 66
     f56:	30 e6       	ldi	r19, 0x60	; 96
     f58:	45 e6       	ldi	r20, 0x65	; 101
     f5a:	5d e3       	ldi	r21, 0x3D	; 61
     f5c:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
     f60:	d6 01       	movw	r26, r12
     f62:	ed 85       	ldd	r30, Y+13	; 0x0d
     f64:	2b 2f       	mov	r18, r27
     f66:	3a 2f       	mov	r19, r26
     f68:	4b 2d       	mov	r20, r11
     f6a:	5e 2f       	mov	r21, r30
     f6c:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
     f70:	2a 2d       	mov	r18, r10
     f72:	3e 2d       	mov	r19, r14
     f74:	40 2f       	mov	r20, r16
     f76:	51 2f       	mov	r21, r17
     f78:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
     f7c:	69 83       	std	Y+1, r22	; 0x01
     f7e:	7a 83       	std	Y+2, r23	; 0x02
     f80:	8b 83       	std	Y+3, r24	; 0x03
     f82:	9c 83       	std	Y+4, r25	; 0x04
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
     f84:	c4 01       	movw	r24, r8
     f86:	b3 01       	movw	r22, r6
     f88:	28 eb       	ldi	r18, 0xB8	; 184
     f8a:	3e e1       	ldi	r19, 0x1E	; 30
     f8c:	45 e8       	ldi	r20, 0x85	; 133
     f8e:	5d eb       	ldi	r21, 0xBD	; 189
     f90:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
     f94:	2a 2d       	mov	r18, r10
     f96:	3e 2d       	mov	r19, r14
     f98:	40 2f       	mov	r20, r16
     f9a:	51 2f       	mov	r21, r17
     f9c:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
     fa0:	6d 83       	std	Y+5, r22	; 0x05
     fa2:	7e 83       	std	Y+6, r23	; 0x06
     fa4:	8f 83       	std	Y+7, r24	; 0x07
     fa6:	98 87       	std	Y+8, r25	; 0x08
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
     fa8:	c2 01       	movw	r24, r4
     faa:	b1 01       	movw	r22, r2
     fac:	22 e4       	ldi	r18, 0x42	; 66
     fae:	30 e6       	ldi	r19, 0x60	; 96
     fb0:	45 e6       	ldi	r20, 0x65	; 101
     fb2:	5d eb       	ldi	r21, 0xBD	; 189
     fb4:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
     fb8:	d6 01       	movw	r26, r12
     fba:	ed 85       	ldd	r30, Y+13	; 0x0d
     fbc:	2b 2f       	mov	r18, r27
     fbe:	3a 2f       	mov	r19, r26
     fc0:	4b 2d       	mov	r20, r11
     fc2:	5e 2f       	mov	r21, r30
     fc4:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
     fc8:	2a 2d       	mov	r18, r10
     fca:	3e 2d       	mov	r19, r14
     fcc:	40 2f       	mov	r20, r16
     fce:	51 2f       	mov	r21, r17
     fd0:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
     fd4:	69 87       	std	Y+9, r22	; 0x09
     fd6:	7a 87       	std	Y+10, r23	; 0x0a
     fd8:	8b 87       	std	Y+11, r24	; 0x0b
     fda:	9c 87       	std	Y+12, r25	; 0x0c
     fdc:	8e 01       	movw	r16, r28
     fde:	0f 5f       	subi	r16, 0xFF	; 255
     fe0:	1f 4f       	sbci	r17, 0xFF	; 255

	for(i=0;i<3;++i){
     fe2:	ee 24       	eor	r14, r14
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
}

void non_Holonomic(long Fx, long Fy, long Fw){
     fe4:	58 01       	movw	r10, r16
	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));

	for(i=0;i<3;++i){
		if(V[i]>=40)V[i]=40;
     fe6:	f8 01       	movw	r30, r16
     fe8:	60 81       	ld	r22, Z
     fea:	71 81       	ldd	r23, Z+1	; 0x01
     fec:	82 81       	ldd	r24, Z+2	; 0x02
     fee:	93 81       	ldd	r25, Z+3	; 0x03
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	40 e2       	ldi	r20, 0x20	; 32
     ff6:	52 e4       	ldi	r21, 0x42	; 66
     ff8:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__gesf2>
     ffc:	87 fd       	sbrc	r24, 7
     ffe:	09 c0       	rjmp	.+18     	; 0x1012 <non_Holonomic+0x188>
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	a0 e2       	ldi	r26, 0x20	; 32
    1006:	b2 e4       	ldi	r27, 0x42	; 66
    1008:	f8 01       	movw	r30, r16
    100a:	80 83       	st	Z, r24
    100c:	91 83       	std	Z+1, r25	; 0x01
    100e:	a2 83       	std	Z+2, r26	; 0x02
    1010:	b3 83       	std	Z+3, r27	; 0x03
		if(V[i]<=(-40))V[i]=-40;
    1012:	f8 01       	movw	r30, r16
    1014:	60 81       	ld	r22, Z
    1016:	71 81       	ldd	r23, Z+1	; 0x01
    1018:	82 81       	ldd	r24, Z+2	; 0x02
    101a:	93 81       	ldd	r25, Z+3	; 0x03
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e2       	ldi	r20, 0x20	; 32
    1022:	52 ec       	ldi	r21, 0xC2	; 194
    1024:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__lesf2>
    1028:	18 16       	cp	r1, r24
    102a:	4c f0       	brlt	.+18     	; 0x103e <non_Holonomic+0x1b4>
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	a0 e2       	ldi	r26, 0x20	; 32
    1032:	b2 ec       	ldi	r27, 0xC2	; 194
    1034:	f8 01       	movw	r30, r16
    1036:	80 83       	st	Z, r24
    1038:	91 83       	std	Z+1, r25	; 0x01
    103a:	a2 83       	std	Z+2, r26	; 0x02
    103c:	b3 83       	std	Z+3, r27	; 0x03
    103e:	0c 5f       	subi	r16, 0xFC	; 252
    1040:	1f 4f       	sbci	r17, 0xFF	; 255
		SetVelocity(i, V[i]*65536);
    1042:	f5 01       	movw	r30, r10
    1044:	60 81       	ld	r22, Z
    1046:	71 81       	ldd	r23, Z+1	; 0x01
    1048:	82 81       	ldd	r24, Z+2	; 0x02
    104a:	93 81       	ldd	r25, Z+3	; 0x03
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e8       	ldi	r20, 0x80	; 128
    1052:	57 e4       	ldi	r21, 0x47	; 71
    1054:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
    1058:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__fixsfsi>
    105c:	ab 01       	movw	r20, r22
    105e:	bc 01       	movw	r22, r24
    1060:	8e 2d       	mov	r24, r14
    1062:	0e 94 a4 10 	call	0x2148	; 0x2148 <SetVelocity>

	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));

	for(i=0;i<3;++i){
    1066:	e3 94       	inc	r14
    1068:	fe 2d       	mov	r31, r14
    106a:	f3 30       	cpi	r31, 0x03	; 3
    106c:	09 f0       	breq	.+2      	; 0x1070 <non_Holonomic+0x1e6>
    106e:	ba cf       	rjmp	.-140    	; 0xfe4 <non_Holonomic+0x15a>
		if(V[i]>=40)V[i]=40;
		if(V[i]<=(-40))V[i]=-40;
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
    1070:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <StartMotion>
}
    1074:	2d 96       	adiw	r28, 0x0d	; 13
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	ff 90       	pop	r15
    108a:	ef 90       	pop	r14
    108c:	df 90       	pop	r13
    108e:	cf 90       	pop	r12
    1090:	bf 90       	pop	r11
    1092:	af 90       	pop	r10
    1094:	9f 90       	pop	r9
    1096:	8f 90       	pop	r8
    1098:	7f 90       	pop	r7
    109a:	6f 90       	pop	r6
    109c:	5f 90       	pop	r5
    109e:	4f 90       	pop	r4
    10a0:	3f 90       	pop	r3
    10a2:	2f 90       	pop	r2
    10a4:	08 95       	ret

000010a6 <LINE_front>:




int LINE_front(void)
{
    10a6:	df 92       	push	r13
    10a8:	ef 92       	push	r14
    10aa:	ff 92       	push	r15
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
	unsigned char SENSOR=0;
	int err=0;
	unsigned char dir;
	sec=0;
    10b0:	10 92 37 02 	sts	0x0237, r1
    10b4:	10 92 36 02 	sts	0x0236, r1
	while(1)
	{
		SENSOR=READ_SENSOR();	
    10b8:	80 91 63 00 	lds	r24, 0x0063
    10bc:	91 b1       	in	r25, 0x01	; 1
    10be:	86 95       	lsr	r24
    10c0:	86 95       	lsr	r24
    10c2:	86 95       	lsr	r24
    10c4:	80 95       	com	r24
    10c6:	83 70       	andi	r24, 0x03	; 3
    10c8:	90 95       	com	r25
    10ca:	9c 71       	andi	r25, 0x1C	; 28
    10cc:	89 2b       	or	r24, r25
		if( SENSOR&0x08 )
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	83 ff       	sbrs	r24, 3
    10d2:	07 c0       	rjmp	.+14     	; 0x10e2 <LINE_front+0x3c>
		{
			sec=0;
    10d4:	10 92 37 02 	sts	0x0237, r1
    10d8:	10 92 36 02 	sts	0x0236, r1
			err=3;
    10dc:	43 e0       	ldi	r20, 0x03	; 3
    10de:	50 e0       	ldi	r21, 0x00	; 0
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <LINE_front+0x40>
		}
		else if (!(SENSOR&0x08) )err=-3;
    10e2:	4d ef       	ldi	r20, 0xFD	; 253
    10e4:	5f ef       	ldi	r21, 0xFF	; 255

		if(sec>50||(SENSOR&0x1C)==0x1C)
    10e6:	20 91 36 02 	lds	r18, 0x0236
    10ea:	30 91 37 02 	lds	r19, 0x0237
    10ee:	23 33       	cpi	r18, 0x33	; 51
    10f0:	31 05       	cpc	r19, r1
    10f2:	a8 f4       	brcc	.+42     	; 0x111e <__stack+0x1f>
    10f4:	9c 01       	movw	r18, r24
    10f6:	2c 71       	andi	r18, 0x1C	; 28
    10f8:	30 70       	andi	r19, 0x00	; 0
    10fa:	2c 31       	cpi	r18, 0x1C	; 28
    10fc:	31 05       	cpc	r19, r1
    10fe:	79 f0       	breq	.+30     	; 0x111e <__stack+0x1f>
		{
			dir=0;
			break;
			
		}		
		if((SENSOR&0x04))
    1100:	82 fd       	sbrc	r24, 2
    1102:	0f c0       	rjmp	.+30     	; 0x1122 <__stack+0x23>
		{	
			dir=2;
			break;
		}
		else if((SENSOR&0x10))
    1104:	84 fd       	sbrc	r24, 4
    1106:	10 c0       	rjmp	.+32     	; 0x1128 <__stack+0x29>
		{
			dir=3;
			break;
		}
		if(psd_value[0]>165){
    1108:	80 91 24 03 	lds	r24, 0x0324
    110c:	86 3a       	cpi	r24, 0xA6	; 166
    110e:	78 f4       	brcc	.+30     	; 0x112e <__stack+0x2f>
			dir=4;
			break;
		}
		HolonomicW(0,250,err);
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	6a ef       	ldi	r22, 0xFA	; 250
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <HolonomicW>
	}
    111c:	cd cf       	rjmp	.-102    	; 0x10b8 <LINE_front+0x12>
		}
		else if (!(SENSOR&0x08) )err=-3;

		if(sec>50||(SENSOR&0x1C)==0x1C)
		{
			dir=0;
    111e:	dd 24       	eor	r13, r13
    1120:	08 c0       	rjmp	.+16     	; 0x1132 <__stack+0x33>
			break;
			
		}		
		if((SENSOR&0x04))
		{	
			dir=2;
    1122:	82 e0       	ldi	r24, 0x02	; 2
    1124:	d8 2e       	mov	r13, r24
    1126:	05 c0       	rjmp	.+10     	; 0x1132 <__stack+0x33>
			break;
		}
		else if((SENSOR&0x10))
		{
			dir=3;
    1128:	03 e0       	ldi	r16, 0x03	; 3
    112a:	d0 2e       	mov	r13, r16
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <__stack+0x33>
			break;
		}
		if(psd_value[0]>165){
			dir=4;
    112e:	14 e0       	ldi	r17, 0x04	; 4
    1130:	d1 2e       	mov	r13, r17
			break;
		}
		HolonomicW(0,250,err);
	}
	non_Holonomic(0,0,0);
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	cb 01       	movw	r24, r22
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	a9 01       	movw	r20, r18
    113e:	ee 24       	eor	r14, r14
    1140:	ff 24       	eor	r15, r15
    1142:	87 01       	movw	r16, r14
    1144:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
	return dir;
}
    1148:	8d 2d       	mov	r24, r13
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	ff 90       	pop	r15
    1152:	ef 90       	pop	r14
    1154:	df 90       	pop	r13
    1156:	08 95       	ret

00001158 <READ_barcode>:
	non_Holonomic(0,0,0);
	return 0;

}

unsigned char READ_barcode(unsigned int distance,int f_speed){
    1158:	8f 92       	push	r8
    115a:	9f 92       	push	r9
    115c:	af 92       	push	r10
    115e:	bf 92       	push	r11
    1160:	df 92       	push	r13
    1162:	ef 92       	push	r14
    1164:	ff 92       	push	r15
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	4c 01       	movw	r8, r24
	unsigned char count = 0;
	next_speed=f_speed;
    116c:	88 27       	eor	r24, r24
    116e:	77 fd       	sbrc	r23, 7
    1170:	80 95       	com	r24
    1172:	98 2f       	mov	r25, r24
    1174:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__floatsisf>
    1178:	60 93 3c 02 	sts	0x023C, r22
    117c:	70 93 3d 02 	sts	0x023D, r23
    1180:	80 93 3e 02 	sts	0x023E, r24
    1184:	90 93 3f 02 	sts	0x023F, r25
	acc=5;
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	a0 ea       	ldi	r26, 0xA0	; 160
    118e:	b0 e4       	ldi	r27, 0x40	; 64
    1190:	80 93 00 01 	sts	0x0100, r24
    1194:	90 93 01 01 	sts	0x0101, r25
    1198:	a0 93 02 01 	sts	0x0102, r26
    119c:	b0 93 03 01 	sts	0x0103, r27
	TCNT1H=0xFF; TCNT1L=0x70;	//0.01초
    11a0:	8f ef       	ldi	r24, 0xFF	; 255
    11a2:	8d bd       	out	0x2d, r24	; 45
    11a4:	80 e7       	ldi	r24, 0x70	; 112
    11a6:	8c bd       	out	0x2c, r24	; 44
	sec=0;
    11a8:	10 92 37 02 	sts	0x0237, r1
    11ac:	10 92 36 02 	sts	0x0236, r1
	disMD=0;	//거리 초기화
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	dc 01       	movw	r26, r24
    11b6:	80 93 54 02 	sts	0x0254, r24
    11ba:	90 93 55 02 	sts	0x0255, r25
    11be:	a0 93 56 02 	sts	0x0256, r26
    11c2:	b0 93 57 02 	sts	0x0257, r27
	return 0;

}

unsigned char READ_barcode(unsigned int distance,int f_speed){
	unsigned char count = 0;
    11c6:	dd 24       	eor	r13, r13
	next_speed=f_speed;
	acc=5;
	TCNT1H=0xFF; TCNT1L=0x70;	//0.01초
	sec=0;
	disMD=0;	//거리 초기화
	while(!(disMD>=distance)){
    11c8:	aa 24       	eor	r10, r10
    11ca:	bb 24       	eor	r11, r11
    11cc:	24 c0       	rjmp	.+72     	; 0x1216 <READ_barcode+0xbe>
		HolonomicW(0,speed,0);
    11ce:	60 91 38 02 	lds	r22, 0x0238
    11d2:	70 91 39 02 	lds	r23, 0x0239
    11d6:	80 91 3a 02 	lds	r24, 0x023A
    11da:	90 91 3b 02 	lds	r25, 0x023B
    11de:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__fixsfsi>
    11e2:	9b 01       	movw	r18, r22
    11e4:	ac 01       	movw	r20, r24
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	b9 01       	movw	r22, r18
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <HolonomicW>
		if(READ_SENSOR()&0x08) {
    11f4:	80 91 63 00 	lds	r24, 0x0063
    11f8:	81 b1       	in	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	80 95       	com	r24
    11fe:	90 95       	com	r25
    1200:	83 ff       	sbrs	r24, 3
    1202:	09 c0       	rjmp	.+18     	; 0x1216 <READ_barcode+0xbe>
			count++;
    1204:	d3 94       	inc	r13
			while(READ_SENSOR()&0x08);	
    1206:	80 91 63 00 	lds	r24, 0x0063
    120a:	81 b1       	in	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	80 95       	com	r24
    1210:	90 95       	com	r25
    1212:	83 fd       	sbrc	r24, 3
    1214:	f8 cf       	rjmp	.-16     	; 0x1206 <READ_barcode+0xae>
	next_speed=f_speed;
	acc=5;
	TCNT1H=0xFF; TCNT1L=0x70;	//0.01초
	sec=0;
	disMD=0;	//거리 초기화
	while(!(disMD>=distance)){
    1216:	e0 90 54 02 	lds	r14, 0x0254
    121a:	f0 90 55 02 	lds	r15, 0x0255
    121e:	00 91 56 02 	lds	r16, 0x0256
    1222:	10 91 57 02 	lds	r17, 0x0257
    1226:	c5 01       	movw	r24, r10
    1228:	b4 01       	movw	r22, r8
    122a:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__floatunsisf>
    122e:	9b 01       	movw	r18, r22
    1230:	ac 01       	movw	r20, r24
    1232:	c8 01       	movw	r24, r16
    1234:	b7 01       	movw	r22, r14
    1236:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__gesf2>
    123a:	87 fd       	sbrc	r24, 7
    123c:	c8 cf       	rjmp	.-112    	; 0x11ce <READ_barcode+0x76>
		if(READ_SENSOR()&0x08) {
			count++;
			while(READ_SENSOR()&0x08);	
		}
	}
	non_Holonomic(0,0,0);
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	cb 01       	movw	r24, r22
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	a9 01       	movw	r20, r18
    124a:	ee 24       	eor	r14, r14
    124c:	ff 24       	eor	r15, r15
    124e:	87 01       	movw	r16, r14
    1250:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
	return count;
}
    1254:	8d 2d       	mov	r24, r13
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	df 90       	pop	r13
    1260:	bf 90       	pop	r11
    1262:	af 90       	pop	r10
    1264:	9f 90       	pop	r9
    1266:	8f 90       	pop	r8
    1268:	08 95       	ret

0000126a <irontracer>:
	non_Holonomic(0,0,0);
	return 0;
}

void irontracer() 
{
    126a:	ef 92       	push	r14
    126c:	ff 92       	push	r15
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
	unsigned char SENSOR=0;
//	int err=0;
	while(1){
		SENSOR=READ_SENSOR();
    1272:	80 91 63 00 	lds	r24, 0x0063
    1276:	91 b1       	in	r25, 0x01	; 1
    1278:	86 95       	lsr	r24
    127a:	86 95       	lsr	r24
    127c:	86 95       	lsr	r24
    127e:	80 95       	com	r24
    1280:	83 70       	andi	r24, 0x03	; 3
    1282:	90 95       	com	r25
    1284:	9c 71       	andi	r25, 0x1C	; 28
    1286:	89 2b       	or	r24, r25
		if(	(SENSOR&0x1C)==0x1C )	break;
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	9c 01       	movw	r18, r24
    128c:	2c 71       	andi	r18, 0x1C	; 28
    128e:	30 70       	andi	r19, 0x00	; 0
    1290:	2c 31       	cpi	r18, 0x1C	; 28
    1292:	31 05       	cpc	r19, r1
    1294:	91 f0       	breq	.+36     	; 0x12ba <irontracer+0x50>
		if( SENSOR&0x01 )	HolonomicW(0,150,5);
    1296:	80 ff       	sbrs	r24, 0
    1298:	07 c0       	rjmp	.+14     	; 0x12a8 <irontracer+0x3e>
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	66 e9       	ldi	r22, 0x96	; 150
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	45 e0       	ldi	r20, 0x05	; 5
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	06 c0       	rjmp	.+12     	; 0x12b4 <irontracer+0x4a>
		else 				HolonomicW(0,150,-5);
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	66 e9       	ldi	r22, 0x96	; 150
    12ae:	70 e0       	ldi	r23, 0x00	; 0
    12b0:	4b ef       	ldi	r20, 0xFB	; 251
    12b2:	5f ef       	ldi	r21, 0xFF	; 255
    12b4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <HolonomicW>
    12b8:	dc cf       	rjmp	.-72     	; 0x1272 <irontracer+0x8>
	}
	non_Holonomic(0,0,0);
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	cb 01       	movw	r24, r22
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	a9 01       	movw	r20, r18
    12c6:	ee 24       	eor	r14, r14
    12c8:	ff 24       	eor	r15, r15
    12ca:	87 01       	movw	r16, r14
    12cc:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
}
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	08 95       	ret

000012da <LINE_iron>:

}

///제작///

unsigned char LINE_iron(){ //센서 가운데로 모아야함 
    12da:	ef 92       	push	r14
    12dc:	ff 92       	push	r15
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
	unsigned char SENSOR=0;
	int err = 0;
    12e6:	c0 e0       	ldi	r28, 0x00	; 0
    12e8:	d0 e0       	ldi	r29, 0x00	; 0
	while(1){
		SENSOR=READ_SENSOR();
    12ea:	80 91 63 00 	lds	r24, 0x0063
    12ee:	91 b1       	in	r25, 0x01	; 1
    12f0:	86 95       	lsr	r24
    12f2:	86 95       	lsr	r24
    12f4:	86 95       	lsr	r24
    12f6:	80 95       	com	r24
    12f8:	83 70       	andi	r24, 0x03	; 3
    12fa:	90 95       	com	r25
    12fc:	9c 71       	andi	r25, 0x1C	; 28
    12fe:	89 2b       	or	r24, r25
		if(SENSOR&0x01)	   break;
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	80 fd       	sbrc	r24, 0
    1304:	42 c0       	rjmp	.+132    	; 0x138a <LINE_iron+0xb0>
		if((READ_SENSOR()&0x1C)==0x1C)	break;
    1306:	20 91 63 00 	lds	r18, 0x0063
    130a:	21 b1       	in	r18, 0x01	; 1
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	20 95       	com	r18
    1310:	30 95       	com	r19
    1312:	2c 71       	andi	r18, 0x1C	; 28
    1314:	30 70       	andi	r19, 0x00	; 0
    1316:	2c 31       	cpi	r18, 0x1C	; 28
    1318:	31 05       	cpc	r19, r1
    131a:	b9 f1       	breq	.+110    	; 0x138a <LINE_iron+0xb0>
    131c:	9c 01       	movw	r18, r24
    131e:	28 70       	andi	r18, 0x08	; 8
    1320:	30 70       	andi	r19, 0x00	; 0
		

		if		(!(SENSOR&0x04) && (SENSOR&0x08) && !(SENSOR&0x10)) err = 0;
    1322:	82 fd       	sbrc	r24, 2
    1324:	06 c0       	rjmp	.+12     	; 0x1332 <LINE_iron+0x58>
    1326:	21 15       	cp	r18, r1
    1328:	31 05       	cpc	r19, r1
    132a:	71 f0       	breq	.+28     	; 0x1348 <LINE_iron+0x6e>
    132c:	84 ff       	sbrs	r24, 4
    132e:	1a c0       	rjmp	.+52     	; 0x1364 <LINE_iron+0x8a>
    1330:	0b c0       	rjmp	.+22     	; 0x1348 <LINE_iron+0x6e>
    1332:	80 71       	andi	r24, 0x10	; 16
    1334:	90 70       	andi	r25, 0x00	; 0
		else if	( (SENSOR&0x04) && (SENSOR&0x08) && !(SENSOR&0x10)) err = -5;
    1336:	21 15       	cp	r18, r1
    1338:	31 05       	cpc	r19, r1
    133a:	19 f0       	breq	.+6      	; 0x1342 <LINE_iron+0x68>
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	a9 f0       	breq	.+42     	; 0x136a <LINE_iron+0x90>
    1340:	1c c0       	rjmp	.+56     	; 0x137a <LINE_iron+0xa0>
		else if	( (SENSOR&0x04) &&!(SENSOR&0x08) && !(SENSOR&0x10)) err = -10;
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	a9 f0       	breq	.+42     	; 0x1370 <LINE_iron+0x96>
    1346:	19 c0       	rjmp	.+50     	; 0x137a <LINE_iron+0xa0>

}

///제작///

unsigned char LINE_iron(){ //센서 가운데로 모아야함 
    1348:	ac 01       	movw	r20, r24
    134a:	48 71       	andi	r20, 0x18	; 24
    134c:	50 70       	andi	r21, 0x00	; 0
		

		if		(!(SENSOR&0x04) && (SENSOR&0x08) && !(SENSOR&0x10)) err = 0;
		else if	( (SENSOR&0x04) && (SENSOR&0x08) && !(SENSOR&0x10)) err = -5;
		else if	( (SENSOR&0x04) &&!(SENSOR&0x08) && !(SENSOR&0x10)) err = -10;
		else if	(!(SENSOR&0x04) && (SENSOR&0x08) &&  (SENSOR&0x10)) err = 5;
    134e:	48 31       	cpi	r20, 0x18	; 24
    1350:	51 05       	cpc	r21, r1
    1352:	89 f0       	breq	.+34     	; 0x1376 <LINE_iron+0x9c>
		else if	(!(SENSOR&0x04) &&!(SENSOR&0x08) &&  (SENSOR&0x10)) err = 10;
    1354:	21 15       	cp	r18, r1
    1356:	31 05       	cpc	r19, r1
    1358:	81 f4       	brne	.+32     	; 0x137a <LINE_iron+0xa0>
    135a:	84 ff       	sbrs	r24, 4
    135c:	0e c0       	rjmp	.+28     	; 0x137a <LINE_iron+0xa0>
    135e:	ca e0       	ldi	r28, 0x0A	; 10
    1360:	d0 e0       	ldi	r29, 0x00	; 0
    1362:	0b c0       	rjmp	.+22     	; 0x137a <LINE_iron+0xa0>
		SENSOR=READ_SENSOR();
		if(SENSOR&0x01)	   break;
		if((READ_SENSOR()&0x1C)==0x1C)	break;
		

		if		(!(SENSOR&0x04) && (SENSOR&0x08) && !(SENSOR&0x10)) err = 0;
    1364:	c0 e0       	ldi	r28, 0x00	; 0
    1366:	d0 e0       	ldi	r29, 0x00	; 0
    1368:	08 c0       	rjmp	.+16     	; 0x137a <LINE_iron+0xa0>
		else if	( (SENSOR&0x04) && (SENSOR&0x08) && !(SENSOR&0x10)) err = -5;
    136a:	cb ef       	ldi	r28, 0xFB	; 251
    136c:	df ef       	ldi	r29, 0xFF	; 255
    136e:	05 c0       	rjmp	.+10     	; 0x137a <LINE_iron+0xa0>
		else if	( (SENSOR&0x04) &&!(SENSOR&0x08) && !(SENSOR&0x10)) err = -10;
    1370:	c6 ef       	ldi	r28, 0xF6	; 246
    1372:	df ef       	ldi	r29, 0xFF	; 255
    1374:	02 c0       	rjmp	.+4      	; 0x137a <LINE_iron+0xa0>
		else if	(!(SENSOR&0x04) && (SENSOR&0x08) &&  (SENSOR&0x10)) err = 5;
    1376:	c5 e0       	ldi	r28, 0x05	; 5
    1378:	d0 e0       	ldi	r29, 0x00	; 0
		else if	(!(SENSOR&0x04) &&!(SENSOR&0x08) &&  (SENSOR&0x10)) err = 10;

		HolonomicW(0,200,err);
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	68 ec       	ldi	r22, 0xC8	; 200
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	ae 01       	movw	r20, r28
    1384:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <HolonomicW>
	}
    1388:	b0 cf       	rjmp	.-160    	; 0x12ea <LINE_iron+0x10>
	non_Holonomic(0,0,0);
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	cb 01       	movw	r24, r22
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	a9 01       	movw	r20, r18
    1396:	ee 24       	eor	r14, r14
    1398:	ff 24       	eor	r15, r15
    139a:	87 01       	movw	r16, r14
    139c:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
	return 0;
}
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	ff 90       	pop	r15
    13ac:	ef 90       	pop	r14
    13ae:	08 95       	ret

000013b0 <ladder_iron>:
	non_Holonomic(0,0,0);
}


//direction = 1.왼쪽 / 2.오른쪽
void ladder_iron(int direction){ //센서 가운데로 모아야함 
    13b0:	ef 92       	push	r14
    13b2:	ff 92       	push	r15
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	ec 01       	movw	r28, r24

	while(1){
		LINE_iron();
    13be:	0e 94 6d 09 	call	0x12da	; 0x12da <LINE_iron>

		Holonomic_distance(0,250,150,100);
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	6a ef       	ldi	r22, 0xFA	; 250
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	46 e9       	ldi	r20, 0x96	; 150
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	24 e6       	ldi	r18, 0x64	; 100
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Holonomic_distance>
		if(direction == 1){
    13d6:	c1 30       	cpi	r28, 0x01	; 1
    13d8:	d1 05       	cpc	r29, r1
    13da:	99 f5       	brne	.+102    	; 0x1442 <ladder_iron+0x92>
    13dc:	0d c0       	rjmp	.+26     	; 0x13f8 <ladder_iron+0x48>
			while(!(READ_SENSOR()&0x01))	non_Holonomic(0,0,65);
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	cb 01       	movw	r24, r22
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	a9 01       	movw	r20, r18
    13ea:	f1 e4       	ldi	r31, 0x41	; 65
    13ec:	ef 2e       	mov	r14, r31
    13ee:	f1 2c       	mov	r15, r1
    13f0:	01 2d       	mov	r16, r1
    13f2:	11 2d       	mov	r17, r1
    13f4:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
    13f8:	80 91 63 00 	lds	r24, 0x0063
    13fc:	91 b1       	in	r25, 0x01	; 1
    13fe:	86 95       	lsr	r24
    1400:	86 95       	lsr	r24
    1402:	86 95       	lsr	r24
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	80 95       	com	r24
    1408:	90 95       	com	r25
    140a:	80 ff       	sbrs	r24, 0
    140c:	e8 cf       	rjmp	.-48     	; 0x13de <ladder_iron+0x2e>
    140e:	0d c0       	rjmp	.+26     	; 0x142a <ladder_iron+0x7a>
			while( (READ_SENSOR()&0x01))	non_Holonomic(0,0,65);
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	cb 01       	movw	r24, r22
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	a9 01       	movw	r20, r18
    141c:	e1 e4       	ldi	r30, 0x41	; 65
    141e:	ee 2e       	mov	r14, r30
    1420:	f1 2c       	mov	r15, r1
    1422:	01 2d       	mov	r16, r1
    1424:	11 2d       	mov	r17, r1
    1426:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
    142a:	80 91 63 00 	lds	r24, 0x0063
    142e:	91 b1       	in	r25, 0x01	; 1
    1430:	86 95       	lsr	r24
    1432:	86 95       	lsr	r24
    1434:	86 95       	lsr	r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	80 95       	com	r24
    143a:	90 95       	com	r25
    143c:	80 fd       	sbrc	r24, 0
    143e:	e8 cf       	rjmp	.-48     	; 0x1410 <ladder_iron+0x60>
    1440:	1f c0       	rjmp	.+62     	; 0x1480 <ladder_iron+0xd0>
				//irontracer가 센서의 왼쪽으로 금속선을 타기 때문에 더 회전해서 왼쪽에 걸쳐줘야 한다
		} else if(direction == 2){
    1442:	c2 30       	cpi	r28, 0x02	; 2
    1444:	d1 05       	cpc	r29, r1
    1446:	e1 f4       	brne	.+56     	; 0x1480 <ladder_iron+0xd0>
    1448:	10 c0       	rjmp	.+32     	; 0x146a <ladder_iron+0xba>
			while(!(READ_SENSOR()&0x01))	non_Holonomic(0,0,-65);
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	cb 01       	movw	r24, r22
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	a9 01       	movw	r20, r18
    1456:	bf eb       	ldi	r27, 0xBF	; 191
    1458:	eb 2e       	mov	r14, r27
    145a:	bf ef       	ldi	r27, 0xFF	; 255
    145c:	fb 2e       	mov	r15, r27
    145e:	bf ef       	ldi	r27, 0xFF	; 255
    1460:	0b 2f       	mov	r16, r27
    1462:	bf ef       	ldi	r27, 0xFF	; 255
    1464:	1b 2f       	mov	r17, r27
    1466:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
    146a:	80 91 63 00 	lds	r24, 0x0063
    146e:	91 b1       	in	r25, 0x01	; 1
    1470:	86 95       	lsr	r24
    1472:	86 95       	lsr	r24
    1474:	86 95       	lsr	r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	80 95       	com	r24
    147a:	90 95       	com	r25
    147c:	80 ff       	sbrs	r24, 0
    147e:	e5 cf       	rjmp	.-54     	; 0x144a <ladder_iron+0x9a>
		} 
		irontracer();
    1480:	0e 94 35 09 	call	0x126a	; 0x126a <irontracer>
		Holonomic_distance(0,250,150,100);
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	6a ef       	ldi	r22, 0xFA	; 250
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	46 e9       	ldi	r20, 0x96	; 150
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	24 e6       	ldi	r18, 0x64	; 100
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Holonomic_distance>
		if(direction == 1){
    1498:	c1 30       	cpi	r28, 0x01	; 1
    149a:	d1 05       	cpc	r29, r1
    149c:	a9 f5       	brne	.+106    	; 0x1508 <ladder_iron+0x158>
    149e:	10 c0       	rjmp	.+32     	; 0x14c0 <ladder_iron+0x110>
			while(!(READ_SENSOR()&0x08))	non_Holonomic(0,0,-65);
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	cb 01       	movw	r24, r22
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	a9 01       	movw	r20, r18
    14ac:	af eb       	ldi	r26, 0xBF	; 191
    14ae:	ea 2e       	mov	r14, r26
    14b0:	af ef       	ldi	r26, 0xFF	; 255
    14b2:	fa 2e       	mov	r15, r26
    14b4:	af ef       	ldi	r26, 0xFF	; 255
    14b6:	0a 2f       	mov	r16, r26
    14b8:	af ef       	ldi	r26, 0xFF	; 255
    14ba:	1a 2f       	mov	r17, r26
    14bc:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
    14c0:	80 91 63 00 	lds	r24, 0x0063
    14c4:	81 b1       	in	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	80 95       	com	r24
    14ca:	90 95       	com	r25
    14cc:	83 ff       	sbrs	r24, 3
    14ce:	e8 cf       	rjmp	.-48     	; 0x14a0 <ladder_iron+0xf0>
			non_Holonomic(0,0,-65);
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	cb 01       	movw	r24, r22
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	a9 01       	movw	r20, r18
    14dc:	ff eb       	ldi	r31, 0xBF	; 191
    14de:	ef 2e       	mov	r14, r31
    14e0:	ff ef       	ldi	r31, 0xFF	; 255
    14e2:	ff 2e       	mov	r15, r31
    14e4:	ff ef       	ldi	r31, 0xFF	; 255
    14e6:	0f 2f       	mov	r16, r31
    14e8:	ff ef       	ldi	r31, 0xFF	; 255
    14ea:	1f 2f       	mov	r17, r31
    14ec:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
    14f0:	8f ef       	ldi	r24, 0xFF	; 255
    14f2:	9f e3       	ldi	r25, 0x3F	; 63
    14f4:	a2 e0       	ldi	r26, 0x02	; 2
    14f6:	81 50       	subi	r24, 0x01	; 1
    14f8:	90 40       	sbci	r25, 0x00	; 0
    14fa:	a0 40       	sbci	r26, 0x00	; 0
    14fc:	e1 f7       	brne	.-8      	; 0x14f6 <ladder_iron+0x146>
    14fe:	00 c0       	rjmp	.+0      	; 0x1500 <ladder_iron+0x150>
    1500:	00 00       	nop
			_delay_ms(50);
			direction = 2;
    1502:	c2 e0       	ldi	r28, 0x02	; 2
    1504:	d0 e0       	ldi	r29, 0x00	; 0
    1506:	5b cf       	rjmp	.-330    	; 0x13be <ladder_iron+0xe>
		} else if (direction == 2){
    1508:	c2 30       	cpi	r28, 0x02	; 2
    150a:	d1 05       	cpc	r29, r1
    150c:	09 f0       	breq	.+2      	; 0x1510 <ladder_iron+0x160>
    150e:	57 cf       	rjmp	.-338    	; 0x13be <ladder_iron+0xe>
    1510:	0d c0       	rjmp	.+26     	; 0x152c <ladder_iron+0x17c>
			while(!(READ_SENSOR()&0x08))	non_Holonomic(0,0,65);
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	cb 01       	movw	r24, r22
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	a9 01       	movw	r20, r18
    151e:	e1 e4       	ldi	r30, 0x41	; 65
    1520:	ee 2e       	mov	r14, r30
    1522:	f1 2c       	mov	r15, r1
    1524:	01 2d       	mov	r16, r1
    1526:	11 2d       	mov	r17, r1
    1528:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
    152c:	80 91 63 00 	lds	r24, 0x0063
    1530:	81 b1       	in	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	80 95       	com	r24
    1536:	90 95       	com	r25
    1538:	83 ff       	sbrs	r24, 3
    153a:	eb cf       	rjmp	.-42     	; 0x1512 <ladder_iron+0x162>
			direction = 1;
    153c:	c1 e0       	ldi	r28, 0x01	; 1
    153e:	d0 e0       	ldi	r29, 0x00	; 0
    1540:	3e cf       	rjmp	.-388    	; 0x13be <ladder_iron+0xe>

00001542 <LINE_back>:
	}
	non_Holonomic(0,0,0);
	return dir;
}

int LINE_back(){
    1542:	df 92       	push	r13
    1544:	ef 92       	push	r14
    1546:	ff 92       	push	r15
    1548:	0f 93       	push	r16
    154a:	1f 93       	push	r17
	unsigned char SENSOR=0;
	int err=0;
	unsigned char dir;
	sec=0;
    154c:	10 92 37 02 	sts	0x0237, r1
    1550:	10 92 36 02 	sts	0x0236, r1
	while(1)
	{
		SENSOR=READ_SENSOR();	
    1554:	80 91 63 00 	lds	r24, 0x0063
    1558:	91 b1       	in	r25, 0x01	; 1
    155a:	86 95       	lsr	r24
    155c:	86 95       	lsr	r24
    155e:	86 95       	lsr	r24
    1560:	80 95       	com	r24
    1562:	83 70       	andi	r24, 0x03	; 3
    1564:	90 95       	com	r25
    1566:	9c 71       	andi	r25, 0x1C	; 28
    1568:	89 2b       	or	r24, r25
		if( SENSOR&0x08 )
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	83 ff       	sbrs	r24, 3
    156e:	07 c0       	rjmp	.+14     	; 0x157e <LINE_back+0x3c>
		{
			sec=0;
    1570:	10 92 37 02 	sts	0x0237, r1
    1574:	10 92 36 02 	sts	0x0236, r1
			err=3;
    1578:	43 e0       	ldi	r20, 0x03	; 3
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <LINE_back+0x40>
		}
		else if (!(SENSOR&0x08) )err=-3;
    157e:	4d ef       	ldi	r20, 0xFD	; 253
    1580:	5f ef       	ldi	r21, 0xFF	; 255

		if(sec>50||(SENSOR&0x1C)==0x1C)
    1582:	20 91 36 02 	lds	r18, 0x0236
    1586:	30 91 37 02 	lds	r19, 0x0237
    158a:	23 33       	cpi	r18, 0x33	; 51
    158c:	31 05       	cpc	r19, r1
    158e:	98 f4       	brcc	.+38     	; 0x15b6 <LINE_back+0x74>
    1590:	9c 01       	movw	r18, r24
    1592:	2c 71       	andi	r18, 0x1C	; 28
    1594:	30 70       	andi	r19, 0x00	; 0
    1596:	2c 31       	cpi	r18, 0x1C	; 28
    1598:	31 05       	cpc	r19, r1
    159a:	69 f0       	breq	.+26     	; 0x15b6 <LINE_back+0x74>
		{
			dir=0;
			break;
			
		}		
		if((SENSOR&0x04))
    159c:	82 fd       	sbrc	r24, 2
    159e:	0d c0       	rjmp	.+26     	; 0x15ba <LINE_back+0x78>
		{	
			dir=2;
			break;
		}
		else if((SENSOR&0x10))
    15a0:	84 fd       	sbrc	r24, 4
    15a2:	0e c0       	rjmp	.+28     	; 0x15c0 <LINE_back+0x7e>
		{
			dir=3;
			break;
		}
		if(SENSOR&0x01){
    15a4:	80 fd       	sbrc	r24, 0
    15a6:	0f c0       	rjmp	.+30     	; 0x15c6 <LINE_back+0x84>
			dir=4;
			break;
		}
		HolonomicW(0,-250,err);
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	66 e0       	ldi	r22, 0x06	; 6
    15ae:	7f ef       	ldi	r23, 0xFF	; 255
    15b0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <HolonomicW>
	}
    15b4:	cf cf       	rjmp	.-98     	; 0x1554 <LINE_back+0x12>
		}
		else if (!(SENSOR&0x08) )err=-3;

		if(sec>50||(SENSOR&0x1C)==0x1C)
		{
			dir=0;
    15b6:	dd 24       	eor	r13, r13
    15b8:	08 c0       	rjmp	.+16     	; 0x15ca <LINE_back+0x88>
			break;
			
		}		
		if((SENSOR&0x04))
		{	
			dir=2;
    15ba:	12 e0       	ldi	r17, 0x02	; 2
    15bc:	d1 2e       	mov	r13, r17
    15be:	05 c0       	rjmp	.+10     	; 0x15ca <LINE_back+0x88>
			break;
		}
		else if((SENSOR&0x10))
		{
			dir=3;
    15c0:	b3 e0       	ldi	r27, 0x03	; 3
    15c2:	db 2e       	mov	r13, r27
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <LINE_back+0x88>
			break;
		}
		if(SENSOR&0x01){
			dir=4;
    15c6:	a4 e0       	ldi	r26, 0x04	; 4
    15c8:	da 2e       	mov	r13, r26
			break;
		}
		HolonomicW(0,-250,err);
	}
	non_Holonomic(0,0,0);
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	cb 01       	movw	r24, r22
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	a9 01       	movw	r20, r18
    15d6:	ee 24       	eor	r14, r14
    15d8:	ff 24       	eor	r15, r15
    15da:	87 01       	movw	r16, r14
    15dc:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
	return dir;

}
    15e0:	8d 2d       	mov	r24, r13
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	ff 90       	pop	r15
    15ea:	ef 90       	pop	r14
    15ec:	df 90       	pop	r13
    15ee:	08 95       	ret

000015f0 <LINE>:
	}
}


int LINE(void)
{
    15f0:	df 92       	push	r13
    15f2:	ef 92       	push	r14
    15f4:	ff 92       	push	r15
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
	unsigned char SENSOR=0;
	int err=0;
	unsigned char dir;
	sec=0;
    15fa:	10 92 37 02 	sts	0x0237, r1
    15fe:	10 92 36 02 	sts	0x0236, r1
	while(1)
	{
		SENSOR=READ_SENSOR();	
    1602:	80 91 63 00 	lds	r24, 0x0063
    1606:	91 b1       	in	r25, 0x01	; 1
    1608:	86 95       	lsr	r24
    160a:	86 95       	lsr	r24
    160c:	86 95       	lsr	r24
    160e:	80 95       	com	r24
    1610:	83 70       	andi	r24, 0x03	; 3
    1612:	90 95       	com	r25
    1614:	9c 71       	andi	r25, 0x1C	; 28
    1616:	89 2b       	or	r24, r25
		if( SENSOR&0x08 )
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	83 ff       	sbrs	r24, 3
    161c:	07 c0       	rjmp	.+14     	; 0x162c <LINE+0x3c>
		{
			sec=0;
    161e:	10 92 37 02 	sts	0x0237, r1
    1622:	10 92 36 02 	sts	0x0236, r1
			err=10;
    1626:	4a e0       	ldi	r20, 0x0A	; 10
    1628:	50 e0       	ldi	r21, 0x00	; 0
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <LINE+0x40>
		}
		else if (!(SENSOR&0x08) )err=-10;
    162c:	46 ef       	ldi	r20, 0xF6	; 246
    162e:	5f ef       	ldi	r21, 0xFF	; 255

		if(sec>50||(SENSOR&0x1C)==0x1C)
    1630:	20 91 36 02 	lds	r18, 0x0236
    1634:	30 91 37 02 	lds	r19, 0x0237
    1638:	23 33       	cpi	r18, 0x33	; 51
    163a:	31 05       	cpc	r19, r1
    163c:	98 f4       	brcc	.+38     	; 0x1664 <LINE+0x74>
    163e:	9c 01       	movw	r18, r24
    1640:	2c 71       	andi	r18, 0x1C	; 28
    1642:	30 70       	andi	r19, 0x00	; 0
    1644:	2c 31       	cpi	r18, 0x1C	; 28
    1646:	31 05       	cpc	r19, r1
    1648:	69 f0       	breq	.+26     	; 0x1664 <LINE+0x74>
		{
			dir=0;
			break;
			
		}		
		if((SENSOR&0x04))
    164a:	82 fd       	sbrc	r24, 2
    164c:	0d c0       	rjmp	.+26     	; 0x1668 <LINE+0x78>
		{	
			dir=2;
			break;
		}
		else if((SENSOR&0x10))
    164e:	84 fd       	sbrc	r24, 4
    1650:	0e c0       	rjmp	.+28     	; 0x166e <LINE+0x7e>
		{
			dir=3;
			break;
		}
		if(SENSOR&0x01){
    1652:	80 fd       	sbrc	r24, 0
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <LINE+0x84>
			dir=4;
			break;
		}
		HolonomicW(0,250,err);
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	6a ef       	ldi	r22, 0xFA	; 250
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <HolonomicW>
	}
    1662:	cf cf       	rjmp	.-98     	; 0x1602 <LINE+0x12>
		}
		else if (!(SENSOR&0x08) )err=-10;

		if(sec>50||(SENSOR&0x1C)==0x1C)
		{
			dir=0;
    1664:	dd 24       	eor	r13, r13
    1666:	08 c0       	rjmp	.+16     	; 0x1678 <LINE+0x88>
			break;
			
		}		
		if((SENSOR&0x04))
		{	
			dir=2;
    1668:	92 e0       	ldi	r25, 0x02	; 2
    166a:	d9 2e       	mov	r13, r25
    166c:	05 c0       	rjmp	.+10     	; 0x1678 <LINE+0x88>
			break;
		}
		else if((SENSOR&0x10))
		{
			dir=3;
    166e:	83 e0       	ldi	r24, 0x03	; 3
    1670:	d8 2e       	mov	r13, r24
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <LINE+0x88>
			break;
		}
		if(SENSOR&0x01){
			dir=4;
    1674:	04 e0       	ldi	r16, 0x04	; 4
    1676:	d0 2e       	mov	r13, r16
			break;
		}
		HolonomicW(0,250,err);
	}
	non_Holonomic(0,0,0);
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	cb 01       	movw	r24, r22
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	a9 01       	movw	r20, r18
    1684:	ee 24       	eor	r14, r14
    1686:	ff 24       	eor	r15, r15
    1688:	87 01       	movw	r16, r14
    168a:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
	return dir;
}
    168e:	8d 2d       	mov	r24, r13
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	df 90       	pop	r13
    169c:	08 95       	ret

0000169e <main>:
}

void cross_left();

int main(void)
{    
    169e:	af 92       	push	r10
    16a0:	bf 92       	push	r11
    16a2:	cf 92       	push	r12
    16a4:	df 92       	push	r13
    16a6:	ef 92       	push	r14
    16a8:	ff 92       	push	r15
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29

    Interface_init(); //인터페이스 초기화
    16b2:	0e 94 ae 00 	call	0x15c	; 0x15c <Interface_init>

	LM629_HW_Reset();
    16b6:	0e 94 14 11 	call	0x2228	; 0x2228 <LM629_HW_Reset>
	MCU_init();	   // MCU 초기화
    16ba:	0e 94 76 00 	call	0xec	; 0xec <MCU_init>
	Motor_init();  // Motor 드라이버 초기화
    16be:	0e 94 73 10 	call	0x20e6	; 0x20e6 <Motor_init>

	Sensor_init();
    16c2:	0e 94 af 12 	call	0x255e	; 0x255e <Sensor_init>

	DDRB=0x0F;		//LED, BZ, SW
    16c6:	8f e0       	ldi	r24, 0x0F	; 15
    16c8:	87 bb       	out	0x17, r24	; 23
	TCCR1A=0x00;	// Clock value: 14.400 kHz
    16ca:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x05;
    16cc:	85 e0       	ldi	r24, 0x05	; 5
    16ce:	8e bd       	out	0x2e, r24	; 46

	TCNT1H=0xFF;	//0.01초
    16d0:	8f ef       	ldi	r24, 0xFF	; 255
    16d2:	8d bd       	out	0x2d, r24	; 45
	TCNT1L=0x70;
    16d4:	80 e7       	ldi	r24, 0x70	; 112
    16d6:	8c bd       	out	0x2c, r24	; 44
	TIMSK=0x04;
    16d8:	84 e0       	ldi	r24, 0x04	; 4
    16da:	87 bf       	out	0x37, r24	; 55

	sei();
    16dc:	78 94       	sei
		{
			int ladderdirection = 0;
			//ladder_iron(1);
			non_Holonomic(150,0,0);
			_delay_ms(500);	 
			speed = 150;//홀로노믹 distance 사이에 끝김이 없게 하기 위해 넣어야함
    16de:	0f 2e       	mov	r0, r31
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	af 2e       	mov	r10, r31
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	bf 2e       	mov	r11, r31
    16e8:	f6 e1       	ldi	r31, 0x16	; 22
    16ea:	cf 2e       	mov	r12, r31
    16ec:	f3 e4       	ldi	r31, 0x43	; 67
    16ee:	df 2e       	mov	r13, r31
    16f0:	f0 2d       	mov	r31, r0
	sei();
	while(1){
			
//		int left,right;

		if(SW1)
    16f2:	b4 99       	sbic	0x16, 4	; 22
    16f4:	f1 c0       	rjmp	.+482    	; 0x18d8 <main+0x23a>
		{
			int ladderdirection = 0;
			//ladder_iron(1);
			non_Holonomic(150,0,0);
    16f6:	66 e9       	ldi	r22, 0x96	; 150
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	a9 01       	movw	r20, r18
    1704:	ee 24       	eor	r14, r14
    1706:	ff 24       	eor	r15, r15
    1708:	87 01       	movw	r16, r14
    170a:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
    170e:	8f ef       	ldi	r24, 0xFF	; 255
    1710:	9f e7       	ldi	r25, 0x7F	; 127
    1712:	a6 e1       	ldi	r26, 0x16	; 22
    1714:	81 50       	subi	r24, 0x01	; 1
    1716:	90 40       	sbci	r25, 0x00	; 0
    1718:	a0 40       	sbci	r26, 0x00	; 0
    171a:	e1 f7       	brne	.-8      	; 0x1714 <main+0x76>
    171c:	00 c0       	rjmp	.+0      	; 0x171e <main+0x80>
    171e:	00 00       	nop
			_delay_ms(500);	 
			speed = 150;//홀로노믹 distance 사이에 끝김이 없게 하기 위해 넣어야함
    1720:	a0 92 38 02 	sts	0x0238, r10
    1724:	b0 92 39 02 	sts	0x0239, r11
    1728:	c0 92 3a 02 	sts	0x023A, r12
    172c:	d0 92 3b 02 	sts	0x023B, r13
			int barcode = READ_barcode(300,150);			
    1730:	8c e2       	ldi	r24, 0x2C	; 44
    1732:	91 e0       	ldi	r25, 0x01	; 1
    1734:	66 e9       	ldi	r22, 0x96	; 150
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	0e 94 ac 08 	call	0x1158	; 0x1158 <READ_barcode>
    173c:	48 2f       	mov	r20, r24
    173e:	c8 2f       	mov	r28, r24
    1740:	d0 e0       	ldi	r29, 0x00	; 0
			display_char(0,7,barcode);	
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	67 e0       	ldi	r22, 0x07	; 7
    1746:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
			
			non_Holonomic(150,0,0);
    174a:	66 e9       	ldi	r22, 0x96	; 150
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	a9 01       	movw	r20, r18
    1758:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
    175c:	8f ef       	ldi	r24, 0xFF	; 255
    175e:	9f e7       	ldi	r25, 0x7F	; 127
    1760:	a6 e1       	ldi	r26, 0x16	; 22
    1762:	81 50       	subi	r24, 0x01	; 1
    1764:	90 40       	sbci	r25, 0x00	; 0
    1766:	a0 40       	sbci	r26, 0x00	; 0
    1768:	e1 f7       	brne	.-8      	; 0x1762 <main+0xc4>
    176a:	00 c0       	rjmp	.+0      	; 0x176c <main+0xce>
    176c:	00 00       	nop
			_delay_ms(500);

			non_Holonomic(0,0,100);
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	cb 01       	movw	r24, r22
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	a9 01       	movw	r20, r18
    177a:	e4 e6       	ldi	r30, 0x64	; 100
    177c:	ee 2e       	mov	r14, r30
    177e:	f1 2c       	mov	r15, r1
    1780:	01 2d       	mov	r16, r1
    1782:	11 2d       	mov	r17, r1
    1784:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
    1788:	8f ef       	ldi	r24, 0xFF	; 255
    178a:	9f e7       	ldi	r25, 0x7F	; 127
    178c:	a8 e2       	ldi	r26, 0x28	; 40
    178e:	81 50       	subi	r24, 0x01	; 1
    1790:	90 40       	sbci	r25, 0x00	; 0
    1792:	a0 40       	sbci	r26, 0x00	; 0
    1794:	e1 f7       	brne	.-8      	; 0x178e <main+0xf0>
    1796:	00 c0       	rjmp	.+0      	; 0x1798 <main+0xfa>
    1798:	00 00       	nop
    179a:	0c c0       	rjmp	.+24     	; 0x17b4 <main+0x116>
			_delay_ms(900);
			
			while(!((READ_SENSOR()&0x1C)==0x1C))	non_Holonomic(150,0,0);	//센서 전체가 모두 온 되었을때는 ==0x1C를 붙여야 한다. 
    179c:	66 e9       	ldi	r22, 0x96	; 150
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	a9 01       	movw	r20, r18
    17aa:	ee 24       	eor	r14, r14
    17ac:	ff 24       	eor	r15, r15
    17ae:	87 01       	movw	r16, r14
    17b0:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
    17b4:	80 91 63 00 	lds	r24, 0x0063
    17b8:	81 b1       	in	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	80 95       	com	r24
    17be:	90 95       	com	r25
    17c0:	8c 71       	andi	r24, 0x1C	; 28
    17c2:	90 70       	andi	r25, 0x00	; 0
    17c4:	8c 31       	cpi	r24, 0x1C	; 28
    17c6:	91 05       	cpc	r25, r1
    17c8:	49 f7       	brne	.-46     	; 0x179c <main+0xfe>
    17ca:	0c c0       	rjmp	.+24     	; 0x17e4 <main+0x146>
			while((READ_SENSOR()&0x1C))		non_Holonomic(150,0,0);
    17cc:	66 e9       	ldi	r22, 0x96	; 150
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	a9 01       	movw	r20, r18
    17da:	ee 24       	eor	r14, r14
    17dc:	ff 24       	eor	r15, r15
    17de:	87 01       	movw	r16, r14
    17e0:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
    17e4:	80 91 63 00 	lds	r24, 0x0063
    17e8:	81 b1       	in	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	80 95       	com	r24
    17ee:	90 95       	com	r25
    17f0:	8c 71       	andi	r24, 0x1C	; 28
    17f2:	90 70       	andi	r25, 0x00	; 0
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	51 f7       	brne	.-44     	; 0x17cc <main+0x12e>
			
			//3개 오른쪽 2개 왼쪽 
			non_Holonomic(0,0,0);
    17f8:	60 e0       	ldi	r22, 0x00	; 0
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	cb 01       	movw	r24, r22
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	a9 01       	movw	r20, r18
    1804:	ee 24       	eor	r14, r14
    1806:	ff 24       	eor	r15, r15
    1808:	87 01       	movw	r16, r14
    180a:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
			if(barcode == 2){
    180e:	c2 30       	cpi	r28, 0x02	; 2
    1810:	d1 05       	cpc	r29, r1
    1812:	c1 f4       	brne	.+48     	; 0x1844 <main+0x1a6>
    1814:	0c c0       	rjmp	.+24     	; 0x182e <main+0x190>
				ladderdirection = 1;
				while(!(READ_SENSOR()&0x08)){
					non_Holonomic(0,200,0);
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	cb 01       	movw	r24, r22
    181c:	28 ec       	ldi	r18, 0xC8	; 200
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	ee 24       	eor	r14, r14
    1826:	ff 24       	eor	r15, r15
    1828:	87 01       	movw	r16, r14
    182a:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
			
			//3개 오른쪽 2개 왼쪽 
			non_Holonomic(0,0,0);
			if(barcode == 2){
				ladderdirection = 1;
				while(!(READ_SENSOR()&0x08)){
    182e:	80 91 63 00 	lds	r24, 0x0063
    1832:	81 b1       	in	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	80 95       	com	r24
    1838:	90 95       	com	r25
    183a:	83 ff       	sbrs	r24, 3
    183c:	ec cf       	rjmp	.-40     	; 0x1816 <main+0x178>
			while((READ_SENSOR()&0x1C))		non_Holonomic(150,0,0);
			
			//3개 오른쪽 2개 왼쪽 
			non_Holonomic(0,0,0);
			if(barcode == 2){
				ladderdirection = 1;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	3d c0       	rjmp	.+122    	; 0x18be <main+0x220>
				while(!(READ_SENSOR()&0x08)){
					non_Holonomic(0,200,0);
				}
			} else if (barcode == 3){
    1844:	c3 30       	cpi	r28, 0x03	; 3
    1846:	d1 05       	cpc	r29, r1
    1848:	69 f5       	brne	.+90     	; 0x18a4 <main+0x206>
    184a:	0c c0       	rjmp	.+24     	; 0x1864 <main+0x1c6>
				ladderdirection = 2;
				while(!(READ_SENSOR()&0x08)){
					non_Holonomic(0,200,0);
    184c:	60 e0       	ldi	r22, 0x00	; 0
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	cb 01       	movw	r24, r22
    1852:	28 ec       	ldi	r18, 0xC8	; 200
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	50 e0       	ldi	r21, 0x00	; 0
    185a:	ee 24       	eor	r14, r14
    185c:	ff 24       	eor	r15, r15
    185e:	87 01       	movw	r16, r14
    1860:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
				while(!(READ_SENSOR()&0x08)){
					non_Holonomic(0,200,0);
				}
			} else if (barcode == 3){
				ladderdirection = 2;
				while(!(READ_SENSOR()&0x08)){
    1864:	80 91 63 00 	lds	r24, 0x0063
    1868:	81 b1       	in	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	80 95       	com	r24
    186e:	90 95       	com	r25
    1870:	83 ff       	sbrs	r24, 3
    1872:	ec cf       	rjmp	.-40     	; 0x184c <main+0x1ae>
    1874:	0c c0       	rjmp	.+24     	; 0x188e <main+0x1f0>
					non_Holonomic(0,200,0);
				}
				while((READ_SENSOR()&0x08))	non_Holonomic(0,200,0);
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	cb 01       	movw	r24, r22
    187c:	28 ec       	ldi	r18, 0xC8	; 200
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	ee 24       	eor	r14, r14
    1886:	ff 24       	eor	r15, r15
    1888:	87 01       	movw	r16, r14
    188a:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
    188e:	80 91 63 00 	lds	r24, 0x0063
    1892:	81 b1       	in	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	80 95       	com	r24
    1898:	90 95       	com	r25
    189a:	83 fd       	sbrc	r24, 3
    189c:	ec cf       	rjmp	.-40     	; 0x1876 <main+0x1d8>
				ladderdirection = 1;
				while(!(READ_SENSOR()&0x08)){
					non_Holonomic(0,200,0);
				}
			} else if (barcode == 3){
				ladderdirection = 2;
    189e:	82 e0       	ldi	r24, 0x02	; 2
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0d c0       	rjmp	.+26     	; 0x18be <main+0x220>
				while(!(READ_SENSOR()&0x08)){
					non_Holonomic(0,200,0);
				}
				while((READ_SENSOR()&0x08))	non_Holonomic(0,200,0);
			} else {
				BZ_ON();
    18a4:	c3 9a       	sbi	0x18, 3	; 24
    18a6:	8f ef       	ldi	r24, 0xFF	; 255
    18a8:	9f ef       	ldi	r25, 0xFF	; 255
    18aa:	a8 e0       	ldi	r26, 0x08	; 8
    18ac:	81 50       	subi	r24, 0x01	; 1
    18ae:	90 40       	sbci	r25, 0x00	; 0
    18b0:	a0 40       	sbci	r26, 0x00	; 0
    18b2:	e1 f7       	brne	.-8      	; 0x18ac <main+0x20e>
    18b4:	00 c0       	rjmp	.+0      	; 0x18b6 <main+0x218>
    18b6:	00 00       	nop
				_delay_ms(200);
				BZ_OFF();
    18b8:	c3 98       	cbi	0x18, 3	; 24
			
//		int left,right;

		if(SW1)
		{
			int ladderdirection = 0;
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
				BZ_ON();
				_delay_ms(200);
				BZ_OFF();
			}

			ladder_iron(ladderdirection);
    18be:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <ladder_iron>
			
			non_Holonomic(0,0,0);
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	cb 01       	movw	r24, r22
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	a9 01       	movw	r20, r18
    18ce:	ee 24       	eor	r14, r14
    18d0:	ff 24       	eor	r15, r15
    18d2:	87 01       	movw	r16, r14
    18d4:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>

		}

		if(SW2)
    18d8:	b5 99       	sbic	0x16, 5	; 22
    18da:	19 c0       	rjmp	.+50     	; 0x190e <main+0x270>
//				display_char(0,5,psd_value[0]);
//				display_char(1,2,psd_value[2]);
//				display_char(1,8,psd_value[7]);
//			}	
			//maze();
			LINE();
    18dc:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <LINE>
			non_Holonomic(200,0,0);
    18e0:	68 ec       	ldi	r22, 0xC8	; 200
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	a9 01       	movw	r20, r18
    18ee:	ee 24       	eor	r14, r14
    18f0:	ff 24       	eor	r15, r15
    18f2:	87 01       	movw	r16, r14
    18f4:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
    18f8:	8f ef       	ldi	r24, 0xFF	; 255
    18fa:	9f ef       	ldi	r25, 0xFF	; 255
    18fc:	a8 e0       	ldi	r26, 0x08	; 8
    18fe:	81 50       	subi	r24, 0x01	; 1
    1900:	90 40       	sbci	r25, 0x00	; 0
    1902:	a0 40       	sbci	r26, 0x00	; 0
    1904:	e1 f7       	brne	.-8      	; 0x18fe <main+0x260>
    1906:	00 c0       	rjmp	.+0      	; 0x1908 <main+0x26a>
    1908:	00 00       	nop
			_delay_ms(200);
			Smartcross();
    190a:	0e 94 39 02 	call	0x472	; 0x472 <Smartcross>
		}

		if(SW3)
    190e:	b6 99       	sbic	0x16, 6	; 22
    1910:	f0 ce       	rjmp	.-544    	; 0x16f2 <main+0x54>
		{	
//			ladder_down();
			while(1){
				display_char(0,5,psd_value[0]);
    1912:	40 91 24 03 	lds	r20, 0x0324
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	65 e0       	ldi	r22, 0x05	; 5
    191a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
				display_char(1,2,psd_value[2]);								
    191e:	40 91 26 03 	lds	r20, 0x0326
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	62 e0       	ldi	r22, 0x02	; 2
    1926:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
				display_char(1,8,psd_value[7]);
    192a:	40 91 2b 03 	lds	r20, 0x032B
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	68 e0       	ldi	r22, 0x08	; 8
    1932:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
    1936:	ed cf       	rjmp	.-38     	; 0x1912 <main+0x274>

00001938 <ladder_down>:
		}
	}

}

unsigned char ladder_down(){ //미완성  
    1938:	2f 92       	push	r2
    193a:	3f 92       	push	r3
    193c:	4f 92       	push	r4
    193e:	5f 92       	push	r5
    1940:	6f 92       	push	r6
    1942:	7f 92       	push	r7
    1944:	8f 92       	push	r8
    1946:	9f 92       	push	r9
    1948:	af 92       	push	r10
    194a:	bf 92       	push	r11
    194c:	df 92       	push	r13
    194e:	ef 92       	push	r14
    1950:	ff 92       	push	r15
    1952:	0f 93       	push	r16
    1954:	1f 93       	push	r17
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	0f 92       	push	r0
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62

	unsigned char SENSOR=0;	
	unsigned char direction=0;	//1=왼쪽 2=가운데 3=오른쪽 
    1960:	19 82       	std	Y+1, r1	; 0x01

}

unsigned char ladder_down(){ //미완성  

	unsigned char SENSOR=0;	
    1962:	dd 24       	eor	r13, r13
	unsigned char direction=0;	//1=왼쪽 2=가운데 3=오른쪽 
	while(!(SENSOR&0x01)){
		SENSOR = READ_SENSOR();
		LINE();
		speed=250;
    1964:	0f 2e       	mov	r0, r31
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	8f 2e       	mov	r8, r31
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	9f 2e       	mov	r9, r31
    196e:	fa e7       	ldi	r31, 0x7A	; 122
    1970:	af 2e       	mov	r10, r31
    1972:	f3 e4       	ldi	r31, 0x43	; 67
    1974:	bf 2e       	mov	r11, r31
    1976:	f0 2d       	mov	r31, r0
		if(direction == 3)	{
			while(!(SENSOR&0x08))	non_Holonomic(0,0, 65);	
		}
		
		LINE();
		speed=200;
    1978:	0f 2e       	mov	r0, r31
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	4f 2e       	mov	r4, r31
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	5f 2e       	mov	r5, r31
    1982:	f8 e4       	ldi	r31, 0x48	; 72
    1984:	6f 2e       	mov	r6, r31
    1986:	f3 e4       	ldi	r31, 0x43	; 67
    1988:	7f 2e       	mov	r7, r31
    198a:	f0 2d       	mov	r31, r0

unsigned char ladder_down(){ //미완성  

	unsigned char SENSOR=0;	
	unsigned char direction=0;	//1=왼쪽 2=가운데 3=오른쪽 
	while(!(SENSOR&0x01)){
    198c:	9a c0       	rjmp	.+308    	; 0x1ac2 <ladder_down+0x18a>
		SENSOR = READ_SENSOR();
    198e:	d0 90 63 00 	lds	r13, 0x0063
    1992:	81 b1       	in	r24, 0x01	; 1
    1994:	d6 94       	lsr	r13
    1996:	d6 94       	lsr	r13
    1998:	d6 94       	lsr	r13
    199a:	d0 94       	com	r13
    199c:	93 e0       	ldi	r25, 0x03	; 3
    199e:	d9 22       	and	r13, r25
    19a0:	80 95       	com	r24
    19a2:	8c 71       	andi	r24, 0x1C	; 28
    19a4:	d8 2a       	or	r13, r24
		LINE();
    19a6:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <LINE>
		speed=250;
    19aa:	80 92 38 02 	sts	0x0238, r8
    19ae:	90 92 39 02 	sts	0x0239, r9
    19b2:	a0 92 3a 02 	sts	0x023A, r10
    19b6:	b0 92 3b 02 	sts	0x023B, r11
		Holonomic_distance(0,250,150,100);
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	6a ef       	ldi	r22, 0xFA	; 250
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	46 e9       	ldi	r20, 0x96	; 150
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	24 e6       	ldi	r18, 0x64	; 100
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Holonomic_distance>
		if(psd_value[0]>165){
    19ce:	80 91 24 03 	lds	r24, 0x0324
    19d2:	86 3a       	cpi	r24, 0xA6	; 166
    19d4:	08 f4       	brcc	.+2      	; 0x19d8 <ladder_down+0xa0>
    19d6:	45 c0       	rjmp	.+138    	; 0x1a62 <ladder_down+0x12a>
			if(psd_value[2]>90)		direction = 3;
    19d8:	80 91 26 03 	lds	r24, 0x0326
    19dc:	8b 35       	cpi	r24, 0x5B	; 91
    19de:	10 f0       	brcs	.+4      	; 0x19e4 <ladder_down+0xac>
    19e0:	e3 e0       	ldi	r30, 0x03	; 3
    19e2:	e9 83       	std	Y+1, r30	; 0x01
			if(psd_value[7]>90)		direction = 1;
    19e4:	80 91 2b 03 	lds	r24, 0x032B
    19e8:	8b 35       	cpi	r24, 0x5B	; 91
    19ea:	a8 f4       	brcc	.+42     	; 0x1a16 <ladder_down+0xde>
		} else direction = 2;

		if(direction == 1)	{
    19ec:	f9 81       	ldd	r31, Y+1	; 0x01
    19ee:	f1 30       	cpi	r31, 0x01	; 1
    19f0:	e9 f4       	brne	.+58     	; 0x1a2c <ladder_down+0xf4>
    19f2:	11 c0       	rjmp	.+34     	; 0x1a16 <ladder_down+0xde>
			while(!(SENSOR&0x08))	non_Holonomic(0,0,-65);
    19f4:	60 e0       	ldi	r22, 0x00	; 0
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	cb 01       	movw	r24, r22
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	a9 01       	movw	r20, r18
    1a00:	bf eb       	ldi	r27, 0xBF	; 191
    1a02:	eb 2e       	mov	r14, r27
    1a04:	bf ef       	ldi	r27, 0xFF	; 255
    1a06:	fb 2e       	mov	r15, r27
    1a08:	bf ef       	ldi	r27, 0xFF	; 255
    1a0a:	0b 2f       	mov	r16, r27
    1a0c:	bf ef       	ldi	r27, 0xFF	; 255
    1a0e:	1b 2f       	mov	r17, r27
    1a10:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
    1a14:	05 c0       	rjmp	.+10     	; 0x1a20 <ladder_down+0xe8>
    1a16:	2d 2c       	mov	r2, r13
    1a18:	33 24       	eor	r3, r3
    1a1a:	88 e0       	ldi	r24, 0x08	; 8
    1a1c:	28 22       	and	r2, r24
    1a1e:	33 24       	eor	r3, r3
    1a20:	21 14       	cp	r2, r1
    1a22:	31 04       	cpc	r3, r1
    1a24:	39 f3       	breq	.-50     	; 0x19f4 <ladder_down+0xbc>
    1a26:	91 e0       	ldi	r25, 0x01	; 1
    1a28:	99 83       	std	Y+1, r25	; 0x01
    1a2a:	1d c0       	rjmp	.+58     	; 0x1a66 <ladder_down+0x12e>
		}
		
		if(direction == 3)	{
    1a2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a2e:	e3 30       	cpi	r30, 0x03	; 3
    1a30:	79 f0       	breq	.+30     	; 0x1a50 <ladder_down+0x118>
    1a32:	19 c0       	rjmp	.+50     	; 0x1a66 <ladder_down+0x12e>
			while(!(SENSOR&0x08))	non_Holonomic(0,0, 65);	
    1a34:	60 e0       	ldi	r22, 0x00	; 0
    1a36:	70 e0       	ldi	r23, 0x00	; 0
    1a38:	cb 01       	movw	r24, r22
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	a9 01       	movw	r20, r18
    1a40:	a1 e4       	ldi	r26, 0x41	; 65
    1a42:	ea 2e       	mov	r14, r26
    1a44:	f1 2c       	mov	r15, r1
    1a46:	01 2d       	mov	r16, r1
    1a48:	11 2d       	mov	r17, r1
    1a4a:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
    1a4e:	05 c0       	rjmp	.+10     	; 0x1a5a <ladder_down+0x122>
    1a50:	2d 2c       	mov	r2, r13
    1a52:	33 24       	eor	r3, r3
    1a54:	f8 e0       	ldi	r31, 0x08	; 8
    1a56:	2f 22       	and	r2, r31
    1a58:	33 24       	eor	r3, r3
    1a5a:	21 14       	cp	r2, r1
    1a5c:	31 04       	cpc	r3, r1
    1a5e:	51 f3       	breq	.-44     	; 0x1a34 <ladder_down+0xfc>
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <ladder_down+0x12e>
		speed=250;
		Holonomic_distance(0,250,150,100);
		if(psd_value[0]>165){
			if(psd_value[2]>90)		direction = 3;
			if(psd_value[7]>90)		direction = 1;
		} else direction = 2;
    1a62:	82 e0       	ldi	r24, 0x02	; 2
    1a64:	89 83       	std	Y+1, r24	; 0x01
		
		if(direction == 3)	{
			while(!(SENSOR&0x08))	non_Holonomic(0,0, 65);	
		}
		
		LINE();
    1a66:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <LINE>
		speed=200;
    1a6a:	40 92 38 02 	sts	0x0238, r4
    1a6e:	50 92 39 02 	sts	0x0239, r5
    1a72:	60 92 3a 02 	sts	0x023A, r6
    1a76:	70 92 3b 02 	sts	0x023B, r7
		Holonomic_distance(0,200,150,100);
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	68 ec       	ldi	r22, 0xC8	; 200
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	46 e9       	ldi	r20, 0x96	; 150
    1a84:	50 e0       	ldi	r21, 0x00	; 0
    1a86:	24 e6       	ldi	r18, 0x64	; 100
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Holonomic_distance>
		if(direction == 1) 	while(!(SENSOR&0x08))	non_Holonomic(0,0, 65);		
    1a8e:	99 81       	ldd	r25, Y+1	; 0x01
    1a90:	91 30       	cpi	r25, 0x01	; 1
    1a92:	b9 f4       	brne	.+46     	; 0x1ac2 <ladder_down+0x18a>
    1a94:	0e c0       	rjmp	.+28     	; 0x1ab2 <ladder_down+0x17a>
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	a9 01       	movw	r20, r18
    1aa2:	f1 e4       	ldi	r31, 0x41	; 65
    1aa4:	ef 2e       	mov	r14, r31
    1aa6:	f1 2c       	mov	r15, r1
    1aa8:	01 2d       	mov	r16, r1
    1aaa:	11 2d       	mov	r17, r1
    1aac:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
    1ab0:	05 c0       	rjmp	.+10     	; 0x1abc <ladder_down+0x184>
    1ab2:	2d 2c       	mov	r2, r13
    1ab4:	33 24       	eor	r3, r3
    1ab6:	e8 e0       	ldi	r30, 0x08	; 8
    1ab8:	2e 22       	and	r2, r30
    1aba:	33 24       	eor	r3, r3
    1abc:	21 14       	cp	r2, r1
    1abe:	31 04       	cpc	r3, r1
    1ac0:	51 f3       	breq	.-44     	; 0x1a96 <ladder_down+0x15e>

unsigned char ladder_down(){ //미완성  

	unsigned char SENSOR=0;	
	unsigned char direction=0;	//1=왼쪽 2=가운데 3=오른쪽 
	while(!(SENSOR&0x01)){
    1ac2:	d0 fe       	sbrs	r13, 0
    1ac4:	64 cf       	rjmp	.-312    	; 0x198e <ladder_down+0x56>
		Holonomic_distance(0,200,150,100);
		if(direction == 1) 	while(!(SENSOR&0x08))	non_Holonomic(0,0, 65);		
		if(direction == 1)	while(!(SENSOR&0x08))	non_Holonomic(0,0,-65);
	}

	non_Holonomic(0,0,0);
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	cb 01       	movw	r24, r22
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	a9 01       	movw	r20, r18
    1ad2:	ee 24       	eor	r14, r14
    1ad4:	ff 24       	eor	r15, r15
    1ad6:	87 01       	movw	r16, r14
    1ad8:	0e 94 45 07 	call	0xe8a	; 0xe8a <non_Holonomic>
	return 0;

}
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	0f 90       	pop	r0
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	1f 91       	pop	r17
    1ae6:	0f 91       	pop	r16
    1ae8:	ff 90       	pop	r15
    1aea:	ef 90       	pop	r14
    1aec:	df 90       	pop	r13
    1aee:	bf 90       	pop	r11
    1af0:	af 90       	pop	r10
    1af2:	9f 90       	pop	r9
    1af4:	8f 90       	pop	r8
    1af6:	7f 90       	pop	r7
    1af8:	6f 90       	pop	r6
    1afa:	5f 90       	pop	r5
    1afc:	4f 90       	pop	r4
    1afe:	3f 90       	pop	r3
    1b00:	2f 90       	pop	r2
    1b02:	08 95       	ret

00001b04 <__vector_14>:
	StartMotion();
}


ISR (TIMER1_OVF_vect)
{
    1b04:	1f 92       	push	r1
    1b06:	0f 92       	push	r0
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	0f 92       	push	r0
    1b0c:	0b b6       	in	r0, 0x3b	; 59
    1b0e:	0f 92       	push	r0
    1b10:	11 24       	eor	r1, r1
    1b12:	ef 92       	push	r14
    1b14:	ff 92       	push	r15
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	2f 93       	push	r18
    1b1c:	3f 93       	push	r19
    1b1e:	4f 93       	push	r20
    1b20:	5f 93       	push	r21
    1b22:	6f 93       	push	r22
    1b24:	7f 93       	push	r23
    1b26:	8f 93       	push	r24
    1b28:	9f 93       	push	r25
    1b2a:	af 93       	push	r26
    1b2c:	bf 93       	push	r27
    1b2e:	ef 93       	push	r30
    1b30:	ff 93       	push	r31
	TCNT1H=0xFF; TCNT1L=0x70; //0.01초
    1b32:	8f ef       	ldi	r24, 0xFF	; 255
    1b34:	8d bd       	out	0x2d, r24	; 45
    1b36:	80 e7       	ldi	r24, 0x70	; 112
    1b38:	8c bd       	out	0x2c, r24	; 44
	++sec;
    1b3a:	80 91 36 02 	lds	r24, 0x0236
    1b3e:	90 91 37 02 	lds	r25, 0x0237
    1b42:	01 96       	adiw	r24, 0x01	; 1
    1b44:	90 93 37 02 	sts	0x0237, r25
    1b48:	80 93 36 02 	sts	0x0236, r24
	
	disMD+=speed*0.01;
    1b4c:	e0 90 54 02 	lds	r14, 0x0254
    1b50:	f0 90 55 02 	lds	r15, 0x0255
    1b54:	00 91 56 02 	lds	r16, 0x0256
    1b58:	10 91 57 02 	lds	r17, 0x0257
    1b5c:	60 91 38 02 	lds	r22, 0x0238
    1b60:	70 91 39 02 	lds	r23, 0x0239
    1b64:	80 91 3a 02 	lds	r24, 0x023A
    1b68:	90 91 3b 02 	lds	r25, 0x023B
    1b6c:	2a e0       	ldi	r18, 0x0A	; 10
    1b6e:	37 ed       	ldi	r19, 0xD7	; 215
    1b70:	43 e2       	ldi	r20, 0x23	; 35
    1b72:	5c e3       	ldi	r21, 0x3C	; 60
    1b74:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
    1b78:	9b 01       	movw	r18, r22
    1b7a:	ac 01       	movw	r20, r24
    1b7c:	c8 01       	movw	r24, r16
    1b7e:	b7 01       	movw	r22, r14
    1b80:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
    1b84:	9b 01       	movw	r18, r22
    1b86:	ac 01       	movw	r20, r24
    1b88:	20 93 54 02 	sts	0x0254, r18
    1b8c:	30 93 55 02 	sts	0x0255, r19
    1b90:	40 93 56 02 	sts	0x0256, r20
    1b94:	50 93 57 02 	sts	0x0257, r21
	disW+=speedW*0.01;
    1b98:	e0 90 50 02 	lds	r14, 0x0250
    1b9c:	f0 90 51 02 	lds	r15, 0x0251
    1ba0:	00 91 52 02 	lds	r16, 0x0252
    1ba4:	10 91 53 02 	lds	r17, 0x0253
    1ba8:	60 91 60 02 	lds	r22, 0x0260
    1bac:	70 91 61 02 	lds	r23, 0x0261
    1bb0:	80 91 62 02 	lds	r24, 0x0262
    1bb4:	90 91 63 02 	lds	r25, 0x0263
    1bb8:	2a e0       	ldi	r18, 0x0A	; 10
    1bba:	37 ed       	ldi	r19, 0xD7	; 215
    1bbc:	43 e2       	ldi	r20, 0x23	; 35
    1bbe:	5c e3       	ldi	r21, 0x3C	; 60
    1bc0:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
    1bc4:	9b 01       	movw	r18, r22
    1bc6:	ac 01       	movw	r20, r24
    1bc8:	c8 01       	movw	r24, r16
    1bca:	b7 01       	movw	r22, r14
    1bcc:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
    1bd0:	9b 01       	movw	r18, r22
    1bd2:	ac 01       	movw	r20, r24
    1bd4:	20 93 50 02 	sts	0x0250, r18
    1bd8:	30 93 51 02 	sts	0x0251, r19
    1bdc:	40 93 52 02 	sts	0x0252, r20
    1be0:	50 93 53 02 	sts	0x0253, r21
	disX+=(speedX*0.01);
    1be4:	e0 90 48 02 	lds	r14, 0x0248
    1be8:	f0 90 49 02 	lds	r15, 0x0249
    1bec:	00 91 4a 02 	lds	r16, 0x024A
    1bf0:	10 91 4b 02 	lds	r17, 0x024B
    1bf4:	60 91 58 02 	lds	r22, 0x0258
    1bf8:	70 91 59 02 	lds	r23, 0x0259
    1bfc:	80 91 5a 02 	lds	r24, 0x025A
    1c00:	90 91 5b 02 	lds	r25, 0x025B
    1c04:	2a e0       	ldi	r18, 0x0A	; 10
    1c06:	37 ed       	ldi	r19, 0xD7	; 215
    1c08:	43 e2       	ldi	r20, 0x23	; 35
    1c0a:	5c e3       	ldi	r21, 0x3C	; 60
    1c0c:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
    1c10:	9b 01       	movw	r18, r22
    1c12:	ac 01       	movw	r20, r24
    1c14:	c8 01       	movw	r24, r16
    1c16:	b7 01       	movw	r22, r14
    1c18:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
    1c1c:	9b 01       	movw	r18, r22
    1c1e:	ac 01       	movw	r20, r24
    1c20:	20 93 48 02 	sts	0x0248, r18
    1c24:	30 93 49 02 	sts	0x0249, r19
    1c28:	40 93 4a 02 	sts	0x024A, r20
    1c2c:	50 93 4b 02 	sts	0x024B, r21
	disY+=(speedY*0.01);
    1c30:	e0 90 4c 02 	lds	r14, 0x024C
    1c34:	f0 90 4d 02 	lds	r15, 0x024D
    1c38:	00 91 4e 02 	lds	r16, 0x024E
    1c3c:	10 91 4f 02 	lds	r17, 0x024F
    1c40:	60 91 5c 02 	lds	r22, 0x025C
    1c44:	70 91 5d 02 	lds	r23, 0x025D
    1c48:	80 91 5e 02 	lds	r24, 0x025E
    1c4c:	90 91 5f 02 	lds	r25, 0x025F
    1c50:	2a e0       	ldi	r18, 0x0A	; 10
    1c52:	37 ed       	ldi	r19, 0xD7	; 215
    1c54:	43 e2       	ldi	r20, 0x23	; 35
    1c56:	5c e3       	ldi	r21, 0x3C	; 60
    1c58:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
    1c5c:	9b 01       	movw	r18, r22
    1c5e:	ac 01       	movw	r20, r24
    1c60:	c8 01       	movw	r24, r16
    1c62:	b7 01       	movw	r22, r14
    1c64:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
    1c68:	9b 01       	movw	r18, r22
    1c6a:	ac 01       	movw	r20, r24
    1c6c:	20 93 4c 02 	sts	0x024C, r18
    1c70:	30 93 4d 02 	sts	0x024D, r19
    1c74:	40 93 4e 02 	sts	0x024E, r20
    1c78:	50 93 4f 02 	sts	0x024F, r21

	if(next_speed>speed){
    1c7c:	60 91 3c 02 	lds	r22, 0x023C
    1c80:	70 91 3d 02 	lds	r23, 0x023D
    1c84:	80 91 3e 02 	lds	r24, 0x023E
    1c88:	90 91 3f 02 	lds	r25, 0x023F
    1c8c:	20 91 38 02 	lds	r18, 0x0238
    1c90:	30 91 39 02 	lds	r19, 0x0239
    1c94:	40 91 3a 02 	lds	r20, 0x023A
    1c98:	50 91 3b 02 	lds	r21, 0x023B
    1c9c:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__gtsf2>
    1ca0:	18 16       	cp	r1, r24
    1ca2:	94 f5       	brge	.+100    	; 0x1d08 <__vector_14+0x204>
		speed+=acc;
    1ca4:	60 91 38 02 	lds	r22, 0x0238
    1ca8:	70 91 39 02 	lds	r23, 0x0239
    1cac:	80 91 3a 02 	lds	r24, 0x023A
    1cb0:	90 91 3b 02 	lds	r25, 0x023B
    1cb4:	20 91 00 01 	lds	r18, 0x0100
    1cb8:	30 91 01 01 	lds	r19, 0x0101
    1cbc:	40 91 02 01 	lds	r20, 0x0102
    1cc0:	50 91 03 01 	lds	r21, 0x0103
    1cc4:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
    1cc8:	9b 01       	movw	r18, r22
    1cca:	ac 01       	movw	r20, r24
    1ccc:	20 93 38 02 	sts	0x0238, r18
    1cd0:	30 93 39 02 	sts	0x0239, r19
    1cd4:	40 93 3a 02 	sts	0x023A, r20
    1cd8:	50 93 3b 02 	sts	0x023B, r21
		if(next_speed<=speed)speed=next_speed;
    1cdc:	60 91 3c 02 	lds	r22, 0x023C
    1ce0:	70 91 3d 02 	lds	r23, 0x023D
    1ce4:	80 91 3e 02 	lds	r24, 0x023E
    1ce8:	90 91 3f 02 	lds	r25, 0x023F
    1cec:	20 91 38 02 	lds	r18, 0x0238
    1cf0:	30 91 39 02 	lds	r19, 0x0239
    1cf4:	40 91 3a 02 	lds	r20, 0x023A
    1cf8:	50 91 3b 02 	lds	r21, 0x023B
    1cfc:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__lesf2>
    1d00:	18 16       	cp	r1, r24
    1d02:	0c f4       	brge	.+2      	; 0x1d06 <__vector_14+0x202>
    1d04:	55 c0       	rjmp	.+170    	; 0x1db0 <__vector_14+0x2ac>
    1d06:	44 c0       	rjmp	.+136    	; 0x1d90 <__vector_14+0x28c>
	}
	else if(next_speed<speed){
    1d08:	60 91 3c 02 	lds	r22, 0x023C
    1d0c:	70 91 3d 02 	lds	r23, 0x023D
    1d10:	80 91 3e 02 	lds	r24, 0x023E
    1d14:	90 91 3f 02 	lds	r25, 0x023F
    1d18:	20 91 38 02 	lds	r18, 0x0238
    1d1c:	30 91 39 02 	lds	r19, 0x0239
    1d20:	40 91 3a 02 	lds	r20, 0x023A
    1d24:	50 91 3b 02 	lds	r21, 0x023B
    1d28:	0e 94 30 16 	call	0x2c60	; 0x2c60 <__ltsf2>
    1d2c:	87 ff       	sbrs	r24, 7
    1d2e:	40 c0       	rjmp	.+128    	; 0x1db0 <__vector_14+0x2ac>
		speed-=acc;
    1d30:	60 91 38 02 	lds	r22, 0x0238
    1d34:	70 91 39 02 	lds	r23, 0x0239
    1d38:	80 91 3a 02 	lds	r24, 0x023A
    1d3c:	90 91 3b 02 	lds	r25, 0x023B
    1d40:	20 91 00 01 	lds	r18, 0x0100
    1d44:	30 91 01 01 	lds	r19, 0x0101
    1d48:	40 91 02 01 	lds	r20, 0x0102
    1d4c:	50 91 03 01 	lds	r21, 0x0103
    1d50:	0e 94 a5 14 	call	0x294a	; 0x294a <__subsf3>
    1d54:	9b 01       	movw	r18, r22
    1d56:	ac 01       	movw	r20, r24
    1d58:	20 93 38 02 	sts	0x0238, r18
    1d5c:	30 93 39 02 	sts	0x0239, r19
    1d60:	40 93 3a 02 	sts	0x023A, r20
    1d64:	50 93 3b 02 	sts	0x023B, r21
		if(next_speed>=speed)speed=next_speed;
    1d68:	60 91 3c 02 	lds	r22, 0x023C
    1d6c:	70 91 3d 02 	lds	r23, 0x023D
    1d70:	80 91 3e 02 	lds	r24, 0x023E
    1d74:	90 91 3f 02 	lds	r25, 0x023F
    1d78:	20 91 38 02 	lds	r18, 0x0238
    1d7c:	30 91 39 02 	lds	r19, 0x0239
    1d80:	40 91 3a 02 	lds	r20, 0x023A
    1d84:	50 91 3b 02 	lds	r21, 0x023B
    1d88:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__gesf2>
    1d8c:	87 fd       	sbrc	r24, 7
    1d8e:	10 c0       	rjmp	.+32     	; 0x1db0 <__vector_14+0x2ac>
    1d90:	80 91 3c 02 	lds	r24, 0x023C
    1d94:	90 91 3d 02 	lds	r25, 0x023D
    1d98:	a0 91 3e 02 	lds	r26, 0x023E
    1d9c:	b0 91 3f 02 	lds	r27, 0x023F
    1da0:	80 93 38 02 	sts	0x0238, r24
    1da4:	90 93 39 02 	sts	0x0239, r25
    1da8:	a0 93 3a 02 	sts	0x023A, r26
    1dac:	b0 93 3b 02 	sts	0x023B, r27
	}
	if(next_wspeed>wspeed){
    1db0:	60 91 44 02 	lds	r22, 0x0244
    1db4:	70 91 45 02 	lds	r23, 0x0245
    1db8:	80 91 46 02 	lds	r24, 0x0246
    1dbc:	90 91 47 02 	lds	r25, 0x0247
    1dc0:	20 91 40 02 	lds	r18, 0x0240
    1dc4:	30 91 41 02 	lds	r19, 0x0241
    1dc8:	40 91 42 02 	lds	r20, 0x0242
    1dcc:	50 91 43 02 	lds	r21, 0x0243
    1dd0:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__gtsf2>
    1dd4:	18 16       	cp	r1, r24
    1dd6:	94 f5       	brge	.+100    	; 0x1e3c <__vector_14+0x338>
		wspeed+=accW;
    1dd8:	60 91 40 02 	lds	r22, 0x0240
    1ddc:	70 91 41 02 	lds	r23, 0x0241
    1de0:	80 91 42 02 	lds	r24, 0x0242
    1de4:	90 91 43 02 	lds	r25, 0x0243
    1de8:	20 91 04 01 	lds	r18, 0x0104
    1dec:	30 91 05 01 	lds	r19, 0x0105
    1df0:	40 91 06 01 	lds	r20, 0x0106
    1df4:	50 91 07 01 	lds	r21, 0x0107
    1df8:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__addsf3>
    1dfc:	9b 01       	movw	r18, r22
    1dfe:	ac 01       	movw	r20, r24
    1e00:	20 93 40 02 	sts	0x0240, r18
    1e04:	30 93 41 02 	sts	0x0241, r19
    1e08:	40 93 42 02 	sts	0x0242, r20
    1e0c:	50 93 43 02 	sts	0x0243, r21
		if(next_wspeed<=wspeed)wspeed=next_wspeed;
    1e10:	60 91 44 02 	lds	r22, 0x0244
    1e14:	70 91 45 02 	lds	r23, 0x0245
    1e18:	80 91 46 02 	lds	r24, 0x0246
    1e1c:	90 91 47 02 	lds	r25, 0x0247
    1e20:	20 91 40 02 	lds	r18, 0x0240
    1e24:	30 91 41 02 	lds	r19, 0x0241
    1e28:	40 91 42 02 	lds	r20, 0x0242
    1e2c:	50 91 43 02 	lds	r21, 0x0243
    1e30:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__lesf2>
    1e34:	18 16       	cp	r1, r24
    1e36:	0c f4       	brge	.+2      	; 0x1e3a <__vector_14+0x336>
    1e38:	55 c0       	rjmp	.+170    	; 0x1ee4 <__vector_14+0x3e0>
    1e3a:	44 c0       	rjmp	.+136    	; 0x1ec4 <__vector_14+0x3c0>
	}
	else if(next_wspeed<wspeed){
    1e3c:	60 91 44 02 	lds	r22, 0x0244
    1e40:	70 91 45 02 	lds	r23, 0x0245
    1e44:	80 91 46 02 	lds	r24, 0x0246
    1e48:	90 91 47 02 	lds	r25, 0x0247
    1e4c:	20 91 40 02 	lds	r18, 0x0240
    1e50:	30 91 41 02 	lds	r19, 0x0241
    1e54:	40 91 42 02 	lds	r20, 0x0242
    1e58:	50 91 43 02 	lds	r21, 0x0243
    1e5c:	0e 94 30 16 	call	0x2c60	; 0x2c60 <__ltsf2>
    1e60:	87 ff       	sbrs	r24, 7
    1e62:	40 c0       	rjmp	.+128    	; 0x1ee4 <__vector_14+0x3e0>
		wspeed-=accW;
    1e64:	60 91 40 02 	lds	r22, 0x0240
    1e68:	70 91 41 02 	lds	r23, 0x0241
    1e6c:	80 91 42 02 	lds	r24, 0x0242
    1e70:	90 91 43 02 	lds	r25, 0x0243
    1e74:	20 91 04 01 	lds	r18, 0x0104
    1e78:	30 91 05 01 	lds	r19, 0x0105
    1e7c:	40 91 06 01 	lds	r20, 0x0106
    1e80:	50 91 07 01 	lds	r21, 0x0107
    1e84:	0e 94 a5 14 	call	0x294a	; 0x294a <__subsf3>
    1e88:	9b 01       	movw	r18, r22
    1e8a:	ac 01       	movw	r20, r24
    1e8c:	20 93 40 02 	sts	0x0240, r18
    1e90:	30 93 41 02 	sts	0x0241, r19
    1e94:	40 93 42 02 	sts	0x0242, r20
    1e98:	50 93 43 02 	sts	0x0243, r21
		if(next_wspeed>=wspeed)wspeed=next_wspeed;
    1e9c:	60 91 44 02 	lds	r22, 0x0244
    1ea0:	70 91 45 02 	lds	r23, 0x0245
    1ea4:	80 91 46 02 	lds	r24, 0x0246
    1ea8:	90 91 47 02 	lds	r25, 0x0247
    1eac:	20 91 40 02 	lds	r18, 0x0240
    1eb0:	30 91 41 02 	lds	r19, 0x0241
    1eb4:	40 91 42 02 	lds	r20, 0x0242
    1eb8:	50 91 43 02 	lds	r21, 0x0243
    1ebc:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__gesf2>
    1ec0:	87 fd       	sbrc	r24, 7
    1ec2:	10 c0       	rjmp	.+32     	; 0x1ee4 <__vector_14+0x3e0>
    1ec4:	80 91 44 02 	lds	r24, 0x0244
    1ec8:	90 91 45 02 	lds	r25, 0x0245
    1ecc:	a0 91 46 02 	lds	r26, 0x0246
    1ed0:	b0 91 47 02 	lds	r27, 0x0247
    1ed4:	80 93 40 02 	sts	0x0240, r24
    1ed8:	90 93 41 02 	sts	0x0241, r25
    1edc:	a0 93 42 02 	sts	0x0242, r26
    1ee0:	b0 93 43 02 	sts	0x0243, r27
	}
}
    1ee4:	ff 91       	pop	r31
    1ee6:	ef 91       	pop	r30
    1ee8:	bf 91       	pop	r27
    1eea:	af 91       	pop	r26
    1eec:	9f 91       	pop	r25
    1eee:	8f 91       	pop	r24
    1ef0:	7f 91       	pop	r23
    1ef2:	6f 91       	pop	r22
    1ef4:	5f 91       	pop	r21
    1ef6:	4f 91       	pop	r20
    1ef8:	3f 91       	pop	r19
    1efa:	2f 91       	pop	r18
    1efc:	1f 91       	pop	r17
    1efe:	0f 91       	pop	r16
    1f00:	ff 90       	pop	r15
    1f02:	ef 90       	pop	r14
    1f04:	0f 90       	pop	r0
    1f06:	0b be       	out	0x3b, r0	; 59
    1f08:	0f 90       	pop	r0
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	0f 90       	pop	r0
    1f0e:	1f 90       	pop	r1
    1f10:	18 95       	reti

00001f12 <ReadData>:
unsigned char ReadData(unsigned char motor)
{
    unsigned char data;

    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	fc 01       	movw	r30, r24
    1f16:	b0 96       	adiw	r30, 0x20	; 32
    1f18:	fe 2f       	mov	r31, r30
    1f1a:	ee 27       	eor	r30, r30
    1f1c:	20 81       	ld	r18, Z
    1f1e:	20 93 20 03 	sts	0x0320, r18
    1f22:	20 fd       	sbrc	r18, 0
    1f24:	fb cf       	rjmp	.-10     	; 0x1f1c <ReadData+0xa>
    // 데이터 입력
    data = MOTOR_DATA(motor);
    1f26:	88 96       	adiw	r24, 0x28	; 40
    1f28:	b8 2f       	mov	r27, r24
    1f2a:	aa 27       	eor	r26, r26
    1f2c:	8c 91       	ld	r24, X

	CHECK_BUSY(motor, status);
    1f2e:	90 81       	ld	r25, Z
    1f30:	90 93 20 03 	sts	0x0320, r25
    1f34:	90 fd       	sbrc	r25, 0
    1f36:	fb cf       	rjmp	.-10     	; 0x1f2e <ReadData+0x1c>
    // 입력된 데이터 리턴
    return data;
}    
    1f38:	08 95       	ret

00001f3a <WriteCommand>:
// Return    : 없음

void WriteCommand(unsigned char motor, unsigned char cmd)
{
    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	80 96       	adiw	r24, 0x20	; 32
    1f3e:	f8 2f       	mov	r31, r24
    1f40:	ee 27       	eor	r30, r30
    1f42:	80 81       	ld	r24, Z
    1f44:	80 93 20 03 	sts	0x0320, r24
    1f48:	80 fd       	sbrc	r24, 0
    1f4a:	fb cf       	rjmp	.-10     	; 0x1f42 <WriteCommand+0x8>
    // 커맨드 출력
    MOTOR_CMD(motor) = cmd;
    1f4c:	60 83       	st	Z, r22

	CHECK_BUSY(motor, status);
    1f4e:	80 81       	ld	r24, Z
    1f50:	80 93 20 03 	sts	0x0320, r24
    1f54:	80 fd       	sbrc	r24, 0
    1f56:	fb cf       	rjmp	.-10     	; 0x1f4e <WriteCommand+0x14>
}
    1f58:	08 95       	ret

00001f5a <WriteDataTwoByte>:
//      data  - 쓸 데이터
// Return    : 없음
void WriteDataTwoByte(unsigned char motor, int data)
{
    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
    1f5a:	a8 2f       	mov	r26, r24
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	fd 01       	movw	r30, r26
    1f60:	b0 96       	adiw	r30, 0x20	; 32
    1f62:	fe 2f       	mov	r31, r30
    1f64:	ee 27       	eor	r30, r30
    1f66:	80 81       	ld	r24, Z
    1f68:	80 93 20 03 	sts	0x0320, r24
    1f6c:	80 fd       	sbrc	r24, 0
    1f6e:	fb cf       	rjmp	.-10     	; 0x1f66 <WriteDataTwoByte+0xc>
    // 2 바이트 데이터 출력
    MOTOR_DATA(motor) = (uint8_t)((data >> 8)&0xFF);
    1f70:	98 96       	adiw	r26, 0x28	; 40
    1f72:	ba 2f       	mov	r27, r26
    1f74:	aa 27       	eor	r26, r26
    1f76:	87 2f       	mov	r24, r23
    1f78:	99 27       	eor	r25, r25
    1f7a:	87 fd       	sbrc	r24, 7
    1f7c:	9a 95       	dec	r25
    1f7e:	8c 93       	st	X, r24
	CHECK_BUSY(motor, status);
    1f80:	80 81       	ld	r24, Z
    1f82:	80 93 20 03 	sts	0x0320, r24
    1f86:	80 fd       	sbrc	r24, 0
    1f88:	fb cf       	rjmp	.-10     	; 0x1f80 <WriteDataTwoByte+0x26>
    MOTOR_DATA(motor) = (uint8_t)(data&0xFF);
    1f8a:	6c 93       	st	X, r22
	CHECK_BUSY(motor, status);
    1f8c:	80 81       	ld	r24, Z
    1f8e:	80 93 20 03 	sts	0x0320, r24
    1f92:	80 fd       	sbrc	r24, 0
    1f94:	fb cf       	rjmp	.-10     	; 0x1f8c <WriteDataTwoByte+0x32>
}
    1f96:	08 95       	ret

00001f98 <WriteDataFourByte>:
// Parameter :
//      motor - 선택할 모터
//      data  - 쓸 데이터
// Return    : 없음
void WriteDataFourByte(unsigned char motor, long data)
{
    1f98:	df 92       	push	r13
    1f9a:	ef 92       	push	r14
    1f9c:	ff 92       	push	r15
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	d8 2e       	mov	r13, r24
    1fa4:	7a 01       	movw	r14, r20
    1fa6:	8b 01       	movw	r16, r22
    // 4 바이트의 데이터를 둘로 나누어서 WriteDataTwoByte함수를 두번 호출
    WriteDataTwoByte(motor, (int16_t)(data >> 16));
    1fa8:	9b 01       	movw	r18, r22
    1faa:	55 27       	eor	r21, r21
    1fac:	37 fd       	sbrc	r19, 7
    1fae:	50 95       	com	r21
    1fb0:	45 2f       	mov	r20, r21
    1fb2:	b9 01       	movw	r22, r18
    1fb4:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <WriteDataTwoByte>
    WriteDataTwoByte(motor, (int16_t)(data));
    1fb8:	8d 2d       	mov	r24, r13
    1fba:	b7 01       	movw	r22, r14
    1fbc:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <WriteDataTwoByte>
}
    1fc0:	1f 91       	pop	r17
    1fc2:	0f 91       	pop	r16
    1fc4:	ff 90       	pop	r15
    1fc6:	ef 90       	pop	r14
    1fc8:	df 90       	pop	r13
    1fca:	08 95       	ret

00001fcc <Motor_Reset>:
// Function  : LM629를 리셋한다.
// Parameter :
//      motor - 선택할 모터
// Return    : 없음
void Motor_Reset(uint8_t motor)
{
    1fcc:	1f 93       	push	r17
    1fce:	18 2f       	mov	r17, r24
    // RESET 커맨드 출력
    WriteCommand(motor, RESET);
    1fd0:	60 e0       	ldi	r22, 0x00	; 0
    1fd2:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <WriteCommand>
    1fd6:	8c ec       	ldi	r24, 0xCC	; 204
    1fd8:	9c e1       	ldi	r25, 0x1C	; 28
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <Motor_Reset+0xe>
    1fde:	00 c0       	rjmp	.+0      	; 0x1fe0 <Motor_Reset+0x14>
    1fe0:	00 00       	nop
    // 리셋이 완료될 때까지 최소 1.5ms이상 대기
    _delay_ms(2);
	// Morot1 인터럽트 마스크 리셋
    WriteCommand(motor, RSTI);
    1fe2:	81 2f       	mov	r24, r17
    1fe4:	6d e1       	ldi	r22, 0x1D	; 29
    1fe6:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <WriteCommand>
    WriteDataTwoByte(motor, 0x0000);
    1fea:	81 2f       	mov	r24, r17
    1fec:	60 e0       	ldi	r22, 0x00	; 0
    1fee:	70 e0       	ldi	r23, 0x00	; 0
    1ff0:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <WriteDataTwoByte>
}
    1ff4:	1f 91       	pop	r17
    1ff6:	08 95       	ret

00001ff8 <SetGain>:
//      kp    - P값
//      ki    - I값
//      kd    - D값
// Return    : 없음
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
{
    1ff8:	af 92       	push	r10
    1ffa:	bf 92       	push	r11
    1ffc:	cf 92       	push	r12
    1ffe:	df 92       	push	r13
    2000:	ef 92       	push	r14
    2002:	ff 92       	push	r15
    2004:	0f 93       	push	r16
    2006:	1f 93       	push	r17
    2008:	cf 93       	push	r28
    200a:	df 93       	push	r29
    200c:	f8 2e       	mov	r15, r24
    200e:	6b 01       	movw	r12, r22
    2010:	ea 01       	movw	r28, r20
    2012:	89 01       	movw	r16, r18
//      motor - 선택할 모터
//      kp    - P값
//      ki    - I값
//      kd    - D값
// Return    : 없음
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
    2014:	aa 24       	eor	r10, r10
    2016:	a3 94       	inc	r10
    2018:	61 15       	cp	r22, r1
    201a:	71 05       	cpc	r23, r1
    201c:	09 f4       	brne	.+2      	; 0x2020 <SetGain+0x28>
    201e:	aa 24       	eor	r10, r10
    2020:	bb 24       	eor	r11, r11
    2022:	b3 94       	inc	r11
    2024:	20 97       	sbiw	r28, 0x00	; 0
    2026:	09 f4       	brne	.+2      	; 0x202a <SetGain+0x32>
    2028:	bb 24       	eor	r11, r11
    202a:	ee 24       	eor	r14, r14
    202c:	e3 94       	inc	r14
    202e:	01 15       	cp	r16, r1
    2030:	11 05       	cpc	r17, r1
    2032:	09 f4       	brne	.+2      	; 0x2036 <SetGain+0x3e>
    2034:	ee 24       	eor	r14, r14
	if(ki)LD_ki=1;
	else LD_ki=0;
	if(kd)LD_kd=1;
	else LD_kd=0;
	// LFIL 커맨드 출력
    WriteCommand(motor, LFIL);
    2036:	8f 2d       	mov	r24, r15
    2038:	6e e1       	ldi	r22, 0x1E	; 30
    203a:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <WriteCommand>
    // 컨트롤 워드 출력, sampling interval은 341us 고정
    WriteDataTwoByte(motor, (0x0000) | (LD_kp << 3) | (LD_ki << 2) | (LD_kd << 1)  );
    203e:	6b 2d       	mov	r22, r11
    2040:	70 e0       	ldi	r23, 0x00	; 0
    2042:	66 0f       	add	r22, r22
    2044:	77 1f       	adc	r23, r23
    2046:	66 0f       	add	r22, r22
    2048:	77 1f       	adc	r23, r23
    204a:	8a 2d       	mov	r24, r10
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	43 e0       	ldi	r20, 0x03	; 3
    2050:	88 0f       	add	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	4a 95       	dec	r20
    2056:	e1 f7       	brne	.-8      	; 0x2050 <SetGain+0x58>
    2058:	68 2b       	or	r22, r24
    205a:	79 2b       	or	r23, r25
    205c:	8e 2d       	mov	r24, r14
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	88 0f       	add	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	68 2b       	or	r22, r24
    2066:	79 2b       	or	r23, r25
    2068:	8f 2d       	mov	r24, r15
    206a:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <WriteDataTwoByte>
    ////////////////////////////
	// P값 출력
	if(kp)WriteDataTwoByte(motor, kp);
    206e:	aa 20       	and	r10, r10
    2070:	21 f0       	breq	.+8      	; 0x207a <SetGain+0x82>
    2072:	8f 2d       	mov	r24, r15
    2074:	b6 01       	movw	r22, r12
    2076:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <WriteDataTwoByte>
    // I값 출력
    if(ki)WriteDataTwoByte(motor, ki);
    207a:	bb 20       	and	r11, r11
    207c:	21 f0       	breq	.+8      	; 0x2086 <SetGain+0x8e>
    207e:	8f 2d       	mov	r24, r15
    2080:	be 01       	movw	r22, r28
    2082:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <WriteDataTwoByte>
    // D값 출력
    if(kd)WriteDataTwoByte(motor, kd);
    2086:	ee 20       	and	r14, r14
    2088:	21 f0       	breq	.+8      	; 0x2092 <SetGain+0x9a>
    208a:	8f 2d       	mov	r24, r15
    208c:	b8 01       	movw	r22, r16
    208e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <WriteDataTwoByte>
    // 필터 업데이트
    WriteCommand(motor, UDF);
    2092:	8f 2d       	mov	r24, r15
    2094:	64 e0       	ldi	r22, 0x04	; 4
    2096:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <WriteCommand>
}
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	1f 91       	pop	r17
    20a0:	0f 91       	pop	r16
    20a2:	ff 90       	pop	r15
    20a4:	ef 90       	pop	r14
    20a6:	df 90       	pop	r13
    20a8:	cf 90       	pop	r12
    20aa:	bf 90       	pop	r11
    20ac:	af 90       	pop	r10
    20ae:	08 95       	ret

000020b0 <SetAcceleration>:
// Parameter :
//      motor - 선택할 모터
//      acc   - 가속도값
// Return    : 없음
void SetAcceleration(uint8_t motor, int32_t acc)
{
    20b0:	df 92       	push	r13
    20b2:	ef 92       	push	r14
    20b4:	ff 92       	push	r15
    20b6:	0f 93       	push	r16
    20b8:	1f 93       	push	r17
    20ba:	d8 2e       	mov	r13, r24
    20bc:	7a 01       	movw	r14, r20
    20be:	8b 01       	movw	r16, r22
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);
    20c0:	6f e1       	ldi	r22, 0x1F	; 31
    20c2:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(motor, (1 << ACC_LOAD));
    20c6:	8d 2d       	mov	r24, r13
    20c8:	60 e2       	ldi	r22, 0x20	; 32
    20ca:	70 e0       	ldi	r23, 0x00	; 0
    20cc:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <WriteDataTwoByte>
    // 가속도값 출력
    WriteDataFourByte(motor, acc);
    20d0:	8d 2d       	mov	r24, r13
    20d2:	b8 01       	movw	r22, r16
    20d4:	a7 01       	movw	r20, r14
    20d6:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <WriteDataFourByte>
}
    20da:	1f 91       	pop	r17
    20dc:	0f 91       	pop	r16
    20de:	ff 90       	pop	r15
    20e0:	ef 90       	pop	r14
    20e2:	df 90       	pop	r13
    20e4:	08 95       	ret

000020e6 <Motor_init>:
// Parameter : 없음
// Return    : 없음
void Motor_init(void)
{	
    // Motor1 게인 설정
    SetGain(MOTOR0, 7, 3, 1);
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	67 e0       	ldi	r22, 0x07	; 7
    20ea:	70 e0       	ldi	r23, 0x00	; 0
    20ec:	43 e0       	ldi	r20, 0x03	; 3
    20ee:	50 e0       	ldi	r21, 0x00	; 0
    20f0:	21 e0       	ldi	r18, 0x01	; 1
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <SetGain>
    // Motor2 게인 설정
    SetGain(MOTOR1, 7, 3, 1);
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	67 e0       	ldi	r22, 0x07	; 7
    20fc:	70 e0       	ldi	r23, 0x00	; 0
    20fe:	43 e0       	ldi	r20, 0x03	; 3
    2100:	50 e0       	ldi	r21, 0x00	; 0
    2102:	21 e0       	ldi	r18, 0x01	; 1
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <SetGain>
    // Motor3 게인 설정
    SetGain(MOTOR2, 7, 3, 1);
    210a:	82 e0       	ldi	r24, 0x02	; 2
    210c:	67 e0       	ldi	r22, 0x07	; 7
    210e:	70 e0       	ldi	r23, 0x00	; 0
    2110:	43 e0       	ldi	r20, 0x03	; 3
    2112:	50 e0       	ldi	r21, 0x00	; 0
    2114:	21 e0       	ldi	r18, 0x01	; 1
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <SetGain>

    SetAcceleration(MOTOR0, 0x3FFFFFFF);
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	4f ef       	ldi	r20, 0xFF	; 255
    2120:	5f ef       	ldi	r21, 0xFF	; 255
    2122:	6f ef       	ldi	r22, 0xFF	; 255
    2124:	7f e3       	ldi	r23, 0x3F	; 63
    2126:	0e 94 58 10 	call	0x20b0	; 0x20b0 <SetAcceleration>
    SetAcceleration(MOTOR1, 0x3FFFFFFF);
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	4f ef       	ldi	r20, 0xFF	; 255
    212e:	5f ef       	ldi	r21, 0xFF	; 255
    2130:	6f ef       	ldi	r22, 0xFF	; 255
    2132:	7f e3       	ldi	r23, 0x3F	; 63
    2134:	0e 94 58 10 	call	0x20b0	; 0x20b0 <SetAcceleration>
    SetAcceleration(MOTOR2, 0x3FFFFFFF);
    2138:	82 e0       	ldi	r24, 0x02	; 2
    213a:	4f ef       	ldi	r20, 0xFF	; 255
    213c:	5f ef       	ldi	r21, 0xFF	; 255
    213e:	6f ef       	ldi	r22, 0xFF	; 255
    2140:	7f e3       	ldi	r23, 0x3F	; 63
    2142:	0e 94 58 10 	call	0x20b0	; 0x20b0 <SetAcceleration>
}
    2146:	08 95       	ret

00002148 <SetVelocity>:
// Parameter :
//      motor    - 선택할 모터
//      velocity - 속도 설정  (0 ~ 1,073,741,823) 음수 입력시 역방향으로 회전
// Return    : 없음
void SetVelocity(uint8_t motor, int32_t velocity)
{
    2148:	df 92       	push	r13
    214a:	ef 92       	push	r14
    214c:	ff 92       	push	r15
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	0f 92       	push	r0
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	d8 2e       	mov	r13, r24
    215e:	7a 01       	movw	r14, r20
    2160:	8b 01       	movw	r16, r22
	unsigned char dir=1;

	if(velocity<0){
    2162:	77 ff       	sbrs	r23, 7
    2164:	0a c0       	rjmp	.+20     	; 0x217a <SetVelocity+0x32>
		velocity*=(-1);
    2166:	10 95       	com	r17
    2168:	00 95       	com	r16
    216a:	f0 94       	com	r15
    216c:	e0 94       	com	r14
    216e:	e1 1c       	adc	r14, r1
    2170:	f1 1c       	adc	r15, r1
    2172:	01 1d       	adc	r16, r1
    2174:	11 1d       	adc	r17, r1
		dir=0;
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	01 c0       	rjmp	.+2      	; 0x217c <SetVelocity+0x34>
//      motor    - 선택할 모터
//      velocity - 속도 설정  (0 ~ 1,073,741,823) 음수 입력시 역방향으로 회전
// Return    : 없음
void SetVelocity(uint8_t motor, int32_t velocity)
{
	unsigned char dir=1;
    217a:	91 e0       	ldi	r25, 0x01	; 1
	if(velocity<0){
		velocity*=(-1);
		dir=0;
	}
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);        
    217c:	8d 2d       	mov	r24, r13
    217e:	6f e1       	ldi	r22, 0x1F	; 31
    2180:	99 83       	std	Y+1, r25	; 0x01
    2182:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <WriteCommand>
    // 컨트롤 워드 출력        
    WriteDataTwoByte(motor,  (dir << FORWARD_DIR) | (1 << VELOCITY_MODE) | (1 << VELOCITY_LOAD));
    2186:	99 81       	ldd	r25, Y+1	; 0x01
    2188:	79 2f       	mov	r23, r25
    218a:	72 95       	swap	r23
    218c:	70 7f       	andi	r23, 0xF0	; 240
    218e:	60 e0       	ldi	r22, 0x00	; 0
    2190:	68 60       	ori	r22, 0x08	; 8
    2192:	78 60       	ori	r23, 0x08	; 8
    2194:	8d 2d       	mov	r24, r13
    2196:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <WriteDataTwoByte>
    // 속도값 출력
    WriteDataFourByte(motor, velocity);
    219a:	8d 2d       	mov	r24, r13
    219c:	b8 01       	movw	r22, r16
    219e:	a7 01       	movw	r20, r14
    21a0:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <WriteDataFourByte>
}
    21a4:	0f 90       	pop	r0
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	1f 91       	pop	r17
    21ac:	0f 91       	pop	r16
    21ae:	ff 90       	pop	r15
    21b0:	ef 90       	pop	r14
    21b2:	df 90       	pop	r13
    21b4:	08 95       	ret

000021b6 <SetPosition>:
//		acc   - 가속도 설정  (0 ~ 1,073,741,823)
//   velocity - 속도 설정    (0 ~ 1,073,741,823)
//   position - 모터위치설정 (-1,073,741,824 ~ 1,073,741,823)counts
// Return    : 없음
void SetPosition(uint8_t motor, uint8_t mode, int32_t acc,int32_t velocity,int32_t position)
{
    21b6:	4f 92       	push	r4
    21b8:	5f 92       	push	r5
    21ba:	6f 92       	push	r6
    21bc:	7f 92       	push	r7
    21be:	8f 92       	push	r8
    21c0:	9f 92       	push	r9
    21c2:	af 92       	push	r10
    21c4:	bf 92       	push	r11
    21c6:	cf 92       	push	r12
    21c8:	df 92       	push	r13
    21ca:	ef 92       	push	r14
    21cc:	ff 92       	push	r15
    21ce:	0f 93       	push	r16
    21d0:	1f 93       	push	r17
    21d2:	98 2e       	mov	r9, r24
    21d4:	86 2e       	mov	r8, r22
    21d6:	29 01       	movw	r4, r18
    21d8:	3a 01       	movw	r6, r20
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);
    21da:	6f e1       	ldi	r22, 0x1F	; 31
    21dc:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <WriteCommand>
    // 컨트롤 워드 출력
    // mode : 0 - Absolute Position, 1 - Relative Position
    // Position Mode로 설정
    
	WriteDataTwoByte(motor, (1 << ACC_LOAD) | (1 << VELOCITY_LOAD) | (1 << POSITION_LOAD) | (mode << POSITION_RELATIVE) );//WriteDataTwoByte(motor, 0x2A|mode);
    21e0:	68 2d       	mov	r22, r8
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	6a 62       	ori	r22, 0x2A	; 42
    21e6:	89 2d       	mov	r24, r9
    21e8:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <WriteDataTwoByte>
    // 위치값 출력
	WriteDataFourByte(motor, acc);    
    21ec:	89 2d       	mov	r24, r9
    21ee:	b3 01       	movw	r22, r6
    21f0:	a2 01       	movw	r20, r4
    21f2:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <WriteDataFourByte>
	WriteDataFourByte(motor, velocity);
    21f6:	89 2d       	mov	r24, r9
    21f8:	b8 01       	movw	r22, r16
    21fa:	a7 01       	movw	r20, r14
    21fc:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <WriteDataFourByte>
    WriteDataFourByte(motor, position);
    2200:	89 2d       	mov	r24, r9
    2202:	b6 01       	movw	r22, r12
    2204:	a5 01       	movw	r20, r10
    2206:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <WriteDataFourByte>
}
    220a:	1f 91       	pop	r17
    220c:	0f 91       	pop	r16
    220e:	ff 90       	pop	r15
    2210:	ef 90       	pop	r14
    2212:	df 90       	pop	r13
    2214:	cf 90       	pop	r12
    2216:	bf 90       	pop	r11
    2218:	af 90       	pop	r10
    221a:	9f 90       	pop	r9
    221c:	8f 90       	pop	r8
    221e:	7f 90       	pop	r7
    2220:	6f 90       	pop	r6
    2222:	5f 90       	pop	r5
    2224:	4f 90       	pop	r4
    2226:	08 95       	ret

00002228 <LM629_HW_Reset>:

// Function  : LM629 H/W Reset. 최초 전원 인가시 반드시 실행해야한다.
// Parameter : 없음
// Return    : 없음
void LM629_HW_Reset(void){
    2228:	8f 92       	push	r8
    222a:	9f 92       	push	r9
    222c:	af 92       	push	r10
    222e:	bf 92       	push	r11
    2230:	cf 92       	push	r12
    2232:	df 92       	push	r13
    2234:	ef 92       	push	r14
    2236:	ff 92       	push	r15
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	00 d0       	rcall	.+0      	; 0x2242 <LM629_HW_Reset+0x1a>
    2242:	0f 92       	push	r0
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
	unsigned char status[3]={0, }, i=0, step=0;
	
	DDRA=0x00;
    2248:	1a ba       	out	0x1a, r1	; 26

	PORTC=0x00;
    224a:	15 ba       	out	0x15, r1	; 21
	DDRC=0xFF;
    224c:	8f ef       	ldi	r24, 0xFF	; 255
    224e:	84 bb       	out	0x14, r24	; 20

	PORTG=0x00;
    2250:	10 92 65 00 	sts	0x0065, r1
	DDRG=0x03;
    2254:	83 e0       	ldi	r24, 0x03	; 3
    2256:	80 93 64 00 	sts	0x0064, r24
			}
		}
		
		if(step==1){
			// SRE : 외부 데이터 메모리 영역 활성화
			MCUCR = (1 << SRE) | (0 << SRW10);
    225a:	e0 e8       	ldi	r30, 0x80	; 128
    225c:	9e 2e       	mov	r9, r30
		    // SRL(0) : Upper Sector로만 사용 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
    225e:	72 e0       	ldi	r23, 0x02	; 2
    2260:	a7 2e       	mov	r10, r23
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
    2262:	64 e8       	ldi	r22, 0x84	; 132
    2264:	b6 2e       	mov	r11, r22
    2266:	6e 01       	movw	r12, r28
    2268:	08 94       	sec
    226a:	c1 1c       	adc	r12, r1
    226c:	d1 1c       	adc	r13, r1
	DDRG=0x03;

	while(1){
		if(step==0){
			while(1){
				PORTC |= 0x05; //Hw Rst Hi(decoder = Low)
    226e:	85 b3       	in	r24, 0x15	; 21
    2270:	85 60       	ori	r24, 0x05	; 5
    2272:	85 bb       	out	0x15, r24	; 21
    2274:	83 e3       	ldi	r24, 0x33	; 51
    2276:	9b e2       	ldi	r25, 0x2B	; 43
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <LM629_HW_Reset+0x50>
				_delay_ms(3);
				PORTC &= ~0x05; //Hw Rst Low(decoder = Hi)
    227c:	85 b3       	in	r24, 0x15	; 21
    227e:	8a 7f       	andi	r24, 0xFA	; 250
    2280:	85 bb       	out	0x15, r24	; 21
    2282:	ec ec       	ldi	r30, 0xCC	; 204
    2284:	fc e1       	ldi	r31, 0x1C	; 28
    2286:	31 97       	sbiw	r30, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <LM629_HW_Reset+0x5e>
    228a:	00 c0       	rjmp	.+0      	; 0x228c <LM629_HW_Reset+0x64>
    228c:	00 00       	nop
				_delay_ms(2);

				PORTG &= ~0x02; //RD low
    228e:	80 91 65 00 	lds	r24, 0x0065
    2292:	8d 7f       	andi	r24, 0xFD	; 253
    2294:	80 93 65 00 	sts	0x0065, r24
				PORTC &= ~0x08; //PS low
    2298:	ab 98       	cbi	0x15, 3	; 21
		
				PORTC &=~0x07;	//cs motor0
    229a:	85 b3       	in	r24, 0x15	; 21
    229c:	88 7f       	andi	r24, 0xF8	; 248
    229e:	85 bb       	out	0x15, r24	; 21
				status[0]=PINA; //Read status motor0
    22a0:	29 b3       	in	r18, 0x19	; 25
    22a2:	29 83       	std	Y+1, r18	; 0x01
				
				PORTC |=0x01;	//cs motor1
    22a4:	a8 9a       	sbi	0x15, 0	; 21
				status[1]=PINA; //Read status motor0
    22a6:	99 b3       	in	r25, 0x19	; 25
    22a8:	9a 83       	std	Y+2, r25	; 0x02
				
				PORTC = (PORTC&0xF8)|0x02; 	//cs motor2
    22aa:	85 b3       	in	r24, 0x15	; 21
    22ac:	88 7f       	andi	r24, 0xF8	; 248
    22ae:	82 60       	ori	r24, 0x02	; 2
    22b0:	85 bb       	out	0x15, r24	; 21
				status[2]=PINA;  //Read status motor0
    22b2:	89 b3       	in	r24, 0x19	; 25
    22b4:	8b 83       	std	Y+3, r24	; 0x03

				if( (status[0]==0xC4||status[0]==0x84) && 
    22b6:	24 3c       	cpi	r18, 0xC4	; 196
    22b8:	11 f0       	breq	.+4      	; 0x22be <LM629_HW_Reset+0x96>
    22ba:	24 38       	cpi	r18, 0x84	; 132
    22bc:	c1 f5       	brne	.+112    	; 0x232e <LM629_HW_Reset+0x106>
    22be:	94 3c       	cpi	r25, 0xC4	; 196
    22c0:	11 f0       	breq	.+4      	; 0x22c6 <LM629_HW_Reset+0x9e>
					(status[1]==0xC4||status[1]==0x84) && 
    22c2:	94 38       	cpi	r25, 0x84	; 132
    22c4:	a1 f5       	brne	.+104    	; 0x232e <LM629_HW_Reset+0x106>
    22c6:	84 3c       	cpi	r24, 0xC4	; 196
    22c8:	11 f0       	breq	.+4      	; 0x22ce <LM629_HW_Reset+0xa6>
					(status[2]==0xC4||status[2]==0x84) ){
    22ca:	84 38       	cpi	r24, 0x84	; 132
    22cc:	81 f5       	brne	.+96     	; 0x232e <LM629_HW_Reset+0x106>
			}
		}
		
		if(step==1){
			// SRE : 외부 데이터 메모리 영역 활성화
			MCUCR = (1 << SRE) | (0 << SRW10);
    22ce:	95 be       	out	0x35, r9	; 53
		    // SRL(0) : Upper Sector로만 사용 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
    22d0:	a0 92 6d 00 	sts	0x006D, r10
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
    22d4:	b0 92 6c 00 	sts	0x006C, r11
    22d8:	76 01       	movw	r14, r12
    22da:	00 e0       	ldi	r16, 0x00	; 0
    22dc:	10 e2       	ldi	r17, 0x20	; 32
    22de:	8e 2c       	mov	r8, r14
    22e0:	8c 18       	sub	r8, r12
			while(1){
				for(i=0;i<3;++i){
		        	WriteCommand(i, RSTI);
    22e2:	88 2d       	mov	r24, r8
    22e4:	6d e1       	ldi	r22, 0x1D	; 29
    22e6:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <WriteCommand>
					WriteDataTwoByte(i, 0x0000);
    22ea:	88 2d       	mov	r24, r8
    22ec:	60 e0       	ldi	r22, 0x00	; 0
    22ee:	70 e0       	ldi	r23, 0x00	; 0
    22f0:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <WriteDataTwoByte>
					READ_STATUS(i, status[i]);
    22f4:	f8 01       	movw	r30, r16
    22f6:	80 81       	ld	r24, Z
    22f8:	f7 01       	movw	r30, r14
    22fa:	81 93       	st	Z+, r24
    22fc:	7f 01       	movw	r14, r30
    22fe:	00 50       	subi	r16, 0x00	; 0
    2300:	1f 4f       	sbci	r17, 0xFF	; 255
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
			while(1){
				for(i=0;i<3;++i){
    2302:	f3 e2       	ldi	r31, 0x23	; 35
    2304:	00 30       	cpi	r16, 0x00	; 0
    2306:	1f 07       	cpc	r17, r31
    2308:	51 f7       	brne	.-44     	; 0x22de <LM629_HW_Reset+0xb6>
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	80 3c       	cpi	r24, 0xC0	; 192
    230e:	11 f0       	breq	.+4      	; 0x2314 <LM629_HW_Reset+0xec>
    2310:	80 38       	cpi	r24, 0x80	; 128
    2312:	51 f4       	brne	.+20     	; 0x2328 <LM629_HW_Reset+0x100>
					(status[1]==0xC0||status[1]==0x80) && 
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
				for(i=0;i<3;++i){
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
    2316:	80 3c       	cpi	r24, 0xC0	; 192
    2318:	11 f0       	breq	.+4      	; 0x231e <LM629_HW_Reset+0xf6>
					(status[1]==0xC0||status[1]==0x80) && 
    231a:	80 38       	cpi	r24, 0x80	; 128
    231c:	29 f4       	brne	.+10     	; 0x2328 <LM629_HW_Reset+0x100>
					(status[2]==0xC0||status[2]==0x80) ){
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
					(status[1]==0xC0||status[1]==0x80) && 
    2320:	80 3c       	cpi	r24, 0xC0	; 192
    2322:	69 f0       	breq	.+26     	; 0x233e <LM629_HW_Reset+0x116>
					(status[2]==0xC0||status[2]==0x80) ){
    2324:	80 38       	cpi	r24, 0x80	; 128
    2326:	59 f0       	breq	.+22     	; 0x233e <LM629_HW_Reset+0x116>
					break;
				}
				else{	//다시 처음부터 LM629초기화
					step=0;	
					// SRE : 외부 데이터 메모리 영역 비활성화
					MCUCR &= ~(1 << SRE) & ~(1 << SRW10);
    2328:	85 b7       	in	r24, 0x35	; 53
    232a:	8f 73       	andi	r24, 0x3F	; 63
    232c:	85 bf       	out	0x35, r24	; 53
					PORTC=0x00;
    232e:	15 ba       	out	0x15, r1	; 21
					lcd_display_str(0,0,"Error. Restart");
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	48 e0       	ldi	r20, 0x08	; 8
    2336:	51 e0       	ldi	r21, 0x01	; 1
    2338:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_display_str>
    233c:	98 cf       	rjmp	.-208    	; 0x226e <LM629_HW_Reset+0x46>
					break;
				}
			}
		}
		if(step==2){
			lcd_display_str(0,0,"Initialize success.");
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	47 e1       	ldi	r20, 0x17	; 23
    2344:	51 e0       	ldi	r21, 0x01	; 1
    2346:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_display_str>
    234a:	83 e0       	ldi	r24, 0x03	; 3
			for(i=0;i<3;++i){
				PORTB|=0x07;
    234c:	98 b3       	in	r25, 0x18	; 24
    234e:	97 60       	ori	r25, 0x07	; 7
    2350:	98 bb       	out	0x18, r25	; 24
    2352:	2f ef       	ldi	r18, 0xFF	; 255
    2354:	3f eb       	ldi	r19, 0xBF	; 191
    2356:	46 e0       	ldi	r20, 0x06	; 6
    2358:	21 50       	subi	r18, 0x01	; 1
    235a:	30 40       	sbci	r19, 0x00	; 0
    235c:	40 40       	sbci	r20, 0x00	; 0
    235e:	e1 f7       	brne	.-8      	; 0x2358 <LM629_HW_Reset+0x130>
    2360:	00 c0       	rjmp	.+0      	; 0x2362 <LM629_HW_Reset+0x13a>
    2362:	00 00       	nop
				_delay_ms(150);
				PORTB&=~0x07;
    2364:	98 b3       	in	r25, 0x18	; 24
    2366:	98 7f       	andi	r25, 0xF8	; 248
    2368:	98 bb       	out	0x18, r25	; 24
    236a:	2f ef       	ldi	r18, 0xFF	; 255
    236c:	3f eb       	ldi	r19, 0xBF	; 191
    236e:	46 e0       	ldi	r20, 0x06	; 6
    2370:	21 50       	subi	r18, 0x01	; 1
    2372:	30 40       	sbci	r19, 0x00	; 0
    2374:	40 40       	sbci	r20, 0x00	; 0
    2376:	e1 f7       	brne	.-8      	; 0x2370 <LM629_HW_Reset+0x148>
    2378:	00 c0       	rjmp	.+0      	; 0x237a <LM629_HW_Reset+0x152>
    237a:	00 00       	nop
    237c:	81 50       	subi	r24, 0x01	; 1
				}
			}
		}
		if(step==2){
			lcd_display_str(0,0,"Initialize success.");
			for(i=0;i<3;++i){
    237e:	31 f7       	brne	.-52     	; 0x234c <LM629_HW_Reset+0x124>
				PORTB|=0x07;
				_delay_ms(150);
				PORTB&=~0x07;
				_delay_ms(150);
			}
			lcd_clear_screen();
    2380:	0e 94 44 01 	call	0x288	; 0x288 <lcd_clear_screen>
			break;
		}
	}
}
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	1f 91       	pop	r17
    2390:	0f 91       	pop	r16
    2392:	ff 90       	pop	r15
    2394:	ef 90       	pop	r14
    2396:	df 90       	pop	r13
    2398:	cf 90       	pop	r12
    239a:	bf 90       	pop	r11
    239c:	af 90       	pop	r10
    239e:	9f 90       	pop	r9
    23a0:	8f 90       	pop	r8
    23a2:	08 95       	ret

000023a4 <StartMotion>:
// Function  : 모든 모터의 모션을 시작한다.
// Parameter : 없음
// Return    : 없음
void StartMotion(void)
{
    WriteCommand(MOTOR0, STT);
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	61 e0       	ldi	r22, 0x01	; 1
    23a8:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <WriteCommand>
    WriteCommand(MOTOR1, STT);
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	61 e0       	ldi	r22, 0x01	; 1
    23b0:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <WriteCommand>
    WriteCommand(MOTOR2, STT);
    23b4:	82 e0       	ldi	r24, 0x02	; 2
    23b6:	61 e0       	ldi	r22, 0x01	; 1
    23b8:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <WriteCommand>
}
    23bc:	08 95       	ret

000023be <StopMotion>:

// Function  : 모든 모터의 모션을 정지한다.
// Parameter : 없음
// Return    : 없음
void StopMotion(uint16_t mode)
{
    23be:	1f 93       	push	r17
    23c0:	cf 93       	push	r28
    23c2:	df 93       	push	r29
    23c4:	18 2f       	mov	r17, r24
    // Motor1 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR0, LTRJ);
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	6f e1       	ldi	r22, 0x1F	; 31
    23ca:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR0, (1 << mode));
    23ce:	c1 e0       	ldi	r28, 0x01	; 1
    23d0:	d0 e0       	ldi	r29, 0x00	; 0
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <StopMotion+0x1a>
    23d4:	cc 0f       	add	r28, r28
    23d6:	dd 1f       	adc	r29, r29
    23d8:	1a 95       	dec	r17
    23da:	e2 f7       	brpl	.-8      	; 0x23d4 <StopMotion+0x16>
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	be 01       	movw	r22, r28
    23e0:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <WriteDataTwoByte>

    // Motor2 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR1, LTRJ);
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	6f e1       	ldi	r22, 0x1F	; 31
    23e8:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR1, (1 << mode));
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	be 01       	movw	r22, r28
    23f0:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <WriteDataTwoByte>

    // Motor3 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR2, LTRJ);
    23f4:	82 e0       	ldi	r24, 0x02	; 2
    23f6:	6f e1       	ldi	r22, 0x1F	; 31
    23f8:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR2, (1 << mode));
    23fc:	82 e0       	ldi	r24, 0x02	; 2
    23fe:	be 01       	movw	r22, r28
    2400:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <WriteDataTwoByte>

    // 모션 정지
    WriteCommand(MOTOR0, STT);
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	61 e0       	ldi	r22, 0x01	; 1
    2408:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <WriteCommand>
    WriteCommand(MOTOR1, STT);
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	61 e0       	ldi	r22, 0x01	; 1
    2410:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <WriteCommand>
    WriteCommand(MOTOR2, STT);
    2414:	82 e0       	ldi	r24, 0x02	; 2
    2416:	61 e0       	ldi	r22, 0x01	; 1
    2418:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <WriteCommand>
}
    241c:	df 91       	pop	r29
    241e:	cf 91       	pop	r28
    2420:	1f 91       	pop	r17
    2422:	08 95       	ret

00002424 <MOTOR_CTR>:

void MOTOR_CTR(long MT0,long MT1,long MT2){
    2424:	af 92       	push	r10
    2426:	bf 92       	push	r11
    2428:	cf 92       	push	r12
    242a:	df 92       	push	r13
    242c:	ef 92       	push	r14
    242e:	ff 92       	push	r15
    2430:	0f 93       	push	r16
    2432:	1f 93       	push	r17
    2434:	df 93       	push	r29
    2436:	cf 93       	push	r28
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	2c 97       	sbiw	r28, 0x0c	; 12
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	59 01       	movw	r10, r18
    244a:	6a 01       	movw	r12, r20
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};
    244c:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__floatsisf>
    2450:	69 83       	std	Y+1, r22	; 0x01
    2452:	7a 83       	std	Y+2, r23	; 0x02
    2454:	8b 83       	std	Y+3, r24	; 0x03
    2456:	9c 83       	std	Y+4, r25	; 0x04
    2458:	c6 01       	movw	r24, r12
    245a:	b5 01       	movw	r22, r10
    245c:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__floatsisf>
    2460:	6d 83       	std	Y+5, r22	; 0x05
    2462:	7e 83       	std	Y+6, r23	; 0x06
    2464:	8f 83       	std	Y+7, r24	; 0x07
    2466:	98 87       	std	Y+8, r25	; 0x08
    2468:	c8 01       	movw	r24, r16
    246a:	b7 01       	movw	r22, r14
    246c:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__floatsisf>
    2470:	69 87       	std	Y+9, r22	; 0x09
    2472:	7a 87       	std	Y+10, r23	; 0x0a
    2474:	8b 87       	std	Y+11, r24	; 0x0b
    2476:	9c 87       	std	Y+12, r25	; 0x0c
    2478:	8e 01       	movw	r16, r28
    247a:	0f 5f       	subi	r16, 0xFF	; 255
    247c:	1f 4f       	sbci	r17, 0xFF	; 255

	for(i=0;i<3;++i){
    247e:	ee 24       	eor	r14, r14
		
		V[i]=V[i]*0.2728;
    2480:	f8 01       	movw	r30, r16
    2482:	60 81       	ld	r22, Z
    2484:	71 81       	ldd	r23, Z+1	; 0x01
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	21 e7       	ldi	r18, 0x71	; 113
    248c:	3c ea       	ldi	r19, 0xAC	; 172
    248e:	4b e8       	ldi	r20, 0x8B	; 139
    2490:	5e e3       	ldi	r21, 0x3E	; 62
    2492:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
    2496:	9b 01       	movw	r18, r22
    2498:	ac 01       	movw	r20, r24
    249a:	f8 01       	movw	r30, r16
    249c:	21 93       	st	Z+, r18
    249e:	31 93       	st	Z+, r19
    24a0:	41 93       	st	Z+, r20
    24a2:	51 93       	st	Z+, r21
    24a4:	8f 01       	movw	r16, r30

		SetVelocity(i, V[i]*65536);
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	40 e8       	ldi	r20, 0x80	; 128
    24ac:	57 e4       	ldi	r21, 0x47	; 71
    24ae:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsf3>
    24b2:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__fixsfsi>
    24b6:	ab 01       	movw	r20, r22
    24b8:	bc 01       	movw	r22, r24
    24ba:	8e 2d       	mov	r24, r14
    24bc:	0e 94 a4 10 	call	0x2148	; 0x2148 <SetVelocity>
void MOTOR_CTR(long MT0,long MT1,long MT2){
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};

	for(i=0;i<3;++i){
    24c0:	e3 94       	inc	r14
    24c2:	fe 2d       	mov	r31, r14
    24c4:	f3 30       	cpi	r31, 0x03	; 3
    24c6:	e1 f6       	brne	.-72     	; 0x2480 <MOTOR_CTR+0x5c>
		
		V[i]=V[i]*0.2728;

		SetVelocity(i, V[i]*65536);
	}
	StartMotion();	
    24c8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <StartMotion>
}
    24cc:	2c 96       	adiw	r28, 0x0c	; 12
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	1f 91       	pop	r17
    24de:	0f 91       	pop	r16
    24e0:	ff 90       	pop	r15
    24e2:	ef 90       	pop	r14
    24e4:	df 90       	pop	r13
    24e6:	cf 90       	pop	r12
    24e8:	bf 90       	pop	r11
    24ea:	af 90       	pop	r10
    24ec:	08 95       	ret

000024ee <Camera_init>:


void Camera_init(void){
	unsigned char buff=0;
	while(1){	//우선순위 큰것부터
		putchar1(11);
    24ee:	8b e0       	ldi	r24, 0x0B	; 11
    24f0:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		while(!rx1_flg); 
    24f4:	80 91 34 02 	lds	r24, 0x0234
    24f8:	88 23       	and	r24, r24
    24fa:	e1 f3       	breq	.-8      	; 0x24f4 <Camera_init+0x6>
		buff=getchar1();
    24fc:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
		if(buff){
    2500:	88 23       	and	r24, r24
    2502:	a9 f3       	breq	.-22     	; 0x24ee <Camera_init>
			buff=0;
			break;
		}
	}
	while(1){	//추적 할 최소 픽셀수  255픽셀
		putchar1(17);
    2504:	81 e1       	ldi	r24, 0x11	; 17
    2506:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		putchar1(255);
    250a:	8f ef       	ldi	r24, 0xFF	; 255
    250c:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		while(!rx1_flg);
    2510:	80 91 34 02 	lds	r24, 0x0234
    2514:	88 23       	and	r24, r24
    2516:	e1 f3       	breq	.-8      	; 0x2510 <Camera_init+0x22>
		buff=getchar1();
    2518:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
		if(buff)break;
    251c:	88 23       	and	r24, r24
    251e:	91 f3       	breq	.-28     	; 0x2504 <Camera_init+0x16>
	}
}
    2520:	08 95       	ret

00002522 <Camera_Cmd>:

unsigned char Camera_Cmd(unsigned char color, unsigned char cmd){
    2522:	df 93       	push	r29
    2524:	cf 93       	push	r28
    2526:	00 d0       	rcall	.+0      	; 0x2528 <Camera_Cmd+0x6>
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
	
	volatile unsigned char buff=0, data=0;
    252c:	19 82       	std	Y+1, r1	; 0x01
    252e:	1a 82       	std	Y+2, r1	; 0x02
	
	data=cmd+(color*10);
    2530:	88 0f       	add	r24, r24
    2532:	98 2f       	mov	r25, r24
    2534:	99 0f       	add	r25, r25
    2536:	99 0f       	add	r25, r25
    2538:	98 0f       	add	r25, r24
    253a:	69 0f       	add	r22, r25
    253c:	6a 83       	std	Y+2, r22	; 0x02

	putchar1(data);
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
	while(!rx1_flg);
    2544:	80 91 34 02 	lds	r24, 0x0234
    2548:	88 23       	and	r24, r24
    254a:	e1 f3       	breq	.-8      	; 0x2544 <Camera_Cmd+0x22>
	buff=getchar1();
    254c:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
    2550:	89 83       	std	Y+1, r24	; 0x01
	
	return buff;
    2552:	89 81       	ldd	r24, Y+1	; 0x01
}
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	08 95       	ret

0000255e <Sensor_init>:
// Function  : IR, PSD 센서를 초기화
// Parameter : 없음
// Return    : 없음
void Sensor_init(void)
{
    DDRE  &= ~0x1C;
    255e:	82 b1       	in	r24, 0x02	; 2
    2560:	83 7e       	andi	r24, 0xE3	; 227
    2562:	82 b9       	out	0x02, r24	; 2
    DDRG  &= ~0x18;
    2564:	e4 e6       	ldi	r30, 0x64	; 100
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	87 7e       	andi	r24, 0xE7	; 231
    256c:	80 83       	st	Z, r24

    UCSR0A = 0x00;
    256e:	1b b8       	out	0x0b, r1	; 11
    UCSR0B = 0x98;
    2570:	88 e9       	ldi	r24, 0x98	; 152
    2572:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = 0x06;
    2574:	86 e0       	ldi	r24, 0x06	; 6
    2576:	80 93 95 00 	sts	0x0095, r24
    UBRR0H = 0x00;
    257a:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 0x0F;
    257e:	8f e0       	ldi	r24, 0x0F	; 15
    2580:	89 b9       	out	0x09, r24	; 9

    sei();
    2582:	78 94       	sei
}
    2584:	08 95       	ret

00002586 <__vector_18>:

// Function  : USART를 통해 전송되는 PSD 센서값을 전역변수에 저장하는 ISR
// Parameter : 없음
// Return    : 없음
ISR(USART0_RX_vect)
{
    2586:	1f 92       	push	r1
    2588:	0f 92       	push	r0
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	0f 92       	push	r0
    258e:	0b b6       	in	r0, 0x3b	; 59
    2590:	0f 92       	push	r0
    2592:	11 24       	eor	r1, r1
    2594:	2f 93       	push	r18
    2596:	3f 93       	push	r19
    2598:	8f 93       	push	r24
    259a:	9f 93       	push	r25
    259c:	ef 93       	push	r30
    259e:	ff 93       	push	r31
    volatile static unsigned char rx_cnt = 0;
    volatile static unsigned char chksum = 0;
    volatile static unsigned char buf[11] = {0, };
    uint8_t rxbuf = 0, i;

    rxbuf = UDR0;
    25a0:	9c b1       	in	r25, 0x0c	; 12
    //수신완료 및 에러 검출되지 않을시
    while(!(UCSR0A & 0xB8));
    25a2:	8b b1       	in	r24, 0x0b	; 11
    25a4:	88 7b       	andi	r24, 0xB8	; 184
    25a6:	e9 f3       	breq	.-6      	; 0x25a2 <__vector_18+0x1c>

    if(rxbuf == 0xFF)
    25a8:	9f 3f       	cpi	r25, 0xFF	; 255
    25aa:	21 f4       	brne	.+8      	; 0x25b4 <__vector_18+0x2e>
    {
        //시작 버퍼 수신
        rx_en = 1;
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	80 93 1f 03 	sts	0x031F, r24
    25b2:	47 c0       	rjmp	.+142    	; 0x2642 <__vector_18+0xbc>
    }
    else if(rx_en == 1)
    25b4:	80 91 1f 03 	lds	r24, 0x031F
    25b8:	81 30       	cpi	r24, 0x01	; 1
    25ba:	09 f0       	breq	.+2      	; 0x25be <__vector_18+0x38>
    25bc:	42 c0       	rjmp	.+132    	; 0x2642 <__vector_18+0xbc>
    {
        //데이터 받기
        //0번지부터 PSD0 저장
        buf[rx_cnt++] = rxbuf;
    25be:	80 91 1e 03 	lds	r24, 0x031E
    25c2:	e8 2f       	mov	r30, r24
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	ee 5e       	subi	r30, 0xEE	; 238
    25c8:	fc 4f       	sbci	r31, 0xFC	; 252
    25ca:	90 83       	st	Z, r25
    25cc:	8f 5f       	subi	r24, 0xFF	; 255
    25ce:	80 93 1e 03 	sts	0x031E, r24

        if(rx_cnt > 10)
    25d2:	80 91 1e 03 	lds	r24, 0x031E
    25d6:	8b 30       	cpi	r24, 0x0B	; 11
    25d8:	a0 f1       	brcs	.+104    	; 0x2642 <__vector_18+0xbc>
        {
            // PSD 10개, 체크섬 1개 수신 완료되면
            //플래그 리셋
            rx_en = rx_cnt = 0;
    25da:	10 92 1e 03 	sts	0x031E, r1
    25de:	80 91 1e 03 	lds	r24, 0x031E
    25e2:	80 93 1f 03 	sts	0x031F, r24
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0

            // 체크섬 계산
            for(i = 0 ; i < 10 ; i++)
                chksum += buf[i];
    25ea:	30 91 1d 03 	lds	r19, 0x031D
    25ee:	fc 01       	movw	r30, r24
    25f0:	ee 5e       	subi	r30, 0xEE	; 238
    25f2:	fc 4f       	sbci	r31, 0xFC	; 252
    25f4:	20 81       	ld	r18, Z
    25f6:	23 0f       	add	r18, r19
    25f8:	20 93 1d 03 	sts	0x031D, r18
    25fc:	01 96       	adiw	r24, 0x01	; 1
            // PSD 10개, 체크섬 1개 수신 완료되면
            //플래그 리셋
            rx_en = rx_cnt = 0;

            // 체크섬 계산
            for(i = 0 ; i < 10 ; i++)
    25fe:	8a 30       	cpi	r24, 0x0A	; 10
    2600:	91 05       	cpc	r25, r1
    2602:	99 f7       	brne	.-26     	; 0x25ea <__vector_18+0x64>
                chksum += buf[i];

            //00~FE 이므로 FF나오면 +1 (오류방지)
            if(chksum == 0xFF)chksum++;
    2604:	80 91 1d 03 	lds	r24, 0x031D
    2608:	8f 3f       	cpi	r24, 0xFF	; 255
    260a:	29 f4       	brne	.+10     	; 0x2616 <__vector_18+0x90>
    260c:	80 91 1d 03 	lds	r24, 0x031D
    2610:	8f 5f       	subi	r24, 0xFF	; 255
    2612:	80 93 1d 03 	sts	0x031D, r24

            // 체크섬이 올바른지 체크 후 맞으면 전역변수로 이동
            if(chksum == buf[10])
    2616:	90 91 1d 03 	lds	r25, 0x031D
    261a:	80 91 1c 03 	lds	r24, 0x031C
    261e:	98 17       	cp	r25, r24
    2620:	71 f4       	brne	.+28     	; 0x263e <__vector_18+0xb8>
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	90 e0       	ldi	r25, 0x00	; 0
                for(i = 0 ; i < 10 ; i++)
                    psd_value[i] = buf[i];
    2626:	fc 01       	movw	r30, r24
    2628:	ee 5e       	subi	r30, 0xEE	; 238
    262a:	fc 4f       	sbci	r31, 0xFC	; 252
    262c:	20 81       	ld	r18, Z
    262e:	fc 01       	movw	r30, r24
    2630:	ec 5d       	subi	r30, 0xDC	; 220
    2632:	fc 4f       	sbci	r31, 0xFC	; 252
    2634:	20 83       	st	Z, r18
    2636:	01 96       	adiw	r24, 0x01	; 1
            //00~FE 이므로 FF나오면 +1 (오류방지)
            if(chksum == 0xFF)chksum++;

            // 체크섬이 올바른지 체크 후 맞으면 전역변수로 이동
            if(chksum == buf[10])
                for(i = 0 ; i < 10 ; i++)
    2638:	8a 30       	cpi	r24, 0x0A	; 10
    263a:	91 05       	cpc	r25, r1
    263c:	a1 f7       	brne	.-24     	; 0x2626 <__vector_18+0xa0>
                    psd_value[i] = buf[i];

            //체크섬 리셋
            chksum = 0;
    263e:	10 92 1d 03 	sts	0x031D, r1
    	}
    }
}
    2642:	ff 91       	pop	r31
    2644:	ef 91       	pop	r30
    2646:	9f 91       	pop	r25
    2648:	8f 91       	pop	r24
    264a:	3f 91       	pop	r19
    264c:	2f 91       	pop	r18
    264e:	0f 90       	pop	r0
    2650:	0b be       	out	0x3b, r0	; 59
    2652:	0f 90       	pop	r0
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	0f 90       	pop	r0
    2658:	1f 90       	pop	r1
    265a:	18 95       	reti

0000265c <_fpadd_parts>:
    265c:	a0 e0       	ldi	r26, 0x00	; 0
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	e4 e3       	ldi	r30, 0x34	; 52
    2662:	f3 e1       	ldi	r31, 0x13	; 19
    2664:	0c 94 b4 19 	jmp	0x3368	; 0x3368 <__prologue_saves__+0x8>
    2668:	fc 01       	movw	r30, r24
    266a:	ea 01       	movw	r28, r20
    266c:	80 81       	ld	r24, Z
    266e:	82 30       	cpi	r24, 0x02	; 2
    2670:	08 f4       	brcc	.+2      	; 0x2674 <_fpadd_parts+0x18>
    2672:	38 c1       	rjmp	.+624    	; 0x28e4 <_fpadd_parts+0x288>
    2674:	db 01       	movw	r26, r22
    2676:	9c 91       	ld	r25, X
    2678:	92 30       	cpi	r25, 0x02	; 2
    267a:	08 f4       	brcc	.+2      	; 0x267e <_fpadd_parts+0x22>
    267c:	30 c1       	rjmp	.+608    	; 0x28de <_fpadd_parts+0x282>
    267e:	84 30       	cpi	r24, 0x04	; 4
    2680:	59 f4       	brne	.+22     	; 0x2698 <_fpadd_parts+0x3c>
    2682:	94 30       	cpi	r25, 0x04	; 4
    2684:	09 f0       	breq	.+2      	; 0x2688 <_fpadd_parts+0x2c>
    2686:	2e c1       	rjmp	.+604    	; 0x28e4 <_fpadd_parts+0x288>
    2688:	91 81       	ldd	r25, Z+1	; 0x01
    268a:	11 96       	adiw	r26, 0x01	; 1
    268c:	8c 91       	ld	r24, X
    268e:	11 97       	sbiw	r26, 0x01	; 1
    2690:	98 17       	cp	r25, r24
    2692:	09 f0       	breq	.+2      	; 0x2696 <_fpadd_parts+0x3a>
    2694:	21 c1       	rjmp	.+578    	; 0x28d8 <_fpadd_parts+0x27c>
    2696:	26 c1       	rjmp	.+588    	; 0x28e4 <_fpadd_parts+0x288>
    2698:	94 30       	cpi	r25, 0x04	; 4
    269a:	09 f4       	brne	.+2      	; 0x269e <_fpadd_parts+0x42>
    269c:	20 c1       	rjmp	.+576    	; 0x28de <_fpadd_parts+0x282>
    269e:	92 30       	cpi	r25, 0x02	; 2
    26a0:	b1 f4       	brne	.+44     	; 0x26ce <_fpadd_parts+0x72>
    26a2:	82 30       	cpi	r24, 0x02	; 2
    26a4:	09 f0       	breq	.+2      	; 0x26a8 <_fpadd_parts+0x4c>
    26a6:	1e c1       	rjmp	.+572    	; 0x28e4 <_fpadd_parts+0x288>
    26a8:	ca 01       	movw	r24, r20
    26aa:	af 01       	movw	r20, r30
    26ac:	28 e0       	ldi	r18, 0x08	; 8
    26ae:	da 01       	movw	r26, r20
    26b0:	0d 90       	ld	r0, X+
    26b2:	ad 01       	movw	r20, r26
    26b4:	dc 01       	movw	r26, r24
    26b6:	0d 92       	st	X+, r0
    26b8:	cd 01       	movw	r24, r26
    26ba:	21 50       	subi	r18, 0x01	; 1
    26bc:	c1 f7       	brne	.-16     	; 0x26ae <_fpadd_parts+0x52>
    26be:	db 01       	movw	r26, r22
    26c0:	11 96       	adiw	r26, 0x01	; 1
    26c2:	8c 91       	ld	r24, X
    26c4:	11 97       	sbiw	r26, 0x01	; 1
    26c6:	91 81       	ldd	r25, Z+1	; 0x01
    26c8:	89 23       	and	r24, r25
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	0a c1       	rjmp	.+532    	; 0x28e2 <_fpadd_parts+0x286>
    26ce:	82 30       	cpi	r24, 0x02	; 2
    26d0:	09 f4       	brne	.+2      	; 0x26d4 <_fpadd_parts+0x78>
    26d2:	05 c1       	rjmp	.+522    	; 0x28de <_fpadd_parts+0x282>
    26d4:	c2 80       	ldd	r12, Z+2	; 0x02
    26d6:	d3 80       	ldd	r13, Z+3	; 0x03
    26d8:	db 01       	movw	r26, r22
    26da:	12 96       	adiw	r26, 0x02	; 2
    26dc:	6d 90       	ld	r6, X+
    26de:	7c 90       	ld	r7, X
    26e0:	13 97       	sbiw	r26, 0x03	; 3
    26e2:	24 81       	ldd	r18, Z+4	; 0x04
    26e4:	35 81       	ldd	r19, Z+5	; 0x05
    26e6:	46 81       	ldd	r20, Z+6	; 0x06
    26e8:	57 81       	ldd	r21, Z+7	; 0x07
    26ea:	14 96       	adiw	r26, 0x04	; 4
    26ec:	ed 90       	ld	r14, X+
    26ee:	fd 90       	ld	r15, X+
    26f0:	0d 91       	ld	r16, X+
    26f2:	1c 91       	ld	r17, X
    26f4:	17 97       	sbiw	r26, 0x07	; 7
    26f6:	c6 01       	movw	r24, r12
    26f8:	86 19       	sub	r24, r6
    26fa:	97 09       	sbc	r25, r7
    26fc:	5c 01       	movw	r10, r24
    26fe:	97 ff       	sbrs	r25, 7
    2700:	04 c0       	rjmp	.+8      	; 0x270a <_fpadd_parts+0xae>
    2702:	aa 24       	eor	r10, r10
    2704:	bb 24       	eor	r11, r11
    2706:	a8 1a       	sub	r10, r24
    2708:	b9 0a       	sbc	r11, r25
    270a:	b0 e2       	ldi	r27, 0x20	; 32
    270c:	ab 16       	cp	r10, r27
    270e:	b1 04       	cpc	r11, r1
    2710:	0c f0       	brlt	.+2      	; 0x2714 <_fpadd_parts+0xb8>
    2712:	61 c0       	rjmp	.+194    	; 0x27d6 <_fpadd_parts+0x17a>
    2714:	18 16       	cp	r1, r24
    2716:	19 06       	cpc	r1, r25
    2718:	6c f5       	brge	.+90     	; 0x2774 <_fpadd_parts+0x118>
    271a:	37 01       	movw	r6, r14
    271c:	48 01       	movw	r8, r16
    271e:	0a 2c       	mov	r0, r10
    2720:	04 c0       	rjmp	.+8      	; 0x272a <_fpadd_parts+0xce>
    2722:	96 94       	lsr	r9
    2724:	87 94       	ror	r8
    2726:	77 94       	ror	r7
    2728:	67 94       	ror	r6
    272a:	0a 94       	dec	r0
    272c:	d2 f7       	brpl	.-12     	; 0x2722 <_fpadd_parts+0xc6>
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	a0 e0       	ldi	r26, 0x00	; 0
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	0a 2c       	mov	r0, r10
    2738:	04 c0       	rjmp	.+8      	; 0x2742 <_fpadd_parts+0xe6>
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	aa 1f       	adc	r26, r26
    2740:	bb 1f       	adc	r27, r27
    2742:	0a 94       	dec	r0
    2744:	d2 f7       	brpl	.-12     	; 0x273a <_fpadd_parts+0xde>
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	a1 09       	sbc	r26, r1
    274a:	b1 09       	sbc	r27, r1
    274c:	8e 21       	and	r24, r14
    274e:	9f 21       	and	r25, r15
    2750:	a0 23       	and	r26, r16
    2752:	b1 23       	and	r27, r17
    2754:	ee 24       	eor	r14, r14
    2756:	ff 24       	eor	r15, r15
    2758:	87 01       	movw	r16, r14
    275a:	e3 94       	inc	r14
    275c:	00 97       	sbiw	r24, 0x00	; 0
    275e:	a1 05       	cpc	r26, r1
    2760:	b1 05       	cpc	r27, r1
    2762:	19 f4       	brne	.+6      	; 0x276a <_fpadd_parts+0x10e>
    2764:	ee 24       	eor	r14, r14
    2766:	ff 24       	eor	r15, r15
    2768:	87 01       	movw	r16, r14
    276a:	e6 28       	or	r14, r6
    276c:	f7 28       	or	r15, r7
    276e:	08 29       	or	r16, r8
    2770:	19 29       	or	r17, r9
    2772:	3c c0       	rjmp	.+120    	; 0x27ec <_fpadd_parts+0x190>
    2774:	00 97       	sbiw	r24, 0x00	; 0
    2776:	d1 f1       	breq	.+116    	; 0x27ec <_fpadd_parts+0x190>
    2778:	ca 0c       	add	r12, r10
    277a:	db 1c       	adc	r13, r11
    277c:	39 01       	movw	r6, r18
    277e:	4a 01       	movw	r8, r20
    2780:	0a 2c       	mov	r0, r10
    2782:	04 c0       	rjmp	.+8      	; 0x278c <_fpadd_parts+0x130>
    2784:	96 94       	lsr	r9
    2786:	87 94       	ror	r8
    2788:	77 94       	ror	r7
    278a:	67 94       	ror	r6
    278c:	0a 94       	dec	r0
    278e:	d2 f7       	brpl	.-12     	; 0x2784 <_fpadd_parts+0x128>
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	a0 e0       	ldi	r26, 0x00	; 0
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	0a 2c       	mov	r0, r10
    279a:	04 c0       	rjmp	.+8      	; 0x27a4 <_fpadd_parts+0x148>
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	aa 1f       	adc	r26, r26
    27a2:	bb 1f       	adc	r27, r27
    27a4:	0a 94       	dec	r0
    27a6:	d2 f7       	brpl	.-12     	; 0x279c <_fpadd_parts+0x140>
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	a1 09       	sbc	r26, r1
    27ac:	b1 09       	sbc	r27, r1
    27ae:	82 23       	and	r24, r18
    27b0:	93 23       	and	r25, r19
    27b2:	a4 23       	and	r26, r20
    27b4:	b5 23       	and	r27, r21
    27b6:	21 e0       	ldi	r18, 0x01	; 1
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	a1 05       	cpc	r26, r1
    27c2:	b1 05       	cpc	r27, r1
    27c4:	19 f4       	brne	.+6      	; 0x27cc <_fpadd_parts+0x170>
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	a9 01       	movw	r20, r18
    27cc:	26 29       	or	r18, r6
    27ce:	37 29       	or	r19, r7
    27d0:	48 29       	or	r20, r8
    27d2:	59 29       	or	r21, r9
    27d4:	0b c0       	rjmp	.+22     	; 0x27ec <_fpadd_parts+0x190>
    27d6:	6c 14       	cp	r6, r12
    27d8:	7d 04       	cpc	r7, r13
    27da:	24 f4       	brge	.+8      	; 0x27e4 <_fpadd_parts+0x188>
    27dc:	ee 24       	eor	r14, r14
    27de:	ff 24       	eor	r15, r15
    27e0:	87 01       	movw	r16, r14
    27e2:	04 c0       	rjmp	.+8      	; 0x27ec <_fpadd_parts+0x190>
    27e4:	63 01       	movw	r12, r6
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	a9 01       	movw	r20, r18
    27ec:	81 81       	ldd	r24, Z+1	; 0x01
    27ee:	fb 01       	movw	r30, r22
    27f0:	91 81       	ldd	r25, Z+1	; 0x01
    27f2:	89 17       	cp	r24, r25
    27f4:	09 f4       	brne	.+2      	; 0x27f8 <_fpadd_parts+0x19c>
    27f6:	45 c0       	rjmp	.+138    	; 0x2882 <_fpadd_parts+0x226>
    27f8:	88 23       	and	r24, r24
    27fa:	49 f0       	breq	.+18     	; 0x280e <_fpadd_parts+0x1b2>
    27fc:	d8 01       	movw	r26, r16
    27fe:	c7 01       	movw	r24, r14
    2800:	82 1b       	sub	r24, r18
    2802:	93 0b       	sbc	r25, r19
    2804:	a4 0b       	sbc	r26, r20
    2806:	b5 0b       	sbc	r27, r21
    2808:	9c 01       	movw	r18, r24
    280a:	ad 01       	movw	r20, r26
    280c:	04 c0       	rjmp	.+8      	; 0x2816 <_fpadd_parts+0x1ba>
    280e:	2e 19       	sub	r18, r14
    2810:	3f 09       	sbc	r19, r15
    2812:	40 0b       	sbc	r20, r16
    2814:	51 0b       	sbc	r21, r17
    2816:	57 fd       	sbrc	r21, 7
    2818:	04 c0       	rjmp	.+8      	; 0x2822 <_fpadd_parts+0x1c6>
    281a:	19 82       	std	Y+1, r1	; 0x01
    281c:	db 82       	std	Y+3, r13	; 0x03
    281e:	ca 82       	std	Y+2, r12	; 0x02
    2820:	0b c0       	rjmp	.+22     	; 0x2838 <_fpadd_parts+0x1dc>
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	89 83       	std	Y+1, r24	; 0x01
    2826:	db 82       	std	Y+3, r13	; 0x03
    2828:	ca 82       	std	Y+2, r12	; 0x02
    282a:	50 95       	com	r21
    282c:	40 95       	com	r20
    282e:	30 95       	com	r19
    2830:	21 95       	neg	r18
    2832:	3f 4f       	sbci	r19, 0xFF	; 255
    2834:	4f 4f       	sbci	r20, 0xFF	; 255
    2836:	5f 4f       	sbci	r21, 0xFF	; 255
    2838:	2c 83       	std	Y+4, r18	; 0x04
    283a:	3d 83       	std	Y+5, r19	; 0x05
    283c:	4e 83       	std	Y+6, r20	; 0x06
    283e:	5f 83       	std	Y+7, r21	; 0x07
    2840:	0d c0       	rjmp	.+26     	; 0x285c <_fpadd_parts+0x200>
    2842:	88 0f       	add	r24, r24
    2844:	99 1f       	adc	r25, r25
    2846:	aa 1f       	adc	r26, r26
    2848:	bb 1f       	adc	r27, r27
    284a:	8c 83       	std	Y+4, r24	; 0x04
    284c:	9d 83       	std	Y+5, r25	; 0x05
    284e:	ae 83       	std	Y+6, r26	; 0x06
    2850:	bf 83       	std	Y+7, r27	; 0x07
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	9b 81       	ldd	r25, Y+3	; 0x03
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	9b 83       	std	Y+3, r25	; 0x03
    285a:	8a 83       	std	Y+2, r24	; 0x02
    285c:	8c 81       	ldd	r24, Y+4	; 0x04
    285e:	9d 81       	ldd	r25, Y+5	; 0x05
    2860:	ae 81       	ldd	r26, Y+6	; 0x06
    2862:	bf 81       	ldd	r27, Y+7	; 0x07
    2864:	9c 01       	movw	r18, r24
    2866:	ad 01       	movw	r20, r26
    2868:	21 50       	subi	r18, 0x01	; 1
    286a:	30 40       	sbci	r19, 0x00	; 0
    286c:	40 40       	sbci	r20, 0x00	; 0
    286e:	50 40       	sbci	r21, 0x00	; 0
    2870:	2f 3f       	cpi	r18, 0xFF	; 255
    2872:	ef ef       	ldi	r30, 0xFF	; 255
    2874:	3e 07       	cpc	r19, r30
    2876:	ef ef       	ldi	r30, 0xFF	; 255
    2878:	4e 07       	cpc	r20, r30
    287a:	ef e3       	ldi	r30, 0x3F	; 63
    287c:	5e 07       	cpc	r21, r30
    287e:	08 f3       	brcs	.-62     	; 0x2842 <_fpadd_parts+0x1e6>
    2880:	0b c0       	rjmp	.+22     	; 0x2898 <_fpadd_parts+0x23c>
    2882:	89 83       	std	Y+1, r24	; 0x01
    2884:	db 82       	std	Y+3, r13	; 0x03
    2886:	ca 82       	std	Y+2, r12	; 0x02
    2888:	2e 0d       	add	r18, r14
    288a:	3f 1d       	adc	r19, r15
    288c:	40 1f       	adc	r20, r16
    288e:	51 1f       	adc	r21, r17
    2890:	2c 83       	std	Y+4, r18	; 0x04
    2892:	3d 83       	std	Y+5, r19	; 0x05
    2894:	4e 83       	std	Y+6, r20	; 0x06
    2896:	5f 83       	std	Y+7, r21	; 0x07
    2898:	83 e0       	ldi	r24, 0x03	; 3
    289a:	88 83       	st	Y, r24
    289c:	2c 81       	ldd	r18, Y+4	; 0x04
    289e:	3d 81       	ldd	r19, Y+5	; 0x05
    28a0:	4e 81       	ldd	r20, Y+6	; 0x06
    28a2:	5f 81       	ldd	r21, Y+7	; 0x07
    28a4:	57 ff       	sbrs	r21, 7
    28a6:	1d c0       	rjmp	.+58     	; 0x28e2 <_fpadd_parts+0x286>
    28a8:	da 01       	movw	r26, r20
    28aa:	c9 01       	movw	r24, r18
    28ac:	81 70       	andi	r24, 0x01	; 1
    28ae:	90 70       	andi	r25, 0x00	; 0
    28b0:	a0 70       	andi	r26, 0x00	; 0
    28b2:	b0 70       	andi	r27, 0x00	; 0
    28b4:	56 95       	lsr	r21
    28b6:	47 95       	ror	r20
    28b8:	37 95       	ror	r19
    28ba:	27 95       	ror	r18
    28bc:	82 2b       	or	r24, r18
    28be:	93 2b       	or	r25, r19
    28c0:	a4 2b       	or	r26, r20
    28c2:	b5 2b       	or	r27, r21
    28c4:	8c 83       	std	Y+4, r24	; 0x04
    28c6:	9d 83       	std	Y+5, r25	; 0x05
    28c8:	ae 83       	std	Y+6, r26	; 0x06
    28ca:	bf 83       	std	Y+7, r27	; 0x07
    28cc:	8a 81       	ldd	r24, Y+2	; 0x02
    28ce:	9b 81       	ldd	r25, Y+3	; 0x03
    28d0:	01 96       	adiw	r24, 0x01	; 1
    28d2:	9b 83       	std	Y+3, r25	; 0x03
    28d4:	8a 83       	std	Y+2, r24	; 0x02
    28d6:	05 c0       	rjmp	.+10     	; 0x28e2 <_fpadd_parts+0x286>
    28d8:	eb e2       	ldi	r30, 0x2B	; 43
    28da:	f1 e0       	ldi	r31, 0x01	; 1
    28dc:	03 c0       	rjmp	.+6      	; 0x28e4 <_fpadd_parts+0x288>
    28de:	fb 01       	movw	r30, r22
    28e0:	01 c0       	rjmp	.+2      	; 0x28e4 <_fpadd_parts+0x288>
    28e2:	fe 01       	movw	r30, r28
    28e4:	cf 01       	movw	r24, r30
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
    28ea:	ee e0       	ldi	r30, 0x0E	; 14
    28ec:	0c 94 d0 19 	jmp	0x33a0	; 0x33a0 <__epilogue_restores__+0x8>

000028f0 <__addsf3>:
    28f0:	a0 e2       	ldi	r26, 0x20	; 32
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	ee e7       	ldi	r30, 0x7E	; 126
    28f6:	f4 e1       	ldi	r31, 0x14	; 20
    28f8:	0c 94 bc 19 	jmp	0x3378	; 0x3378 <__prologue_saves__+0x18>
    28fc:	69 83       	std	Y+1, r22	; 0x01
    28fe:	7a 83       	std	Y+2, r23	; 0x02
    2900:	8b 83       	std	Y+3, r24	; 0x03
    2902:	9c 83       	std	Y+4, r25	; 0x04
    2904:	2d 83       	std	Y+5, r18	; 0x05
    2906:	3e 83       	std	Y+6, r19	; 0x06
    2908:	4f 83       	std	Y+7, r20	; 0x07
    290a:	58 87       	std	Y+8, r21	; 0x08
    290c:	89 e0       	ldi	r24, 0x09	; 9
    290e:	e8 2e       	mov	r14, r24
    2910:	f1 2c       	mov	r15, r1
    2912:	ec 0e       	add	r14, r28
    2914:	fd 1e       	adc	r15, r29
    2916:	ce 01       	movw	r24, r28
    2918:	01 96       	adiw	r24, 0x01	; 1
    291a:	b7 01       	movw	r22, r14
    291c:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__unpack_f>
    2920:	8e 01       	movw	r16, r28
    2922:	0f 5e       	subi	r16, 0xEF	; 239
    2924:	1f 4f       	sbci	r17, 0xFF	; 255
    2926:	ce 01       	movw	r24, r28
    2928:	05 96       	adiw	r24, 0x05	; 5
    292a:	b8 01       	movw	r22, r16
    292c:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__unpack_f>
    2930:	c7 01       	movw	r24, r14
    2932:	b8 01       	movw	r22, r16
    2934:	ae 01       	movw	r20, r28
    2936:	47 5e       	subi	r20, 0xE7	; 231
    2938:	5f 4f       	sbci	r21, 0xFF	; 255
    293a:	0e 94 2e 13 	call	0x265c	; 0x265c <_fpadd_parts>
    293e:	0e 94 14 18 	call	0x3028	; 0x3028 <__pack_f>
    2942:	a0 96       	adiw	r28, 0x20	; 32
    2944:	e6 e0       	ldi	r30, 0x06	; 6
    2946:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__epilogue_restores__+0x18>

0000294a <__subsf3>:
    294a:	a0 e2       	ldi	r26, 0x20	; 32
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	eb ea       	ldi	r30, 0xAB	; 171
    2950:	f4 e1       	ldi	r31, 0x14	; 20
    2952:	0c 94 bc 19 	jmp	0x3378	; 0x3378 <__prologue_saves__+0x18>
    2956:	69 83       	std	Y+1, r22	; 0x01
    2958:	7a 83       	std	Y+2, r23	; 0x02
    295a:	8b 83       	std	Y+3, r24	; 0x03
    295c:	9c 83       	std	Y+4, r25	; 0x04
    295e:	2d 83       	std	Y+5, r18	; 0x05
    2960:	3e 83       	std	Y+6, r19	; 0x06
    2962:	4f 83       	std	Y+7, r20	; 0x07
    2964:	58 87       	std	Y+8, r21	; 0x08
    2966:	8e 01       	movw	r16, r28
    2968:	07 5f       	subi	r16, 0xF7	; 247
    296a:	1f 4f       	sbci	r17, 0xFF	; 255
    296c:	ce 01       	movw	r24, r28
    296e:	01 96       	adiw	r24, 0x01	; 1
    2970:	b8 01       	movw	r22, r16
    2972:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__unpack_f>
    2976:	91 e1       	ldi	r25, 0x11	; 17
    2978:	e9 2e       	mov	r14, r25
    297a:	f1 2c       	mov	r15, r1
    297c:	ec 0e       	add	r14, r28
    297e:	fd 1e       	adc	r15, r29
    2980:	ce 01       	movw	r24, r28
    2982:	05 96       	adiw	r24, 0x05	; 5
    2984:	b7 01       	movw	r22, r14
    2986:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__unpack_f>
    298a:	8a 89       	ldd	r24, Y+18	; 0x12
    298c:	91 e0       	ldi	r25, 0x01	; 1
    298e:	89 27       	eor	r24, r25
    2990:	8a 8b       	std	Y+18, r24	; 0x12
    2992:	c8 01       	movw	r24, r16
    2994:	b7 01       	movw	r22, r14
    2996:	ae 01       	movw	r20, r28
    2998:	47 5e       	subi	r20, 0xE7	; 231
    299a:	5f 4f       	sbci	r21, 0xFF	; 255
    299c:	0e 94 2e 13 	call	0x265c	; 0x265c <_fpadd_parts>
    29a0:	0e 94 14 18 	call	0x3028	; 0x3028 <__pack_f>
    29a4:	a0 96       	adiw	r28, 0x20	; 32
    29a6:	e6 e0       	ldi	r30, 0x06	; 6
    29a8:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__epilogue_restores__+0x18>

000029ac <__mulsf3>:
    29ac:	a0 e2       	ldi	r26, 0x20	; 32
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	ec ed       	ldi	r30, 0xDC	; 220
    29b2:	f4 e1       	ldi	r31, 0x14	; 20
    29b4:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <__prologue_saves__>
    29b8:	69 83       	std	Y+1, r22	; 0x01
    29ba:	7a 83       	std	Y+2, r23	; 0x02
    29bc:	8b 83       	std	Y+3, r24	; 0x03
    29be:	9c 83       	std	Y+4, r25	; 0x04
    29c0:	2d 83       	std	Y+5, r18	; 0x05
    29c2:	3e 83       	std	Y+6, r19	; 0x06
    29c4:	4f 83       	std	Y+7, r20	; 0x07
    29c6:	58 87       	std	Y+8, r21	; 0x08
    29c8:	ce 01       	movw	r24, r28
    29ca:	01 96       	adiw	r24, 0x01	; 1
    29cc:	be 01       	movw	r22, r28
    29ce:	67 5f       	subi	r22, 0xF7	; 247
    29d0:	7f 4f       	sbci	r23, 0xFF	; 255
    29d2:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__unpack_f>
    29d6:	ce 01       	movw	r24, r28
    29d8:	05 96       	adiw	r24, 0x05	; 5
    29da:	be 01       	movw	r22, r28
    29dc:	6f 5e       	subi	r22, 0xEF	; 239
    29de:	7f 4f       	sbci	r23, 0xFF	; 255
    29e0:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__unpack_f>
    29e4:	99 85       	ldd	r25, Y+9	; 0x09
    29e6:	92 30       	cpi	r25, 0x02	; 2
    29e8:	78 f0       	brcs	.+30     	; 0x2a08 <__mulsf3+0x5c>
    29ea:	89 89       	ldd	r24, Y+17	; 0x11
    29ec:	82 30       	cpi	r24, 0x02	; 2
    29ee:	c0 f0       	brcs	.+48     	; 0x2a20 <__mulsf3+0x74>
    29f0:	94 30       	cpi	r25, 0x04	; 4
    29f2:	19 f4       	brne	.+6      	; 0x29fa <__mulsf3+0x4e>
    29f4:	82 30       	cpi	r24, 0x02	; 2
    29f6:	41 f4       	brne	.+16     	; 0x2a08 <__mulsf3+0x5c>
    29f8:	cb c0       	rjmp	.+406    	; 0x2b90 <__mulsf3+0x1e4>
    29fa:	84 30       	cpi	r24, 0x04	; 4
    29fc:	19 f4       	brne	.+6      	; 0x2a04 <__mulsf3+0x58>
    29fe:	92 30       	cpi	r25, 0x02	; 2
    2a00:	79 f4       	brne	.+30     	; 0x2a20 <__mulsf3+0x74>
    2a02:	c6 c0       	rjmp	.+396    	; 0x2b90 <__mulsf3+0x1e4>
    2a04:	92 30       	cpi	r25, 0x02	; 2
    2a06:	51 f4       	brne	.+20     	; 0x2a1c <__mulsf3+0x70>
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a0c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a0e:	29 17       	cp	r18, r25
    2a10:	09 f4       	brne	.+2      	; 0x2a14 <__mulsf3+0x68>
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	8a 87       	std	Y+10, r24	; 0x0a
    2a16:	ce 01       	movw	r24, r28
    2a18:	09 96       	adiw	r24, 0x09	; 9
    2a1a:	bc c0       	rjmp	.+376    	; 0x2b94 <__mulsf3+0x1e8>
    2a1c:	82 30       	cpi	r24, 0x02	; 2
    2a1e:	51 f4       	brne	.+20     	; 0x2a34 <__mulsf3+0x88>
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a24:	9a 89       	ldd	r25, Y+18	; 0x12
    2a26:	29 17       	cp	r18, r25
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <__mulsf3+0x80>
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	8a 8b       	std	Y+18, r24	; 0x12
    2a2e:	ce 01       	movw	r24, r28
    2a30:	41 96       	adiw	r24, 0x11	; 17
    2a32:	b0 c0       	rjmp	.+352    	; 0x2b94 <__mulsf3+0x1e8>
    2a34:	6d 84       	ldd	r6, Y+13	; 0x0d
    2a36:	7e 84       	ldd	r7, Y+14	; 0x0e
    2a38:	8f 84       	ldd	r8, Y+15	; 0x0f
    2a3a:	98 88       	ldd	r9, Y+16	; 0x10
    2a3c:	ed 88       	ldd	r14, Y+21	; 0x15
    2a3e:	fe 88       	ldd	r15, Y+22	; 0x16
    2a40:	0f 89       	ldd	r16, Y+23	; 0x17
    2a42:	18 8d       	ldd	r17, Y+24	; 0x18
    2a44:	e0 e2       	ldi	r30, 0x20	; 32
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	aa 24       	eor	r10, r10
    2a50:	bb 24       	eor	r11, r11
    2a52:	65 01       	movw	r12, r10
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	a9 01       	movw	r20, r18
    2a5a:	b3 01       	movw	r22, r6
    2a5c:	61 70       	andi	r22, 0x01	; 1
    2a5e:	70 70       	andi	r23, 0x00	; 0
    2a60:	61 15       	cp	r22, r1
    2a62:	71 05       	cpc	r23, r1
    2a64:	d1 f0       	breq	.+52     	; 0x2a9a <__mulsf3+0xee>
    2a66:	2e 0d       	add	r18, r14
    2a68:	3f 1d       	adc	r19, r15
    2a6a:	40 1f       	adc	r20, r16
    2a6c:	51 1f       	adc	r21, r17
    2a6e:	15 01       	movw	r2, r10
    2a70:	26 01       	movw	r4, r12
    2a72:	28 0e       	add	r2, r24
    2a74:	39 1e       	adc	r3, r25
    2a76:	4a 1e       	adc	r4, r26
    2a78:	5b 1e       	adc	r5, r27
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	a0 e0       	ldi	r26, 0x00	; 0
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	2e 15       	cp	r18, r14
    2a84:	3f 05       	cpc	r19, r15
    2a86:	40 07       	cpc	r20, r16
    2a88:	51 07       	cpc	r21, r17
    2a8a:	18 f0       	brcs	.+6      	; 0x2a92 <__mulsf3+0xe6>
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	dc 01       	movw	r26, r24
    2a92:	82 0d       	add	r24, r2
    2a94:	93 1d       	adc	r25, r3
    2a96:	a4 1d       	adc	r26, r4
    2a98:	b5 1d       	adc	r27, r5
    2a9a:	aa 0c       	add	r10, r10
    2a9c:	bb 1c       	adc	r11, r11
    2a9e:	cc 1c       	adc	r12, r12
    2aa0:	dd 1c       	adc	r13, r13
    2aa2:	17 ff       	sbrs	r17, 7
    2aa4:	09 c0       	rjmp	.+18     	; 0x2ab8 <__mulsf3+0x10c>
    2aa6:	61 e0       	ldi	r22, 0x01	; 1
    2aa8:	26 2e       	mov	r2, r22
    2aaa:	31 2c       	mov	r3, r1
    2aac:	41 2c       	mov	r4, r1
    2aae:	51 2c       	mov	r5, r1
    2ab0:	a2 28       	or	r10, r2
    2ab2:	b3 28       	or	r11, r3
    2ab4:	c4 28       	or	r12, r4
    2ab6:	d5 28       	or	r13, r5
    2ab8:	31 97       	sbiw	r30, 0x01	; 1
    2aba:	49 f0       	breq	.+18     	; 0x2ace <__mulsf3+0x122>
    2abc:	ee 0c       	add	r14, r14
    2abe:	ff 1c       	adc	r15, r15
    2ac0:	00 1f       	adc	r16, r16
    2ac2:	11 1f       	adc	r17, r17
    2ac4:	96 94       	lsr	r9
    2ac6:	87 94       	ror	r8
    2ac8:	77 94       	ror	r7
    2aca:	67 94       	ror	r6
    2acc:	c6 cf       	rjmp	.-116    	; 0x2a5a <__mulsf3+0xae>
    2ace:	6b 89       	ldd	r22, Y+19	; 0x13
    2ad0:	7c 89       	ldd	r23, Y+20	; 0x14
    2ad2:	eb 85       	ldd	r30, Y+11	; 0x0b
    2ad4:	fc 85       	ldd	r31, Y+12	; 0x0c
    2ad6:	6e 0f       	add	r22, r30
    2ad8:	7f 1f       	adc	r23, r31
    2ada:	6e 5f       	subi	r22, 0xFE	; 254
    2adc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ade:	7c 8f       	std	Y+28, r23	; 0x1c
    2ae0:	6b 8f       	std	Y+27, r22	; 0x1b
    2ae2:	61 e0       	ldi	r22, 0x01	; 1
    2ae4:	ea 85       	ldd	r30, Y+10	; 0x0a
    2ae6:	7a 89       	ldd	r23, Y+18	; 0x12
    2ae8:	e7 17       	cp	r30, r23
    2aea:	09 f4       	brne	.+2      	; 0x2aee <__mulsf3+0x142>
    2aec:	60 e0       	ldi	r22, 0x00	; 0
    2aee:	6a 8f       	std	Y+26, r22	; 0x1a
    2af0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2af2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2af4:	10 c0       	rjmp	.+32     	; 0x2b16 <__mulsf3+0x16a>
    2af6:	fc 01       	movw	r30, r24
    2af8:	e1 70       	andi	r30, 0x01	; 1
    2afa:	f0 70       	andi	r31, 0x00	; 0
    2afc:	30 97       	sbiw	r30, 0x00	; 0
    2afe:	29 f0       	breq	.+10     	; 0x2b0a <__mulsf3+0x15e>
    2b00:	56 95       	lsr	r21
    2b02:	47 95       	ror	r20
    2b04:	37 95       	ror	r19
    2b06:	27 95       	ror	r18
    2b08:	50 68       	ori	r21, 0x80	; 128
    2b0a:	b6 95       	lsr	r27
    2b0c:	a7 95       	ror	r26
    2b0e:	97 95       	ror	r25
    2b10:	87 95       	ror	r24
    2b12:	6f 5f       	subi	r22, 0xFF	; 255
    2b14:	7f 4f       	sbci	r23, 0xFF	; 255
    2b16:	b7 fd       	sbrc	r27, 7
    2b18:	ee cf       	rjmp	.-36     	; 0x2af6 <__mulsf3+0x14a>
    2b1a:	0c c0       	rjmp	.+24     	; 0x2b34 <__mulsf3+0x188>
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	aa 1f       	adc	r26, r26
    2b22:	bb 1f       	adc	r27, r27
    2b24:	57 fd       	sbrc	r21, 7
    2b26:	81 60       	ori	r24, 0x01	; 1
    2b28:	22 0f       	add	r18, r18
    2b2a:	33 1f       	adc	r19, r19
    2b2c:	44 1f       	adc	r20, r20
    2b2e:	55 1f       	adc	r21, r21
    2b30:	61 50       	subi	r22, 0x01	; 1
    2b32:	70 40       	sbci	r23, 0x00	; 0
    2b34:	80 30       	cpi	r24, 0x00	; 0
    2b36:	e0 e0       	ldi	r30, 0x00	; 0
    2b38:	9e 07       	cpc	r25, r30
    2b3a:	e0 e0       	ldi	r30, 0x00	; 0
    2b3c:	ae 07       	cpc	r26, r30
    2b3e:	e0 e4       	ldi	r30, 0x40	; 64
    2b40:	be 07       	cpc	r27, r30
    2b42:	60 f3       	brcs	.-40     	; 0x2b1c <__mulsf3+0x170>
    2b44:	6b 8f       	std	Y+27, r22	; 0x1b
    2b46:	7c 8f       	std	Y+28, r23	; 0x1c
    2b48:	6f e7       	ldi	r22, 0x7F	; 127
    2b4a:	e6 2e       	mov	r14, r22
    2b4c:	f1 2c       	mov	r15, r1
    2b4e:	01 2d       	mov	r16, r1
    2b50:	11 2d       	mov	r17, r1
    2b52:	e8 22       	and	r14, r24
    2b54:	f9 22       	and	r15, r25
    2b56:	0a 23       	and	r16, r26
    2b58:	1b 23       	and	r17, r27
    2b5a:	60 e4       	ldi	r22, 0x40	; 64
    2b5c:	e6 16       	cp	r14, r22
    2b5e:	f1 04       	cpc	r15, r1
    2b60:	01 05       	cpc	r16, r1
    2b62:	11 05       	cpc	r17, r1
    2b64:	61 f4       	brne	.+24     	; 0x2b7e <__mulsf3+0x1d2>
    2b66:	87 fd       	sbrc	r24, 7
    2b68:	0a c0       	rjmp	.+20     	; 0x2b7e <__mulsf3+0x1d2>
    2b6a:	21 15       	cp	r18, r1
    2b6c:	31 05       	cpc	r19, r1
    2b6e:	41 05       	cpc	r20, r1
    2b70:	51 05       	cpc	r21, r1
    2b72:	29 f0       	breq	.+10     	; 0x2b7e <__mulsf3+0x1d2>
    2b74:	80 5c       	subi	r24, 0xC0	; 192
    2b76:	9f 4f       	sbci	r25, 0xFF	; 255
    2b78:	af 4f       	sbci	r26, 0xFF	; 255
    2b7a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b7c:	80 78       	andi	r24, 0x80	; 128
    2b7e:	8d 8f       	std	Y+29, r24	; 0x1d
    2b80:	9e 8f       	std	Y+30, r25	; 0x1e
    2b82:	af 8f       	std	Y+31, r26	; 0x1f
    2b84:	b8 a3       	std	Y+32, r27	; 0x20
    2b86:	83 e0       	ldi	r24, 0x03	; 3
    2b88:	89 8f       	std	Y+25, r24	; 0x19
    2b8a:	ce 01       	movw	r24, r28
    2b8c:	49 96       	adiw	r24, 0x19	; 25
    2b8e:	02 c0       	rjmp	.+4      	; 0x2b94 <__mulsf3+0x1e8>
    2b90:	8b e2       	ldi	r24, 0x2B	; 43
    2b92:	91 e0       	ldi	r25, 0x01	; 1
    2b94:	0e 94 14 18 	call	0x3028	; 0x3028 <__pack_f>
    2b98:	a0 96       	adiw	r28, 0x20	; 32
    2b9a:	e2 e1       	ldi	r30, 0x12	; 18
    2b9c:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <__epilogue_restores__>

00002ba0 <__gtsf2>:
    2ba0:	a8 e1       	ldi	r26, 0x18	; 24
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	e6 ed       	ldi	r30, 0xD6	; 214
    2ba6:	f5 e1       	ldi	r31, 0x15	; 21
    2ba8:	0c 94 bc 19 	jmp	0x3378	; 0x3378 <__prologue_saves__+0x18>
    2bac:	69 83       	std	Y+1, r22	; 0x01
    2bae:	7a 83       	std	Y+2, r23	; 0x02
    2bb0:	8b 83       	std	Y+3, r24	; 0x03
    2bb2:	9c 83       	std	Y+4, r25	; 0x04
    2bb4:	2d 83       	std	Y+5, r18	; 0x05
    2bb6:	3e 83       	std	Y+6, r19	; 0x06
    2bb8:	4f 83       	std	Y+7, r20	; 0x07
    2bba:	58 87       	std	Y+8, r21	; 0x08
    2bbc:	8e 01       	movw	r16, r28
    2bbe:	07 5f       	subi	r16, 0xF7	; 247
    2bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc2:	ce 01       	movw	r24, r28
    2bc4:	01 96       	adiw	r24, 0x01	; 1
    2bc6:	b8 01       	movw	r22, r16
    2bc8:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__unpack_f>
    2bcc:	81 e1       	ldi	r24, 0x11	; 17
    2bce:	e8 2e       	mov	r14, r24
    2bd0:	f1 2c       	mov	r15, r1
    2bd2:	ec 0e       	add	r14, r28
    2bd4:	fd 1e       	adc	r15, r29
    2bd6:	ce 01       	movw	r24, r28
    2bd8:	05 96       	adiw	r24, 0x05	; 5
    2bda:	b7 01       	movw	r22, r14
    2bdc:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__unpack_f>
    2be0:	89 85       	ldd	r24, Y+9	; 0x09
    2be2:	82 30       	cpi	r24, 0x02	; 2
    2be4:	40 f0       	brcs	.+16     	; 0x2bf6 <__gtsf2+0x56>
    2be6:	89 89       	ldd	r24, Y+17	; 0x11
    2be8:	82 30       	cpi	r24, 0x02	; 2
    2bea:	28 f0       	brcs	.+10     	; 0x2bf6 <__gtsf2+0x56>
    2bec:	c8 01       	movw	r24, r16
    2bee:	b7 01       	movw	r22, r14
    2bf0:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fpcmp_parts_f>
    2bf4:	01 c0       	rjmp	.+2      	; 0x2bf8 <__gtsf2+0x58>
    2bf6:	8f ef       	ldi	r24, 0xFF	; 255
    2bf8:	68 96       	adiw	r28, 0x18	; 24
    2bfa:	e6 e0       	ldi	r30, 0x06	; 6
    2bfc:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__epilogue_restores__+0x18>

00002c00 <__gesf2>:
    2c00:	a8 e1       	ldi	r26, 0x18	; 24
    2c02:	b0 e0       	ldi	r27, 0x00	; 0
    2c04:	e6 e0       	ldi	r30, 0x06	; 6
    2c06:	f6 e1       	ldi	r31, 0x16	; 22
    2c08:	0c 94 bc 19 	jmp	0x3378	; 0x3378 <__prologue_saves__+0x18>
    2c0c:	69 83       	std	Y+1, r22	; 0x01
    2c0e:	7a 83       	std	Y+2, r23	; 0x02
    2c10:	8b 83       	std	Y+3, r24	; 0x03
    2c12:	9c 83       	std	Y+4, r25	; 0x04
    2c14:	2d 83       	std	Y+5, r18	; 0x05
    2c16:	3e 83       	std	Y+6, r19	; 0x06
    2c18:	4f 83       	std	Y+7, r20	; 0x07
    2c1a:	58 87       	std	Y+8, r21	; 0x08
    2c1c:	8e 01       	movw	r16, r28
    2c1e:	07 5f       	subi	r16, 0xF7	; 247
    2c20:	1f 4f       	sbci	r17, 0xFF	; 255
    2c22:	ce 01       	movw	r24, r28
    2c24:	01 96       	adiw	r24, 0x01	; 1
    2c26:	b8 01       	movw	r22, r16
    2c28:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__unpack_f>
    2c2c:	81 e1       	ldi	r24, 0x11	; 17
    2c2e:	e8 2e       	mov	r14, r24
    2c30:	f1 2c       	mov	r15, r1
    2c32:	ec 0e       	add	r14, r28
    2c34:	fd 1e       	adc	r15, r29
    2c36:	ce 01       	movw	r24, r28
    2c38:	05 96       	adiw	r24, 0x05	; 5
    2c3a:	b7 01       	movw	r22, r14
    2c3c:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__unpack_f>
    2c40:	89 85       	ldd	r24, Y+9	; 0x09
    2c42:	82 30       	cpi	r24, 0x02	; 2
    2c44:	40 f0       	brcs	.+16     	; 0x2c56 <__gesf2+0x56>
    2c46:	89 89       	ldd	r24, Y+17	; 0x11
    2c48:	82 30       	cpi	r24, 0x02	; 2
    2c4a:	28 f0       	brcs	.+10     	; 0x2c56 <__gesf2+0x56>
    2c4c:	c8 01       	movw	r24, r16
    2c4e:	b7 01       	movw	r22, r14
    2c50:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fpcmp_parts_f>
    2c54:	01 c0       	rjmp	.+2      	; 0x2c58 <__gesf2+0x58>
    2c56:	8f ef       	ldi	r24, 0xFF	; 255
    2c58:	68 96       	adiw	r28, 0x18	; 24
    2c5a:	e6 e0       	ldi	r30, 0x06	; 6
    2c5c:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__epilogue_restores__+0x18>

00002c60 <__ltsf2>:
    2c60:	a8 e1       	ldi	r26, 0x18	; 24
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	e6 e3       	ldi	r30, 0x36	; 54
    2c66:	f6 e1       	ldi	r31, 0x16	; 22
    2c68:	0c 94 bc 19 	jmp	0x3378	; 0x3378 <__prologue_saves__+0x18>
    2c6c:	69 83       	std	Y+1, r22	; 0x01
    2c6e:	7a 83       	std	Y+2, r23	; 0x02
    2c70:	8b 83       	std	Y+3, r24	; 0x03
    2c72:	9c 83       	std	Y+4, r25	; 0x04
    2c74:	2d 83       	std	Y+5, r18	; 0x05
    2c76:	3e 83       	std	Y+6, r19	; 0x06
    2c78:	4f 83       	std	Y+7, r20	; 0x07
    2c7a:	58 87       	std	Y+8, r21	; 0x08
    2c7c:	8e 01       	movw	r16, r28
    2c7e:	07 5f       	subi	r16, 0xF7	; 247
    2c80:	1f 4f       	sbci	r17, 0xFF	; 255
    2c82:	ce 01       	movw	r24, r28
    2c84:	01 96       	adiw	r24, 0x01	; 1
    2c86:	b8 01       	movw	r22, r16
    2c88:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__unpack_f>
    2c8c:	81 e1       	ldi	r24, 0x11	; 17
    2c8e:	e8 2e       	mov	r14, r24
    2c90:	f1 2c       	mov	r15, r1
    2c92:	ec 0e       	add	r14, r28
    2c94:	fd 1e       	adc	r15, r29
    2c96:	ce 01       	movw	r24, r28
    2c98:	05 96       	adiw	r24, 0x05	; 5
    2c9a:	b7 01       	movw	r22, r14
    2c9c:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__unpack_f>
    2ca0:	89 85       	ldd	r24, Y+9	; 0x09
    2ca2:	82 30       	cpi	r24, 0x02	; 2
    2ca4:	40 f0       	brcs	.+16     	; 0x2cb6 <__ltsf2+0x56>
    2ca6:	89 89       	ldd	r24, Y+17	; 0x11
    2ca8:	82 30       	cpi	r24, 0x02	; 2
    2caa:	28 f0       	brcs	.+10     	; 0x2cb6 <__ltsf2+0x56>
    2cac:	c8 01       	movw	r24, r16
    2cae:	b7 01       	movw	r22, r14
    2cb0:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fpcmp_parts_f>
    2cb4:	01 c0       	rjmp	.+2      	; 0x2cb8 <__ltsf2+0x58>
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	68 96       	adiw	r28, 0x18	; 24
    2cba:	e6 e0       	ldi	r30, 0x06	; 6
    2cbc:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__epilogue_restores__+0x18>

00002cc0 <__lesf2>:
    2cc0:	a8 e1       	ldi	r26, 0x18	; 24
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	e6 e6       	ldi	r30, 0x66	; 102
    2cc6:	f6 e1       	ldi	r31, 0x16	; 22
    2cc8:	0c 94 bc 19 	jmp	0x3378	; 0x3378 <__prologue_saves__+0x18>
    2ccc:	69 83       	std	Y+1, r22	; 0x01
    2cce:	7a 83       	std	Y+2, r23	; 0x02
    2cd0:	8b 83       	std	Y+3, r24	; 0x03
    2cd2:	9c 83       	std	Y+4, r25	; 0x04
    2cd4:	2d 83       	std	Y+5, r18	; 0x05
    2cd6:	3e 83       	std	Y+6, r19	; 0x06
    2cd8:	4f 83       	std	Y+7, r20	; 0x07
    2cda:	58 87       	std	Y+8, r21	; 0x08
    2cdc:	8e 01       	movw	r16, r28
    2cde:	07 5f       	subi	r16, 0xF7	; 247
    2ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce2:	ce 01       	movw	r24, r28
    2ce4:	01 96       	adiw	r24, 0x01	; 1
    2ce6:	b8 01       	movw	r22, r16
    2ce8:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__unpack_f>
    2cec:	81 e1       	ldi	r24, 0x11	; 17
    2cee:	e8 2e       	mov	r14, r24
    2cf0:	f1 2c       	mov	r15, r1
    2cf2:	ec 0e       	add	r14, r28
    2cf4:	fd 1e       	adc	r15, r29
    2cf6:	ce 01       	movw	r24, r28
    2cf8:	05 96       	adiw	r24, 0x05	; 5
    2cfa:	b7 01       	movw	r22, r14
    2cfc:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__unpack_f>
    2d00:	89 85       	ldd	r24, Y+9	; 0x09
    2d02:	82 30       	cpi	r24, 0x02	; 2
    2d04:	40 f0       	brcs	.+16     	; 0x2d16 <__lesf2+0x56>
    2d06:	89 89       	ldd	r24, Y+17	; 0x11
    2d08:	82 30       	cpi	r24, 0x02	; 2
    2d0a:	28 f0       	brcs	.+10     	; 0x2d16 <__lesf2+0x56>
    2d0c:	c8 01       	movw	r24, r16
    2d0e:	b7 01       	movw	r22, r14
    2d10:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fpcmp_parts_f>
    2d14:	01 c0       	rjmp	.+2      	; 0x2d18 <__lesf2+0x58>
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	68 96       	adiw	r28, 0x18	; 24
    2d1a:	e6 e0       	ldi	r30, 0x06	; 6
    2d1c:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__epilogue_restores__+0x18>

00002d20 <__floatsisf>:
    2d20:	a8 e0       	ldi	r26, 0x08	; 8
    2d22:	b0 e0       	ldi	r27, 0x00	; 0
    2d24:	e6 e9       	ldi	r30, 0x96	; 150
    2d26:	f6 e1       	ldi	r31, 0x16	; 22
    2d28:	0c 94 bc 19 	jmp	0x3378	; 0x3378 <__prologue_saves__+0x18>
    2d2c:	7b 01       	movw	r14, r22
    2d2e:	8c 01       	movw	r16, r24
    2d30:	83 e0       	ldi	r24, 0x03	; 3
    2d32:	89 83       	std	Y+1, r24	; 0x01
    2d34:	d8 01       	movw	r26, r16
    2d36:	c7 01       	movw	r24, r14
    2d38:	88 27       	eor	r24, r24
    2d3a:	b7 fd       	sbrc	r27, 7
    2d3c:	83 95       	inc	r24
    2d3e:	99 27       	eor	r25, r25
    2d40:	aa 27       	eor	r26, r26
    2d42:	bb 27       	eor	r27, r27
    2d44:	28 2f       	mov	r18, r24
    2d46:	8a 83       	std	Y+2, r24	; 0x02
    2d48:	e1 14       	cp	r14, r1
    2d4a:	f1 04       	cpc	r15, r1
    2d4c:	01 05       	cpc	r16, r1
    2d4e:	11 05       	cpc	r17, r1
    2d50:	19 f4       	brne	.+6      	; 0x2d58 <__floatsisf+0x38>
    2d52:	82 e0       	ldi	r24, 0x02	; 2
    2d54:	89 83       	std	Y+1, r24	; 0x01
    2d56:	37 c0       	rjmp	.+110    	; 0x2dc6 <__floatsisf+0xa6>
    2d58:	8e e1       	ldi	r24, 0x1E	; 30
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	9c 83       	std	Y+4, r25	; 0x04
    2d5e:	8b 83       	std	Y+3, r24	; 0x03
    2d60:	22 23       	and	r18, r18
    2d62:	89 f0       	breq	.+34     	; 0x2d86 <__floatsisf+0x66>
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	e8 16       	cp	r14, r24
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	f8 06       	cpc	r15, r24
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	08 07       	cpc	r16, r24
    2d70:	80 e8       	ldi	r24, 0x80	; 128
    2d72:	18 07       	cpc	r17, r24
    2d74:	69 f1       	breq	.+90     	; 0x2dd0 <__floatsisf+0xb0>
    2d76:	10 95       	com	r17
    2d78:	00 95       	com	r16
    2d7a:	f0 94       	com	r15
    2d7c:	e0 94       	com	r14
    2d7e:	e1 1c       	adc	r14, r1
    2d80:	f1 1c       	adc	r15, r1
    2d82:	01 1d       	adc	r16, r1
    2d84:	11 1d       	adc	r17, r1
    2d86:	ed 82       	std	Y+5, r14	; 0x05
    2d88:	fe 82       	std	Y+6, r15	; 0x06
    2d8a:	0f 83       	std	Y+7, r16	; 0x07
    2d8c:	18 87       	std	Y+8, r17	; 0x08
    2d8e:	c8 01       	movw	r24, r16
    2d90:	b7 01       	movw	r22, r14
    2d92:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__clzsi2>
    2d96:	9c 01       	movw	r18, r24
    2d98:	21 50       	subi	r18, 0x01	; 1
    2d9a:	30 40       	sbci	r19, 0x00	; 0
    2d9c:	12 16       	cp	r1, r18
    2d9e:	13 06       	cpc	r1, r19
    2da0:	94 f4       	brge	.+36     	; 0x2dc6 <__floatsisf+0xa6>
    2da2:	02 2e       	mov	r0, r18
    2da4:	04 c0       	rjmp	.+8      	; 0x2dae <__floatsisf+0x8e>
    2da6:	ee 0c       	add	r14, r14
    2da8:	ff 1c       	adc	r15, r15
    2daa:	00 1f       	adc	r16, r16
    2dac:	11 1f       	adc	r17, r17
    2dae:	0a 94       	dec	r0
    2db0:	d2 f7       	brpl	.-12     	; 0x2da6 <__floatsisf+0x86>
    2db2:	ed 82       	std	Y+5, r14	; 0x05
    2db4:	fe 82       	std	Y+6, r15	; 0x06
    2db6:	0f 83       	std	Y+7, r16	; 0x07
    2db8:	18 87       	std	Y+8, r17	; 0x08
    2dba:	8e e1       	ldi	r24, 0x1E	; 30
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	82 1b       	sub	r24, r18
    2dc0:	93 0b       	sbc	r25, r19
    2dc2:	9c 83       	std	Y+4, r25	; 0x04
    2dc4:	8b 83       	std	Y+3, r24	; 0x03
    2dc6:	ce 01       	movw	r24, r28
    2dc8:	01 96       	adiw	r24, 0x01	; 1
    2dca:	0e 94 14 18 	call	0x3028	; 0x3028 <__pack_f>
    2dce:	04 c0       	rjmp	.+8      	; 0x2dd8 <__floatsisf+0xb8>
    2dd0:	60 e0       	ldi	r22, 0x00	; 0
    2dd2:	70 e0       	ldi	r23, 0x00	; 0
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	9f ec       	ldi	r25, 0xCF	; 207
    2dd8:	28 96       	adiw	r28, 0x08	; 8
    2dda:	e6 e0       	ldi	r30, 0x06	; 6
    2ddc:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__epilogue_restores__+0x18>

00002de0 <__fixsfsi>:
    2de0:	ac e0       	ldi	r26, 0x0C	; 12
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	e6 ef       	ldi	r30, 0xF6	; 246
    2de6:	f6 e1       	ldi	r31, 0x16	; 22
    2de8:	0c 94 c0 19 	jmp	0x3380	; 0x3380 <__prologue_saves__+0x20>
    2dec:	69 83       	std	Y+1, r22	; 0x01
    2dee:	7a 83       	std	Y+2, r23	; 0x02
    2df0:	8b 83       	std	Y+3, r24	; 0x03
    2df2:	9c 83       	std	Y+4, r25	; 0x04
    2df4:	ce 01       	movw	r24, r28
    2df6:	01 96       	adiw	r24, 0x01	; 1
    2df8:	be 01       	movw	r22, r28
    2dfa:	6b 5f       	subi	r22, 0xFB	; 251
    2dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfe:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__unpack_f>
    2e02:	8d 81       	ldd	r24, Y+5	; 0x05
    2e04:	82 30       	cpi	r24, 0x02	; 2
    2e06:	81 f1       	breq	.+96     	; 0x2e68 <__fixsfsi+0x88>
    2e08:	82 30       	cpi	r24, 0x02	; 2
    2e0a:	70 f1       	brcs	.+92     	; 0x2e68 <__fixsfsi+0x88>
    2e0c:	84 30       	cpi	r24, 0x04	; 4
    2e0e:	21 f4       	brne	.+8      	; 0x2e18 <__fixsfsi+0x38>
    2e10:	8e 81       	ldd	r24, Y+6	; 0x06
    2e12:	88 23       	and	r24, r24
    2e14:	69 f1       	breq	.+90     	; 0x2e70 <__fixsfsi+0x90>
    2e16:	0a c0       	rjmp	.+20     	; 0x2e2c <__fixsfsi+0x4c>
    2e18:	2f 81       	ldd	r18, Y+7	; 0x07
    2e1a:	38 85       	ldd	r19, Y+8	; 0x08
    2e1c:	37 fd       	sbrc	r19, 7
    2e1e:	24 c0       	rjmp	.+72     	; 0x2e68 <__fixsfsi+0x88>
    2e20:	6e 81       	ldd	r22, Y+6	; 0x06
    2e22:	2f 31       	cpi	r18, 0x1F	; 31
    2e24:	31 05       	cpc	r19, r1
    2e26:	3c f0       	brlt	.+14     	; 0x2e36 <__fixsfsi+0x56>
    2e28:	66 23       	and	r22, r22
    2e2a:	11 f1       	breq	.+68     	; 0x2e70 <__fixsfsi+0x90>
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e0       	ldi	r20, 0x00	; 0
    2e32:	50 e8       	ldi	r21, 0x80	; 128
    2e34:	21 c0       	rjmp	.+66     	; 0x2e78 <__fixsfsi+0x98>
    2e36:	8e e1       	ldi	r24, 0x1E	; 30
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	82 1b       	sub	r24, r18
    2e3c:	93 0b       	sbc	r25, r19
    2e3e:	29 85       	ldd	r18, Y+9	; 0x09
    2e40:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e42:	4b 85       	ldd	r20, Y+11	; 0x0b
    2e44:	5c 85       	ldd	r21, Y+12	; 0x0c
    2e46:	04 c0       	rjmp	.+8      	; 0x2e50 <__fixsfsi+0x70>
    2e48:	56 95       	lsr	r21
    2e4a:	47 95       	ror	r20
    2e4c:	37 95       	ror	r19
    2e4e:	27 95       	ror	r18
    2e50:	8a 95       	dec	r24
    2e52:	d2 f7       	brpl	.-12     	; 0x2e48 <__fixsfsi+0x68>
    2e54:	66 23       	and	r22, r22
    2e56:	81 f0       	breq	.+32     	; 0x2e78 <__fixsfsi+0x98>
    2e58:	50 95       	com	r21
    2e5a:	40 95       	com	r20
    2e5c:	30 95       	com	r19
    2e5e:	21 95       	neg	r18
    2e60:	3f 4f       	sbci	r19, 0xFF	; 255
    2e62:	4f 4f       	sbci	r20, 0xFF	; 255
    2e64:	5f 4f       	sbci	r21, 0xFF	; 255
    2e66:	08 c0       	rjmp	.+16     	; 0x2e78 <__fixsfsi+0x98>
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	a9 01       	movw	r20, r18
    2e6e:	04 c0       	rjmp	.+8      	; 0x2e78 <__fixsfsi+0x98>
    2e70:	2f ef       	ldi	r18, 0xFF	; 255
    2e72:	3f ef       	ldi	r19, 0xFF	; 255
    2e74:	4f ef       	ldi	r20, 0xFF	; 255
    2e76:	5f e7       	ldi	r21, 0x7F	; 127
    2e78:	b9 01       	movw	r22, r18
    2e7a:	ca 01       	movw	r24, r20
    2e7c:	2c 96       	adiw	r28, 0x0c	; 12
    2e7e:	e2 e0       	ldi	r30, 0x02	; 2
    2e80:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <__epilogue_restores__+0x20>

00002e84 <__floatunsisf>:
    2e84:	a8 e0       	ldi	r26, 0x08	; 8
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	e8 e4       	ldi	r30, 0x48	; 72
    2e8a:	f7 e1       	ldi	r31, 0x17	; 23
    2e8c:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <__prologue_saves__+0x14>
    2e90:	7b 01       	movw	r14, r22
    2e92:	8c 01       	movw	r16, r24
    2e94:	1a 82       	std	Y+2, r1	; 0x02
    2e96:	61 15       	cp	r22, r1
    2e98:	71 05       	cpc	r23, r1
    2e9a:	81 05       	cpc	r24, r1
    2e9c:	91 05       	cpc	r25, r1
    2e9e:	19 f4       	brne	.+6      	; 0x2ea6 <__floatunsisf+0x22>
    2ea0:	82 e0       	ldi	r24, 0x02	; 2
    2ea2:	89 83       	std	Y+1, r24	; 0x01
    2ea4:	5f c0       	rjmp	.+190    	; 0x2f64 <__floatunsisf+0xe0>
    2ea6:	83 e0       	ldi	r24, 0x03	; 3
    2ea8:	89 83       	std	Y+1, r24	; 0x01
    2eaa:	8e e1       	ldi	r24, 0x1E	; 30
    2eac:	c8 2e       	mov	r12, r24
    2eae:	d1 2c       	mov	r13, r1
    2eb0:	dc 82       	std	Y+4, r13	; 0x04
    2eb2:	cb 82       	std	Y+3, r12	; 0x03
    2eb4:	ed 82       	std	Y+5, r14	; 0x05
    2eb6:	fe 82       	std	Y+6, r15	; 0x06
    2eb8:	0f 83       	std	Y+7, r16	; 0x07
    2eba:	18 87       	std	Y+8, r17	; 0x08
    2ebc:	c8 01       	movw	r24, r16
    2ebe:	b7 01       	movw	r22, r14
    2ec0:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__clzsi2>
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	31 97       	sbiw	r30, 0x01	; 1
    2ec8:	f7 ff       	sbrs	r31, 7
    2eca:	3a c0       	rjmp	.+116    	; 0x2f40 <__floatunsisf+0xbc>
    2ecc:	aa 27       	eor	r26, r26
    2ece:	bb 27       	eor	r27, r27
    2ed0:	ae 1b       	sub	r26, r30
    2ed2:	bf 0b       	sbc	r27, r31
    2ed4:	21 e0       	ldi	r18, 0x01	; 1
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	40 e0       	ldi	r20, 0x00	; 0
    2eda:	50 e0       	ldi	r21, 0x00	; 0
    2edc:	0a 2e       	mov	r0, r26
    2ede:	04 c0       	rjmp	.+8      	; 0x2ee8 <__floatunsisf+0x64>
    2ee0:	22 0f       	add	r18, r18
    2ee2:	33 1f       	adc	r19, r19
    2ee4:	44 1f       	adc	r20, r20
    2ee6:	55 1f       	adc	r21, r21
    2ee8:	0a 94       	dec	r0
    2eea:	d2 f7       	brpl	.-12     	; 0x2ee0 <__floatunsisf+0x5c>
    2eec:	21 50       	subi	r18, 0x01	; 1
    2eee:	30 40       	sbci	r19, 0x00	; 0
    2ef0:	40 40       	sbci	r20, 0x00	; 0
    2ef2:	50 40       	sbci	r21, 0x00	; 0
    2ef4:	2e 21       	and	r18, r14
    2ef6:	3f 21       	and	r19, r15
    2ef8:	40 23       	and	r20, r16
    2efa:	51 23       	and	r21, r17
    2efc:	61 e0       	ldi	r22, 0x01	; 1
    2efe:	70 e0       	ldi	r23, 0x00	; 0
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	21 15       	cp	r18, r1
    2f06:	31 05       	cpc	r19, r1
    2f08:	41 05       	cpc	r20, r1
    2f0a:	51 05       	cpc	r21, r1
    2f0c:	19 f4       	brne	.+6      	; 0x2f14 <__floatunsisf+0x90>
    2f0e:	60 e0       	ldi	r22, 0x00	; 0
    2f10:	70 e0       	ldi	r23, 0x00	; 0
    2f12:	cb 01       	movw	r24, r22
    2f14:	04 c0       	rjmp	.+8      	; 0x2f1e <__floatunsisf+0x9a>
    2f16:	16 95       	lsr	r17
    2f18:	07 95       	ror	r16
    2f1a:	f7 94       	ror	r15
    2f1c:	e7 94       	ror	r14
    2f1e:	aa 95       	dec	r26
    2f20:	d2 f7       	brpl	.-12     	; 0x2f16 <__floatunsisf+0x92>
    2f22:	e6 2a       	or	r14, r22
    2f24:	f7 2a       	or	r15, r23
    2f26:	08 2b       	or	r16, r24
    2f28:	19 2b       	or	r17, r25
    2f2a:	ed 82       	std	Y+5, r14	; 0x05
    2f2c:	fe 82       	std	Y+6, r15	; 0x06
    2f2e:	0f 83       	std	Y+7, r16	; 0x07
    2f30:	18 87       	std	Y+8, r17	; 0x08
    2f32:	8e e1       	ldi	r24, 0x1E	; 30
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	8e 1b       	sub	r24, r30
    2f38:	9f 0b       	sbc	r25, r31
    2f3a:	9c 83       	std	Y+4, r25	; 0x04
    2f3c:	8b 83       	std	Y+3, r24	; 0x03
    2f3e:	12 c0       	rjmp	.+36     	; 0x2f64 <__floatunsisf+0xe0>
    2f40:	30 97       	sbiw	r30, 0x00	; 0
    2f42:	81 f0       	breq	.+32     	; 0x2f64 <__floatunsisf+0xe0>
    2f44:	0e 2e       	mov	r0, r30
    2f46:	04 c0       	rjmp	.+8      	; 0x2f50 <__floatunsisf+0xcc>
    2f48:	ee 0c       	add	r14, r14
    2f4a:	ff 1c       	adc	r15, r15
    2f4c:	00 1f       	adc	r16, r16
    2f4e:	11 1f       	adc	r17, r17
    2f50:	0a 94       	dec	r0
    2f52:	d2 f7       	brpl	.-12     	; 0x2f48 <__floatunsisf+0xc4>
    2f54:	ed 82       	std	Y+5, r14	; 0x05
    2f56:	fe 82       	std	Y+6, r15	; 0x06
    2f58:	0f 83       	std	Y+7, r16	; 0x07
    2f5a:	18 87       	std	Y+8, r17	; 0x08
    2f5c:	ce 1a       	sub	r12, r30
    2f5e:	df 0a       	sbc	r13, r31
    2f60:	dc 82       	std	Y+4, r13	; 0x04
    2f62:	cb 82       	std	Y+3, r12	; 0x03
    2f64:	ce 01       	movw	r24, r28
    2f66:	01 96       	adiw	r24, 0x01	; 1
    2f68:	0e 94 14 18 	call	0x3028	; 0x3028 <__pack_f>
    2f6c:	28 96       	adiw	r28, 0x08	; 8
    2f6e:	e8 e0       	ldi	r30, 0x08	; 8
    2f70:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__epilogue_restores__+0x14>

00002f74 <__clzsi2>:
    2f74:	af 92       	push	r10
    2f76:	bf 92       	push	r11
    2f78:	cf 92       	push	r12
    2f7a:	df 92       	push	r13
    2f7c:	ef 92       	push	r14
    2f7e:	ff 92       	push	r15
    2f80:	0f 93       	push	r16
    2f82:	1f 93       	push	r17
    2f84:	7b 01       	movw	r14, r22
    2f86:	8c 01       	movw	r16, r24
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	e8 16       	cp	r14, r24
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	f8 06       	cpc	r15, r24
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	08 07       	cpc	r16, r24
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	18 07       	cpc	r17, r24
    2f98:	58 f4       	brcc	.+22     	; 0x2fb0 <__clzsi2+0x3c>
    2f9a:	ef ef       	ldi	r30, 0xFF	; 255
    2f9c:	ee 16       	cp	r14, r30
    2f9e:	f1 04       	cpc	r15, r1
    2fa0:	01 05       	cpc	r16, r1
    2fa2:	11 05       	cpc	r17, r1
    2fa4:	09 f0       	breq	.+2      	; 0x2fa8 <__clzsi2+0x34>
    2fa6:	90 f4       	brcc	.+36     	; 0x2fcc <__clzsi2+0x58>
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	dc 01       	movw	r26, r24
    2fae:	17 c0       	rjmp	.+46     	; 0x2fde <__clzsi2+0x6a>
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	ef 16       	cp	r14, r31
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	ff 06       	cpc	r15, r31
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	0f 07       	cpc	r16, r31
    2fbc:	f1 e0       	ldi	r31, 0x01	; 1
    2fbe:	1f 07       	cpc	r17, r31
    2fc0:	50 f4       	brcc	.+20     	; 0x2fd6 <__clzsi2+0x62>
    2fc2:	80 e1       	ldi	r24, 0x10	; 16
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	a0 e0       	ldi	r26, 0x00	; 0
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	09 c0       	rjmp	.+18     	; 0x2fde <__clzsi2+0x6a>
    2fcc:	88 e0       	ldi	r24, 0x08	; 8
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	a0 e0       	ldi	r26, 0x00	; 0
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	04 c0       	rjmp	.+8      	; 0x2fde <__clzsi2+0x6a>
    2fd6:	88 e1       	ldi	r24, 0x18	; 24
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	a0 e0       	ldi	r26, 0x00	; 0
    2fdc:	b0 e0       	ldi	r27, 0x00	; 0
    2fde:	20 e2       	ldi	r18, 0x20	; 32
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	40 e0       	ldi	r20, 0x00	; 0
    2fe4:	50 e0       	ldi	r21, 0x00	; 0
    2fe6:	28 1b       	sub	r18, r24
    2fe8:	39 0b       	sbc	r19, r25
    2fea:	4a 0b       	sbc	r20, r26
    2fec:	5b 0b       	sbc	r21, r27
    2fee:	57 01       	movw	r10, r14
    2ff0:	68 01       	movw	r12, r16
    2ff2:	04 c0       	rjmp	.+8      	; 0x2ffc <__clzsi2+0x88>
    2ff4:	d6 94       	lsr	r13
    2ff6:	c7 94       	ror	r12
    2ff8:	b7 94       	ror	r11
    2ffa:	a7 94       	ror	r10
    2ffc:	8a 95       	dec	r24
    2ffe:	d2 f7       	brpl	.-12     	; 0x2ff4 <__clzsi2+0x80>
    3000:	d6 01       	movw	r26, r12
    3002:	c5 01       	movw	r24, r10
    3004:	8d 5c       	subi	r24, 0xCD	; 205
    3006:	9e 4f       	sbci	r25, 0xFE	; 254
    3008:	fc 01       	movw	r30, r24
    300a:	80 81       	ld	r24, Z
    300c:	28 1b       	sub	r18, r24
    300e:	31 09       	sbc	r19, r1
    3010:	41 09       	sbc	r20, r1
    3012:	51 09       	sbc	r21, r1
    3014:	c9 01       	movw	r24, r18
    3016:	1f 91       	pop	r17
    3018:	0f 91       	pop	r16
    301a:	ff 90       	pop	r15
    301c:	ef 90       	pop	r14
    301e:	df 90       	pop	r13
    3020:	cf 90       	pop	r12
    3022:	bf 90       	pop	r11
    3024:	af 90       	pop	r10
    3026:	08 95       	ret

00003028 <__pack_f>:
    3028:	ef 92       	push	r14
    302a:	ff 92       	push	r15
    302c:	0f 93       	push	r16
    302e:	1f 93       	push	r17
    3030:	cf 93       	push	r28
    3032:	df 93       	push	r29
    3034:	fc 01       	movw	r30, r24
    3036:	24 81       	ldd	r18, Z+4	; 0x04
    3038:	35 81       	ldd	r19, Z+5	; 0x05
    303a:	46 81       	ldd	r20, Z+6	; 0x06
    303c:	57 81       	ldd	r21, Z+7	; 0x07
    303e:	61 81       	ldd	r22, Z+1	; 0x01
    3040:	80 81       	ld	r24, Z
    3042:	82 30       	cpi	r24, 0x02	; 2
    3044:	20 f4       	brcc	.+8      	; 0x304e <__pack_f+0x26>
    3046:	40 61       	ori	r20, 0x10	; 16
    3048:	ef ef       	ldi	r30, 0xFF	; 255
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	a3 c0       	rjmp	.+326    	; 0x3194 <__pack_f+0x16c>
    304e:	84 30       	cpi	r24, 0x04	; 4
    3050:	09 f4       	brne	.+2      	; 0x3054 <__pack_f+0x2c>
    3052:	9b c0       	rjmp	.+310    	; 0x318a <__pack_f+0x162>
    3054:	82 30       	cpi	r24, 0x02	; 2
    3056:	09 f4       	brne	.+2      	; 0x305a <__pack_f+0x32>
    3058:	92 c0       	rjmp	.+292    	; 0x317e <__pack_f+0x156>
    305a:	21 15       	cp	r18, r1
    305c:	31 05       	cpc	r19, r1
    305e:	41 05       	cpc	r20, r1
    3060:	51 05       	cpc	r21, r1
    3062:	09 f4       	brne	.+2      	; 0x3066 <__pack_f+0x3e>
    3064:	8f c0       	rjmp	.+286    	; 0x3184 <__pack_f+0x15c>
    3066:	02 80       	ldd	r0, Z+2	; 0x02
    3068:	f3 81       	ldd	r31, Z+3	; 0x03
    306a:	e0 2d       	mov	r30, r0
    306c:	8f ef       	ldi	r24, 0xFF	; 255
    306e:	e2 38       	cpi	r30, 0x82	; 130
    3070:	f8 07       	cpc	r31, r24
    3072:	0c f0       	brlt	.+2      	; 0x3076 <__pack_f+0x4e>
    3074:	5a c0       	rjmp	.+180    	; 0x312a <__pack_f+0x102>
    3076:	c2 e8       	ldi	r28, 0x82	; 130
    3078:	df ef       	ldi	r29, 0xFF	; 255
    307a:	ce 1b       	sub	r28, r30
    307c:	df 0b       	sbc	r29, r31
    307e:	ca 31       	cpi	r28, 0x1A	; 26
    3080:	d1 05       	cpc	r29, r1
    3082:	6c f5       	brge	.+90     	; 0x30de <__pack_f+0xb6>
    3084:	79 01       	movw	r14, r18
    3086:	8a 01       	movw	r16, r20
    3088:	0c 2e       	mov	r0, r28
    308a:	04 c0       	rjmp	.+8      	; 0x3094 <__pack_f+0x6c>
    308c:	16 95       	lsr	r17
    308e:	07 95       	ror	r16
    3090:	f7 94       	ror	r15
    3092:	e7 94       	ror	r14
    3094:	0a 94       	dec	r0
    3096:	d2 f7       	brpl	.-12     	; 0x308c <__pack_f+0x64>
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	a0 e0       	ldi	r26, 0x00	; 0
    309e:	b0 e0       	ldi	r27, 0x00	; 0
    30a0:	0c 2e       	mov	r0, r28
    30a2:	04 c0       	rjmp	.+8      	; 0x30ac <__pack_f+0x84>
    30a4:	88 0f       	add	r24, r24
    30a6:	99 1f       	adc	r25, r25
    30a8:	aa 1f       	adc	r26, r26
    30aa:	bb 1f       	adc	r27, r27
    30ac:	0a 94       	dec	r0
    30ae:	d2 f7       	brpl	.-12     	; 0x30a4 <__pack_f+0x7c>
    30b0:	01 97       	sbiw	r24, 0x01	; 1
    30b2:	a1 09       	sbc	r26, r1
    30b4:	b1 09       	sbc	r27, r1
    30b6:	82 23       	and	r24, r18
    30b8:	93 23       	and	r25, r19
    30ba:	a4 23       	and	r26, r20
    30bc:	b5 23       	and	r27, r21
    30be:	21 e0       	ldi	r18, 0x01	; 1
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e0       	ldi	r20, 0x00	; 0
    30c4:	50 e0       	ldi	r21, 0x00	; 0
    30c6:	00 97       	sbiw	r24, 0x00	; 0
    30c8:	a1 05       	cpc	r26, r1
    30ca:	b1 05       	cpc	r27, r1
    30cc:	19 f4       	brne	.+6      	; 0x30d4 <__pack_f+0xac>
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	a9 01       	movw	r20, r18
    30d4:	2e 29       	or	r18, r14
    30d6:	3f 29       	or	r19, r15
    30d8:	40 2b       	or	r20, r16
    30da:	51 2b       	or	r21, r17
    30dc:	03 c0       	rjmp	.+6      	; 0x30e4 <__pack_f+0xbc>
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	a9 01       	movw	r20, r18
    30e4:	da 01       	movw	r26, r20
    30e6:	c9 01       	movw	r24, r18
    30e8:	8f 77       	andi	r24, 0x7F	; 127
    30ea:	90 70       	andi	r25, 0x00	; 0
    30ec:	a0 70       	andi	r26, 0x00	; 0
    30ee:	b0 70       	andi	r27, 0x00	; 0
    30f0:	80 34       	cpi	r24, 0x40	; 64
    30f2:	91 05       	cpc	r25, r1
    30f4:	a1 05       	cpc	r26, r1
    30f6:	b1 05       	cpc	r27, r1
    30f8:	39 f4       	brne	.+14     	; 0x3108 <__pack_f+0xe0>
    30fa:	27 ff       	sbrs	r18, 7
    30fc:	09 c0       	rjmp	.+18     	; 0x3110 <__pack_f+0xe8>
    30fe:	20 5c       	subi	r18, 0xC0	; 192
    3100:	3f 4f       	sbci	r19, 0xFF	; 255
    3102:	4f 4f       	sbci	r20, 0xFF	; 255
    3104:	5f 4f       	sbci	r21, 0xFF	; 255
    3106:	04 c0       	rjmp	.+8      	; 0x3110 <__pack_f+0xe8>
    3108:	21 5c       	subi	r18, 0xC1	; 193
    310a:	3f 4f       	sbci	r19, 0xFF	; 255
    310c:	4f 4f       	sbci	r20, 0xFF	; 255
    310e:	5f 4f       	sbci	r21, 0xFF	; 255
    3110:	e1 e0       	ldi	r30, 0x01	; 1
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	20 30       	cpi	r18, 0x00	; 0
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	38 07       	cpc	r19, r24
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	48 07       	cpc	r20, r24
    311e:	80 e4       	ldi	r24, 0x40	; 64
    3120:	58 07       	cpc	r21, r24
    3122:	28 f5       	brcc	.+74     	; 0x316e <__pack_f+0x146>
    3124:	e0 e0       	ldi	r30, 0x00	; 0
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	22 c0       	rjmp	.+68     	; 0x316e <__pack_f+0x146>
    312a:	e0 38       	cpi	r30, 0x80	; 128
    312c:	f1 05       	cpc	r31, r1
    312e:	6c f5       	brge	.+90     	; 0x318a <__pack_f+0x162>
    3130:	e1 58       	subi	r30, 0x81	; 129
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	da 01       	movw	r26, r20
    3136:	c9 01       	movw	r24, r18
    3138:	8f 77       	andi	r24, 0x7F	; 127
    313a:	90 70       	andi	r25, 0x00	; 0
    313c:	a0 70       	andi	r26, 0x00	; 0
    313e:	b0 70       	andi	r27, 0x00	; 0
    3140:	80 34       	cpi	r24, 0x40	; 64
    3142:	91 05       	cpc	r25, r1
    3144:	a1 05       	cpc	r26, r1
    3146:	b1 05       	cpc	r27, r1
    3148:	39 f4       	brne	.+14     	; 0x3158 <__pack_f+0x130>
    314a:	27 ff       	sbrs	r18, 7
    314c:	09 c0       	rjmp	.+18     	; 0x3160 <__pack_f+0x138>
    314e:	20 5c       	subi	r18, 0xC0	; 192
    3150:	3f 4f       	sbci	r19, 0xFF	; 255
    3152:	4f 4f       	sbci	r20, 0xFF	; 255
    3154:	5f 4f       	sbci	r21, 0xFF	; 255
    3156:	04 c0       	rjmp	.+8      	; 0x3160 <__pack_f+0x138>
    3158:	21 5c       	subi	r18, 0xC1	; 193
    315a:	3f 4f       	sbci	r19, 0xFF	; 255
    315c:	4f 4f       	sbci	r20, 0xFF	; 255
    315e:	5f 4f       	sbci	r21, 0xFF	; 255
    3160:	57 ff       	sbrs	r21, 7
    3162:	05 c0       	rjmp	.+10     	; 0x316e <__pack_f+0x146>
    3164:	56 95       	lsr	r21
    3166:	47 95       	ror	r20
    3168:	37 95       	ror	r19
    316a:	27 95       	ror	r18
    316c:	31 96       	adiw	r30, 0x01	; 1
    316e:	87 e0       	ldi	r24, 0x07	; 7
    3170:	56 95       	lsr	r21
    3172:	47 95       	ror	r20
    3174:	37 95       	ror	r19
    3176:	27 95       	ror	r18
    3178:	8a 95       	dec	r24
    317a:	d1 f7       	brne	.-12     	; 0x3170 <__pack_f+0x148>
    317c:	0b c0       	rjmp	.+22     	; 0x3194 <__pack_f+0x16c>
    317e:	e0 e0       	ldi	r30, 0x00	; 0
    3180:	f0 e0       	ldi	r31, 0x00	; 0
    3182:	05 c0       	rjmp	.+10     	; 0x318e <__pack_f+0x166>
    3184:	e0 e0       	ldi	r30, 0x00	; 0
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	05 c0       	rjmp	.+10     	; 0x3194 <__pack_f+0x16c>
    318a:	ef ef       	ldi	r30, 0xFF	; 255
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	a9 01       	movw	r20, r18
    3194:	8e 2f       	mov	r24, r30
    3196:	87 95       	ror	r24
    3198:	88 27       	eor	r24, r24
    319a:	87 95       	ror	r24
    319c:	94 2f       	mov	r25, r20
    319e:	9f 77       	andi	r25, 0x7F	; 127
    31a0:	67 95       	ror	r22
    31a2:	66 27       	eor	r22, r22
    31a4:	67 95       	ror	r22
    31a6:	e6 95       	lsr	r30
    31a8:	e2 2e       	mov	r14, r18
    31aa:	a9 2f       	mov	r26, r25
    31ac:	a8 2b       	or	r26, r24
    31ae:	fe 2f       	mov	r31, r30
    31b0:	f6 2b       	or	r31, r22
    31b2:	62 2f       	mov	r22, r18
    31b4:	73 2f       	mov	r23, r19
    31b6:	8a 2f       	mov	r24, r26
    31b8:	9f 2f       	mov	r25, r31
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
    31be:	e6 e0       	ldi	r30, 0x06	; 6
    31c0:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__epilogue_restores__+0x18>

000031c4 <__unpack_f>:
    31c4:	dc 01       	movw	r26, r24
    31c6:	fb 01       	movw	r30, r22
    31c8:	2c 91       	ld	r18, X
    31ca:	11 96       	adiw	r26, 0x01	; 1
    31cc:	3c 91       	ld	r19, X
    31ce:	11 97       	sbiw	r26, 0x01	; 1
    31d0:	12 96       	adiw	r26, 0x02	; 2
    31d2:	8c 91       	ld	r24, X
    31d4:	12 97       	sbiw	r26, 0x02	; 2
    31d6:	48 2f       	mov	r20, r24
    31d8:	4f 77       	andi	r20, 0x7F	; 127
    31da:	50 e0       	ldi	r21, 0x00	; 0
    31dc:	98 2f       	mov	r25, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	99 27       	eor	r25, r25
    31e2:	99 1f       	adc	r25, r25
    31e4:	13 96       	adiw	r26, 0x03	; 3
    31e6:	6c 91       	ld	r22, X
    31e8:	13 97       	sbiw	r26, 0x03	; 3
    31ea:	86 2f       	mov	r24, r22
    31ec:	88 0f       	add	r24, r24
    31ee:	89 2b       	or	r24, r25
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	66 1f       	adc	r22, r22
    31f4:	66 27       	eor	r22, r22
    31f6:	66 1f       	adc	r22, r22
    31f8:	61 83       	std	Z+1, r22	; 0x01
    31fa:	00 97       	sbiw	r24, 0x00	; 0
    31fc:	39 f5       	brne	.+78     	; 0x324c <__unpack_f+0x88>
    31fe:	21 15       	cp	r18, r1
    3200:	31 05       	cpc	r19, r1
    3202:	41 05       	cpc	r20, r1
    3204:	51 05       	cpc	r21, r1
    3206:	11 f4       	brne	.+4      	; 0x320c <__unpack_f+0x48>
    3208:	82 e0       	ldi	r24, 0x02	; 2
    320a:	29 c0       	rjmp	.+82     	; 0x325e <__unpack_f+0x9a>
    320c:	82 e8       	ldi	r24, 0x82	; 130
    320e:	9f ef       	ldi	r25, 0xFF	; 255
    3210:	93 83       	std	Z+3, r25	; 0x03
    3212:	82 83       	std	Z+2, r24	; 0x02
    3214:	67 e0       	ldi	r22, 0x07	; 7
    3216:	22 0f       	add	r18, r18
    3218:	33 1f       	adc	r19, r19
    321a:	44 1f       	adc	r20, r20
    321c:	55 1f       	adc	r21, r21
    321e:	6a 95       	dec	r22
    3220:	d1 f7       	brne	.-12     	; 0x3216 <__unpack_f+0x52>
    3222:	83 e0       	ldi	r24, 0x03	; 3
    3224:	80 83       	st	Z, r24
    3226:	09 c0       	rjmp	.+18     	; 0x323a <__unpack_f+0x76>
    3228:	22 0f       	add	r18, r18
    322a:	33 1f       	adc	r19, r19
    322c:	44 1f       	adc	r20, r20
    322e:	55 1f       	adc	r21, r21
    3230:	82 81       	ldd	r24, Z+2	; 0x02
    3232:	93 81       	ldd	r25, Z+3	; 0x03
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	93 83       	std	Z+3, r25	; 0x03
    3238:	82 83       	std	Z+2, r24	; 0x02
    323a:	20 30       	cpi	r18, 0x00	; 0
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	38 07       	cpc	r19, r24
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	48 07       	cpc	r20, r24
    3244:	80 e4       	ldi	r24, 0x40	; 64
    3246:	58 07       	cpc	r21, r24
    3248:	78 f3       	brcs	.-34     	; 0x3228 <__unpack_f+0x64>
    324a:	20 c0       	rjmp	.+64     	; 0x328c <__unpack_f+0xc8>
    324c:	8f 3f       	cpi	r24, 0xFF	; 255
    324e:	91 05       	cpc	r25, r1
    3250:	79 f4       	brne	.+30     	; 0x3270 <__unpack_f+0xac>
    3252:	21 15       	cp	r18, r1
    3254:	31 05       	cpc	r19, r1
    3256:	41 05       	cpc	r20, r1
    3258:	51 05       	cpc	r21, r1
    325a:	19 f4       	brne	.+6      	; 0x3262 <__unpack_f+0x9e>
    325c:	84 e0       	ldi	r24, 0x04	; 4
    325e:	80 83       	st	Z, r24
    3260:	08 95       	ret
    3262:	44 ff       	sbrs	r20, 4
    3264:	03 c0       	rjmp	.+6      	; 0x326c <__unpack_f+0xa8>
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	80 83       	st	Z, r24
    326a:	10 c0       	rjmp	.+32     	; 0x328c <__unpack_f+0xc8>
    326c:	10 82       	st	Z, r1
    326e:	0e c0       	rjmp	.+28     	; 0x328c <__unpack_f+0xc8>
    3270:	8f 57       	subi	r24, 0x7F	; 127
    3272:	90 40       	sbci	r25, 0x00	; 0
    3274:	93 83       	std	Z+3, r25	; 0x03
    3276:	82 83       	std	Z+2, r24	; 0x02
    3278:	83 e0       	ldi	r24, 0x03	; 3
    327a:	80 83       	st	Z, r24
    327c:	87 e0       	ldi	r24, 0x07	; 7
    327e:	22 0f       	add	r18, r18
    3280:	33 1f       	adc	r19, r19
    3282:	44 1f       	adc	r20, r20
    3284:	55 1f       	adc	r21, r21
    3286:	8a 95       	dec	r24
    3288:	d1 f7       	brne	.-12     	; 0x327e <__unpack_f+0xba>
    328a:	50 64       	ori	r21, 0x40	; 64
    328c:	24 83       	std	Z+4, r18	; 0x04
    328e:	35 83       	std	Z+5, r19	; 0x05
    3290:	46 83       	std	Z+6, r20	; 0x06
    3292:	57 83       	std	Z+7, r21	; 0x07
    3294:	08 95       	ret

00003296 <__fpcmp_parts_f>:
    3296:	fc 01       	movw	r30, r24
    3298:	db 01       	movw	r26, r22
    329a:	90 81       	ld	r25, Z
    329c:	92 30       	cpi	r25, 0x02	; 2
    329e:	08 f4       	brcc	.+2      	; 0x32a2 <__fpcmp_parts_f+0xc>
    32a0:	49 c0       	rjmp	.+146    	; 0x3334 <__fpcmp_parts_f+0x9e>
    32a2:	8c 91       	ld	r24, X
    32a4:	82 30       	cpi	r24, 0x02	; 2
    32a6:	08 f4       	brcc	.+2      	; 0x32aa <__fpcmp_parts_f+0x14>
    32a8:	45 c0       	rjmp	.+138    	; 0x3334 <__fpcmp_parts_f+0x9e>
    32aa:	94 30       	cpi	r25, 0x04	; 4
    32ac:	51 f4       	brne	.+20     	; 0x32c2 <__fpcmp_parts_f+0x2c>
    32ae:	61 81       	ldd	r22, Z+1	; 0x01
    32b0:	84 30       	cpi	r24, 0x04	; 4
    32b2:	b1 f5       	brne	.+108    	; 0x3320 <__fpcmp_parts_f+0x8a>
    32b4:	11 96       	adiw	r26, 0x01	; 1
    32b6:	2c 91       	ld	r18, X
    32b8:	11 97       	sbiw	r26, 0x01	; 1
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	26 1b       	sub	r18, r22
    32be:	31 09       	sbc	r19, r1
    32c0:	41 c0       	rjmp	.+130    	; 0x3344 <__fpcmp_parts_f+0xae>
    32c2:	84 30       	cpi	r24, 0x04	; 4
    32c4:	21 f0       	breq	.+8      	; 0x32ce <__fpcmp_parts_f+0x38>
    32c6:	92 30       	cpi	r25, 0x02	; 2
    32c8:	41 f4       	brne	.+16     	; 0x32da <__fpcmp_parts_f+0x44>
    32ca:	82 30       	cpi	r24, 0x02	; 2
    32cc:	b1 f1       	breq	.+108    	; 0x333a <__fpcmp_parts_f+0xa4>
    32ce:	11 96       	adiw	r26, 0x01	; 1
    32d0:	8c 91       	ld	r24, X
    32d2:	11 97       	sbiw	r26, 0x01	; 1
    32d4:	88 23       	and	r24, r24
    32d6:	a1 f1       	breq	.+104    	; 0x3340 <__fpcmp_parts_f+0xaa>
    32d8:	2d c0       	rjmp	.+90     	; 0x3334 <__fpcmp_parts_f+0x9e>
    32da:	61 81       	ldd	r22, Z+1	; 0x01
    32dc:	82 30       	cpi	r24, 0x02	; 2
    32de:	01 f1       	breq	.+64     	; 0x3320 <__fpcmp_parts_f+0x8a>
    32e0:	11 96       	adiw	r26, 0x01	; 1
    32e2:	8c 91       	ld	r24, X
    32e4:	11 97       	sbiw	r26, 0x01	; 1
    32e6:	68 17       	cp	r22, r24
    32e8:	d9 f4       	brne	.+54     	; 0x3320 <__fpcmp_parts_f+0x8a>
    32ea:	22 81       	ldd	r18, Z+2	; 0x02
    32ec:	33 81       	ldd	r19, Z+3	; 0x03
    32ee:	12 96       	adiw	r26, 0x02	; 2
    32f0:	8d 91       	ld	r24, X+
    32f2:	9c 91       	ld	r25, X
    32f4:	13 97       	sbiw	r26, 0x03	; 3
    32f6:	82 17       	cp	r24, r18
    32f8:	93 07       	cpc	r25, r19
    32fa:	94 f0       	brlt	.+36     	; 0x3320 <__fpcmp_parts_f+0x8a>
    32fc:	28 17       	cp	r18, r24
    32fe:	39 07       	cpc	r19, r25
    3300:	bc f0       	brlt	.+46     	; 0x3330 <__fpcmp_parts_f+0x9a>
    3302:	24 81       	ldd	r18, Z+4	; 0x04
    3304:	35 81       	ldd	r19, Z+5	; 0x05
    3306:	46 81       	ldd	r20, Z+6	; 0x06
    3308:	57 81       	ldd	r21, Z+7	; 0x07
    330a:	14 96       	adiw	r26, 0x04	; 4
    330c:	8d 91       	ld	r24, X+
    330e:	9d 91       	ld	r25, X+
    3310:	0d 90       	ld	r0, X+
    3312:	bc 91       	ld	r27, X
    3314:	a0 2d       	mov	r26, r0
    3316:	82 17       	cp	r24, r18
    3318:	93 07       	cpc	r25, r19
    331a:	a4 07       	cpc	r26, r20
    331c:	b5 07       	cpc	r27, r21
    331e:	18 f4       	brcc	.+6      	; 0x3326 <__fpcmp_parts_f+0x90>
    3320:	66 23       	and	r22, r22
    3322:	41 f0       	breq	.+16     	; 0x3334 <__fpcmp_parts_f+0x9e>
    3324:	0d c0       	rjmp	.+26     	; 0x3340 <__fpcmp_parts_f+0xaa>
    3326:	28 17       	cp	r18, r24
    3328:	39 07       	cpc	r19, r25
    332a:	4a 07       	cpc	r20, r26
    332c:	5b 07       	cpc	r21, r27
    332e:	28 f4       	brcc	.+10     	; 0x333a <__fpcmp_parts_f+0xa4>
    3330:	66 23       	and	r22, r22
    3332:	31 f0       	breq	.+12     	; 0x3340 <__fpcmp_parts_f+0xaa>
    3334:	21 e0       	ldi	r18, 0x01	; 1
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	05 c0       	rjmp	.+10     	; 0x3344 <__fpcmp_parts_f+0xae>
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	02 c0       	rjmp	.+4      	; 0x3344 <__fpcmp_parts_f+0xae>
    3340:	2f ef       	ldi	r18, 0xFF	; 255
    3342:	3f ef       	ldi	r19, 0xFF	; 255
    3344:	c9 01       	movw	r24, r18
    3346:	08 95       	ret

00003348 <__udivmodqi4>:
    3348:	99 1b       	sub	r25, r25
    334a:	79 e0       	ldi	r23, 0x09	; 9
    334c:	04 c0       	rjmp	.+8      	; 0x3356 <__udivmodqi4_ep>

0000334e <__udivmodqi4_loop>:
    334e:	99 1f       	adc	r25, r25
    3350:	96 17       	cp	r25, r22
    3352:	08 f0       	brcs	.+2      	; 0x3356 <__udivmodqi4_ep>
    3354:	96 1b       	sub	r25, r22

00003356 <__udivmodqi4_ep>:
    3356:	88 1f       	adc	r24, r24
    3358:	7a 95       	dec	r23
    335a:	c9 f7       	brne	.-14     	; 0x334e <__udivmodqi4_loop>
    335c:	80 95       	com	r24
    335e:	08 95       	ret

00003360 <__prologue_saves__>:
    3360:	2f 92       	push	r2
    3362:	3f 92       	push	r3
    3364:	4f 92       	push	r4
    3366:	5f 92       	push	r5
    3368:	6f 92       	push	r6
    336a:	7f 92       	push	r7
    336c:	8f 92       	push	r8
    336e:	9f 92       	push	r9
    3370:	af 92       	push	r10
    3372:	bf 92       	push	r11
    3374:	cf 92       	push	r12
    3376:	df 92       	push	r13
    3378:	ef 92       	push	r14
    337a:	ff 92       	push	r15
    337c:	0f 93       	push	r16
    337e:	1f 93       	push	r17
    3380:	cf 93       	push	r28
    3382:	df 93       	push	r29
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
    3388:	ca 1b       	sub	r28, r26
    338a:	db 0b       	sbc	r29, r27
    338c:	0f b6       	in	r0, 0x3f	; 63
    338e:	f8 94       	cli
    3390:	de bf       	out	0x3e, r29	; 62
    3392:	0f be       	out	0x3f, r0	; 63
    3394:	cd bf       	out	0x3d, r28	; 61
    3396:	09 94       	ijmp

00003398 <__epilogue_restores__>:
    3398:	2a 88       	ldd	r2, Y+18	; 0x12
    339a:	39 88       	ldd	r3, Y+17	; 0x11
    339c:	48 88       	ldd	r4, Y+16	; 0x10
    339e:	5f 84       	ldd	r5, Y+15	; 0x0f
    33a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    33a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    33a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    33a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    33a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    33aa:	b9 84       	ldd	r11, Y+9	; 0x09
    33ac:	c8 84       	ldd	r12, Y+8	; 0x08
    33ae:	df 80       	ldd	r13, Y+7	; 0x07
    33b0:	ee 80       	ldd	r14, Y+6	; 0x06
    33b2:	fd 80       	ldd	r15, Y+5	; 0x05
    33b4:	0c 81       	ldd	r16, Y+4	; 0x04
    33b6:	1b 81       	ldd	r17, Y+3	; 0x03
    33b8:	aa 81       	ldd	r26, Y+2	; 0x02
    33ba:	b9 81       	ldd	r27, Y+1	; 0x01
    33bc:	ce 0f       	add	r28, r30
    33be:	d1 1d       	adc	r29, r1
    33c0:	0f b6       	in	r0, 0x3f	; 63
    33c2:	f8 94       	cli
    33c4:	de bf       	out	0x3e, r29	; 62
    33c6:	0f be       	out	0x3f, r0	; 63
    33c8:	cd bf       	out	0x3d, r28	; 61
    33ca:	ed 01       	movw	r28, r26
    33cc:	08 95       	ret

000033ce <cos>:
    33ce:	03 d0       	rcall	.+6      	; 0x33d6 <__fp_rempio2>
    33d0:	e3 95       	inc	r30
    33d2:	28 c0       	rjmp	.+80     	; 0x3424 <__fp_sinus>
    33d4:	ce c0       	rjmp	.+412    	; 0x3572 <__fp_nan>

000033d6 <__fp_rempio2>:
    33d6:	3f d0       	rcall	.+126    	; 0x3456 <__fp_splitA>
    33d8:	e8 f3       	brcs	.-6      	; 0x33d4 <cos+0x6>
    33da:	e8 94       	clt
    33dc:	e0 e0       	ldi	r30, 0x00	; 0
    33de:	bb 27       	eor	r27, r27
    33e0:	9f 57       	subi	r25, 0x7F	; 127
    33e2:	f0 f0       	brcs	.+60     	; 0x3420 <__fp_rempio2+0x4a>
    33e4:	2a ed       	ldi	r18, 0xDA	; 218
    33e6:	3f e0       	ldi	r19, 0x0F	; 15
    33e8:	49 ec       	ldi	r20, 0xC9	; 201
    33ea:	06 c0       	rjmp	.+12     	; 0x33f8 <__fp_rempio2+0x22>
    33ec:	ee 0f       	add	r30, r30
    33ee:	bb 0f       	add	r27, r27
    33f0:	66 1f       	adc	r22, r22
    33f2:	77 1f       	adc	r23, r23
    33f4:	88 1f       	adc	r24, r24
    33f6:	28 f0       	brcs	.+10     	; 0x3402 <__fp_rempio2+0x2c>
    33f8:	b2 3a       	cpi	r27, 0xA2	; 162
    33fa:	62 07       	cpc	r22, r18
    33fc:	73 07       	cpc	r23, r19
    33fe:	84 07       	cpc	r24, r20
    3400:	28 f0       	brcs	.+10     	; 0x340c <__fp_rempio2+0x36>
    3402:	b2 5a       	subi	r27, 0xA2	; 162
    3404:	62 0b       	sbc	r22, r18
    3406:	73 0b       	sbc	r23, r19
    3408:	84 0b       	sbc	r24, r20
    340a:	e3 95       	inc	r30
    340c:	9a 95       	dec	r25
    340e:	72 f7       	brpl	.-36     	; 0x33ec <__fp_rempio2+0x16>
    3410:	80 38       	cpi	r24, 0x80	; 128
    3412:	30 f4       	brcc	.+12     	; 0x3420 <__fp_rempio2+0x4a>
    3414:	9a 95       	dec	r25
    3416:	bb 0f       	add	r27, r27
    3418:	66 1f       	adc	r22, r22
    341a:	77 1f       	adc	r23, r23
    341c:	88 1f       	adc	r24, r24
    341e:	d2 f7       	brpl	.-12     	; 0x3414 <__fp_rempio2+0x3e>
    3420:	90 48       	sbci	r25, 0x80	; 128
    3422:	9b c0       	rjmp	.+310    	; 0x355a <__fp_mpack_finite>

00003424 <__fp_sinus>:
    3424:	ef 93       	push	r30
    3426:	e0 ff       	sbrs	r30, 0
    3428:	06 c0       	rjmp	.+12     	; 0x3436 <__fp_sinus+0x12>
    342a:	a2 ea       	ldi	r26, 0xA2	; 162
    342c:	2a ed       	ldi	r18, 0xDA	; 218
    342e:	3f e0       	ldi	r19, 0x0F	; 15
    3430:	49 ec       	ldi	r20, 0xC9	; 201
    3432:	5f eb       	ldi	r21, 0xBF	; 191
    3434:	37 d0       	rcall	.+110    	; 0x34a4 <__addsf3x>
    3436:	bf d0       	rcall	.+382    	; 0x35b6 <__fp_round>
    3438:	0f 90       	pop	r0
    343a:	03 94       	inc	r0
    343c:	01 fc       	sbrc	r0, 1
    343e:	90 58       	subi	r25, 0x80	; 128
    3440:	ec e8       	ldi	r30, 0x8C	; 140
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	99 c0       	rjmp	.+306    	; 0x3578 <__fp_powsodd>

00003446 <__fp_split3>:
    3446:	57 fd       	sbrc	r21, 7
    3448:	90 58       	subi	r25, 0x80	; 128
    344a:	44 0f       	add	r20, r20
    344c:	55 1f       	adc	r21, r21
    344e:	59 f0       	breq	.+22     	; 0x3466 <__fp_splitA+0x10>
    3450:	5f 3f       	cpi	r21, 0xFF	; 255
    3452:	71 f0       	breq	.+28     	; 0x3470 <__fp_splitA+0x1a>
    3454:	47 95       	ror	r20

00003456 <__fp_splitA>:
    3456:	88 0f       	add	r24, r24
    3458:	97 fb       	bst	r25, 7
    345a:	99 1f       	adc	r25, r25
    345c:	61 f0       	breq	.+24     	; 0x3476 <__fp_splitA+0x20>
    345e:	9f 3f       	cpi	r25, 0xFF	; 255
    3460:	79 f0       	breq	.+30     	; 0x3480 <__fp_splitA+0x2a>
    3462:	87 95       	ror	r24
    3464:	08 95       	ret
    3466:	12 16       	cp	r1, r18
    3468:	13 06       	cpc	r1, r19
    346a:	14 06       	cpc	r1, r20
    346c:	55 1f       	adc	r21, r21
    346e:	f2 cf       	rjmp	.-28     	; 0x3454 <__fp_split3+0xe>
    3470:	46 95       	lsr	r20
    3472:	f1 df       	rcall	.-30     	; 0x3456 <__fp_splitA>
    3474:	08 c0       	rjmp	.+16     	; 0x3486 <__fp_splitA+0x30>
    3476:	16 16       	cp	r1, r22
    3478:	17 06       	cpc	r1, r23
    347a:	18 06       	cpc	r1, r24
    347c:	99 1f       	adc	r25, r25
    347e:	f1 cf       	rjmp	.-30     	; 0x3462 <__fp_splitA+0xc>
    3480:	86 95       	lsr	r24
    3482:	71 05       	cpc	r23, r1
    3484:	61 05       	cpc	r22, r1
    3486:	08 94       	sec
    3488:	08 95       	ret
    348a:	87 d0       	rcall	.+270    	; 0x359a <__fp_pscA>
    348c:	30 f0       	brcs	.+12     	; 0x349a <__fp_splitA+0x44>
    348e:	8c d0       	rcall	.+280    	; 0x35a8 <__fp_pscB>
    3490:	20 f0       	brcs	.+8      	; 0x349a <__fp_splitA+0x44>
    3492:	31 f4       	brne	.+12     	; 0x34a0 <__fp_splitA+0x4a>
    3494:	9f 3f       	cpi	r25, 0xFF	; 255
    3496:	11 f4       	brne	.+4      	; 0x349c <__fp_splitA+0x46>
    3498:	1e f4       	brtc	.+6      	; 0x34a0 <__fp_splitA+0x4a>
    349a:	6b c0       	rjmp	.+214    	; 0x3572 <__fp_nan>
    349c:	0e f4       	brtc	.+2      	; 0x34a0 <__fp_splitA+0x4a>
    349e:	e0 95       	com	r30
    34a0:	e7 fb       	bst	r30, 7
    34a2:	53 c0       	rjmp	.+166    	; 0x354a <__fp_inf>

000034a4 <__addsf3x>:
    34a4:	e9 2f       	mov	r30, r25
    34a6:	cf df       	rcall	.-98     	; 0x3446 <__fp_split3>
    34a8:	80 f3       	brcs	.-32     	; 0x348a <__fp_splitA+0x34>
    34aa:	ba 17       	cp	r27, r26
    34ac:	62 07       	cpc	r22, r18
    34ae:	73 07       	cpc	r23, r19
    34b0:	84 07       	cpc	r24, r20
    34b2:	95 07       	cpc	r25, r21
    34b4:	18 f0       	brcs	.+6      	; 0x34bc <__addsf3x+0x18>
    34b6:	71 f4       	brne	.+28     	; 0x34d4 <__addsf3x+0x30>
    34b8:	9e f5       	brtc	.+102    	; 0x3520 <__addsf3x+0x7c>
    34ba:	8e c0       	rjmp	.+284    	; 0x35d8 <__fp_zero>
    34bc:	0e f4       	brtc	.+2      	; 0x34c0 <__addsf3x+0x1c>
    34be:	e0 95       	com	r30
    34c0:	0b 2e       	mov	r0, r27
    34c2:	ba 2f       	mov	r27, r26
    34c4:	a0 2d       	mov	r26, r0
    34c6:	0b 01       	movw	r0, r22
    34c8:	b9 01       	movw	r22, r18
    34ca:	90 01       	movw	r18, r0
    34cc:	0c 01       	movw	r0, r24
    34ce:	ca 01       	movw	r24, r20
    34d0:	a0 01       	movw	r20, r0
    34d2:	11 24       	eor	r1, r1
    34d4:	ff 27       	eor	r31, r31
    34d6:	59 1b       	sub	r21, r25
    34d8:	99 f0       	breq	.+38     	; 0x3500 <__addsf3x+0x5c>
    34da:	59 3f       	cpi	r21, 0xF9	; 249
    34dc:	50 f4       	brcc	.+20     	; 0x34f2 <__addsf3x+0x4e>
    34de:	50 3e       	cpi	r21, 0xE0	; 224
    34e0:	68 f1       	brcs	.+90     	; 0x353c <__addsf3x+0x98>
    34e2:	1a 16       	cp	r1, r26
    34e4:	f0 40       	sbci	r31, 0x00	; 0
    34e6:	a2 2f       	mov	r26, r18
    34e8:	23 2f       	mov	r18, r19
    34ea:	34 2f       	mov	r19, r20
    34ec:	44 27       	eor	r20, r20
    34ee:	58 5f       	subi	r21, 0xF8	; 248
    34f0:	f3 cf       	rjmp	.-26     	; 0x34d8 <__addsf3x+0x34>
    34f2:	46 95       	lsr	r20
    34f4:	37 95       	ror	r19
    34f6:	27 95       	ror	r18
    34f8:	a7 95       	ror	r26
    34fa:	f0 40       	sbci	r31, 0x00	; 0
    34fc:	53 95       	inc	r21
    34fe:	c9 f7       	brne	.-14     	; 0x34f2 <__addsf3x+0x4e>
    3500:	7e f4       	brtc	.+30     	; 0x3520 <__addsf3x+0x7c>
    3502:	1f 16       	cp	r1, r31
    3504:	ba 0b       	sbc	r27, r26
    3506:	62 0b       	sbc	r22, r18
    3508:	73 0b       	sbc	r23, r19
    350a:	84 0b       	sbc	r24, r20
    350c:	ba f0       	brmi	.+46     	; 0x353c <__addsf3x+0x98>
    350e:	91 50       	subi	r25, 0x01	; 1
    3510:	a1 f0       	breq	.+40     	; 0x353a <__addsf3x+0x96>
    3512:	ff 0f       	add	r31, r31
    3514:	bb 1f       	adc	r27, r27
    3516:	66 1f       	adc	r22, r22
    3518:	77 1f       	adc	r23, r23
    351a:	88 1f       	adc	r24, r24
    351c:	c2 f7       	brpl	.-16     	; 0x350e <__addsf3x+0x6a>
    351e:	0e c0       	rjmp	.+28     	; 0x353c <__addsf3x+0x98>
    3520:	ba 0f       	add	r27, r26
    3522:	62 1f       	adc	r22, r18
    3524:	73 1f       	adc	r23, r19
    3526:	84 1f       	adc	r24, r20
    3528:	48 f4       	brcc	.+18     	; 0x353c <__addsf3x+0x98>
    352a:	87 95       	ror	r24
    352c:	77 95       	ror	r23
    352e:	67 95       	ror	r22
    3530:	b7 95       	ror	r27
    3532:	f7 95       	ror	r31
    3534:	9e 3f       	cpi	r25, 0xFE	; 254
    3536:	08 f0       	brcs	.+2      	; 0x353a <__addsf3x+0x96>
    3538:	b3 cf       	rjmp	.-154    	; 0x34a0 <__fp_splitA+0x4a>
    353a:	93 95       	inc	r25
    353c:	88 0f       	add	r24, r24
    353e:	08 f0       	brcs	.+2      	; 0x3542 <__addsf3x+0x9e>
    3540:	99 27       	eor	r25, r25
    3542:	ee 0f       	add	r30, r30
    3544:	97 95       	ror	r25
    3546:	87 95       	ror	r24
    3548:	08 95       	ret

0000354a <__fp_inf>:
    354a:	97 f9       	bld	r25, 7
    354c:	9f 67       	ori	r25, 0x7F	; 127
    354e:	80 e8       	ldi	r24, 0x80	; 128
    3550:	70 e0       	ldi	r23, 0x00	; 0
    3552:	60 e0       	ldi	r22, 0x00	; 0
    3554:	08 95       	ret

00003556 <__fp_mpack>:
    3556:	9f 3f       	cpi	r25, 0xFF	; 255
    3558:	31 f0       	breq	.+12     	; 0x3566 <__fp_mpack_finite+0xc>

0000355a <__fp_mpack_finite>:
    355a:	91 50       	subi	r25, 0x01	; 1
    355c:	20 f4       	brcc	.+8      	; 0x3566 <__fp_mpack_finite+0xc>
    355e:	87 95       	ror	r24
    3560:	77 95       	ror	r23
    3562:	67 95       	ror	r22
    3564:	b7 95       	ror	r27
    3566:	88 0f       	add	r24, r24
    3568:	91 1d       	adc	r25, r1
    356a:	96 95       	lsr	r25
    356c:	87 95       	ror	r24
    356e:	97 f9       	bld	r25, 7
    3570:	08 95       	ret

00003572 <__fp_nan>:
    3572:	9f ef       	ldi	r25, 0xFF	; 255
    3574:	80 ec       	ldi	r24, 0xC0	; 192
    3576:	08 95       	ret

00003578 <__fp_powsodd>:
    3578:	9f 93       	push	r25
    357a:	8f 93       	push	r24
    357c:	7f 93       	push	r23
    357e:	6f 93       	push	r22
    3580:	ff 93       	push	r31
    3582:	ef 93       	push	r30
    3584:	9b 01       	movw	r18, r22
    3586:	ac 01       	movw	r20, r24
    3588:	11 da       	rcall	.-3038   	; 0x29ac <__mulsf3>
    358a:	ef 91       	pop	r30
    358c:	ff 91       	pop	r31
    358e:	2b d0       	rcall	.+86     	; 0x35e6 <__fp_powser>
    3590:	2f 91       	pop	r18
    3592:	3f 91       	pop	r19
    3594:	4f 91       	pop	r20
    3596:	5f 91       	pop	r21
    3598:	09 ca       	rjmp	.-3054   	; 0x29ac <__mulsf3>

0000359a <__fp_pscA>:
    359a:	00 24       	eor	r0, r0
    359c:	0a 94       	dec	r0
    359e:	16 16       	cp	r1, r22
    35a0:	17 06       	cpc	r1, r23
    35a2:	18 06       	cpc	r1, r24
    35a4:	09 06       	cpc	r0, r25
    35a6:	08 95       	ret

000035a8 <__fp_pscB>:
    35a8:	00 24       	eor	r0, r0
    35aa:	0a 94       	dec	r0
    35ac:	12 16       	cp	r1, r18
    35ae:	13 06       	cpc	r1, r19
    35b0:	14 06       	cpc	r1, r20
    35b2:	05 06       	cpc	r0, r21
    35b4:	08 95       	ret

000035b6 <__fp_round>:
    35b6:	09 2e       	mov	r0, r25
    35b8:	03 94       	inc	r0
    35ba:	00 0c       	add	r0, r0
    35bc:	11 f4       	brne	.+4      	; 0x35c2 <__fp_round+0xc>
    35be:	88 23       	and	r24, r24
    35c0:	52 f0       	brmi	.+20     	; 0x35d6 <__fp_round+0x20>
    35c2:	bb 0f       	add	r27, r27
    35c4:	40 f4       	brcc	.+16     	; 0x35d6 <__fp_round+0x20>
    35c6:	bf 2b       	or	r27, r31
    35c8:	11 f4       	brne	.+4      	; 0x35ce <__fp_round+0x18>
    35ca:	60 ff       	sbrs	r22, 0
    35cc:	04 c0       	rjmp	.+8      	; 0x35d6 <__fp_round+0x20>
    35ce:	6f 5f       	subi	r22, 0xFF	; 255
    35d0:	7f 4f       	sbci	r23, 0xFF	; 255
    35d2:	8f 4f       	sbci	r24, 0xFF	; 255
    35d4:	9f 4f       	sbci	r25, 0xFF	; 255
    35d6:	08 95       	ret

000035d8 <__fp_zero>:
    35d8:	e8 94       	clt

000035da <__fp_szero>:
    35da:	bb 27       	eor	r27, r27
    35dc:	66 27       	eor	r22, r22
    35de:	77 27       	eor	r23, r23
    35e0:	cb 01       	movw	r24, r22
    35e2:	97 f9       	bld	r25, 7
    35e4:	08 95       	ret

000035e6 <__fp_powser>:
    35e6:	df 93       	push	r29
    35e8:	cf 93       	push	r28
    35ea:	1f 93       	push	r17
    35ec:	0f 93       	push	r16
    35ee:	ff 92       	push	r15
    35f0:	ef 92       	push	r14
    35f2:	df 92       	push	r13
    35f4:	7b 01       	movw	r14, r22
    35f6:	8c 01       	movw	r16, r24
    35f8:	68 94       	set
    35fa:	05 c0       	rjmp	.+10     	; 0x3606 <__fp_powser+0x20>
    35fc:	da 2e       	mov	r13, r26
    35fe:	ef 01       	movw	r28, r30
    3600:	21 d0       	rcall	.+66     	; 0x3644 <__mulsf3x>
    3602:	fe 01       	movw	r30, r28
    3604:	e8 94       	clt
    3606:	a5 91       	lpm	r26, Z+
    3608:	25 91       	lpm	r18, Z+
    360a:	35 91       	lpm	r19, Z+
    360c:	45 91       	lpm	r20, Z+
    360e:	55 91       	lpm	r21, Z+
    3610:	ae f3       	brts	.-22     	; 0x35fc <__fp_powser+0x16>
    3612:	ef 01       	movw	r28, r30
    3614:	47 df       	rcall	.-370    	; 0x34a4 <__addsf3x>
    3616:	fe 01       	movw	r30, r28
    3618:	97 01       	movw	r18, r14
    361a:	a8 01       	movw	r20, r16
    361c:	da 94       	dec	r13
    361e:	79 f7       	brne	.-34     	; 0x35fe <__fp_powser+0x18>
    3620:	df 90       	pop	r13
    3622:	ef 90       	pop	r14
    3624:	ff 90       	pop	r15
    3626:	0f 91       	pop	r16
    3628:	1f 91       	pop	r17
    362a:	cf 91       	pop	r28
    362c:	df 91       	pop	r29
    362e:	08 95       	ret
    3630:	b4 df       	rcall	.-152    	; 0x359a <__fp_pscA>
    3632:	28 f0       	brcs	.+10     	; 0x363e <__fp_powser+0x58>
    3634:	b9 df       	rcall	.-142    	; 0x35a8 <__fp_pscB>
    3636:	18 f0       	brcs	.+6      	; 0x363e <__fp_powser+0x58>
    3638:	95 23       	and	r25, r21
    363a:	09 f0       	breq	.+2      	; 0x363e <__fp_powser+0x58>
    363c:	86 cf       	rjmp	.-244    	; 0x354a <__fp_inf>
    363e:	99 cf       	rjmp	.-206    	; 0x3572 <__fp_nan>
    3640:	11 24       	eor	r1, r1
    3642:	cb cf       	rjmp	.-106    	; 0x35da <__fp_szero>

00003644 <__mulsf3x>:
    3644:	00 df       	rcall	.-512    	; 0x3446 <__fp_split3>
    3646:	a0 f3       	brcs	.-24     	; 0x3630 <__fp_powser+0x4a>

00003648 <__mulsf3_pse>:
    3648:	95 9f       	mul	r25, r21
    364a:	d1 f3       	breq	.-12     	; 0x3640 <__fp_powser+0x5a>
    364c:	95 0f       	add	r25, r21
    364e:	50 e0       	ldi	r21, 0x00	; 0
    3650:	55 1f       	adc	r21, r21
    3652:	62 9f       	mul	r22, r18
    3654:	f0 01       	movw	r30, r0
    3656:	72 9f       	mul	r23, r18
    3658:	bb 27       	eor	r27, r27
    365a:	f0 0d       	add	r31, r0
    365c:	b1 1d       	adc	r27, r1
    365e:	63 9f       	mul	r22, r19
    3660:	aa 27       	eor	r26, r26
    3662:	f0 0d       	add	r31, r0
    3664:	b1 1d       	adc	r27, r1
    3666:	aa 1f       	adc	r26, r26
    3668:	64 9f       	mul	r22, r20
    366a:	66 27       	eor	r22, r22
    366c:	b0 0d       	add	r27, r0
    366e:	a1 1d       	adc	r26, r1
    3670:	66 1f       	adc	r22, r22
    3672:	82 9f       	mul	r24, r18
    3674:	22 27       	eor	r18, r18
    3676:	b0 0d       	add	r27, r0
    3678:	a1 1d       	adc	r26, r1
    367a:	62 1f       	adc	r22, r18
    367c:	73 9f       	mul	r23, r19
    367e:	b0 0d       	add	r27, r0
    3680:	a1 1d       	adc	r26, r1
    3682:	62 1f       	adc	r22, r18
    3684:	83 9f       	mul	r24, r19
    3686:	a0 0d       	add	r26, r0
    3688:	61 1d       	adc	r22, r1
    368a:	22 1f       	adc	r18, r18
    368c:	74 9f       	mul	r23, r20
    368e:	33 27       	eor	r19, r19
    3690:	a0 0d       	add	r26, r0
    3692:	61 1d       	adc	r22, r1
    3694:	23 1f       	adc	r18, r19
    3696:	84 9f       	mul	r24, r20
    3698:	60 0d       	add	r22, r0
    369a:	21 1d       	adc	r18, r1
    369c:	82 2f       	mov	r24, r18
    369e:	76 2f       	mov	r23, r22
    36a0:	6a 2f       	mov	r22, r26
    36a2:	11 24       	eor	r1, r1
    36a4:	9f 57       	subi	r25, 0x7F	; 127
    36a6:	50 40       	sbci	r21, 0x00	; 0
    36a8:	8a f0       	brmi	.+34     	; 0x36cc <__mulsf3_pse+0x84>
    36aa:	e1 f0       	breq	.+56     	; 0x36e4 <__mulsf3_pse+0x9c>
    36ac:	88 23       	and	r24, r24
    36ae:	4a f0       	brmi	.+18     	; 0x36c2 <__mulsf3_pse+0x7a>
    36b0:	ee 0f       	add	r30, r30
    36b2:	ff 1f       	adc	r31, r31
    36b4:	bb 1f       	adc	r27, r27
    36b6:	66 1f       	adc	r22, r22
    36b8:	77 1f       	adc	r23, r23
    36ba:	88 1f       	adc	r24, r24
    36bc:	91 50       	subi	r25, 0x01	; 1
    36be:	50 40       	sbci	r21, 0x00	; 0
    36c0:	a9 f7       	brne	.-22     	; 0x36ac <__mulsf3_pse+0x64>
    36c2:	9e 3f       	cpi	r25, 0xFE	; 254
    36c4:	51 05       	cpc	r21, r1
    36c6:	70 f0       	brcs	.+28     	; 0x36e4 <__mulsf3_pse+0x9c>
    36c8:	40 cf       	rjmp	.-384    	; 0x354a <__fp_inf>
    36ca:	87 cf       	rjmp	.-242    	; 0x35da <__fp_szero>
    36cc:	5f 3f       	cpi	r21, 0xFF	; 255
    36ce:	ec f3       	brlt	.-6      	; 0x36ca <__mulsf3_pse+0x82>
    36d0:	98 3e       	cpi	r25, 0xE8	; 232
    36d2:	dc f3       	brlt	.-10     	; 0x36ca <__mulsf3_pse+0x82>
    36d4:	86 95       	lsr	r24
    36d6:	77 95       	ror	r23
    36d8:	67 95       	ror	r22
    36da:	b7 95       	ror	r27
    36dc:	f7 95       	ror	r31
    36de:	e7 95       	ror	r30
    36e0:	9f 5f       	subi	r25, 0xFF	; 255
    36e2:	c1 f7       	brne	.-16     	; 0x36d4 <__mulsf3_pse+0x8c>
    36e4:	fe 2b       	or	r31, r30
    36e6:	88 0f       	add	r24, r24
    36e8:	91 1d       	adc	r25, r1
    36ea:	96 95       	lsr	r25
    36ec:	87 95       	ror	r24
    36ee:	97 f9       	bld	r25, 7
    36f0:	08 95       	ret

000036f2 <_exit>:
    36f2:	f8 94       	cli

000036f4 <__stop_program>:
    36f4:	ff cf       	rjmp	.-2      	; 0x36f4 <__stop_program>
