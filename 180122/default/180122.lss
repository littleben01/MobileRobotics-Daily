
180122.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b8  00800100  000031fa  0000328e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  008002b8  008002b8  00003446  2**0
                  ALLOC
  3 .stab         00001cc8  00000000  00000000  00003448  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000064a  00000000  00000000  00005110  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  0000575a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000005c8  00000000  00000000  0000599a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003992  00000000  00000000  00005f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001b07  00000000  00000000  000098f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002b69  00000000  00000000  0000b3fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000490  00000000  00000000  0000df64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000774  00000000  00000000  0000e3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001e7f  00000000  00000000  0000eb68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000007fb  00000000  00000000  000109e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  000111e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <__vector_14>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 45 10 	jmp	0x208a	; 0x208a <__vector_18>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_30>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <Turn_and_Drive+0x140>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d0 e1       	ldi	r29, 0x10	; 16
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	12 e0       	ldi	r17, 0x02	; 2
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	ea ef       	ldi	r30, 0xFA	; 250
      be:	f1 e3       	ldi	r31, 0x31	; 49
      c0:	00 e0       	ldi	r16, 0x00	; 0
      c2:	0b bf       	out	0x3b, r16	; 59
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
      c6:	07 90       	elpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a8 3b       	cpi	r26, 0xB8	; 184
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
      d0:	13 e0       	ldi	r17, 0x03	; 3
      d2:	a8 eb       	ldi	r26, 0xB8	; 184
      d4:	b2 e0       	ldi	r27, 0x02	; 2
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	a4 30       	cpi	r26, 0x04	; 4
      dc:	b1 07       	cpc	r27, r17
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <main>
      e4:	0c 94 fb 18 	jmp	0x31f6	; 0x31f6 <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <MCU_init>:
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART1 Receiver: On
	// USART1 Transmitter: On
	// USART1 Mode: Asynchronous
	// USART1 Baud Rate: 9600
	UCSR1A=0x00;
      ec:	10 92 9b 00 	sts	0x009B, r1
	UCSR1B=0x98;
      f0:	88 e9       	ldi	r24, 0x98	; 152
      f2:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C=0x06;
      f6:	86 e0       	ldi	r24, 0x06	; 6
      f8:	80 93 9d 00 	sts	0x009D, r24
	UBRR1H=0x00;
      fc:	10 92 98 00 	sts	0x0098, r1
	UBRR1L=0x5F;
     100:	8f e5       	ldi	r24, 0x5F	; 95
     102:	80 93 99 00 	sts	0x0099, r24

	sei();
     106:	78 94       	sei
}
     108:	08 95       	ret

0000010a <__vector_30>:

ISR(USART1_RX_vect)
{
     10a:	1f 92       	push	r1
     10c:	0f 92       	push	r0
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	0f 92       	push	r0
     112:	11 24       	eor	r1, r1
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
	char data;
	
	data=UDR1;
     118:	90 91 9c 00 	lds	r25, 0x009C
	while(!(UCSR1A&0xB8)); //수신완료 및 에러 검출되지 않을시
     11c:	80 91 9b 00 	lds	r24, 0x009B
     120:	88 7b       	andi	r24, 0xB8	; 184
     122:	e1 f3       	breq	.-8      	; 0x11c <__vector_30+0x12>
	rx1_flg=1;              //수신완료 플레그 set
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	80 93 b8 02 	sts	0x02B8, r24
	rx1_buff=data;	
     12a:	90 93 b9 02 	sts	0x02B9, r25
}
     12e:	9f 91       	pop	r25
     130:	8f 91       	pop	r24
     132:	0f 90       	pop	r0
     134:	0f be       	out	0x3f, r0	; 63
     136:	0f 90       	pop	r0
     138:	1f 90       	pop	r1
     13a:	18 95       	reti

0000013c <getchar1>:

char getchar1(void)  //uart 수신하기
{
	char data;
	
	data=rx1_buff;
     13c:	80 91 b9 02 	lds	r24, 0x02B9
	rx1_buff=0;
     140:	10 92 b9 02 	sts	0x02B9, r1
	cli();           //글로벌 인터럽트 disable
     144:	f8 94       	cli
	rx1_flg=0;       //수신완료 플레그 reset
     146:	10 92 b8 02 	sts	0x02B8, r1
	sei();           //글로벌 인터럽트 enable          
     14a:	78 94       	sei
	return data;     //수신데이터 반환
}
     14c:	08 95       	ret

0000014e <putchar1>:

void putchar1(char data) //uart 송신화기
{
	while(!(UCSR1A&0x20));  //송신 준비 완료시
     14e:	90 91 9b 00 	lds	r25, 0x009B
     152:	95 ff       	sbrs	r25, 5
     154:	fc cf       	rjmp	.-8      	; 0x14e <putchar1>
	UDR1=data;              //송신 버퍼에 데이터 쓰기
     156:	80 93 9c 00 	sts	0x009C, r24
}
     15a:	08 95       	ret

0000015c <Interface_init>:
// Parameter : 없음
// Return    : 없음
void Interface_init(void)
{
    // LCD / EX I/O Expander
	TWDR = 0xFF;
     15c:	8f ef       	ldi	r24, 0xFF	; 255
     15e:	80 93 73 00 	sts	0x0073, r24
	TWBR = 0x48;
     162:	88 e4       	ldi	r24, 0x48	; 72
     164:	80 93 70 00 	sts	0x0070, r24
}
     168:	08 95       	ret

0000016a <lcd_write_data>:
//          data - 전송할 한바이트 데이터
// Return    : 없음
void lcd_write_data(unsigned char data)
{
	// 시작
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     16a:	94 ea       	ldi	r25, 0xA4	; 164
     16c:	90 93 74 00 	sts	0x0074, r25
	// 준비상태 체크
    while(!(TWCR & (1 << TWINT)));
     170:	90 91 74 00 	lds	r25, 0x0074
     174:	97 ff       	sbrs	r25, 7
     176:	fc cf       	rjmp	.-8      	; 0x170 <lcd_write_data+0x6>
	
	// 주소 전송
    TWDR = SLA << 1;
     178:	9e e0       	ldi	r25, 0x0E	; 14
     17a:	90 93 73 00 	sts	0x0073, r25
	
	TWCR = (1 << TWINT) | (1 << TWEN);
     17e:	94 e8       	ldi	r25, 0x84	; 132
     180:	90 93 74 00 	sts	0x0074, r25
	while(!(TWCR & (1 << TWINT)));
     184:	90 91 74 00 	lds	r25, 0x0074
     188:	97 ff       	sbrs	r25, 7
     18a:	fc cf       	rjmp	.-8      	; 0x184 <lcd_write_data+0x1a>
	
	TWDR = data;
     18c:	80 93 73 00 	sts	0x0073, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
     190:	84 e8       	ldi	r24, 0x84	; 132
     192:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1 << TWINT)));
     196:	80 91 74 00 	lds	r24, 0x0074
     19a:	87 ff       	sbrs	r24, 7
     19c:	fc cf       	rjmp	.-8      	; 0x196 <lcd_write_data+0x2c>
	
    // 정지
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     19e:	84 e9       	ldi	r24, 0x94	; 148
     1a0:	80 93 74 00 	sts	0x0074, r24
}
     1a4:	08 95       	ret

000001a6 <lcd_display_str>:
// Parameter :
//          line   - 출력할 라인번호(0~3)
//          string - 출력할 문자열(최대 20자)
// Return    : 없음
void lcd_display_str(unsigned char Y_line, unsigned char X_line,char *string) //lcd 스트링데이터 쓰기
{
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <lcd_display_str+0xe>
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	08 2f       	mov	r16, r24
     1ba:	16 2f       	mov	r17, r22
    int i=X_line;

	if((Y_line<4) && (X_line<20)){
     1bc:	84 30       	cpi	r24, 0x04	; 4
     1be:	70 f5       	brcc	.+92     	; 0x21c <lcd_display_str+0x76>
     1c0:	64 31       	cpi	r22, 0x14	; 20
     1c2:	60 f5       	brcc	.+88     	; 0x21c <lcd_display_str+0x76>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     1c4:	8b e1       	ldi	r24, 0x1B	; 27
     1c6:	49 83       	std	Y+1, r20	; 0x01
     1c8:	5a 83       	std	Y+2, r21	; 0x02
     1ca:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1ce:	8c e4       	ldi	r24, 0x4C	; 76
     1d0:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     1d4:	81 2f       	mov	r24, r17
     1d6:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1da:	80 2f       	mov	r24, r16
     1dc:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e0:	80 e7       	ldi	r24, 0x70	; 112
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	01 97       	sbiw	r24, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_display_str+0x3e>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_display_str+0x44>
     1ea:	e1 2e       	mov	r14, r17
     1ec:	ff 24       	eor	r15, r15
     1ee:	49 81       	ldd	r20, Y+1	; 0x01
     1f0:	5a 81       	ldd	r21, Y+2	; 0x02
     1f2:	04 2f       	mov	r16, r20
     1f4:	15 2f       	mov	r17, r21
     1f6:	06 c0       	rjmp	.+12     	; 0x204 <lcd_display_str+0x5e>
		_delay_us(100);
    	while(((i++)<20)&&*string){
        	lcd_write_data(*string++);
     1f8:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1fc:	94 ec       	ldi	r25, 0xC4	; 196
     1fe:	9a 95       	dec	r25
     200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_display_str+0x58>
     202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_display_str+0x5e>

	if((Y_line<4) && (X_line<20)){
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
		lcd_write_data(X_line); lcd_write_data(Y_line);
		_delay_us(100);
    	while(((i++)<20)&&*string){
     204:	e4 e1       	ldi	r30, 0x14	; 20
     206:	ee 16       	cp	r14, r30
     208:	f1 04       	cpc	r15, r1
     20a:	44 f4       	brge	.+16     	; 0x21c <lcd_display_str+0x76>
     20c:	f8 01       	movw	r30, r16
     20e:	81 91       	ld	r24, Z+
     210:	8f 01       	movw	r16, r30
     212:	08 94       	sec
     214:	e1 1c       	adc	r14, r1
     216:	f1 1c       	adc	r15, r1
     218:	88 23       	and	r24, r24
     21a:	71 f7       	brne	.-36     	; 0x1f8 <lcd_display_str+0x52>
        	lcd_write_data(*string++);
			_delay_us(40);
		}
    }
}
     21c:	0f 90       	pop	r0
     21e:	0f 90       	pop	r0
     220:	cf 91       	pop	r28
     222:	df 91       	pop	r29
     224:	1f 91       	pop	r17
     226:	0f 91       	pop	r16
     228:	ff 90       	pop	r15
     22a:	ef 90       	pop	r14
     22c:	08 95       	ret

0000022e <write_lcd_data>:

void write_lcd_data(unsigned char Y_line, unsigned char X_line, long data) //lcd데이터 쓰기
{
     22e:	1f 93       	push	r17
     230:	df 93       	push	r29
     232:	cf 93       	push	r28
     234:	00 d0       	rcall	.+0      	; 0x236 <write_lcd_data+0x8>
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	18 2f       	mov	r17, r24
    if(Y_line<4 && X_line<20){
     23c:	84 30       	cpi	r24, 0x04	; 4
     23e:	f0 f4       	brcc	.+60     	; 0x27c <write_lcd_data+0x4e>
     240:	64 31       	cpi	r22, 0x14	; 20
     242:	e0 f4       	brcc	.+56     	; 0x27c <write_lcd_data+0x4e>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     244:	8b e1       	ldi	r24, 0x1B	; 27
     246:	2a 83       	std	Y+2, r18	; 0x02
     248:	69 83       	std	Y+1, r22	; 0x01
     24a:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     24e:	8c e4       	ldi	r24, 0x4C	; 76
     250:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     254:	69 81       	ldd	r22, Y+1	; 0x01
     256:	86 2f       	mov	r24, r22
     258:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     25c:	81 2f       	mov	r24, r17
     25e:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     262:	80 e7       	ldi	r24, 0x70	; 112
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <write_lcd_data+0x38>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <write_lcd_data+0x3e>
		_delay_us(100);
		lcd_write_data(data);
     26c:	2a 81       	ldd	r18, Y+2	; 0x02
     26e:	82 2f       	mov	r24, r18
     270:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     274:	94 ec       	ldi	r25, 0xC4	; 196
     276:	9a 95       	dec	r25
     278:	f1 f7       	brne	.-4      	; 0x276 <write_lcd_data+0x48>
     27a:	00 c0       	rjmp	.+0      	; 0x27c <write_lcd_data+0x4e>
		_delay_us(40);
    }
}
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	cf 91       	pop	r28
     282:	df 91       	pop	r29
     284:	1f 91       	pop	r17
     286:	08 95       	ret

00000288 <lcd_clear_screen>:

void lcd_clear_screen(void){ lcd_write_data(0x1B); lcd_write_data(0x43); _delay_ms(20); } //lcd전체화면 클리어
     288:	8b e1       	ldi	r24, 0x1B	; 27
     28a:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     28e:	83 e4       	ldi	r24, 0x43	; 67
     290:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     294:	86 e6       	ldi	r24, 0x66	; 102
     296:	96 ee       	ldi	r25, 0xE6	; 230
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	81 50       	subi	r24, 0x01	; 1
     29c:	90 40       	sbci	r25, 0x00	; 0
     29e:	a0 40       	sbci	r26, 0x00	; 0
     2a0:	e1 f7       	brne	.-8      	; 0x29a <lcd_clear_screen+0x12>
     2a2:	08 95       	ret

000002a4 <display_char>:
void display_char(unsigned char line, unsigned char col, unsigned char data) ////lcd char 데이터 표시
{
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	18 2f       	mov	r17, r24
     2ae:	f6 2e       	mov	r15, r22
     2b0:	e4 2e       	mov	r14, r20
    unsigned char val=0, val_buff=0;

	val=data;   

	val_buff=val/100;             
     2b2:	84 2f       	mov	r24, r20
     2b4:	64 e6       	ldi	r22, 0x64	; 100
     2b6:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <__udivmodqi4>
     2ba:	08 2f       	mov	r16, r24
	write_lcd_data(line, col, val_buff+'0' );
     2bc:	28 2f       	mov	r18, r24
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	20 5d       	subi	r18, 0xD0	; 208
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
     2c4:	44 27       	eor	r20, r20
     2c6:	37 fd       	sbrc	r19, 7
     2c8:	40 95       	com	r20
     2ca:	54 2f       	mov	r21, r20
     2cc:	81 2f       	mov	r24, r17
     2ce:	6f 2d       	mov	r22, r15
     2d0:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
	val=val-(100*val_buff);
     2d4:	8c e9       	ldi	r24, 0x9C	; 156
     2d6:	08 9f       	mul	r16, r24
     2d8:	00 2d       	mov	r16, r0
     2da:	11 24       	eor	r1, r1
     2dc:	0e 0d       	add	r16, r14

	val_buff=val/10;
     2de:	80 2f       	mov	r24, r16
     2e0:	6a e0       	ldi	r22, 0x0A	; 10
     2e2:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <__udivmodqi4>
     2e6:	e8 2e       	mov	r14, r24
	write_lcd_data(line, 1+col, val_buff+'0' );
     2e8:	6f 2d       	mov	r22, r15
     2ea:	6f 5f       	subi	r22, 0xFF	; 255
     2ec:	28 2f       	mov	r18, r24
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	20 5d       	subi	r18, 0xD0	; 208
     2f2:	3f 4f       	sbci	r19, 0xFF	; 255
     2f4:	44 27       	eor	r20, r20
     2f6:	37 fd       	sbrc	r19, 7
     2f8:	40 95       	com	r20
     2fa:	54 2f       	mov	r21, r20
     2fc:	81 2f       	mov	r24, r17
     2fe:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
	val=val-(10*val_buff);

	write_lcd_data(line, 2+col, val+'0');
     302:	6f 2d       	mov	r22, r15
     304:	6e 5f       	subi	r22, 0xFE	; 254
	write_lcd_data(line, col, val_buff+'0' );
	val=val-(100*val_buff);

	val_buff=val/10;
	write_lcd_data(line, 1+col, val_buff+'0' );
	val=val-(10*val_buff);
     306:	26 ef       	ldi	r18, 0xF6	; 246
     308:	e2 9e       	mul	r14, r18
     30a:	20 2d       	mov	r18, r0
     30c:	11 24       	eor	r1, r1
     30e:	20 0f       	add	r18, r16

	write_lcd_data(line, 2+col, val+'0');
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	20 5d       	subi	r18, 0xD0	; 208
     314:	3f 4f       	sbci	r19, 0xFF	; 255
     316:	44 27       	eor	r20, r20
     318:	37 fd       	sbrc	r19, 7
     31a:	40 95       	com	r20
     31c:	54 2f       	mov	r21, r20
     31e:	81 2f       	mov	r24, r17
     320:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
}
     324:	1f 91       	pop	r17
     326:	0f 91       	pop	r16
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	08 95       	ret

0000032e <Capt>:

int LINE[18] = {100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};

int Capt()
{
	if(Camera_Cmd(1,102) != 0) return 1;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	66 e6       	ldi	r22, 0x66	; 102
     332:	0e 94 13 10 	call	0x2026	; 0x2026 <Camera_Cmd>
     336:	21 e0       	ldi	r18, 0x01	; 1
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	88 23       	and	r24, r24
     33c:	11 f4       	brne	.+4      	; 0x342 <Capt+0x14>
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
	else return 0;
}
     342:	c9 01       	movw	r24, r18
     344:	08 95       	ret

00000346 <NextDir>:
}


int NextDir(int nowdir, int nextdir)
{
	if(nowdir == EAST && nextdir == SOUTH) return -90;
     346:	00 97       	sbiw	r24, 0x00	; 0
     348:	21 f4       	brne	.+8      	; 0x352 <NextDir+0xc>
     34a:	63 30       	cpi	r22, 0x03	; 3
     34c:	71 05       	cpc	r23, r1
     34e:	39 f4       	brne	.+14     	; 0x35e <NextDir+0x18>
     350:	12 c0       	rjmp	.+36     	; 0x376 <NextDir+0x30>
	if(nowdir == NORTH && nextdir == EAST) return -90;
     352:	81 30       	cpi	r24, 0x01	; 1
     354:	91 05       	cpc	r25, r1
     356:	19 f4       	brne	.+6      	; 0x35e <NextDir+0x18>
     358:	61 15       	cp	r22, r1
     35a:	71 05       	cpc	r23, r1
     35c:	61 f0       	breq	.+24     	; 0x376 <NextDir+0x30>
	return ((nowdir-nextdir)*90);
     35e:	86 1b       	sub	r24, r22
     360:	97 0b       	sbc	r25, r23
     362:	4a e5       	ldi	r20, 0x5A	; 90
     364:	50 e0       	ldi	r21, 0x00	; 0
     366:	84 9f       	mul	r24, r20
     368:	90 01       	movw	r18, r0
     36a:	85 9f       	mul	r24, r21
     36c:	30 0d       	add	r19, r0
     36e:	94 9f       	mul	r25, r20
     370:	30 0d       	add	r19, r0
     372:	11 24       	eor	r1, r1
     374:	02 c0       	rjmp	.+4      	; 0x37a <NextDir+0x34>


int NextDir(int nowdir, int nextdir)
{
	if(nowdir == EAST && nextdir == SOUTH) return -90;
	if(nowdir == NORTH && nextdir == EAST) return -90;
     376:	26 ea       	ldi	r18, 0xA6	; 166
     378:	3f ef       	ldi	r19, 0xFF	; 255
	return ((nowdir-nextdir)*90);
}
     37a:	c9 01       	movw	r24, r18
     37c:	08 95       	ret

0000037e <NextMove>:

int NextMove(int nowcross)
{
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
	for(int i = 0;i < 3;i++)
	{
		if(LINE[cross[nowcross][EAST]] == i)
     38a:	9c 01       	movw	r18, r24
     38c:	03 e0       	ldi	r16, 0x03	; 3
     38e:	22 0f       	add	r18, r18
     390:	33 1f       	adc	r19, r19
     392:	0a 95       	dec	r16
     394:	e1 f7       	brne	.-8      	; 0x38e <NextMove+0x10>
     396:	28 5f       	subi	r18, 0xF8	; 248
     398:	3e 4f       	sbci	r19, 0xFE	; 254
     39a:	d9 01       	movw	r26, r18
     39c:	6d 91       	ld	r22, X+
     39e:	7d 91       	ld	r23, X+
     3a0:	fb 01       	movw	r30, r22
     3a2:	ee 0f       	add	r30, r30
     3a4:	ff 1f       	adc	r31, r31
     3a6:	e8 59       	subi	r30, 0x98	; 152
     3a8:	fe 4f       	sbci	r31, 0xFE	; 254
     3aa:	40 81       	ld	r20, Z
     3ac:	51 81       	ldd	r21, Z+1	; 0x01
	return ((nowdir-nextdir)*90);
}

int NextMove(int nowcross)
{
	for(int i = 0;i < 3;i++)
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
		if(LINE[cross[nowcross][NORTH]] == i)
		{
			LINE[cross[nowcross][NORTH]]++;
			return NORTH;
		}
		if(LINE[cross[nowcross][WEST]] == i)
     3b2:	89 01       	movw	r16, r18
     3b4:	0c 5f       	subi	r16, 0xFC	; 252
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			LINE[cross[nowcross][WEST]]++;
			return WEST;
		}
		if(LINE[cross[nowcross][SOUTH]] == i)
     3b8:	e6 e0       	ldi	r30, 0x06	; 6
     3ba:	ee 2e       	mov	r14, r30
     3bc:	f1 2c       	mov	r15, r1
     3be:	e2 0e       	add	r14, r18
     3c0:	f3 1e       	adc	r15, r19

int NextMove(int nowcross)
{
	for(int i = 0;i < 3;i++)
	{
		if(LINE[cross[nowcross][EAST]] == i)
     3c2:	48 17       	cp	r20, r24
     3c4:	59 07       	cpc	r21, r25
     3c6:	61 f4       	brne	.+24     	; 0x3e0 <NextMove+0x62>
		{
			LINE[cross[nowcross][EAST]]++;
     3c8:	fb 01       	movw	r30, r22
     3ca:	ee 0f       	add	r30, r30
     3cc:	ff 1f       	adc	r31, r31
     3ce:	e8 59       	subi	r30, 0x98	; 152
     3d0:	fe 4f       	sbci	r31, 0xFE	; 254
     3d2:	4f 5f       	subi	r20, 0xFF	; 255
     3d4:	5f 4f       	sbci	r21, 0xFF	; 255
     3d6:	51 83       	std	Z+1, r21	; 0x01
     3d8:	40 83       	st	Z, r20
			return EAST;
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	3e c0       	rjmp	.+124    	; 0x45c <NextMove+0xde>
		}
		if(LINE[cross[nowcross][NORTH]] == i)
     3e0:	ed 91       	ld	r30, X+
     3e2:	fc 91       	ld	r31, X
     3e4:	11 97       	sbiw	r26, 0x01	; 1
     3e6:	ee 0f       	add	r30, r30
     3e8:	ff 1f       	adc	r31, r31
     3ea:	e8 59       	subi	r30, 0x98	; 152
     3ec:	fe 4f       	sbci	r31, 0xFE	; 254
     3ee:	20 81       	ld	r18, Z
     3f0:	31 81       	ldd	r19, Z+1	; 0x01
     3f2:	28 17       	cp	r18, r24
     3f4:	39 07       	cpc	r19, r25
     3f6:	31 f4       	brne	.+12     	; 0x404 <NextMove+0x86>
		{
			LINE[cross[nowcross][NORTH]]++;
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	91 83       	std	Z+1, r25	; 0x01
     3fc:	80 83       	st	Z, r24
			return NORTH;
     3fe:	21 e0       	ldi	r18, 0x01	; 1
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	2c c0       	rjmp	.+88     	; 0x45c <NextMove+0xde>
		}
		if(LINE[cross[nowcross][WEST]] == i)
     404:	e8 01       	movw	r28, r16
     406:	e8 81       	ld	r30, Y
     408:	f9 81       	ldd	r31, Y+1	; 0x01
     40a:	ee 0f       	add	r30, r30
     40c:	ff 1f       	adc	r31, r31
     40e:	e8 59       	subi	r30, 0x98	; 152
     410:	fe 4f       	sbci	r31, 0xFE	; 254
     412:	20 81       	ld	r18, Z
     414:	31 81       	ldd	r19, Z+1	; 0x01
     416:	28 17       	cp	r18, r24
     418:	39 07       	cpc	r19, r25
     41a:	31 f4       	brne	.+12     	; 0x428 <NextMove+0xaa>
		{
			LINE[cross[nowcross][WEST]]++;
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	91 83       	std	Z+1, r25	; 0x01
     420:	80 83       	st	Z, r24
			return WEST;
     422:	22 e0       	ldi	r18, 0x02	; 2
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	1a c0       	rjmp	.+52     	; 0x45c <NextMove+0xde>
		}
		if(LINE[cross[nowcross][SOUTH]] == i)
     428:	e7 01       	movw	r28, r14
     42a:	e8 81       	ld	r30, Y
     42c:	f9 81       	ldd	r31, Y+1	; 0x01
     42e:	ee 0f       	add	r30, r30
     430:	ff 1f       	adc	r31, r31
     432:	e8 59       	subi	r30, 0x98	; 152
     434:	fe 4f       	sbci	r31, 0xFE	; 254
     436:	c0 81       	ld	r28, Z
     438:	d1 81       	ldd	r29, Z+1	; 0x01
     43a:	9c 01       	movw	r18, r24
     43c:	2f 5f       	subi	r18, 0xFF	; 255
     43e:	3f 4f       	sbci	r19, 0xFF	; 255
     440:	c8 17       	cp	r28, r24
     442:	d9 07       	cpc	r29, r25
     444:	29 f4       	brne	.+10     	; 0x450 <NextMove+0xd2>
		{
			LINE[cross[nowcross][SOUTH]]++;
     446:	31 83       	std	Z+1, r19	; 0x01
     448:	20 83       	st	Z, r18
			return SOUTH;
     44a:	23 e0       	ldi	r18, 0x03	; 3
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	06 c0       	rjmp	.+12     	; 0x45c <NextMove+0xde>
	return ((nowdir-nextdir)*90);
}

int NextMove(int nowcross)
{
	for(int i = 0;i < 3;i++)
     450:	c9 01       	movw	r24, r18
     452:	23 30       	cpi	r18, 0x03	; 3
     454:	31 05       	cpc	r19, r1
     456:	09 f0       	breq	.+2      	; 0x45a <NextMove+0xdc>
     458:	b4 cf       	rjmp	.-152    	; 0x3c2 <NextMove+0x44>
     45a:	01 c0       	rjmp	.+2      	; 0x45e <NextMove+0xe0>
		{
			LINE[cross[nowcross][SOUTH]]++;
			return SOUTH;
		}
	}
}
     45c:	c9 01       	movw	r24, r18
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	ff 90       	pop	r15
     468:	ef 90       	pop	r14
     46a:	08 95       	ret

0000046c <DumpCross>:

int DumpCross(int nowcross, int nextdir)
{
     46c:	9c 01       	movw	r18, r24
	if(nextdir == EAST) return (nowcross + 1);
     46e:	61 15       	cp	r22, r1
     470:	71 05       	cpc	r23, r1
     472:	19 f4       	brne	.+6      	; 0x47a <DumpCross+0xe>
     474:	2f 5f       	subi	r18, 0xFF	; 255
     476:	3f 4f       	sbci	r19, 0xFF	; 255
     478:	0e c0       	rjmp	.+28     	; 0x496 <DumpCross+0x2a>
	else if(nextdir == WEST) return (nowcross - 1);
     47a:	62 30       	cpi	r22, 0x02	; 2
     47c:	71 05       	cpc	r23, r1
     47e:	19 f4       	brne	.+6      	; 0x486 <DumpCross+0x1a>
     480:	21 50       	subi	r18, 0x01	; 1
     482:	30 40       	sbci	r19, 0x00	; 0
     484:	08 c0       	rjmp	.+16     	; 0x496 <DumpCross+0x2a>
	else if(nextdir == SOUTH) return (nowcross + 4);
     486:	63 30       	cpi	r22, 0x03	; 3
     488:	71 05       	cpc	r23, r1
     48a:	19 f4       	brne	.+6      	; 0x492 <DumpCross+0x26>
     48c:	2c 5f       	subi	r18, 0xFC	; 252
     48e:	3f 4f       	sbci	r19, 0xFF	; 255
     490:	02 c0       	rjmp	.+4      	; 0x496 <DumpCross+0x2a>
	else return (nowcross - 4);
     492:	24 50       	subi	r18, 0x04	; 4
     494:	30 40       	sbci	r19, 0x00	; 0
}
     496:	c9 01       	movw	r24, r18
     498:	08 95       	ret

0000049a <HolonomicW>:
	}
				
}


void HolonomicW(int f_agl, int f_speed, int fw_speed){
     49a:	2f 92       	push	r2
     49c:	3f 92       	push	r3
     49e:	4f 92       	push	r4
     4a0:	5f 92       	push	r5
     4a2:	6f 92       	push	r6
     4a4:	7f 92       	push	r7
     4a6:	8f 92       	push	r8
     4a8:	9f 92       	push	r9
     4aa:	af 92       	push	r10
     4ac:	bf 92       	push	r11
     4ae:	cf 92       	push	r12
     4b0:	df 92       	push	r13
     4b2:	ef 92       	push	r14
     4b4:	ff 92       	push	r15
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	df 93       	push	r29
     4bc:	cf 93       	push	r28
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
     4c2:	60 97       	sbiw	r28, 0x10	; 16
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	8c 01       	movw	r16, r24
     4d0:	7b 01       	movw	r14, r22
     4d2:	1a 01       	movw	r2, r20
	double V[3]={0,0,0};

	unsigned char i=0;

	// 좌표계 변환
	if(f_agl <= 180) DesiredDirection = 180 - f_agl;
     4d4:	85 3b       	cpi	r24, 0xB5	; 181
     4d6:	91 05       	cpc	r25, r1
     4d8:	1c f4       	brge	.+6      	; 0x4e0 <HolonomicW+0x46>
     4da:	64 eb       	ldi	r22, 0xB4	; 180
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <HolonomicW+0x4a>
	else if(f_agl > 180) DesiredDirection = 540 - f_agl;
     4e0:	6c e1       	ldi	r22, 0x1C	; 28
     4e2:	72 e0       	ldi	r23, 0x02	; 2
     4e4:	60 1b       	sub	r22, r16
     4e6:	71 0b       	sbc	r23, r17
	
	// 라디안 변환
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
     4e8:	88 27       	eor	r24, r24
     4ea:	77 fd       	sbrc	r23, 7
     4ec:	80 95       	com	r24
     4ee:	98 2f       	mov	r25, r24
     4f0:	0e 94 12 14 	call	0x2824	; 0x2824 <__floatsisf>
     4f4:	5b 01       	movw	r10, r22
     4f6:	6c 01       	movw	r12, r24
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	84 e3       	ldi	r24, 0x34	; 52
     4fe:	93 e4       	ldi	r25, 0x43	; 67
     500:	a6 01       	movw	r20, r12
     502:	95 01       	movw	r18, r10
     504:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
     508:	28 e9       	ldi	r18, 0x98	; 152
     50a:	39 ef       	ldi	r19, 0xF9	; 249
     50c:	4e e8       	ldi	r20, 0x8E	; 142
     50e:	5c e3       	ldi	r21, 0x3C	; 60
     510:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
	radianB = (90-(double)DesiredDirection) * 0.017453;

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
     514:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <cos>
     518:	3b 01       	movw	r6, r22
     51a:	4c 01       	movw	r8, r24
	if(f_agl <= 180) DesiredDirection = 180 - f_agl;
	else if(f_agl > 180) DesiredDirection = 540 - f_agl;
	
	// 라디안 변환
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
	radianB = (90-(double)DesiredDirection) * 0.017453;
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	84 eb       	ldi	r24, 0xB4	; 180
     522:	92 e4       	ldi	r25, 0x42	; 66
     524:	a6 01       	movw	r20, r12
     526:	95 01       	movw	r18, r10
     528:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
     52c:	28 e9       	ldi	r18, 0x98	; 152
     52e:	39 ef       	ldi	r19, 0xF9	; 249
     530:	4e e8       	ldi	r20, 0x8E	; 142
     532:	5c e3       	ldi	r21, 0x3C	; 60
     534:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
	Fy = f_speed * cos(radianB);
     538:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <cos>
     53c:	5b 01       	movw	r10, r22
     53e:	6c 01       	movw	r12, r24
	Fw=fw_speed;

	if(f_agl<0 || f_agl>=360){
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	08 36       	cpi	r16, 0x68	; 104
     544:	18 07       	cpc	r17, r24
     546:	28 f5       	brcc	.+74     	; 0x592 <HolonomicW+0xf8>
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
	radianB = (90-(double)DesiredDirection) * 0.017453;

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
     548:	b7 01       	movw	r22, r14
     54a:	88 27       	eor	r24, r24
     54c:	77 fd       	sbrc	r23, 7
     54e:	80 95       	com	r24
     550:	98 2f       	mov	r25, r24
     552:	0e 94 12 14 	call	0x2824	; 0x2824 <__floatsisf>
     556:	7b 01       	movw	r14, r22
     558:	8c 01       	movw	r16, r24
     55a:	a4 01       	movw	r20, r8
     55c:	93 01       	movw	r18, r6
     55e:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
     562:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__fixsfsi>
     566:	66 2e       	mov	r6, r22
     568:	77 2e       	mov	r7, r23
     56a:	88 2e       	mov	r8, r24
     56c:	99 2e       	mov	r9, r25
	Fy = f_speed * cos(radianB);
     56e:	c8 01       	movw	r24, r16
     570:	b7 01       	movw	r22, r14
     572:	a6 01       	movw	r20, r12
     574:	95 01       	movw	r18, r10
     576:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
     57a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__fixsfsi>
     57e:	e6 2e       	mov	r14, r22
     580:	f7 2e       	mov	r15, r23
     582:	08 2f       	mov	r16, r24
     584:	19 2f       	mov	r17, r25
	Fw=fw_speed;
     586:	51 01       	movw	r10, r2
     588:	cc 24       	eor	r12, r12
     58a:	b7 fc       	sbrc	r11, 7
     58c:	c0 94       	com	r12
     58e:	dc 2c       	mov	r13, r12
     590:	11 c0       	rjmp	.+34     	; 0x5b4 <HolonomicW+0x11a>

	if(f_agl<0 || f_agl>=360){
		if(f_agl<0)Fw = -f_speed;
     592:	17 ff       	sbrs	r17, 7
     594:	04 c0       	rjmp	.+8      	; 0x59e <HolonomicW+0x104>
     596:	f0 94       	com	r15
     598:	e1 94       	neg	r14
     59a:	f1 08       	sbc	r15, r1
     59c:	f3 94       	inc	r15
		else if(f_agl>=360)Fw = f_speed;
     59e:	57 01       	movw	r10, r14
     5a0:	cc 24       	eor	r12, r12
     5a2:	b7 fc       	sbrc	r11, 7
     5a4:	c0 94       	com	r12
     5a6:	dc 2c       	mov	r13, r12
		Fx=0;
		Fy=0;
     5a8:	ee 24       	eor	r14, r14
     5aa:	ff 24       	eor	r15, r15
     5ac:	87 01       	movw	r16, r14
	Fw=fw_speed;

	if(f_agl<0 || f_agl>=360){
		if(f_agl<0)Fw = -f_speed;
		else if(f_agl>=360)Fw = f_speed;
		Fx=0;
     5ae:	66 24       	eor	r6, r6
     5b0:	77 24       	eor	r7, r7
     5b2:	43 01       	movw	r8, r6
		Fy=0;
	}
		
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
     5b4:	c4 01       	movw	r24, r8
     5b6:	b3 01       	movw	r22, r6
     5b8:	0e 94 12 14 	call	0x2824	; 0x2824 <__floatsisf>
     5bc:	6d 87       	std	Y+13, r22	; 0x0d
     5be:	7e 87       	std	Y+14, r23	; 0x0e
     5c0:	8f 87       	std	Y+15, r24	; 0x0f
     5c2:	98 8b       	std	Y+16, r25	; 0x10
     5c4:	c8 01       	movw	r24, r16
     5c6:	b7 01       	movw	r22, r14
     5c8:	0e 94 12 14 	call	0x2824	; 0x2824 <__floatsisf>
     5cc:	1b 01       	movw	r2, r22
     5ce:	2c 01       	movw	r4, r24
     5d0:	22 e0       	ldi	r18, 0x02	; 2
     5d2:	3b e2       	ldi	r19, 0x2B	; 43
     5d4:	47 e0       	ldi	r20, 0x07	; 7
     5d6:	5d e3       	ldi	r21, 0x3D	; 61
     5d8:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
     5dc:	16 2f       	mov	r17, r22
     5de:	f7 2e       	mov	r15, r23
     5e0:	98 2e       	mov	r9, r24
     5e2:	89 2e       	mov	r8, r25
     5e4:	c6 01       	movw	r24, r12
     5e6:	b5 01       	movw	r22, r10
     5e8:	0e 94 12 14 	call	0x2824	; 0x2824 <__floatsisf>
     5ec:	2e e4       	ldi	r18, 0x4E	; 78
     5ee:	32 e6       	ldi	r19, 0x62	; 98
     5f0:	40 e1       	ldi	r20, 0x10	; 16
     5f2:	5e e3       	ldi	r21, 0x3E	; 62
     5f4:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
     5f8:	a6 2e       	mov	r10, r22
     5fa:	e7 2e       	mov	r14, r23
     5fc:	08 2f       	mov	r16, r24
     5fe:	69 2e       	mov	r6, r25
     600:	6d 85       	ldd	r22, Y+13	; 0x0d
     602:	7e 85       	ldd	r23, Y+14	; 0x0e
     604:	8f 85       	ldd	r24, Y+15	; 0x0f
     606:	98 89       	ldd	r25, Y+16	; 0x10
     608:	25 ed       	ldi	r18, 0xD5	; 213
     60a:	38 e7       	ldi	r19, 0x78	; 120
     60c:	49 e6       	ldi	r20, 0x69	; 105
     60e:	5d e3       	ldi	r21, 0x3D	; 61
     610:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
     614:	f4 01       	movw	r30, r8
     616:	21 2f       	mov	r18, r17
     618:	3f 2d       	mov	r19, r15
     61a:	4f 2f       	mov	r20, r31
     61c:	5e 2f       	mov	r21, r30
     61e:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
     622:	2a 2d       	mov	r18, r10
     624:	3e 2d       	mov	r19, r14
     626:	40 2f       	mov	r20, r16
     628:	56 2d       	mov	r21, r6
     62a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
     636:	c2 01       	movw	r24, r4
     638:	b1 01       	movw	r22, r2
     63a:	28 eb       	ldi	r18, 0xB8	; 184
     63c:	3e e1       	ldi	r19, 0x1E	; 30
     63e:	45 e8       	ldi	r20, 0x85	; 133
     640:	5d eb       	ldi	r21, 0xBD	; 189
     642:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
     646:	2a 2d       	mov	r18, r10
     648:	3e 2d       	mov	r19, r14
     64a:	40 2f       	mov	r20, r16
     64c:	56 2d       	mov	r21, r6
     64e:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
     652:	6d 83       	std	Y+5, r22	; 0x05
     654:	7e 83       	std	Y+6, r23	; 0x06
     656:	8f 83       	std	Y+7, r24	; 0x07
     658:	98 87       	std	Y+8, r25	; 0x08
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
     65a:	6d 85       	ldd	r22, Y+13	; 0x0d
     65c:	7e 85       	ldd	r23, Y+14	; 0x0e
     65e:	8f 85       	ldd	r24, Y+15	; 0x0f
     660:	98 89       	ldd	r25, Y+16	; 0x10
     662:	25 ed       	ldi	r18, 0xD5	; 213
     664:	38 e7       	ldi	r19, 0x78	; 120
     666:	49 e6       	ldi	r20, 0x69	; 105
     668:	5d eb       	ldi	r21, 0xBD	; 189
     66a:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
     66e:	f4 01       	movw	r30, r8
     670:	21 2f       	mov	r18, r17
     672:	3f 2d       	mov	r19, r15
     674:	4f 2f       	mov	r20, r31
     676:	5e 2f       	mov	r21, r30
     678:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
     67c:	2a 2d       	mov	r18, r10
     67e:	3e 2d       	mov	r19, r14
     680:	40 2f       	mov	r20, r16
     682:	56 2d       	mov	r21, r6
     684:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
     688:	69 87       	std	Y+9, r22	; 0x09
     68a:	7a 87       	std	Y+10, r23	; 0x0a
     68c:	8b 87       	std	Y+11, r24	; 0x0b
     68e:	9c 87       	std	Y+12, r25	; 0x0c
     690:	8e 01       	movw	r16, r28
     692:	0f 5f       	subi	r16, 0xFF	; 255
     694:	1f 4f       	sbci	r17, 0xFF	; 255
	
    for(i=0;i<3;++i){
     696:	ee 24       	eor	r14, r14
	}
				
}


void HolonomicW(int f_agl, int f_speed, int fw_speed){
     698:	58 01       	movw	r10, r16
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
	
    for(i=0;i<3;++i){
		if(V[i]>=40)V[i]=40;
     69a:	f8 01       	movw	r30, r16
     69c:	60 81       	ld	r22, Z
     69e:	71 81       	ldd	r23, Z+1	; 0x01
     6a0:	82 81       	ldd	r24, Z+2	; 0x02
     6a2:	93 81       	ldd	r25, Z+3	; 0x03
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	40 e2       	ldi	r20, 0x20	; 32
     6aa:	52 e4       	ldi	r21, 0x42	; 66
     6ac:	0e 94 82 13 	call	0x2704	; 0x2704 <__gesf2>
     6b0:	87 fd       	sbrc	r24, 7
     6b2:	09 c0       	rjmp	.+18     	; 0x6c6 <HolonomicW+0x22c>
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	a0 e2       	ldi	r26, 0x20	; 32
     6ba:	b2 e4       	ldi	r27, 0x42	; 66
     6bc:	f8 01       	movw	r30, r16
     6be:	80 83       	st	Z, r24
     6c0:	91 83       	std	Z+1, r25	; 0x01
     6c2:	a2 83       	std	Z+2, r26	; 0x02
     6c4:	b3 83       	std	Z+3, r27	; 0x03
		if(V[i]<=(-40))V[i]=-40;
     6c6:	f8 01       	movw	r30, r16
     6c8:	60 81       	ld	r22, Z
     6ca:	71 81       	ldd	r23, Z+1	; 0x01
     6cc:	82 81       	ldd	r24, Z+2	; 0x02
     6ce:	93 81       	ldd	r25, Z+3	; 0x03
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	40 e2       	ldi	r20, 0x20	; 32
     6d6:	52 ec       	ldi	r21, 0xC2	; 194
     6d8:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__lesf2>
     6dc:	18 16       	cp	r1, r24
     6de:	4c f0       	brlt	.+18     	; 0x6f2 <HolonomicW+0x258>
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	a0 e2       	ldi	r26, 0x20	; 32
     6e6:	b2 ec       	ldi	r27, 0xC2	; 194
     6e8:	f8 01       	movw	r30, r16
     6ea:	80 83       	st	Z, r24
     6ec:	91 83       	std	Z+1, r25	; 0x01
     6ee:	a2 83       	std	Z+2, r26	; 0x02
     6f0:	b3 83       	std	Z+3, r27	; 0x03
     6f2:	0c 5f       	subi	r16, 0xFC	; 252
     6f4:	1f 4f       	sbci	r17, 0xFF	; 255
		SetVelocity(i, V[i]*65536);
     6f6:	f5 01       	movw	r30, r10
     6f8:	60 81       	ld	r22, Z
     6fa:	71 81       	ldd	r23, Z+1	; 0x01
     6fc:	82 81       	ldd	r24, Z+2	; 0x02
     6fe:	93 81       	ldd	r25, Z+3	; 0x03
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	40 e8       	ldi	r20, 0x80	; 128
     706:	57 e4       	ldi	r21, 0x47	; 71
     708:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
     70c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__fixsfsi>
     710:	ab 01       	movw	r20, r22
     712:	bc 01       	movw	r22, r24
     714:	8e 2d       	mov	r24, r14
     716:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <SetVelocity>
		
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
	
    for(i=0;i<3;++i){
     71a:	e3 94       	inc	r14
     71c:	fe 2d       	mov	r31, r14
     71e:	f3 30       	cpi	r31, 0x03	; 3
     720:	09 f0       	breq	.+2      	; 0x724 <HolonomicW+0x28a>
     722:	ba cf       	rjmp	.-140    	; 0x698 <HolonomicW+0x1fe>
		if(V[i]>=40)V[i]=40;
		if(V[i]<=(-40))V[i]=-40;
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
     724:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <StartMotion>
}
     728:	60 96       	adiw	r28, 0x10	; 16
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
     734:	cf 91       	pop	r28
     736:	df 91       	pop	r29
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	ff 90       	pop	r15
     73e:	ef 90       	pop	r14
     740:	df 90       	pop	r13
     742:	cf 90       	pop	r12
     744:	bf 90       	pop	r11
     746:	af 90       	pop	r10
     748:	9f 90       	pop	r9
     74a:	8f 90       	pop	r8
     74c:	7f 90       	pop	r7
     74e:	6f 90       	pop	r6
     750:	5f 90       	pop	r5
     752:	4f 90       	pop	r4
     754:	3f 90       	pop	r3
     756:	2f 90       	pop	r2
     758:	08 95       	ret

0000075a <Holonomic_distance>:
		if(flg0 && flg1)
			break;
	}
}

void Holonomic_distance(int f_agl,int f_speed,unsigned int distance,unsigned stop){
     75a:	2f 92       	push	r2
     75c:	3f 92       	push	r3
     75e:	4f 92       	push	r4
     760:	5f 92       	push	r5
     762:	6f 92       	push	r6
     764:	7f 92       	push	r7
     766:	8f 92       	push	r8
     768:	9f 92       	push	r9
     76a:	af 92       	push	r10
     76c:	bf 92       	push	r11
     76e:	cf 92       	push	r12
     770:	df 92       	push	r13
     772:	ef 92       	push	r14
     774:	ff 92       	push	r15
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	df 93       	push	r29
     77c:	cf 93       	push	r28
     77e:	00 d0       	rcall	.+0      	; 0x780 <Holonomic_distance+0x26>
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
     784:	9a 83       	std	Y+2, r25	; 0x02
     786:	89 83       	std	Y+1, r24	; 0x01
     788:	1a 01       	movw	r2, r20
     78a:	79 01       	movw	r14, r18
//1.각도	2.속도	3.거리	4.감속지점	
	next_speed=f_speed;
     78c:	88 27       	eor	r24, r24
     78e:	77 fd       	sbrc	r23, 7
     790:	80 95       	com	r24
     792:	98 2f       	mov	r25, r24
     794:	0e 94 12 14 	call	0x2824	; 0x2824 <__floatsisf>
     798:	60 93 c0 02 	sts	0x02C0, r22
     79c:	70 93 c1 02 	sts	0x02C1, r23
     7a0:	80 93 c2 02 	sts	0x02C2, r24
     7a4:	90 93 c3 02 	sts	0x02C3, r25
	acc=5;
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	a0 ea       	ldi	r26, 0xA0	; 160
     7ae:	b0 e4       	ldi	r27, 0x40	; 64
     7b0:	80 93 00 01 	sts	0x0100, r24
     7b4:	90 93 01 01 	sts	0x0101, r25
     7b8:	a0 93 02 01 	sts	0x0102, r26
     7bc:	b0 93 03 01 	sts	0x0103, r27
	TCNT1H=0xFF; TCNT1L=0x70;	//0.01초
     7c0:	8f ef       	ldi	r24, 0xFF	; 255
     7c2:	8d bd       	out	0x2d, r24	; 45
     7c4:	80 e7       	ldi	r24, 0x70	; 112
     7c6:	8c bd       	out	0x2c, r24	; 44
	sec=0;
     7c8:	10 92 bb 02 	sts	0x02BB, r1
     7cc:	10 92 ba 02 	sts	0x02BA, r1
	disMD=0;	//거리 초기화
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	dc 01       	movw	r26, r24
     7d6:	80 93 d8 02 	sts	0x02D8, r24
     7da:	90 93 d9 02 	sts	0x02D9, r25
     7de:	a0 93 da 02 	sts	0x02DA, r26
     7e2:	b0 93 db 02 	sts	0x02DB, r27
	
	while(1){
	
		HolonomicW(f_agl,speed,0);
	
		if(disMD>=distance) break;
     7e6:	44 24       	eor	r4, r4
     7e8:	55 24       	eor	r5, r5
		else if(disMD>=stop) next_speed=50;
     7ea:	57 01       	movw	r10, r14
     7ec:	cc 24       	eor	r12, r12
     7ee:	dd 24       	eor	r13, r13
     7f0:	0f 2e       	mov	r0, r31
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	6f 2e       	mov	r6, r31
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	7f 2e       	mov	r7, r31
     7fa:	f8 e4       	ldi	r31, 0x48	; 72
     7fc:	8f 2e       	mov	r8, r31
     7fe:	f2 e4       	ldi	r31, 0x42	; 66
     800:	9f 2e       	mov	r9, r31
     802:	f0 2d       	mov	r31, r0
	sec=0;
	disMD=0;	//거리 초기화
	
	while(1){
	
		HolonomicW(f_agl,speed,0);
     804:	60 91 bc 02 	lds	r22, 0x02BC
     808:	70 91 bd 02 	lds	r23, 0x02BD
     80c:	80 91 be 02 	lds	r24, 0x02BE
     810:	90 91 bf 02 	lds	r25, 0x02BF
     814:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__fixsfsi>
     818:	9b 01       	movw	r18, r22
     81a:	ac 01       	movw	r20, r24
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	9a 81       	ldd	r25, Y+2	; 0x02
     820:	b9 01       	movw	r22, r18
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	0e 94 4d 02 	call	0x49a	; 0x49a <HolonomicW>
	
		if(disMD>=distance) break;
     82a:	e0 90 d8 02 	lds	r14, 0x02D8
     82e:	f0 90 d9 02 	lds	r15, 0x02D9
     832:	00 91 da 02 	lds	r16, 0x02DA
     836:	10 91 db 02 	lds	r17, 0x02DB
     83a:	c2 01       	movw	r24, r4
     83c:	b1 01       	movw	r22, r2
     83e:	0e 94 c4 14 	call	0x2988	; 0x2988 <__floatunsisf>
     842:	9b 01       	movw	r18, r22
     844:	ac 01       	movw	r20, r24
     846:	c8 01       	movw	r24, r16
     848:	b7 01       	movw	r22, r14
     84a:	0e 94 82 13 	call	0x2704	; 0x2704 <__gesf2>
     84e:	87 ff       	sbrs	r24, 7
     850:	1d c0       	rjmp	.+58     	; 0x88c <Holonomic_distance+0x132>
		else if(disMD>=stop) next_speed=50;
     852:	e0 90 d8 02 	lds	r14, 0x02D8
     856:	f0 90 d9 02 	lds	r15, 0x02D9
     85a:	00 91 da 02 	lds	r16, 0x02DA
     85e:	10 91 db 02 	lds	r17, 0x02DB
     862:	c6 01       	movw	r24, r12
     864:	b5 01       	movw	r22, r10
     866:	0e 94 c4 14 	call	0x2988	; 0x2988 <__floatunsisf>
     86a:	9b 01       	movw	r18, r22
     86c:	ac 01       	movw	r20, r24
     86e:	c8 01       	movw	r24, r16
     870:	b7 01       	movw	r22, r14
     872:	0e 94 82 13 	call	0x2704	; 0x2704 <__gesf2>
     876:	87 fd       	sbrc	r24, 7
     878:	c5 cf       	rjmp	.-118    	; 0x804 <Holonomic_distance+0xaa>
     87a:	60 92 c0 02 	sts	0x02C0, r6
     87e:	70 92 c1 02 	sts	0x02C1, r7
     882:	80 92 c2 02 	sts	0x02C2, r8
     886:	90 92 c3 02 	sts	0x02C3, r9
     88a:	bc cf       	rjmp	.-136    	; 0x804 <Holonomic_distance+0xaa>
	}
}
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	cf 91       	pop	r28
     892:	df 91       	pop	r29
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	ff 90       	pop	r15
     89a:	ef 90       	pop	r14
     89c:	df 90       	pop	r13
     89e:	cf 90       	pop	r12
     8a0:	bf 90       	pop	r11
     8a2:	af 90       	pop	r10
     8a4:	9f 90       	pop	r9
     8a6:	8f 90       	pop	r8
     8a8:	7f 90       	pop	r7
     8aa:	6f 90       	pop	r6
     8ac:	5f 90       	pop	r5
     8ae:	4f 90       	pop	r4
     8b0:	3f 90       	pop	r3
     8b2:	2f 90       	pop	r2
     8b4:	08 95       	ret

000008b6 <Turn_and_Drive>:
//5. 회전이동거리 (회전 각도)
//6. 정지 시점
//7. 회전정지시점

void Turn_and_Drive(double f_agl, int f_speed, int fw_speed, unsigned int mm,int dgree, unsigned int stop, unsigned int wstop)
{
     8b6:	2f 92       	push	r2
     8b8:	3f 92       	push	r3
     8ba:	4f 92       	push	r4
     8bc:	5f 92       	push	r5
     8be:	6f 92       	push	r6
     8c0:	7f 92       	push	r7
     8c2:	8f 92       	push	r8
     8c4:	9f 92       	push	r9
     8c6:	af 92       	push	r10
     8c8:	bf 92       	push	r11
     8ca:	cf 92       	push	r12
     8cc:	df 92       	push	r13
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	df 93       	push	r29
     8d8:	cf 93       	push	r28
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	a6 97       	sbiw	r28, 0x26	; 38
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	f8 94       	cli
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	cd bf       	out	0x3d, r28	; 61
     8ea:	96 2e       	mov	r9, r22
     8ec:	87 2e       	mov	r8, r23
     8ee:	78 2e       	mov	r7, r24
     8f0:	69 2e       	mov	r6, r25
     8f2:	29 01       	movw	r4, r18
     8f4:	dc 86       	std	Y+12, r13	; 0x0c
     8f6:	cb 86       	std	Y+11, r12	; 0x0b
     8f8:	be 86       	std	Y+14, r11	; 0x0e
     8fa:	ad 86       	std	Y+13, r10	; 0x0d
	double distance=0, distanceW=0;
	float S_distance=0, S_distanceW=0;
	unsigned char flg0=0, flg1=0;

	TCNT1H=0xFF; TCNT1L=0x70;
     8fc:	8f ef       	ldi	r24, 0xFF	; 255
     8fe:	8d bd       	out	0x2d, r24	; 45
     900:	80 e7       	ldi	r24, 0x70	; 112
     902:	8c bd       	out	0x2c, r24	; 44
	sec=1;
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	90 93 bb 02 	sts	0x02BB, r25
     90c:	80 93 ba 02 	sts	0x02BA, r24

	acc=5;	accW=3;
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	a0 ea       	ldi	r26, 0xA0	; 160
     916:	b0 e4       	ldi	r27, 0x40	; 64
     918:	80 93 00 01 	sts	0x0100, r24
     91c:	90 93 01 01 	sts	0x0101, r25
     920:	a0 93 02 01 	sts	0x0102, r26
     924:	b0 93 03 01 	sts	0x0103, r27
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	a0 e4       	ldi	r26, 0x40	; 64
     92e:	b0 e4       	ldi	r27, 0x40	; 64
     930:	80 93 04 01 	sts	0x0104, r24
     934:	90 93 05 01 	sts	0x0105, r25
     938:	a0 93 06 01 	sts	0x0106, r26
     93c:	b0 93 07 01 	sts	0x0107, r27
	next_speed=f_speed;
     940:	ba 01       	movw	r22, r20
     942:	88 27       	eor	r24, r24
     944:	77 fd       	sbrc	r23, 7
     946:	80 95       	com	r24
     948:	98 2f       	mov	r25, r24
     94a:	0e 94 12 14 	call	0x2824	; 0x2824 <__floatsisf>
     94e:	60 93 c0 02 	sts	0x02C0, r22
     952:	70 93 c1 02 	sts	0x02C1, r23
     956:	80 93 c2 02 	sts	0x02C2, r24
     95a:	90 93 c3 02 	sts	0x02C3, r25
	next_wspeed=fw_speed;
     95e:	b2 01       	movw	r22, r4
     960:	88 27       	eor	r24, r24
     962:	77 fd       	sbrc	r23, 7
     964:	80 95       	com	r24
     966:	98 2f       	mov	r25, r24
     968:	0e 94 12 14 	call	0x2824	; 0x2824 <__floatsisf>
     96c:	60 93 c8 02 	sts	0x02C8, r22
     970:	70 93 c9 02 	sts	0x02C9, r23
     974:	80 93 ca 02 	sts	0x02CA, r24
     978:	90 93 cb 02 	sts	0x02CB, r25

void Turn_and_Drive(double f_agl, int f_speed, int fw_speed, unsigned int mm,int dgree, unsigned int stop, unsigned int wstop)
{
	double distance=0, distanceW=0;
	float S_distance=0, S_distanceW=0;
	unsigned char flg0=0, flg1=0;
     97c:	1a 86       	std	Y+10, r1	; 0x0a
     97e:	19 86       	std	Y+9, r1	; 0x09
//6. 정지 시점
//7. 회전정지시점

void Turn_and_Drive(double f_agl, int f_speed, int fw_speed, unsigned int mm,int dgree, unsigned int stop, unsigned int wstop)
{
	double distance=0, distanceW=0;
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	dc 01       	movw	r26, r24
     986:	8d 83       	std	Y+5, r24	; 0x05
     988:	9e 83       	std	Y+6, r25	; 0x06
     98a:	af 83       	std	Y+7, r26	; 0x07
     98c:	b8 87       	std	Y+8, r27	; 0x08
     98e:	89 83       	std	Y+1, r24	; 0x01
     990:	9a 83       	std	Y+2, r25	; 0x02
     992:	ab 83       	std	Y+3, r26	; 0x03
     994:	bc 83       	std	Y+4, r27	; 0x04

			HolonomicW((int)(f_agl),speed,wspeed);

			distance+=S_distance;
			distanceW+=S_distanceW;
			if(distance>=stop && stop!=0)next_speed=100;
     996:	ab 85       	ldd	r26, Y+11	; 0x0b
     998:	bc 85       	ldd	r27, Y+12	; 0x0c
     99a:	cd 01       	movw	r24, r26
     99c:	a0 e0       	ldi	r26, 0x00	; 0
     99e:	b0 e0       	ldi	r27, 0x00	; 0
     9a0:	8f 8b       	std	Y+23, r24	; 0x17
     9a2:	98 8f       	std	Y+24, r25	; 0x18
     9a4:	a9 8f       	std	Y+25, r26	; 0x19
     9a6:	ba 8f       	std	Y+26, r27	; 0x1a
			if(fabs(distanceW)>=wstop && wstop!=0){
     9a8:	ad 85       	ldd	r26, Y+13	; 0x0d
     9aa:	be 85       	ldd	r27, Y+14	; 0x0e
     9ac:	cd 01       	movw	r24, r26
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	8b 8f       	std	Y+27, r24	; 0x1b
     9b4:	9c 8f       	std	Y+28, r25	; 0x1c
     9b6:	ad 8f       	std	Y+29, r26	; 0x1d
     9b8:	be 8f       	std	Y+30, r27	; 0x1e
				next_wspeed=20;
				if(wspeed<=0)next_wspeed=-20;
			}

			if(distance>=mm || (distance*-1)>=mm){
     9ba:	c8 01       	movw	r24, r16
     9bc:	a0 e0       	ldi	r26, 0x00	; 0
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	8f 8f       	std	Y+31, r24	; 0x1f
     9c2:	98 a3       	std	Y+32, r25	; 0x20
     9c4:	a9 a3       	std	Y+33, r26	; 0x21
     9c6:	ba a3       	std	Y+34, r27	; 0x22
				flg0=1;
				next_speed=0;
				speed=0;
			}
			if(fabs(distanceW)>=dgree){
     9c8:	c7 01       	movw	r24, r14
     9ca:	aa 27       	eor	r26, r26
     9cc:	97 fd       	sbrc	r25, 7
     9ce:	a0 95       	com	r26
     9d0:	ba 2f       	mov	r27, r26
     9d2:	8b a3       	std	Y+35, r24	; 0x23
     9d4:	9c a3       	std	Y+36, r25	; 0x24
     9d6:	ad a3       	std	Y+37, r26	; 0x25
     9d8:	be a3       	std	Y+38, r27	; 0x26
	next_speed=f_speed;
	next_wspeed=fw_speed;

	while(1){

		if(sec){
     9da:	80 91 ba 02 	lds	r24, 0x02BA
     9de:	90 91 bb 02 	lds	r25, 0x02BB
     9e2:	00 97       	sbiw	r24, 0x00	; 0
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <Turn_and_Drive+0x132>
     9e6:	82 c1       	rjmp	.+772    	; 0xcec <Turn_and_Drive+0x436>
			sec=0;
     9e8:	10 92 bb 02 	sts	0x02BB, r1
     9ec:	10 92 ba 02 	sts	0x02BA, r1

			S_distance=speed*0.01;	//0.01 순간 이동거리
     9f0:	60 91 bc 02 	lds	r22, 0x02BC
     9f4:	70 91 bd 02 	lds	r23, 0x02BD
     9f8:	80 91 be 02 	lds	r24, 0x02BE
     9fc:	90 91 bf 02 	lds	r25, 0x02BF
     a00:	2a e0       	ldi	r18, 0x0A	; 10
     a02:	37 ed       	ldi	r19, 0xD7	; 215
     a04:	43 e2       	ldi	r20, 0x23	; 35
     a06:	5c e3       	ldi	r21, 0x3C	; 60
     a08:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
     a0c:	6b 8b       	std	Y+19, r22	; 0x13
     a0e:	7c 8b       	std	Y+20, r23	; 0x14
     a10:	8d 8b       	std	Y+21, r24	; 0x15
     a12:	9e 8b       	std	Y+22, r25	; 0x16
			S_distanceW=wspeed*0.01;	//0.01 순간 이동거리 
     a14:	60 91 c4 02 	lds	r22, 0x02C4
     a18:	70 91 c5 02 	lds	r23, 0x02C5
     a1c:	80 91 c6 02 	lds	r24, 0x02C6
     a20:	90 91 c7 02 	lds	r25, 0x02C7
     a24:	2a e0       	ldi	r18, 0x0A	; 10
     a26:	37 ed       	ldi	r19, 0xD7	; 215
     a28:	43 e2       	ldi	r20, 0x23	; 35
     a2a:	5c e3       	ldi	r21, 0x3C	; 60
     a2c:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
     a30:	56 2e       	mov	r5, r22
     a32:	47 2e       	mov	r4, r23
     a34:	38 2e       	mov	r3, r24
     a36:	29 2e       	mov	r2, r25

			f_agl=f_agl-S_distanceW;
     a38:	a4 01       	movw	r20, r8
     a3a:	93 01       	movw	r18, r6
     a3c:	65 2f       	mov	r22, r21
     a3e:	78 2d       	mov	r23, r8
     a40:	83 2f       	mov	r24, r19
     a42:	96 2d       	mov	r25, r6
     a44:	d2 01       	movw	r26, r4
     a46:	f1 01       	movw	r30, r2
     a48:	2b 2f       	mov	r18, r27
     a4a:	3a 2f       	mov	r19, r26
     a4c:	4f 2f       	mov	r20, r31
     a4e:	5e 2f       	mov	r21, r30
     a50:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
     a54:	96 2e       	mov	r9, r22
     a56:	87 2e       	mov	r8, r23
     a58:	78 2e       	mov	r7, r24
     a5a:	69 2e       	mov	r6, r25

			if(f_agl<0)f_agl+=360;
     a5c:	a4 01       	movw	r20, r8
     a5e:	93 01       	movw	r18, r6
     a60:	65 2f       	mov	r22, r21
     a62:	74 2f       	mov	r23, r20
     a64:	83 2f       	mov	r24, r19
     a66:	92 2f       	mov	r25, r18
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	a9 01       	movw	r20, r18
     a6e:	0e 94 b2 13 	call	0x2764	; 0x2764 <__ltsf2>
     a72:	87 ff       	sbrs	r24, 7
     a74:	0d c0       	rjmp	.+26     	; 0xa90 <Turn_and_Drive+0x1da>
     a76:	a4 01       	movw	r20, r8
     a78:	93 01       	movw	r18, r6
     a7a:	65 2f       	mov	r22, r21
     a7c:	74 2f       	mov	r23, r20
     a7e:	83 2f       	mov	r24, r19
     a80:	92 2f       	mov	r25, r18
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	44 eb       	ldi	r20, 0xB4	; 180
     a88:	53 e4       	ldi	r21, 0x43	; 67
     a8a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
     a8e:	1a c0       	rjmp	.+52     	; 0xac4 <Turn_and_Drive+0x20e>
			else if(f_agl>=360)f_agl-=360;
     a90:	a4 01       	movw	r20, r8
     a92:	93 01       	movw	r18, r6
     a94:	65 2f       	mov	r22, r21
     a96:	74 2f       	mov	r23, r20
     a98:	83 2f       	mov	r24, r19
     a9a:	92 2f       	mov	r25, r18
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	44 eb       	ldi	r20, 0xB4	; 180
     aa2:	53 e4       	ldi	r21, 0x43	; 67
     aa4:	0e 94 82 13 	call	0x2704	; 0x2704 <__gesf2>
     aa8:	87 fd       	sbrc	r24, 7
     aaa:	10 c0       	rjmp	.+32     	; 0xacc <Turn_and_Drive+0x216>
     aac:	a4 01       	movw	r20, r8
     aae:	93 01       	movw	r18, r6
     ab0:	65 2f       	mov	r22, r21
     ab2:	74 2f       	mov	r23, r20
     ab4:	83 2f       	mov	r24, r19
     ab6:	92 2f       	mov	r25, r18
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	44 eb       	ldi	r20, 0xB4	; 180
     abe:	53 e4       	ldi	r21, 0x43	; 67
     ac0:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
     ac4:	96 2e       	mov	r9, r22
     ac6:	87 2e       	mov	r8, r23
     ac8:	78 2e       	mov	r7, r24
     aca:	69 2e       	mov	r6, r25

			HolonomicW((int)(f_agl),speed,wspeed);
     acc:	e0 90 bc 02 	lds	r14, 0x02BC
     ad0:	f0 90 bd 02 	lds	r15, 0x02BD
     ad4:	00 91 be 02 	lds	r16, 0x02BE
     ad8:	10 91 bf 02 	lds	r17, 0x02BF
     adc:	a0 90 c4 02 	lds	r10, 0x02C4
     ae0:	b0 90 c5 02 	lds	r11, 0x02C5
     ae4:	c0 90 c6 02 	lds	r12, 0x02C6
     ae8:	d0 90 c7 02 	lds	r13, 0x02C7
     aec:	a4 01       	movw	r20, r8
     aee:	93 01       	movw	r18, r6
     af0:	65 2f       	mov	r22, r21
     af2:	78 2d       	mov	r23, r8
     af4:	83 2f       	mov	r24, r19
     af6:	96 2d       	mov	r25, r6
     af8:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__fixsfsi>
     afc:	6f 87       	std	Y+15, r22	; 0x0f
     afe:	78 8b       	std	Y+16, r23	; 0x10
     b00:	89 8b       	std	Y+17, r24	; 0x11
     b02:	9a 8b       	std	Y+18, r25	; 0x12
     b04:	c8 01       	movw	r24, r16
     b06:	b7 01       	movw	r22, r14
     b08:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__fixsfsi>
     b0c:	7b 01       	movw	r14, r22
     b0e:	8c 01       	movw	r16, r24
     b10:	c6 01       	movw	r24, r12
     b12:	b5 01       	movw	r22, r10
     b14:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__fixsfsi>
     b18:	9b 01       	movw	r18, r22
     b1a:	ac 01       	movw	r20, r24
     b1c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b1e:	98 89       	ldd	r25, Y+16	; 0x10
     b20:	b7 01       	movw	r22, r14
     b22:	a9 01       	movw	r20, r18
     b24:	0e 94 4d 02 	call	0x49a	; 0x49a <HolonomicW>

			distance+=S_distance;
     b28:	69 81       	ldd	r22, Y+1	; 0x01
     b2a:	7a 81       	ldd	r23, Y+2	; 0x02
     b2c:	8b 81       	ldd	r24, Y+3	; 0x03
     b2e:	9c 81       	ldd	r25, Y+4	; 0x04
     b30:	bb 89       	ldd	r27, Y+19	; 0x13
     b32:	ac 89       	ldd	r26, Y+20	; 0x14
     b34:	1d 89       	ldd	r17, Y+21	; 0x15
     b36:	0e 89       	ldd	r16, Y+22	; 0x16
     b38:	2b 2f       	mov	r18, r27
     b3a:	3a 2f       	mov	r19, r26
     b3c:	41 2f       	mov	r20, r17
     b3e:	50 2f       	mov	r21, r16
     b40:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
     b44:	16 2f       	mov	r17, r22
     b46:	07 2f       	mov	r16, r23
     b48:	e8 2e       	mov	r14, r24
     b4a:	a9 2e       	mov	r10, r25
     b4c:	86 2f       	mov	r24, r22
     b4e:	90 2f       	mov	r25, r16
     b50:	ae 2d       	mov	r26, r14
     b52:	ba 2d       	mov	r27, r10
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	9a 83       	std	Y+2, r25	; 0x02
     b58:	ab 83       	std	Y+3, r26	; 0x03
     b5a:	bc 83       	std	Y+4, r27	; 0x04
			distanceW+=S_distanceW;
     b5c:	6d 81       	ldd	r22, Y+5	; 0x05
     b5e:	7e 81       	ldd	r23, Y+6	; 0x06
     b60:	8f 81       	ldd	r24, Y+7	; 0x07
     b62:	98 85       	ldd	r25, Y+8	; 0x08
     b64:	d2 01       	movw	r26, r4
     b66:	f1 01       	movw	r30, r2
     b68:	2b 2f       	mov	r18, r27
     b6a:	34 2d       	mov	r19, r4
     b6c:	4f 2f       	mov	r20, r31
     b6e:	52 2d       	mov	r21, r2
     b70:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
     b74:	26 2f       	mov	r18, r22
     b76:	37 2f       	mov	r19, r23
     b78:	48 2f       	mov	r20, r24
     b7a:	59 2f       	mov	r21, r25
     b7c:	2d 83       	std	Y+5, r18	; 0x05
     b7e:	3e 83       	std	Y+6, r19	; 0x06
     b80:	4f 83       	std	Y+7, r20	; 0x07
     b82:	58 87       	std	Y+8, r21	; 0x08
			if(distance>=stop && stop!=0)next_speed=100;
     b84:	6f 89       	ldd	r22, Y+23	; 0x17
     b86:	78 8d       	ldd	r23, Y+24	; 0x18
     b88:	89 8d       	ldd	r24, Y+25	; 0x19
     b8a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b8c:	0e 94 c4 14 	call	0x2988	; 0x2988 <__floatunsisf>
     b90:	9b 01       	movw	r18, r22
     b92:	ac 01       	movw	r20, r24
     b94:	61 2f       	mov	r22, r17
     b96:	70 2f       	mov	r23, r16
     b98:	8e 2d       	mov	r24, r14
     b9a:	9a 2d       	mov	r25, r10
     b9c:	0e 94 82 13 	call	0x2704	; 0x2704 <__gesf2>
     ba0:	87 fd       	sbrc	r24, 7
     ba2:	10 c0       	rjmp	.+32     	; 0xbc4 <Turn_and_Drive+0x30e>
     ba4:	ab 85       	ldd	r26, Y+11	; 0x0b
     ba6:	bc 85       	ldd	r27, Y+12	; 0x0c
     ba8:	10 97       	sbiw	r26, 0x00	; 0
     baa:	61 f0       	breq	.+24     	; 0xbc4 <Turn_and_Drive+0x30e>
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	a8 ec       	ldi	r26, 0xC8	; 200
     bb2:	b2 e4       	ldi	r27, 0x42	; 66
     bb4:	80 93 c0 02 	sts	0x02C0, r24
     bb8:	90 93 c1 02 	sts	0x02C1, r25
     bbc:	a0 93 c2 02 	sts	0x02C2, r26
     bc0:	b0 93 c3 02 	sts	0x02C3, r27
			if(fabs(distanceW)>=wstop && wstop!=0){
     bc4:	ad 80       	ldd	r10, Y+5	; 0x05
     bc6:	be 80       	ldd	r11, Y+6	; 0x06
     bc8:	cf 80       	ldd	r12, Y+7	; 0x07
     bca:	d8 84       	ldd	r13, Y+8	; 0x08
     bcc:	e8 94       	clt
     bce:	d7 f8       	bld	r13, 7
     bd0:	6b 8d       	ldd	r22, Y+27	; 0x1b
     bd2:	7c 8d       	ldd	r23, Y+28	; 0x1c
     bd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bd8:	0e 94 c4 14 	call	0x2988	; 0x2988 <__floatunsisf>
     bdc:	9b 01       	movw	r18, r22
     bde:	ac 01       	movw	r20, r24
     be0:	c6 01       	movw	r24, r12
     be2:	b5 01       	movw	r22, r10
     be4:	0e 94 82 13 	call	0x2704	; 0x2704 <__gesf2>
     be8:	87 fd       	sbrc	r24, 7
     bea:	2b c0       	rjmp	.+86     	; 0xc42 <Turn_and_Drive+0x38c>
     bec:	ad 85       	ldd	r26, Y+13	; 0x0d
     bee:	be 85       	ldd	r27, Y+14	; 0x0e
     bf0:	10 97       	sbiw	r26, 0x00	; 0
     bf2:	39 f1       	breq	.+78     	; 0xc42 <Turn_and_Drive+0x38c>
				next_wspeed=20;
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a0 ea       	ldi	r26, 0xA0	; 160
     bfa:	b1 e4       	ldi	r27, 0x41	; 65
     bfc:	80 93 c8 02 	sts	0x02C8, r24
     c00:	90 93 c9 02 	sts	0x02C9, r25
     c04:	a0 93 ca 02 	sts	0x02CA, r26
     c08:	b0 93 cb 02 	sts	0x02CB, r27
				if(wspeed<=0)next_wspeed=-20;
     c0c:	60 91 c4 02 	lds	r22, 0x02C4
     c10:	70 91 c5 02 	lds	r23, 0x02C5
     c14:	80 91 c6 02 	lds	r24, 0x02C6
     c18:	90 91 c7 02 	lds	r25, 0x02C7
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	a9 01       	movw	r20, r18
     c22:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__lesf2>
     c26:	18 16       	cp	r1, r24
     c28:	64 f0       	brlt	.+24     	; 0xc42 <Turn_and_Drive+0x38c>
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	a0 ea       	ldi	r26, 0xA0	; 160
     c30:	b1 ec       	ldi	r27, 0xC1	; 193
     c32:	80 93 c8 02 	sts	0x02C8, r24
     c36:	90 93 c9 02 	sts	0x02C9, r25
     c3a:	a0 93 ca 02 	sts	0x02CA, r26
     c3e:	b0 93 cb 02 	sts	0x02CB, r27
			}

			if(distance>=mm || (distance*-1)>=mm){
     c42:	6f 8d       	ldd	r22, Y+31	; 0x1f
     c44:	78 a1       	ldd	r23, Y+32	; 0x20
     c46:	89 a1       	ldd	r24, Y+33	; 0x21
     c48:	9a a1       	ldd	r25, Y+34	; 0x22
     c4a:	0e 94 c4 14 	call	0x2988	; 0x2988 <__floatunsisf>
     c4e:	7b 01       	movw	r14, r22
     c50:	8c 01       	movw	r16, r24
     c52:	69 81       	ldd	r22, Y+1	; 0x01
     c54:	7a 81       	ldd	r23, Y+2	; 0x02
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	9c 81       	ldd	r25, Y+4	; 0x04
     c5a:	a8 01       	movw	r20, r16
     c5c:	97 01       	movw	r18, r14
     c5e:	0e 94 82 13 	call	0x2704	; 0x2704 <__gesf2>
     c62:	87 ff       	sbrs	r24, 7
     c64:	0b c0       	rjmp	.+22     	; 0xc7c <Turn_and_Drive+0x3c6>
     c66:	69 81       	ldd	r22, Y+1	; 0x01
     c68:	7a 81       	ldd	r23, Y+2	; 0x02
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	9c 81       	ldd	r25, Y+4	; 0x04
     c6e:	90 58       	subi	r25, 0x80	; 128
     c70:	a8 01       	movw	r20, r16
     c72:	97 01       	movw	r18, r14
     c74:	0e 94 82 13 	call	0x2704	; 0x2704 <__gesf2>
     c78:	87 fd       	sbrc	r24, 7
     c7a:	15 c0       	rjmp	.+42     	; 0xca6 <Turn_and_Drive+0x3f0>
				flg0=1;
				next_speed=0;
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	dc 01       	movw	r26, r24
     c82:	80 93 c0 02 	sts	0x02C0, r24
     c86:	90 93 c1 02 	sts	0x02C1, r25
     c8a:	a0 93 c2 02 	sts	0x02C2, r26
     c8e:	b0 93 c3 02 	sts	0x02C3, r27
				speed=0;
     c92:	80 93 bc 02 	sts	0x02BC, r24
     c96:	90 93 bd 02 	sts	0x02BD, r25
     c9a:	a0 93 be 02 	sts	0x02BE, r26
     c9e:	b0 93 bf 02 	sts	0x02BF, r27
				next_wspeed=20;
				if(wspeed<=0)next_wspeed=-20;
			}

			if(distance>=mm || (distance*-1)>=mm){
				flg0=1;
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	99 87       	std	Y+9, r25	; 0x09
				next_speed=0;
				speed=0;
			}
			if(fabs(distanceW)>=dgree){
     ca6:	6b a1       	ldd	r22, Y+35	; 0x23
     ca8:	7c a1       	ldd	r23, Y+36	; 0x24
     caa:	8d a1       	ldd	r24, Y+37	; 0x25
     cac:	9e a1       	ldd	r25, Y+38	; 0x26
     cae:	0e 94 12 14 	call	0x2824	; 0x2824 <__floatsisf>
     cb2:	9b 01       	movw	r18, r22
     cb4:	ac 01       	movw	r20, r24
     cb6:	c6 01       	movw	r24, r12
     cb8:	b5 01       	movw	r22, r10
     cba:	0e 94 82 13 	call	0x2704	; 0x2704 <__gesf2>
     cbe:	87 fd       	sbrc	r24, 7
     cc0:	15 c0       	rjmp	.+42     	; 0xcec <Turn_and_Drive+0x436>
				flg1=1;
				next_wspeed=0;
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	dc 01       	movw	r26, r24
     cc8:	80 93 c8 02 	sts	0x02C8, r24
     ccc:	90 93 c9 02 	sts	0x02C9, r25
     cd0:	a0 93 ca 02 	sts	0x02CA, r26
     cd4:	b0 93 cb 02 	sts	0x02CB, r27
				wspeed=0;
     cd8:	80 93 c4 02 	sts	0x02C4, r24
     cdc:	90 93 c5 02 	sts	0x02C5, r25
     ce0:	a0 93 c6 02 	sts	0x02C6, r26
     ce4:	b0 93 c7 02 	sts	0x02C7, r27
				flg0=1;
				next_speed=0;
				speed=0;
			}
			if(fabs(distanceW)>=dgree){
				flg1=1;
     ce8:	a1 e0       	ldi	r26, 0x01	; 1
     cea:	aa 87       	std	Y+10, r26	; 0x0a
				next_wspeed=0;
				wspeed=0;
			}
		}
		if(flg0 && flg1)
     cec:	b9 85       	ldd	r27, Y+9	; 0x09
     cee:	bb 23       	and	r27, r27
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <Turn_and_Drive+0x43e>
     cf2:	73 ce       	rjmp	.-794    	; 0x9da <Turn_and_Drive+0x124>
     cf4:	ea 85       	ldd	r30, Y+10	; 0x0a
     cf6:	ee 23       	and	r30, r30
     cf8:	09 f4       	brne	.+2      	; 0xcfc <Turn_and_Drive+0x446>
     cfa:	6f ce       	rjmp	.-802    	; 0x9da <Turn_and_Drive+0x124>
			break;
	}
}
     cfc:	a6 96       	adiw	r28, 0x26	; 38
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	cd bf       	out	0x3d, r28	; 61
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	ff 90       	pop	r15
     d12:	ef 90       	pop	r14
     d14:	df 90       	pop	r13
     d16:	cf 90       	pop	r12
     d18:	bf 90       	pop	r11
     d1a:	af 90       	pop	r10
     d1c:	9f 90       	pop	r9
     d1e:	8f 90       	pop	r8
     d20:	7f 90       	pop	r7
     d22:	6f 90       	pop	r6
     d24:	5f 90       	pop	r5
     d26:	4f 90       	pop	r4
     d28:	3f 90       	pop	r3
     d2a:	2f 90       	pop	r2
     d2c:	08 95       	ret

00000d2e <non_Holonomic>:
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
}

void non_Holonomic(long Fx, long Fy, long Fw){
     d2e:	2f 92       	push	r2
     d30:	3f 92       	push	r3
     d32:	4f 92       	push	r4
     d34:	5f 92       	push	r5
     d36:	6f 92       	push	r6
     d38:	7f 92       	push	r7
     d3a:	8f 92       	push	r8
     d3c:	9f 92       	push	r9
     d3e:	af 92       	push	r10
     d40:	bf 92       	push	r11
     d42:	cf 92       	push	r12
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	2d 97       	sbiw	r28, 0x0d	; 13
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	3b 01       	movw	r6, r22
     d64:	4c 01       	movw	r8, r24
     d66:	59 01       	movw	r10, r18
     d68:	6a 01       	movw	r12, r20

	unsigned char i=0;
	double V[3]={0,0,0};
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	dc 01       	movw	r26, r24
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	9a 83       	std	Y+2, r25	; 0x02
     d74:	ab 83       	std	Y+3, r26	; 0x03
     d76:	bc 83       	std	Y+4, r27	; 0x04
     d78:	8d 83       	std	Y+5, r24	; 0x05
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	af 83       	std	Y+7, r26	; 0x07
     d7e:	b8 87       	std	Y+8, r27	; 0x08
     d80:	89 87       	std	Y+9, r24	; 0x09
     d82:	9a 87       	std	Y+10, r25	; 0x0a
     d84:	ab 87       	std	Y+11, r26	; 0x0b
     d86:	bc 87       	std	Y+12, r27	; 0x0c

	if(Fx==0 && Fy==0 && Fw==0)StopMotion(STOP_ABRUPTLY);
     d88:	61 14       	cp	r6, r1
     d8a:	71 04       	cpc	r7, r1
     d8c:	81 04       	cpc	r8, r1
     d8e:	91 04       	cpc	r9, r1
     d90:	71 f4       	brne	.+28     	; 0xdae <non_Holonomic+0x80>
     d92:	21 15       	cp	r18, r1
     d94:	31 05       	cpc	r19, r1
     d96:	41 05       	cpc	r20, r1
     d98:	51 05       	cpc	r21, r1
     d9a:	49 f4       	brne	.+18     	; 0xdae <non_Holonomic+0x80>
     d9c:	e1 14       	cp	r14, r1
     d9e:	f1 04       	cpc	r15, r1
     da0:	01 05       	cpc	r16, r1
     da2:	11 05       	cpc	r17, r1
     da4:	21 f4       	brne	.+8      	; 0xdae <non_Holonomic+0x80>
     da6:	89 e0       	ldi	r24, 0x09	; 9
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <StopMotion>

	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
     dae:	c4 01       	movw	r24, r8
     db0:	b3 01       	movw	r22, r6
     db2:	0e 94 12 14 	call	0x2824	; 0x2824 <__floatsisf>
     db6:	1b 01       	movw	r2, r22
     db8:	2c 01       	movw	r4, r24
     dba:	c6 01       	movw	r24, r12
     dbc:	b5 01       	movw	r22, r10
     dbe:	0e 94 12 14 	call	0x2824	; 0x2824 <__floatsisf>
     dc2:	3b 01       	movw	r6, r22
     dc4:	4c 01       	movw	r8, r24
     dc6:	22 e0       	ldi	r18, 0x02	; 2
     dc8:	3b e2       	ldi	r19, 0x2B	; 43
     dca:	47 e0       	ldi	r20, 0x07	; 7
     dcc:	5d e3       	ldi	r21, 0x3D	; 61
     dce:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
     dd2:	d6 2e       	mov	r13, r22
     dd4:	c7 2e       	mov	r12, r23
     dd6:	b8 2e       	mov	r11, r24
     dd8:	9d 87       	std	Y+13, r25	; 0x0d
     dda:	c8 01       	movw	r24, r16
     ddc:	b7 01       	movw	r22, r14
     dde:	0e 94 12 14 	call	0x2824	; 0x2824 <__floatsisf>
     de2:	29 e2       	ldi	r18, 0x29	; 41
     de4:	3c e5       	ldi	r19, 0x5C	; 92
     de6:	4f e0       	ldi	r20, 0x0F	; 15
     de8:	5e e3       	ldi	r21, 0x3E	; 62
     dea:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
     dee:	a6 2e       	mov	r10, r22
     df0:	e7 2e       	mov	r14, r23
     df2:	8c 01       	movw	r16, r24
     df4:	c2 01       	movw	r24, r4
     df6:	b1 01       	movw	r22, r2
     df8:	22 e4       	ldi	r18, 0x42	; 66
     dfa:	30 e6       	ldi	r19, 0x60	; 96
     dfc:	45 e6       	ldi	r20, 0x65	; 101
     dfe:	5d e3       	ldi	r21, 0x3D	; 61
     e00:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
     e04:	d6 01       	movw	r26, r12
     e06:	ed 85       	ldd	r30, Y+13	; 0x0d
     e08:	2b 2f       	mov	r18, r27
     e0a:	3a 2f       	mov	r19, r26
     e0c:	4b 2d       	mov	r20, r11
     e0e:	5e 2f       	mov	r21, r30
     e10:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
     e14:	2a 2d       	mov	r18, r10
     e16:	3e 2d       	mov	r19, r14
     e18:	40 2f       	mov	r20, r16
     e1a:	51 2f       	mov	r21, r17
     e1c:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
     e20:	69 83       	std	Y+1, r22	; 0x01
     e22:	7a 83       	std	Y+2, r23	; 0x02
     e24:	8b 83       	std	Y+3, r24	; 0x03
     e26:	9c 83       	std	Y+4, r25	; 0x04
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
     e28:	c4 01       	movw	r24, r8
     e2a:	b3 01       	movw	r22, r6
     e2c:	28 eb       	ldi	r18, 0xB8	; 184
     e2e:	3e e1       	ldi	r19, 0x1E	; 30
     e30:	45 e8       	ldi	r20, 0x85	; 133
     e32:	5d eb       	ldi	r21, 0xBD	; 189
     e34:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
     e38:	2a 2d       	mov	r18, r10
     e3a:	3e 2d       	mov	r19, r14
     e3c:	40 2f       	mov	r20, r16
     e3e:	51 2f       	mov	r21, r17
     e40:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
     e44:	6d 83       	std	Y+5, r22	; 0x05
     e46:	7e 83       	std	Y+6, r23	; 0x06
     e48:	8f 83       	std	Y+7, r24	; 0x07
     e4a:	98 87       	std	Y+8, r25	; 0x08
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
     e4c:	c2 01       	movw	r24, r4
     e4e:	b1 01       	movw	r22, r2
     e50:	22 e4       	ldi	r18, 0x42	; 66
     e52:	30 e6       	ldi	r19, 0x60	; 96
     e54:	45 e6       	ldi	r20, 0x65	; 101
     e56:	5d eb       	ldi	r21, 0xBD	; 189
     e58:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
     e5c:	d6 01       	movw	r26, r12
     e5e:	ed 85       	ldd	r30, Y+13	; 0x0d
     e60:	2b 2f       	mov	r18, r27
     e62:	3a 2f       	mov	r19, r26
     e64:	4b 2d       	mov	r20, r11
     e66:	5e 2f       	mov	r21, r30
     e68:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
     e6c:	2a 2d       	mov	r18, r10
     e6e:	3e 2d       	mov	r19, r14
     e70:	40 2f       	mov	r20, r16
     e72:	51 2f       	mov	r21, r17
     e74:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
     e78:	69 87       	std	Y+9, r22	; 0x09
     e7a:	7a 87       	std	Y+10, r23	; 0x0a
     e7c:	8b 87       	std	Y+11, r24	; 0x0b
     e7e:	9c 87       	std	Y+12, r25	; 0x0c
     e80:	8e 01       	movw	r16, r28
     e82:	0f 5f       	subi	r16, 0xFF	; 255
     e84:	1f 4f       	sbci	r17, 0xFF	; 255

	for(i=0;i<3;++i){
     e86:	ee 24       	eor	r14, r14
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
}

void non_Holonomic(long Fx, long Fy, long Fw){
     e88:	58 01       	movw	r10, r16
	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));

	for(i=0;i<3;++i){
		if(V[i]>=40)V[i]=40;
     e8a:	f8 01       	movw	r30, r16
     e8c:	60 81       	ld	r22, Z
     e8e:	71 81       	ldd	r23, Z+1	; 0x01
     e90:	82 81       	ldd	r24, Z+2	; 0x02
     e92:	93 81       	ldd	r25, Z+3	; 0x03
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	40 e2       	ldi	r20, 0x20	; 32
     e9a:	52 e4       	ldi	r21, 0x42	; 66
     e9c:	0e 94 82 13 	call	0x2704	; 0x2704 <__gesf2>
     ea0:	87 fd       	sbrc	r24, 7
     ea2:	09 c0       	rjmp	.+18     	; 0xeb6 <non_Holonomic+0x188>
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	a0 e2       	ldi	r26, 0x20	; 32
     eaa:	b2 e4       	ldi	r27, 0x42	; 66
     eac:	f8 01       	movw	r30, r16
     eae:	80 83       	st	Z, r24
     eb0:	91 83       	std	Z+1, r25	; 0x01
     eb2:	a2 83       	std	Z+2, r26	; 0x02
     eb4:	b3 83       	std	Z+3, r27	; 0x03
		if(V[i]<=(-40))V[i]=-40;
     eb6:	f8 01       	movw	r30, r16
     eb8:	60 81       	ld	r22, Z
     eba:	71 81       	ldd	r23, Z+1	; 0x01
     ebc:	82 81       	ldd	r24, Z+2	; 0x02
     ebe:	93 81       	ldd	r25, Z+3	; 0x03
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e2       	ldi	r20, 0x20	; 32
     ec6:	52 ec       	ldi	r21, 0xC2	; 194
     ec8:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__lesf2>
     ecc:	18 16       	cp	r1, r24
     ece:	4c f0       	brlt	.+18     	; 0xee2 <non_Holonomic+0x1b4>
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	a0 e2       	ldi	r26, 0x20	; 32
     ed6:	b2 ec       	ldi	r27, 0xC2	; 194
     ed8:	f8 01       	movw	r30, r16
     eda:	80 83       	st	Z, r24
     edc:	91 83       	std	Z+1, r25	; 0x01
     ede:	a2 83       	std	Z+2, r26	; 0x02
     ee0:	b3 83       	std	Z+3, r27	; 0x03
     ee2:	0c 5f       	subi	r16, 0xFC	; 252
     ee4:	1f 4f       	sbci	r17, 0xFF	; 255
		SetVelocity(i, V[i]*65536);
     ee6:	f5 01       	movw	r30, r10
     ee8:	60 81       	ld	r22, Z
     eea:	71 81       	ldd	r23, Z+1	; 0x01
     eec:	82 81       	ldd	r24, Z+2	; 0x02
     eee:	93 81       	ldd	r25, Z+3	; 0x03
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e8       	ldi	r20, 0x80	; 128
     ef6:	57 e4       	ldi	r21, 0x47	; 71
     ef8:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
     efc:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__fixsfsi>
     f00:	ab 01       	movw	r20, r22
     f02:	bc 01       	movw	r22, r24
     f04:	8e 2d       	mov	r24, r14
     f06:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <SetVelocity>

	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));

	for(i=0;i<3;++i){
     f0a:	e3 94       	inc	r14
     f0c:	fe 2d       	mov	r31, r14
     f0e:	f3 30       	cpi	r31, 0x03	; 3
     f10:	09 f0       	breq	.+2      	; 0xf14 <non_Holonomic+0x1e6>
     f12:	ba cf       	rjmp	.-140    	; 0xe88 <non_Holonomic+0x15a>
		if(V[i]>=40)V[i]=40;
		if(V[i]<=(-40))V[i]=-40;
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
     f14:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <StartMotion>
}
     f18:	2d 96       	adiw	r28, 0x0d	; 13
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	df 90       	pop	r13
     f32:	cf 90       	pop	r12
     f34:	bf 90       	pop	r11
     f36:	af 90       	pop	r10
     f38:	9f 90       	pop	r9
     f3a:	8f 90       	pop	r8
     f3c:	7f 90       	pop	r7
     f3e:	6f 90       	pop	r6
     f40:	5f 90       	pop	r5
     f42:	4f 90       	pop	r4
     f44:	3f 90       	pop	r3
     f46:	2f 90       	pop	r2
     f48:	08 95       	ret

00000f4a <MoveLine>:
	if(Camera_Cmd(1,102) != 0) return 1;
	else return 0;
}

int MoveLine(int speed)
{
     f4a:	af 92       	push	r10
     f4c:	bf 92       	push	r11
     f4e:	cf 92       	push	r12
     f50:	df 92       	push	r13
     f52:	ef 92       	push	r14
     f54:	ff 92       	push	r15
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
	sec = 0;
     f5a:	10 92 bb 02 	sts	0x02BB, r1
     f5e:	10 92 ba 02 	sts	0x02BA, r1
		if(READ_SENSOR() == 24 ) return 1;
		if(READ_SENSOR() == 12 ) return 2;

		if(psd_value[0] > 100) return 3;

		if(READ_SENSOR() == 8) non_Holonomic(speed,0,15);
     f62:	5c 01       	movw	r10, r24
     f64:	cc 24       	eor	r12, r12
     f66:	b7 fc       	sbrc	r11, 7
     f68:	c0 94       	com	r12
     f6a:	dc 2c       	mov	r13, r12
int MoveLine(int speed)
{
	sec = 0;
	while(1)
	{
		if(READ_SENSOR() == 28 ) return 0;
     f6c:	80 91 63 00 	lds	r24, 0x0063
     f70:	21 b1       	in	r18, 0x01	; 1
     f72:	86 95       	lsr	r24
     f74:	86 95       	lsr	r24
     f76:	86 95       	lsr	r24
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	80 95       	com	r24
     f7c:	90 95       	com	r25
     f7e:	83 70       	andi	r24, 0x03	; 3
     f80:	90 70       	andi	r25, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	20 95       	com	r18
     f86:	30 95       	com	r19
     f88:	2c 71       	andi	r18, 0x1C	; 28
     f8a:	30 70       	andi	r19, 0x00	; 0
     f8c:	82 2b       	or	r24, r18
     f8e:	93 2b       	or	r25, r19
     f90:	8c 31       	cpi	r24, 0x1C	; 28
     f92:	91 05       	cpc	r25, r1
     f94:	09 f4       	brne	.+2      	; 0xf98 <MoveLine+0x4e>
     f96:	78 c0       	rjmp	.+240    	; 0x1088 <MoveLine+0x13e>
		if(READ_SENSOR() == 24 ) return 1;
     f98:	80 91 63 00 	lds	r24, 0x0063
     f9c:	21 b1       	in	r18, 0x01	; 1
     f9e:	86 95       	lsr	r24
     fa0:	86 95       	lsr	r24
     fa2:	86 95       	lsr	r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	80 95       	com	r24
     fa8:	90 95       	com	r25
     faa:	83 70       	andi	r24, 0x03	; 3
     fac:	90 70       	andi	r25, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	20 95       	com	r18
     fb2:	30 95       	com	r19
     fb4:	2c 71       	andi	r18, 0x1C	; 28
     fb6:	30 70       	andi	r19, 0x00	; 0
     fb8:	82 2b       	or	r24, r18
     fba:	93 2b       	or	r25, r19
     fbc:	88 31       	cpi	r24, 0x18	; 24
     fbe:	91 05       	cpc	r25, r1
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <MoveLine+0x7a>
     fc2:	65 c0       	rjmp	.+202    	; 0x108e <MoveLine+0x144>
		if(READ_SENSOR() == 12 ) return 2;
     fc4:	80 91 63 00 	lds	r24, 0x0063
     fc8:	21 b1       	in	r18, 0x01	; 1
     fca:	86 95       	lsr	r24
     fcc:	86 95       	lsr	r24
     fce:	86 95       	lsr	r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	80 95       	com	r24
     fd4:	90 95       	com	r25
     fd6:	83 70       	andi	r24, 0x03	; 3
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	20 95       	com	r18
     fde:	30 95       	com	r19
     fe0:	2c 71       	andi	r18, 0x1C	; 28
     fe2:	30 70       	andi	r19, 0x00	; 0
     fe4:	82 2b       	or	r24, r18
     fe6:	93 2b       	or	r25, r19
     fe8:	8c 30       	cpi	r24, 0x0C	; 12
     fea:	91 05       	cpc	r25, r1
     fec:	09 f4       	brne	.+2      	; 0xff0 <MoveLine+0xa6>
     fee:	52 c0       	rjmp	.+164    	; 0x1094 <MoveLine+0x14a>

		if(psd_value[0] > 100) return 3;
     ff0:	80 91 fa 02 	lds	r24, 0x02FA
     ff4:	85 36       	cpi	r24, 0x65	; 101
     ff6:	08 f0       	brcs	.+2      	; 0xffa <MoveLine+0xb0>
     ff8:	50 c0       	rjmp	.+160    	; 0x109a <MoveLine+0x150>

		if(READ_SENSOR() == 8) non_Holonomic(speed,0,15);
     ffa:	80 91 63 00 	lds	r24, 0x0063
     ffe:	21 b1       	in	r18, 0x01	; 1
    1000:	86 95       	lsr	r24
    1002:	86 95       	lsr	r24
    1004:	86 95       	lsr	r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	80 95       	com	r24
    100a:	90 95       	com	r25
    100c:	83 70       	andi	r24, 0x03	; 3
    100e:	90 70       	andi	r25, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	20 95       	com	r18
    1014:	30 95       	com	r19
    1016:	2c 71       	andi	r18, 0x1C	; 28
    1018:	30 70       	andi	r19, 0x00	; 0
    101a:	82 2b       	or	r24, r18
    101c:	93 2b       	or	r25, r19
    101e:	88 30       	cpi	r24, 0x08	; 8
    1020:	91 05       	cpc	r25, r1
    1022:	61 f4       	brne	.+24     	; 0x103c <MoveLine+0xf2>
    1024:	c6 01       	movw	r24, r12
    1026:	b5 01       	movw	r22, r10
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	a9 01       	movw	r20, r18
    102e:	ff e0       	ldi	r31, 0x0F	; 15
    1030:	ef 2e       	mov	r14, r31
    1032:	f1 2c       	mov	r15, r1
    1034:	01 2d       	mov	r16, r1
    1036:	11 2d       	mov	r17, r1
    1038:	0e 94 97 06 	call	0xd2e	; 0xd2e <non_Holonomic>
		if(READ_SENSOR() != 8) non_Holonomic(speed,0,-15);
    103c:	80 91 63 00 	lds	r24, 0x0063
    1040:	21 b1       	in	r18, 0x01	; 1
    1042:	86 95       	lsr	r24
    1044:	86 95       	lsr	r24
    1046:	86 95       	lsr	r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	80 95       	com	r24
    104c:	90 95       	com	r25
    104e:	83 70       	andi	r24, 0x03	; 3
    1050:	90 70       	andi	r25, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	20 95       	com	r18
    1056:	30 95       	com	r19
    1058:	2c 71       	andi	r18, 0x1C	; 28
    105a:	30 70       	andi	r19, 0x00	; 0
    105c:	82 2b       	or	r24, r18
    105e:	93 2b       	or	r25, r19
    1060:	88 30       	cpi	r24, 0x08	; 8
    1062:	91 05       	cpc	r25, r1
    1064:	09 f4       	brne	.+2      	; 0x1068 <MoveLine+0x11e>
    1066:	82 cf       	rjmp	.-252    	; 0xf6c <MoveLine+0x22>
    1068:	c6 01       	movw	r24, r12
    106a:	b5 01       	movw	r22, r10
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	a9 01       	movw	r20, r18
    1072:	e1 ef       	ldi	r30, 0xF1	; 241
    1074:	ee 2e       	mov	r14, r30
    1076:	ef ef       	ldi	r30, 0xFF	; 255
    1078:	fe 2e       	mov	r15, r30
    107a:	ef ef       	ldi	r30, 0xFF	; 255
    107c:	0e 2f       	mov	r16, r30
    107e:	ef ef       	ldi	r30, 0xFF	; 255
    1080:	1e 2f       	mov	r17, r30
    1082:	0e 94 97 06 	call	0xd2e	; 0xd2e <non_Holonomic>
    1086:	72 cf       	rjmp	.-284    	; 0xf6c <MoveLine+0x22>
int MoveLine(int speed)
{
	sec = 0;
	while(1)
	{
		if(READ_SENSOR() == 28 ) return 0;
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	08 c0       	rjmp	.+16     	; 0x109e <MoveLine+0x154>
		if(READ_SENSOR() == 24 ) return 1;
    108e:	21 e0       	ldi	r18, 0x01	; 1
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	05 c0       	rjmp	.+10     	; 0x109e <MoveLine+0x154>
		if(READ_SENSOR() == 12 ) return 2;
    1094:	22 e0       	ldi	r18, 0x02	; 2
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	02 c0       	rjmp	.+4      	; 0x109e <MoveLine+0x154>

		if(psd_value[0] > 100) return 3;
    109a:	23 e0       	ldi	r18, 0x03	; 3
    109c:	30 e0       	ldi	r19, 0x00	; 0

		if(READ_SENSOR() == 8) non_Holonomic(speed,0,15);
		if(READ_SENSOR() != 8) non_Holonomic(speed,0,-15);
	}
}
    109e:	c9 01       	movw	r24, r18
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	df 90       	pop	r13
    10aa:	cf 90       	pop	r12
    10ac:	bf 90       	pop	r11
    10ae:	af 90       	pop	r10
    10b0:	08 95       	ret

000010b2 <SmartMoving>:
	else if(nextdir == SOUTH) return (nowcross + 4);
	else return (nowcross - 4);
}

void SmartMoving()
{
    10b2:	2f 92       	push	r2
    10b4:	3f 92       	push	r3
    10b6:	4f 92       	push	r4
    10b8:	5f 92       	push	r5
    10ba:	6f 92       	push	r6
    10bc:	7f 92       	push	r7
    10be:	8f 92       	push	r8
    10c0:	9f 92       	push	r9
    10c2:	af 92       	push	r10
    10c4:	bf 92       	push	r11
    10c6:	cf 92       	push	r12
    10c8:	df 92       	push	r13
    10ca:	ef 92       	push	r14
    10cc:	ff 92       	push	r15
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
	int nowdir = EAST;
	int nextdir = 0;
	int result = 0;
	int dir = 0;
	int Puck = 0;
	int count = 0;
    10d6:	aa 24       	eor	r10, r10
    10d8:	bb 24       	eor	r11, r11
	int nowcross = 8;
	int nowdir = EAST;
	int nextdir = 0;
	int result = 0;
	int dir = 0;
	int Puck = 0;
    10da:	88 24       	eor	r8, r8
    10dc:	99 24       	eor	r9, r9
}

void SmartMoving()
{
	int nowcross = 8;
	int nowdir = EAST;
    10de:	00 e0       	ldi	r16, 0x00	; 0
    10e0:	10 e0       	ldi	r17, 0x00	; 0
	else return (nowcross - 4);
}

void SmartMoving()
{
	int nowcross = 8;
    10e2:	b8 e0       	ldi	r27, 0x08	; 8
    10e4:	4b 2e       	mov	r4, r27
    10e6:	51 2c       	mov	r5, r1
    10e8:	ab e5       	ldi	r26, 0x5B	; 91
    10ea:	6a 2e       	mov	r6, r26
    10ec:	a4 e0       	ldi	r26, 0x04	; 4
    10ee:	7a 2e       	mov	r7, r26
    10f0:	01 c0       	rjmp	.+2      	; 0x10f4 <SmartMoving+0x42>
	int dir = 0;
	int Puck = 0;
	int count = 0;
	while(1)
	{
		nextdir = NextMove(nowcross);
    10f2:	8e 01       	movw	r16, r28
    10f4:	c2 01       	movw	r24, r4
    10f6:	0e 94 bf 01 	call	0x37e	; 0x37e <NextMove>
    10fa:	ec 01       	movw	r28, r24
		dir = NextDir(nowdir, nextdir);
    10fc:	c8 01       	movw	r24, r16
    10fe:	be 01       	movw	r22, r28
    1100:	0e 94 a3 01 	call	0x346	; 0x346 <NextDir>
    1104:	1c 01       	movw	r2, r24
    1106:	8c 01       	movw	r16, r24
    1108:	0f 50       	subi	r16, 0x0F	; 15
    110a:	10 40       	sbci	r17, 0x00	; 0
		if(dir < 0) 	Turn_and_Drive(0, 0, -150, 0,dir-15, 0, 0);
    110c:	97 ff       	sbrs	r25, 7
    110e:	0f c0       	rjmp	.+30     	; 0x112e <__stack+0x2f>
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	4a e6       	ldi	r20, 0x6A	; 106
    111a:	5f ef       	ldi	r21, 0xFF	; 255
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	ee 24       	eor	r14, r14
    1122:	ff 24       	eor	r15, r15
    1124:	cc 24       	eor	r12, r12
    1126:	dd 24       	eor	r13, r13
    1128:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Turn_and_Drive>
    112c:	1f c0       	rjmp	.+62     	; 0x116c <__stack+0x6d>
		else 	Turn_and_Drive(0, 0, 150, 0,dir-15, 0, 0);
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	46 e9       	ldi	r20, 0x96	; 150
    1138:	50 e0       	ldi	r21, 0x00	; 0
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	ee 24       	eor	r14, r14
    1140:	ff 24       	eor	r15, r15
    1142:	cc 24       	eor	r12, r12
    1144:	dd 24       	eor	r13, r13
    1146:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Turn_and_Drive>
		
		if(dir != 0)
    114a:	21 14       	cp	r2, r1
    114c:	31 04       	cpc	r3, r1
    114e:	19 f1       	breq	.+70     	; 0x1196 <__stack+0x97>
    1150:	0d c0       	rjmp	.+26     	; 0x116c <__stack+0x6d>
		{
			while(READ_SENSOR() != 8) non_Holonomic(0,0,100);
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	cb 01       	movw	r24, r22
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	a9 01       	movw	r20, r18
    115e:	f4 e6       	ldi	r31, 0x64	; 100
    1160:	ef 2e       	mov	r14, r31
    1162:	f1 2c       	mov	r15, r1
    1164:	01 2d       	mov	r16, r1
    1166:	11 2d       	mov	r17, r1
    1168:	0e 94 97 06 	call	0xd2e	; 0xd2e <non_Holonomic>
    116c:	80 91 63 00 	lds	r24, 0x0063
    1170:	21 b1       	in	r18, 0x01	; 1
    1172:	86 95       	lsr	r24
    1174:	86 95       	lsr	r24
    1176:	86 95       	lsr	r24
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	80 95       	com	r24
    117c:	90 95       	com	r25
    117e:	83 70       	andi	r24, 0x03	; 3
    1180:	90 70       	andi	r25, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	20 95       	com	r18
    1186:	30 95       	com	r19
    1188:	2c 71       	andi	r18, 0x1C	; 28
    118a:	30 70       	andi	r19, 0x00	; 0
    118c:	82 2b       	or	r24, r18
    118e:	93 2b       	or	r25, r19
    1190:	88 30       	cpi	r24, 0x08	; 8
    1192:	91 05       	cpc	r25, r1
    1194:	f1 f6       	brne	.-68     	; 0x1152 <__stack+0x53>
		}
		sec = 0;
    1196:	10 92 bb 02 	sts	0x02BB, r1
    119a:	10 92 ba 02 	sts	0x02BA, r1
		result = MoveLine(200);
    119e:	88 ec       	ldi	r24, 0xC8	; 200
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <MoveLine>
    11a6:	1c 01       	movw	r2, r24

		nowdir = nextdir;

		if(result == 2)
    11a8:	82 30       	cpi	r24, 0x02	; 2
    11aa:	91 05       	cpc	r25, r1
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <__stack+0xb1>
    11ae:	77 c0       	rjmp	.+238    	; 0x129e <__stack+0x19f>
		{
			Turn_and_Drive(0, 0, 150, 0,160, 0, 0);
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	46 e9       	ldi	r20, 0x96	; 150
    11ba:	50 e0       	ldi	r21, 0x00	; 0
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	00 ea       	ldi	r16, 0xA0	; 160
    11c2:	10 e0       	ldi	r17, 0x00	; 0
    11c4:	ee 24       	eor	r14, r14
    11c6:	ff 24       	eor	r15, r15
    11c8:	cc 24       	eor	r12, r12
    11ca:	dd 24       	eor	r13, r13
    11cc:	f3 01       	movw	r30, r6
    11ce:	09 95       	icall
			while(READ_SENSOR() != 8) non_Holonomic(0,0,100);
    11d0:	0d c0       	rjmp	.+26     	; 0x11ec <__stack+0xed>
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	cb 01       	movw	r24, r22
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	a9 01       	movw	r20, r18
    11de:	e4 e6       	ldi	r30, 0x64	; 100
    11e0:	ee 2e       	mov	r14, r30
    11e2:	f1 2c       	mov	r15, r1
    11e4:	01 2d       	mov	r16, r1
    11e6:	11 2d       	mov	r17, r1
    11e8:	0e 94 97 06 	call	0xd2e	; 0xd2e <non_Holonomic>
    11ec:	80 91 63 00 	lds	r24, 0x0063
    11f0:	21 b1       	in	r18, 0x01	; 1
    11f2:	86 95       	lsr	r24
    11f4:	86 95       	lsr	r24
    11f6:	86 95       	lsr	r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	80 95       	com	r24
    11fc:	90 95       	com	r25
    11fe:	83 70       	andi	r24, 0x03	; 3
    1200:	90 70       	andi	r25, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	20 95       	com	r18
    1206:	30 95       	com	r19
    1208:	2c 71       	andi	r18, 0x1C	; 28
    120a:	30 70       	andi	r19, 0x00	; 0
    120c:	82 2b       	or	r24, r18
    120e:	93 2b       	or	r25, r19
    1210:	88 30       	cpi	r24, 0x08	; 8
    1212:	91 05       	cpc	r25, r1
    1214:	f1 f6       	brne	.-68     	; 0x11d2 <__stack+0xd3>
			MoveLine(200);
    1216:	88 ec       	ldi	r24, 0xC8	; 200
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <MoveLine>
			Turn_and_Drive(0, 200, 0, 130,0, 0, 0);
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	68 ec       	ldi	r22, 0xC8	; 200
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	40 e0       	ldi	r20, 0x00	; 0
    1228:	50 e0       	ldi	r21, 0x00	; 0
    122a:	22 e8       	ldi	r18, 0x82	; 130
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	00 e0       	ldi	r16, 0x00	; 0
    1230:	10 e0       	ldi	r17, 0x00	; 0
    1232:	ee 24       	eor	r14, r14
    1234:	ff 24       	eor	r15, r15
    1236:	cc 24       	eor	r12, r12
    1238:	dd 24       	eor	r13, r13
    123a:	f3 01       	movw	r30, r6
    123c:	09 95       	icall
			Turn_and_Drive(0, 0, 150, 0,160, 0, 0);
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	46 e9       	ldi	r20, 0x96	; 150
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	00 ea       	ldi	r16, 0xA0	; 160
    1250:	10 e0       	ldi	r17, 0x00	; 0
    1252:	f3 01       	movw	r30, r6
    1254:	09 95       	icall
			while(READ_SENSOR() != 8) non_Holonomic(0,0,100);
    1256:	0d c0       	rjmp	.+26     	; 0x1272 <__stack+0x173>
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	cb 01       	movw	r24, r22
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	a9 01       	movw	r20, r18
    1264:	b4 e6       	ldi	r27, 0x64	; 100
    1266:	eb 2e       	mov	r14, r27
    1268:	f1 2c       	mov	r15, r1
    126a:	01 2d       	mov	r16, r1
    126c:	11 2d       	mov	r17, r1
    126e:	0e 94 97 06 	call	0xd2e	; 0xd2e <non_Holonomic>
    1272:	80 91 63 00 	lds	r24, 0x0063
    1276:	21 b1       	in	r18, 0x01	; 1
    1278:	86 95       	lsr	r24
    127a:	86 95       	lsr	r24
    127c:	86 95       	lsr	r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	80 95       	com	r24
    1282:	90 95       	com	r25
    1284:	83 70       	andi	r24, 0x03	; 3
    1286:	90 70       	andi	r25, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	20 95       	com	r18
    128c:	30 95       	com	r19
    128e:	2c 71       	andi	r18, 0x1C	; 28
    1290:	30 70       	andi	r19, 0x00	; 0
    1292:	82 2b       	or	r24, r18
    1294:	93 2b       	or	r25, r19
    1296:	88 30       	cpi	r24, 0x08	; 8
    1298:	91 05       	cpc	r25, r1
    129a:	f1 f6       	brne	.-68     	; 0x1258 <__stack+0x159>
    129c:	68 c1       	rjmp	.+720    	; 0x156e <__stack+0x46f>
		}
		else
		{
			Turn_and_Drive(0, 200, 0, 130,0, 0, 0);
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	68 ec       	ldi	r22, 0xC8	; 200
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	22 e8       	ldi	r18, 0x82	; 130
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	00 e0       	ldi	r16, 0x00	; 0
    12b0:	10 e0       	ldi	r17, 0x00	; 0
    12b2:	ee 24       	eor	r14, r14
    12b4:	ff 24       	eor	r15, r15
    12b6:	cc 24       	eor	r12, r12
    12b8:	dd 24       	eor	r13, r13
    12ba:	f3 01       	movw	r30, r6
    12bc:	09 95       	icall
			if(nextdir == WEST || nextdir == EAST)
    12be:	c2 30       	cpi	r28, 0x02	; 2
    12c0:	d1 05       	cpc	r29, r1
    12c2:	19 f0       	breq	.+6      	; 0x12ca <__stack+0x1cb>
    12c4:	20 97       	sbiw	r28, 0x00	; 0
    12c6:	09 f0       	breq	.+2      	; 0x12ca <__stack+0x1cb>
    12c8:	a3 c0       	rjmp	.+326    	; 0x1410 <__stack+0x311>
			{
				if(sec < 500 && count == 0) //라인 이동중 퍽라인 발견
    12ca:	80 91 ba 02 	lds	r24, 0x02BA
    12ce:	90 91 bb 02 	lds	r25, 0x02BB
    12d2:	a1 e0       	ldi	r26, 0x01	; 1
    12d4:	84 3f       	cpi	r24, 0xF4	; 244
    12d6:	9a 07       	cpc	r25, r26
    12d8:	08 f0       	brcs	.+2      	; 0x12dc <__stack+0x1dd>
    12da:	ad c0       	rjmp	.+346    	; 0x1436 <__stack+0x337>
    12dc:	a1 14       	cp	r10, r1
    12de:	b1 04       	cpc	r11, r1
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <__stack+0x1e5>
    12e2:	a9 c0       	rjmp	.+338    	; 0x1436 <__stack+0x337>
				{
					count++;
					if(result == 1) //오른쪽라인 
    12e4:	b1 e0       	ldi	r27, 0x01	; 1
    12e6:	2b 16       	cp	r2, r27
    12e8:	31 04       	cpc	r3, r1
    12ea:	a1 f5       	brne	.+104    	; 0x1354 <__stack+0x255>
					{
						Turn_and_Drive(0, 0, 150, 0,160, 0, 0);
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	46 e9       	ldi	r20, 0x96	; 150
    12f6:	50 e0       	ldi	r21, 0x00	; 0
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	00 ea       	ldi	r16, 0xA0	; 160
    12fe:	10 e0       	ldi	r17, 0x00	; 0
    1300:	ee 24       	eor	r14, r14
    1302:	ff 24       	eor	r15, r15
    1304:	cc 24       	eor	r12, r12
    1306:	dd 24       	eor	r13, r13
    1308:	f3 01       	movw	r30, r6
    130a:	09 95       	icall
						while(READ_SENSOR() != 8) non_Holonomic(0,0,100);
    130c:	0d c0       	rjmp	.+26     	; 0x1328 <__stack+0x229>
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	cb 01       	movw	r24, r22
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	a9 01       	movw	r20, r18
    131a:	a4 e6       	ldi	r26, 0x64	; 100
    131c:	ea 2e       	mov	r14, r26
    131e:	f1 2c       	mov	r15, r1
    1320:	01 2d       	mov	r16, r1
    1322:	11 2d       	mov	r17, r1
    1324:	0e 94 97 06 	call	0xd2e	; 0xd2e <non_Holonomic>
    1328:	80 91 63 00 	lds	r24, 0x0063
    132c:	21 b1       	in	r18, 0x01	; 1
    132e:	86 95       	lsr	r24
    1330:	86 95       	lsr	r24
    1332:	86 95       	lsr	r24
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	80 95       	com	r24
    1338:	90 95       	com	r25
    133a:	83 70       	andi	r24, 0x03	; 3
    133c:	90 70       	andi	r25, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	20 95       	com	r18
    1342:	30 95       	com	r19
    1344:	2c 71       	andi	r18, 0x1C	; 28
    1346:	30 70       	andi	r19, 0x00	; 0
    1348:	82 2b       	or	r24, r18
    134a:	93 2b       	or	r25, r19
    134c:	88 30       	cpi	r24, 0x08	; 8
    134e:	91 05       	cpc	r25, r1
    1350:	f1 f6       	brne	.-68     	; 0x130e <__stack+0x20f>
    1352:	36 c0       	rjmp	.+108    	; 0x13c0 <__stack+0x2c1>
						non_Holonomic(-150,0,0);
						_delay_ms(1000);
					}
					else //왼쪽라인
					{
						Turn_and_Drive(0, 0, 150, 0,-160, 0, 0);
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	46 e9       	ldi	r20, 0x96	; 150
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	00 e6       	ldi	r16, 0x60	; 96
    1366:	1f ef       	ldi	r17, 0xFF	; 255
    1368:	ee 24       	eor	r14, r14
    136a:	ff 24       	eor	r15, r15
    136c:	cc 24       	eor	r12, r12
    136e:	dd 24       	eor	r13, r13
    1370:	f3 01       	movw	r30, r6
    1372:	09 95       	icall
						while(READ_SENSOR() != 8) non_Holonomic(0,0,-100);
    1374:	10 c0       	rjmp	.+32     	; 0x1396 <__stack+0x297>
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	cb 01       	movw	r24, r22
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	a9 01       	movw	r20, r18
    1382:	fc e9       	ldi	r31, 0x9C	; 156
    1384:	ef 2e       	mov	r14, r31
    1386:	ff ef       	ldi	r31, 0xFF	; 255
    1388:	ff 2e       	mov	r15, r31
    138a:	ff ef       	ldi	r31, 0xFF	; 255
    138c:	0f 2f       	mov	r16, r31
    138e:	ff ef       	ldi	r31, 0xFF	; 255
    1390:	1f 2f       	mov	r17, r31
    1392:	0e 94 97 06 	call	0xd2e	; 0xd2e <non_Holonomic>
    1396:	80 91 63 00 	lds	r24, 0x0063
    139a:	21 b1       	in	r18, 0x01	; 1
    139c:	86 95       	lsr	r24
    139e:	86 95       	lsr	r24
    13a0:	86 95       	lsr	r24
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	80 95       	com	r24
    13a6:	90 95       	com	r25
    13a8:	83 70       	andi	r24, 0x03	; 3
    13aa:	90 70       	andi	r25, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	20 95       	com	r18
    13b0:	30 95       	com	r19
    13b2:	2c 71       	andi	r18, 0x1C	; 28
    13b4:	30 70       	andi	r19, 0x00	; 0
    13b6:	82 2b       	or	r24, r18
    13b8:	93 2b       	or	r25, r19
    13ba:	88 30       	cpi	r24, 0x08	; 8
    13bc:	91 05       	cpc	r25, r1
    13be:	d9 f6       	brne	.-74     	; 0x1376 <__stack+0x277>
						non_Holonomic(150,0,0);
    13c0:	66 e9       	ldi	r22, 0x96	; 150
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	a9 01       	movw	r20, r18
    13ce:	ee 24       	eor	r14, r14
    13d0:	ff 24       	eor	r15, r15
    13d2:	87 01       	movw	r16, r14
    13d4:	0e 94 97 06 	call	0xd2e	; 0xd2e <non_Holonomic>
    13d8:	8f ef       	ldi	r24, 0xFF	; 255
    13da:	9f ef       	ldi	r25, 0xFF	; 255
    13dc:	ac e2       	ldi	r26, 0x2C	; 44
    13de:	81 50       	subi	r24, 0x01	; 1
    13e0:	90 40       	sbci	r25, 0x00	; 0
    13e2:	a0 40       	sbci	r26, 0x00	; 0
    13e4:	e1 f7       	brne	.-8      	; 0x13de <__stack+0x2df>
    13e6:	00 c0       	rjmp	.+0      	; 0x13e8 <__stack+0x2e9>
    13e8:	00 00       	nop
						_delay_ms(1000);
						non_Holonomic(-150,0,0);
    13ea:	6a e6       	ldi	r22, 0x6A	; 106
    13ec:	7f ef       	ldi	r23, 0xFF	; 255
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	9f ef       	ldi	r25, 0xFF	; 255
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	a9 01       	movw	r20, r18
    13f8:	0e 94 97 06 	call	0xd2e	; 0xd2e <non_Holonomic>
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	9f ef       	ldi	r25, 0xFF	; 255
    1400:	ac e2       	ldi	r26, 0x2C	; 44
    1402:	81 50       	subi	r24, 0x01	; 1
    1404:	90 40       	sbci	r25, 0x00	; 0
    1406:	a0 40       	sbci	r26, 0x00	; 0
    1408:	e1 f7       	brne	.-8      	; 0x1402 <__stack+0x303>
    140a:	00 c0       	rjmp	.+0      	; 0x140c <__stack+0x30d>
    140c:	00 00       	nop
    140e:	0a c0       	rjmp	.+20     	; 0x1424 <__stack+0x325>
					}
				}
			}
			else
			{
				if(sec < 200 && count == 0) //라인 이동중 퍽라인 발견
    1410:	80 91 ba 02 	lds	r24, 0x02BA
    1414:	90 91 bb 02 	lds	r25, 0x02BB
    1418:	88 3c       	cpi	r24, 0xC8	; 200
    141a:	91 05       	cpc	r25, r1
    141c:	60 f4       	brcc	.+24     	; 0x1436 <__stack+0x337>
    141e:	a1 14       	cp	r10, r1
    1420:	b1 04       	cpc	r11, r1
    1422:	49 f4       	brne	.+18     	; 0x1436 <__stack+0x337>
					}
					else //왼쪽라인
					{

					}	
					if(Capt() == 1)
    1424:	0e 94 97 01 	call	0x32e	; 0x32e <Capt>
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	91 05       	cpc	r25, r1
    142c:	49 f4       	brne	.+18     	; 0x1440 <__stack+0x341>
					{
						Puck++;
    142e:	08 94       	sec
    1430:	81 1c       	adc	r8, r1
    1432:	91 1c       	adc	r9, r1
    1434:	05 c0       	rjmp	.+10     	; 0x1440 <__stack+0x341>
					}
				}
			}
			if(count == 1)
    1436:	91 e0       	ldi	r25, 0x01	; 1
    1438:	a9 16       	cp	r10, r25
    143a:	b1 04       	cpc	r11, r1
    143c:	09 f0       	breq	.+2      	; 0x1440 <__stack+0x341>
    143e:	92 c0       	rjmp	.+292    	; 0x1564 <__stack+0x465>
			{
				result = MoveLine(200);
    1440:	88 ec       	ldi	r24, 0xC8	; 200
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 a5 07 	call	0xf4a	; 0xf4a <MoveLine>

				if(result == 2)
    1448:	82 30       	cpi	r24, 0x02	; 2
    144a:	91 05       	cpc	r25, r1
    144c:	09 f0       	breq	.+2      	; 0x1450 <__stack+0x351>
    144e:	77 c0       	rjmp	.+238    	; 0x153e <__stack+0x43f>
				{
					Turn_and_Drive(0, 0, 150, 0,160, 0, 0);
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	46 e9       	ldi	r20, 0x96	; 150
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	00 ea       	ldi	r16, 0xA0	; 160
    1462:	10 e0       	ldi	r17, 0x00	; 0
    1464:	ee 24       	eor	r14, r14
    1466:	ff 24       	eor	r15, r15
    1468:	cc 24       	eor	r12, r12
    146a:	dd 24       	eor	r13, r13
    146c:	f3 01       	movw	r30, r6
    146e:	09 95       	icall
					while(READ_SENSOR() != 8) non_Holonomic(0,0,100);
    1470:	0d c0       	rjmp	.+26     	; 0x148c <__stack+0x38d>
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	cb 01       	movw	r24, r22
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	a9 01       	movw	r20, r18
    147e:	e4 e6       	ldi	r30, 0x64	; 100
    1480:	ee 2e       	mov	r14, r30
    1482:	f1 2c       	mov	r15, r1
    1484:	01 2d       	mov	r16, r1
    1486:	11 2d       	mov	r17, r1
    1488:	0e 94 97 06 	call	0xd2e	; 0xd2e <non_Holonomic>
    148c:	80 91 63 00 	lds	r24, 0x0063
    1490:	21 b1       	in	r18, 0x01	; 1
    1492:	86 95       	lsr	r24
    1494:	86 95       	lsr	r24
    1496:	86 95       	lsr	r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	80 95       	com	r24
    149c:	90 95       	com	r25
    149e:	83 70       	andi	r24, 0x03	; 3
    14a0:	90 70       	andi	r25, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	20 95       	com	r18
    14a6:	30 95       	com	r19
    14a8:	2c 71       	andi	r18, 0x1C	; 28
    14aa:	30 70       	andi	r19, 0x00	; 0
    14ac:	82 2b       	or	r24, r18
    14ae:	93 2b       	or	r25, r19
    14b0:	88 30       	cpi	r24, 0x08	; 8
    14b2:	91 05       	cpc	r25, r1
    14b4:	f1 f6       	brne	.-68     	; 0x1472 <__stack+0x373>
					MoveLine(200);
    14b6:	88 ec       	ldi	r24, 0xC8	; 200
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 a5 07 	call	0xf4a	; 0xf4a <MoveLine>
					Turn_and_Drive(0, 200, 0, 130,0, 0, 0);
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	68 ec       	ldi	r22, 0xC8	; 200
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	40 e0       	ldi	r20, 0x00	; 0
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	22 e8       	ldi	r18, 0x82	; 130
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	00 e0       	ldi	r16, 0x00	; 0
    14d0:	10 e0       	ldi	r17, 0x00	; 0
    14d2:	ee 24       	eor	r14, r14
    14d4:	ff 24       	eor	r15, r15
    14d6:	cc 24       	eor	r12, r12
    14d8:	dd 24       	eor	r13, r13
    14da:	f3 01       	movw	r30, r6
    14dc:	09 95       	icall
					Turn_and_Drive(0, 0, 150, 0,160, 0, 0);
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	46 e9       	ldi	r20, 0x96	; 150
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	00 ea       	ldi	r16, 0xA0	; 160
    14f0:	10 e0       	ldi	r17, 0x00	; 0
    14f2:	f3 01       	movw	r30, r6
    14f4:	09 95       	icall
					while(READ_SENSOR() != 8) non_Holonomic(0,0,100);
    14f6:	0d c0       	rjmp	.+26     	; 0x1512 <__stack+0x413>
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	cb 01       	movw	r24, r22
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	a9 01       	movw	r20, r18
    1504:	b4 e6       	ldi	r27, 0x64	; 100
    1506:	eb 2e       	mov	r14, r27
    1508:	f1 2c       	mov	r15, r1
    150a:	01 2d       	mov	r16, r1
    150c:	11 2d       	mov	r17, r1
    150e:	0e 94 97 06 	call	0xd2e	; 0xd2e <non_Holonomic>
    1512:	80 91 63 00 	lds	r24, 0x0063
    1516:	21 b1       	in	r18, 0x01	; 1
    1518:	86 95       	lsr	r24
    151a:	86 95       	lsr	r24
    151c:	86 95       	lsr	r24
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	80 95       	com	r24
    1522:	90 95       	com	r25
    1524:	83 70       	andi	r24, 0x03	; 3
    1526:	90 70       	andi	r25, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	20 95       	com	r18
    152c:	30 95       	com	r19
    152e:	2c 71       	andi	r18, 0x1C	; 28
    1530:	30 70       	andi	r19, 0x00	; 0
    1532:	82 2b       	or	r24, r18
    1534:	93 2b       	or	r25, r19
    1536:	88 30       	cpi	r24, 0x08	; 8
    1538:	91 05       	cpc	r25, r1
    153a:	f1 f6       	brne	.-68     	; 0x14f8 <__stack+0x3f9>
    153c:	10 c0       	rjmp	.+32     	; 0x155e <__stack+0x45f>
				}
				else  Turn_and_Drive(0, 200, 0, 130,0, 0, 0);
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	68 ec       	ldi	r22, 0xC8	; 200
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	40 e0       	ldi	r20, 0x00	; 0
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	22 e8       	ldi	r18, 0x82	; 130
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	00 e0       	ldi	r16, 0x00	; 0
    1550:	10 e0       	ldi	r17, 0x00	; 0
    1552:	ee 24       	eor	r14, r14
    1554:	ff 24       	eor	r15, r15
    1556:	cc 24       	eor	r12, r12
    1558:	dd 24       	eor	r13, r13
    155a:	f3 01       	movw	r30, r6
    155c:	09 95       	icall
    155e:	a1 e0       	ldi	r26, 0x01	; 1
    1560:	aa 2e       	mov	r10, r26
    1562:	b1 2c       	mov	r11, r1
			}
			nowcross = DumpCross(nowcross, nextdir);
    1564:	c2 01       	movw	r24, r4
    1566:	be 01       	movw	r22, r28
    1568:	0e 94 36 02 	call	0x46c	; 0x46c <DumpCross>
    156c:	2c 01       	movw	r4, r24
		}
		if(Puck == 1 && nowcross == 11) break; //과제 수행 종료
    156e:	a1 e0       	ldi	r26, 0x01	; 1
    1570:	8a 16       	cp	r8, r26
    1572:	91 04       	cpc	r9, r1
    1574:	09 f0       	breq	.+2      	; 0x1578 <__stack+0x479>
    1576:	bd cd       	rjmp	.-1158   	; 0x10f2 <SmartMoving+0x40>
    1578:	bb e0       	ldi	r27, 0x0B	; 11
    157a:	4b 16       	cp	r4, r27
    157c:	51 04       	cpc	r5, r1
    157e:	09 f0       	breq	.+2      	; 0x1582 <__stack+0x483>
    1580:	b8 cd       	rjmp	.-1168   	; 0x10f2 <SmartMoving+0x40>
	}
}
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	df 90       	pop	r13
    1590:	cf 90       	pop	r12
    1592:	bf 90       	pop	r11
    1594:	af 90       	pop	r10
    1596:	9f 90       	pop	r9
    1598:	8f 90       	pop	r8
    159a:	7f 90       	pop	r7
    159c:	6f 90       	pop	r6
    159e:	5f 90       	pop	r5
    15a0:	4f 90       	pop	r4
    15a2:	3f 90       	pop	r3
    15a4:	2f 90       	pop	r2
    15a6:	08 95       	ret

000015a8 <main>:


int main(void)
{    

    Interface_init(); //인터페이스 초기화
    15a8:	0e 94 ae 00 	call	0x15c	; 0x15c <Interface_init>

	LM629_HW_Reset();
    15ac:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LM629_HW_Reset>
	MCU_init();	   // MCU 초기화
    15b0:	0e 94 76 00 	call	0xec	; 0xec <MCU_init>
	Motor_init();  // Motor 드라이버 초기화
    15b4:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <Motor_init>

	Sensor_init();
    15b8:	0e 94 31 10 	call	0x2062	; 0x2062 <Sensor_init>

	DDRB=0x0F;		//LED, BZ, SW
    15bc:	8f e0       	ldi	r24, 0x0F	; 15
    15be:	87 bb       	out	0x17, r24	; 23
	TCCR1A=0x00;	// Clock value: 14.400 kHz
    15c0:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x05;
    15c2:	85 e0       	ldi	r24, 0x05	; 5
    15c4:	8e bd       	out	0x2e, r24	; 46

	TCNT1H=0xFF;	//0.01초
    15c6:	8f ef       	ldi	r24, 0xFF	; 255
    15c8:	8d bd       	out	0x2d, r24	; 45
	TCNT1L=0x70;
    15ca:	80 e7       	ldi	r24, 0x70	; 112
    15cc:	8c bd       	out	0x2c, r24	; 44
	TIMSK=0x04;
    15ce:	84 e0       	ldi	r24, 0x04	; 4
    15d0:	87 bf       	out	0x37, r24	; 55

	sei();
    15d2:	78 94       	sei
	while(1){
			
//		int left,right;

		if(SW1)
    15d4:	b4 99       	sbic	0x16, 4	; 22
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <main+0x34>
		{
			SmartMoving();
    15d8:	0e 94 59 08 	call	0x10b2	; 0x10b2 <SmartMoving>
		}

		if(SW2)
    15dc:	86 b3       	in	r24, 0x16	; 22
		{
	
		}

		if(SW3)
    15de:	b6 99       	sbic	0x16, 6	; 22
    15e0:	f9 cf       	rjmp	.-14     	; 0x15d4 <main+0x2c>
		{	


			while(1){
				display_char(0,5,psd_value[0]);
    15e2:	40 91 fa 02 	lds	r20, 0x02FA
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	65 e0       	ldi	r22, 0x05	; 5
    15ea:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
				display_char(1,2,psd_value[2]);								
    15ee:	40 91 fc 02 	lds	r20, 0x02FC
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	62 e0       	ldi	r22, 0x02	; 2
    15f6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
				display_char(1,8,psd_value[7]);
    15fa:	40 91 01 03 	lds	r20, 0x0301
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	68 e0       	ldi	r22, 0x08	; 8
    1602:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
    1606:	ed cf       	rjmp	.-38     	; 0x15e2 <main+0x3a>

00001608 <__vector_14>:
}



ISR (TIMER1_OVF_vect)
{
    1608:	1f 92       	push	r1
    160a:	0f 92       	push	r0
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	0f 92       	push	r0
    1610:	0b b6       	in	r0, 0x3b	; 59
    1612:	0f 92       	push	r0
    1614:	11 24       	eor	r1, r1
    1616:	ef 92       	push	r14
    1618:	ff 92       	push	r15
    161a:	0f 93       	push	r16
    161c:	1f 93       	push	r17
    161e:	2f 93       	push	r18
    1620:	3f 93       	push	r19
    1622:	4f 93       	push	r20
    1624:	5f 93       	push	r21
    1626:	6f 93       	push	r22
    1628:	7f 93       	push	r23
    162a:	8f 93       	push	r24
    162c:	9f 93       	push	r25
    162e:	af 93       	push	r26
    1630:	bf 93       	push	r27
    1632:	ef 93       	push	r30
    1634:	ff 93       	push	r31
	TCNT1H=0xFF; TCNT1L=0x70; //0.01초
    1636:	8f ef       	ldi	r24, 0xFF	; 255
    1638:	8d bd       	out	0x2d, r24	; 45
    163a:	80 e7       	ldi	r24, 0x70	; 112
    163c:	8c bd       	out	0x2c, r24	; 44
	++sec;
    163e:	80 91 ba 02 	lds	r24, 0x02BA
    1642:	90 91 bb 02 	lds	r25, 0x02BB
    1646:	01 96       	adiw	r24, 0x01	; 1
    1648:	90 93 bb 02 	sts	0x02BB, r25
    164c:	80 93 ba 02 	sts	0x02BA, r24
	
	disMD+=speed*0.01;
    1650:	e0 90 d8 02 	lds	r14, 0x02D8
    1654:	f0 90 d9 02 	lds	r15, 0x02D9
    1658:	00 91 da 02 	lds	r16, 0x02DA
    165c:	10 91 db 02 	lds	r17, 0x02DB
    1660:	60 91 bc 02 	lds	r22, 0x02BC
    1664:	70 91 bd 02 	lds	r23, 0x02BD
    1668:	80 91 be 02 	lds	r24, 0x02BE
    166c:	90 91 bf 02 	lds	r25, 0x02BF
    1670:	2a e0       	ldi	r18, 0x0A	; 10
    1672:	37 ed       	ldi	r19, 0xD7	; 215
    1674:	43 e2       	ldi	r20, 0x23	; 35
    1676:	5c e3       	ldi	r21, 0x3C	; 60
    1678:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
    167c:	9b 01       	movw	r18, r22
    167e:	ac 01       	movw	r20, r24
    1680:	c8 01       	movw	r24, r16
    1682:	b7 01       	movw	r22, r14
    1684:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
    1688:	9b 01       	movw	r18, r22
    168a:	ac 01       	movw	r20, r24
    168c:	20 93 d8 02 	sts	0x02D8, r18
    1690:	30 93 d9 02 	sts	0x02D9, r19
    1694:	40 93 da 02 	sts	0x02DA, r20
    1698:	50 93 db 02 	sts	0x02DB, r21
	disW+=speedW*0.01;
    169c:	e0 90 d4 02 	lds	r14, 0x02D4
    16a0:	f0 90 d5 02 	lds	r15, 0x02D5
    16a4:	00 91 d6 02 	lds	r16, 0x02D6
    16a8:	10 91 d7 02 	lds	r17, 0x02D7
    16ac:	60 91 e4 02 	lds	r22, 0x02E4
    16b0:	70 91 e5 02 	lds	r23, 0x02E5
    16b4:	80 91 e6 02 	lds	r24, 0x02E6
    16b8:	90 91 e7 02 	lds	r25, 0x02E7
    16bc:	2a e0       	ldi	r18, 0x0A	; 10
    16be:	37 ed       	ldi	r19, 0xD7	; 215
    16c0:	43 e2       	ldi	r20, 0x23	; 35
    16c2:	5c e3       	ldi	r21, 0x3C	; 60
    16c4:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
    16c8:	9b 01       	movw	r18, r22
    16ca:	ac 01       	movw	r20, r24
    16cc:	c8 01       	movw	r24, r16
    16ce:	b7 01       	movw	r22, r14
    16d0:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
    16d4:	9b 01       	movw	r18, r22
    16d6:	ac 01       	movw	r20, r24
    16d8:	20 93 d4 02 	sts	0x02D4, r18
    16dc:	30 93 d5 02 	sts	0x02D5, r19
    16e0:	40 93 d6 02 	sts	0x02D6, r20
    16e4:	50 93 d7 02 	sts	0x02D7, r21
	disX+=(speedX*0.01);
    16e8:	e0 90 cc 02 	lds	r14, 0x02CC
    16ec:	f0 90 cd 02 	lds	r15, 0x02CD
    16f0:	00 91 ce 02 	lds	r16, 0x02CE
    16f4:	10 91 cf 02 	lds	r17, 0x02CF
    16f8:	60 91 dc 02 	lds	r22, 0x02DC
    16fc:	70 91 dd 02 	lds	r23, 0x02DD
    1700:	80 91 de 02 	lds	r24, 0x02DE
    1704:	90 91 df 02 	lds	r25, 0x02DF
    1708:	2a e0       	ldi	r18, 0x0A	; 10
    170a:	37 ed       	ldi	r19, 0xD7	; 215
    170c:	43 e2       	ldi	r20, 0x23	; 35
    170e:	5c e3       	ldi	r21, 0x3C	; 60
    1710:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
    1714:	9b 01       	movw	r18, r22
    1716:	ac 01       	movw	r20, r24
    1718:	c8 01       	movw	r24, r16
    171a:	b7 01       	movw	r22, r14
    171c:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
    1720:	9b 01       	movw	r18, r22
    1722:	ac 01       	movw	r20, r24
    1724:	20 93 cc 02 	sts	0x02CC, r18
    1728:	30 93 cd 02 	sts	0x02CD, r19
    172c:	40 93 ce 02 	sts	0x02CE, r20
    1730:	50 93 cf 02 	sts	0x02CF, r21
	disY+=(speedY*0.01);
    1734:	e0 90 d0 02 	lds	r14, 0x02D0
    1738:	f0 90 d1 02 	lds	r15, 0x02D1
    173c:	00 91 d2 02 	lds	r16, 0x02D2
    1740:	10 91 d3 02 	lds	r17, 0x02D3
    1744:	60 91 e0 02 	lds	r22, 0x02E0
    1748:	70 91 e1 02 	lds	r23, 0x02E1
    174c:	80 91 e2 02 	lds	r24, 0x02E2
    1750:	90 91 e3 02 	lds	r25, 0x02E3
    1754:	2a e0       	ldi	r18, 0x0A	; 10
    1756:	37 ed       	ldi	r19, 0xD7	; 215
    1758:	43 e2       	ldi	r20, 0x23	; 35
    175a:	5c e3       	ldi	r21, 0x3C	; 60
    175c:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
    1760:	9b 01       	movw	r18, r22
    1762:	ac 01       	movw	r20, r24
    1764:	c8 01       	movw	r24, r16
    1766:	b7 01       	movw	r22, r14
    1768:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
    176c:	9b 01       	movw	r18, r22
    176e:	ac 01       	movw	r20, r24
    1770:	20 93 d0 02 	sts	0x02D0, r18
    1774:	30 93 d1 02 	sts	0x02D1, r19
    1778:	40 93 d2 02 	sts	0x02D2, r20
    177c:	50 93 d3 02 	sts	0x02D3, r21

	if(next_speed>speed){
    1780:	60 91 c0 02 	lds	r22, 0x02C0
    1784:	70 91 c1 02 	lds	r23, 0x02C1
    1788:	80 91 c2 02 	lds	r24, 0x02C2
    178c:	90 91 c3 02 	lds	r25, 0x02C3
    1790:	20 91 bc 02 	lds	r18, 0x02BC
    1794:	30 91 bd 02 	lds	r19, 0x02BD
    1798:	40 91 be 02 	lds	r20, 0x02BE
    179c:	50 91 bf 02 	lds	r21, 0x02BF
    17a0:	0e 94 52 13 	call	0x26a4	; 0x26a4 <__gtsf2>
    17a4:	18 16       	cp	r1, r24
    17a6:	94 f5       	brge	.+100    	; 0x180c <__vector_14+0x204>
		speed+=acc;
    17a8:	60 91 bc 02 	lds	r22, 0x02BC
    17ac:	70 91 bd 02 	lds	r23, 0x02BD
    17b0:	80 91 be 02 	lds	r24, 0x02BE
    17b4:	90 91 bf 02 	lds	r25, 0x02BF
    17b8:	20 91 00 01 	lds	r18, 0x0100
    17bc:	30 91 01 01 	lds	r19, 0x0101
    17c0:	40 91 02 01 	lds	r20, 0x0102
    17c4:	50 91 03 01 	lds	r21, 0x0103
    17c8:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
    17cc:	9b 01       	movw	r18, r22
    17ce:	ac 01       	movw	r20, r24
    17d0:	20 93 bc 02 	sts	0x02BC, r18
    17d4:	30 93 bd 02 	sts	0x02BD, r19
    17d8:	40 93 be 02 	sts	0x02BE, r20
    17dc:	50 93 bf 02 	sts	0x02BF, r21
		if(next_speed<=speed)speed=next_speed;
    17e0:	60 91 c0 02 	lds	r22, 0x02C0
    17e4:	70 91 c1 02 	lds	r23, 0x02C1
    17e8:	80 91 c2 02 	lds	r24, 0x02C2
    17ec:	90 91 c3 02 	lds	r25, 0x02C3
    17f0:	20 91 bc 02 	lds	r18, 0x02BC
    17f4:	30 91 bd 02 	lds	r19, 0x02BD
    17f8:	40 91 be 02 	lds	r20, 0x02BE
    17fc:	50 91 bf 02 	lds	r21, 0x02BF
    1800:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__lesf2>
    1804:	18 16       	cp	r1, r24
    1806:	0c f4       	brge	.+2      	; 0x180a <__vector_14+0x202>
    1808:	55 c0       	rjmp	.+170    	; 0x18b4 <__vector_14+0x2ac>
    180a:	44 c0       	rjmp	.+136    	; 0x1894 <__vector_14+0x28c>
	}
	else if(next_speed<speed){
    180c:	60 91 c0 02 	lds	r22, 0x02C0
    1810:	70 91 c1 02 	lds	r23, 0x02C1
    1814:	80 91 c2 02 	lds	r24, 0x02C2
    1818:	90 91 c3 02 	lds	r25, 0x02C3
    181c:	20 91 bc 02 	lds	r18, 0x02BC
    1820:	30 91 bd 02 	lds	r19, 0x02BD
    1824:	40 91 be 02 	lds	r20, 0x02BE
    1828:	50 91 bf 02 	lds	r21, 0x02BF
    182c:	0e 94 b2 13 	call	0x2764	; 0x2764 <__ltsf2>
    1830:	87 ff       	sbrs	r24, 7
    1832:	40 c0       	rjmp	.+128    	; 0x18b4 <__vector_14+0x2ac>
		speed-=acc;
    1834:	60 91 bc 02 	lds	r22, 0x02BC
    1838:	70 91 bd 02 	lds	r23, 0x02BD
    183c:	80 91 be 02 	lds	r24, 0x02BE
    1840:	90 91 bf 02 	lds	r25, 0x02BF
    1844:	20 91 00 01 	lds	r18, 0x0100
    1848:	30 91 01 01 	lds	r19, 0x0101
    184c:	40 91 02 01 	lds	r20, 0x0102
    1850:	50 91 03 01 	lds	r21, 0x0103
    1854:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1858:	9b 01       	movw	r18, r22
    185a:	ac 01       	movw	r20, r24
    185c:	20 93 bc 02 	sts	0x02BC, r18
    1860:	30 93 bd 02 	sts	0x02BD, r19
    1864:	40 93 be 02 	sts	0x02BE, r20
    1868:	50 93 bf 02 	sts	0x02BF, r21
		if(next_speed>=speed)speed=next_speed;
    186c:	60 91 c0 02 	lds	r22, 0x02C0
    1870:	70 91 c1 02 	lds	r23, 0x02C1
    1874:	80 91 c2 02 	lds	r24, 0x02C2
    1878:	90 91 c3 02 	lds	r25, 0x02C3
    187c:	20 91 bc 02 	lds	r18, 0x02BC
    1880:	30 91 bd 02 	lds	r19, 0x02BD
    1884:	40 91 be 02 	lds	r20, 0x02BE
    1888:	50 91 bf 02 	lds	r21, 0x02BF
    188c:	0e 94 82 13 	call	0x2704	; 0x2704 <__gesf2>
    1890:	87 fd       	sbrc	r24, 7
    1892:	10 c0       	rjmp	.+32     	; 0x18b4 <__vector_14+0x2ac>
    1894:	80 91 c0 02 	lds	r24, 0x02C0
    1898:	90 91 c1 02 	lds	r25, 0x02C1
    189c:	a0 91 c2 02 	lds	r26, 0x02C2
    18a0:	b0 91 c3 02 	lds	r27, 0x02C3
    18a4:	80 93 bc 02 	sts	0x02BC, r24
    18a8:	90 93 bd 02 	sts	0x02BD, r25
    18ac:	a0 93 be 02 	sts	0x02BE, r26
    18b0:	b0 93 bf 02 	sts	0x02BF, r27
	}
	if(next_wspeed>wspeed){
    18b4:	60 91 c8 02 	lds	r22, 0x02C8
    18b8:	70 91 c9 02 	lds	r23, 0x02C9
    18bc:	80 91 ca 02 	lds	r24, 0x02CA
    18c0:	90 91 cb 02 	lds	r25, 0x02CB
    18c4:	20 91 c4 02 	lds	r18, 0x02C4
    18c8:	30 91 c5 02 	lds	r19, 0x02C5
    18cc:	40 91 c6 02 	lds	r20, 0x02C6
    18d0:	50 91 c7 02 	lds	r21, 0x02C7
    18d4:	0e 94 52 13 	call	0x26a4	; 0x26a4 <__gtsf2>
    18d8:	18 16       	cp	r1, r24
    18da:	94 f5       	brge	.+100    	; 0x1940 <__vector_14+0x338>
		wspeed+=accW;
    18dc:	60 91 c4 02 	lds	r22, 0x02C4
    18e0:	70 91 c5 02 	lds	r23, 0x02C5
    18e4:	80 91 c6 02 	lds	r24, 0x02C6
    18e8:	90 91 c7 02 	lds	r25, 0x02C7
    18ec:	20 91 04 01 	lds	r18, 0x0104
    18f0:	30 91 05 01 	lds	r19, 0x0105
    18f4:	40 91 06 01 	lds	r20, 0x0106
    18f8:	50 91 07 01 	lds	r21, 0x0107
    18fc:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3>
    1900:	9b 01       	movw	r18, r22
    1902:	ac 01       	movw	r20, r24
    1904:	20 93 c4 02 	sts	0x02C4, r18
    1908:	30 93 c5 02 	sts	0x02C5, r19
    190c:	40 93 c6 02 	sts	0x02C6, r20
    1910:	50 93 c7 02 	sts	0x02C7, r21
		if(next_wspeed<=wspeed)wspeed=next_wspeed;
    1914:	60 91 c8 02 	lds	r22, 0x02C8
    1918:	70 91 c9 02 	lds	r23, 0x02C9
    191c:	80 91 ca 02 	lds	r24, 0x02CA
    1920:	90 91 cb 02 	lds	r25, 0x02CB
    1924:	20 91 c4 02 	lds	r18, 0x02C4
    1928:	30 91 c5 02 	lds	r19, 0x02C5
    192c:	40 91 c6 02 	lds	r20, 0x02C6
    1930:	50 91 c7 02 	lds	r21, 0x02C7
    1934:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__lesf2>
    1938:	18 16       	cp	r1, r24
    193a:	0c f4       	brge	.+2      	; 0x193e <__vector_14+0x336>
    193c:	55 c0       	rjmp	.+170    	; 0x19e8 <__vector_14+0x3e0>
    193e:	44 c0       	rjmp	.+136    	; 0x19c8 <__vector_14+0x3c0>
	}
	else if(next_wspeed<wspeed){
    1940:	60 91 c8 02 	lds	r22, 0x02C8
    1944:	70 91 c9 02 	lds	r23, 0x02C9
    1948:	80 91 ca 02 	lds	r24, 0x02CA
    194c:	90 91 cb 02 	lds	r25, 0x02CB
    1950:	20 91 c4 02 	lds	r18, 0x02C4
    1954:	30 91 c5 02 	lds	r19, 0x02C5
    1958:	40 91 c6 02 	lds	r20, 0x02C6
    195c:	50 91 c7 02 	lds	r21, 0x02C7
    1960:	0e 94 b2 13 	call	0x2764	; 0x2764 <__ltsf2>
    1964:	87 ff       	sbrs	r24, 7
    1966:	40 c0       	rjmp	.+128    	; 0x19e8 <__vector_14+0x3e0>
		wspeed-=accW;
    1968:	60 91 c4 02 	lds	r22, 0x02C4
    196c:	70 91 c5 02 	lds	r23, 0x02C5
    1970:	80 91 c6 02 	lds	r24, 0x02C6
    1974:	90 91 c7 02 	lds	r25, 0x02C7
    1978:	20 91 04 01 	lds	r18, 0x0104
    197c:	30 91 05 01 	lds	r19, 0x0105
    1980:	40 91 06 01 	lds	r20, 0x0106
    1984:	50 91 07 01 	lds	r21, 0x0107
    1988:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    198c:	9b 01       	movw	r18, r22
    198e:	ac 01       	movw	r20, r24
    1990:	20 93 c4 02 	sts	0x02C4, r18
    1994:	30 93 c5 02 	sts	0x02C5, r19
    1998:	40 93 c6 02 	sts	0x02C6, r20
    199c:	50 93 c7 02 	sts	0x02C7, r21
		if(next_wspeed>=wspeed)wspeed=next_wspeed;
    19a0:	60 91 c8 02 	lds	r22, 0x02C8
    19a4:	70 91 c9 02 	lds	r23, 0x02C9
    19a8:	80 91 ca 02 	lds	r24, 0x02CA
    19ac:	90 91 cb 02 	lds	r25, 0x02CB
    19b0:	20 91 c4 02 	lds	r18, 0x02C4
    19b4:	30 91 c5 02 	lds	r19, 0x02C5
    19b8:	40 91 c6 02 	lds	r20, 0x02C6
    19bc:	50 91 c7 02 	lds	r21, 0x02C7
    19c0:	0e 94 82 13 	call	0x2704	; 0x2704 <__gesf2>
    19c4:	87 fd       	sbrc	r24, 7
    19c6:	10 c0       	rjmp	.+32     	; 0x19e8 <__vector_14+0x3e0>
    19c8:	80 91 c8 02 	lds	r24, 0x02C8
    19cc:	90 91 c9 02 	lds	r25, 0x02C9
    19d0:	a0 91 ca 02 	lds	r26, 0x02CA
    19d4:	b0 91 cb 02 	lds	r27, 0x02CB
    19d8:	80 93 c4 02 	sts	0x02C4, r24
    19dc:	90 93 c5 02 	sts	0x02C5, r25
    19e0:	a0 93 c6 02 	sts	0x02C6, r26
    19e4:	b0 93 c7 02 	sts	0x02C7, r27
	}
}
    19e8:	ff 91       	pop	r31
    19ea:	ef 91       	pop	r30
    19ec:	bf 91       	pop	r27
    19ee:	af 91       	pop	r26
    19f0:	9f 91       	pop	r25
    19f2:	8f 91       	pop	r24
    19f4:	7f 91       	pop	r23
    19f6:	6f 91       	pop	r22
    19f8:	5f 91       	pop	r21
    19fa:	4f 91       	pop	r20
    19fc:	3f 91       	pop	r19
    19fe:	2f 91       	pop	r18
    1a00:	1f 91       	pop	r17
    1a02:	0f 91       	pop	r16
    1a04:	ff 90       	pop	r15
    1a06:	ef 90       	pop	r14
    1a08:	0f 90       	pop	r0
    1a0a:	0b be       	out	0x3b, r0	; 59
    1a0c:	0f 90       	pop	r0
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	0f 90       	pop	r0
    1a12:	1f 90       	pop	r1
    1a14:	18 95       	reti

00001a16 <ReadData>:
unsigned char ReadData(unsigned char motor)
{
    unsigned char data;

    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	fc 01       	movw	r30, r24
    1a1a:	b0 96       	adiw	r30, 0x20	; 32
    1a1c:	fe 2f       	mov	r31, r30
    1a1e:	ee 27       	eor	r30, r30
    1a20:	20 81       	ld	r18, Z
    1a22:	20 93 f6 02 	sts	0x02F6, r18
    1a26:	20 fd       	sbrc	r18, 0
    1a28:	fb cf       	rjmp	.-10     	; 0x1a20 <ReadData+0xa>
    // 데이터 입력
    data = MOTOR_DATA(motor);
    1a2a:	88 96       	adiw	r24, 0x28	; 40
    1a2c:	b8 2f       	mov	r27, r24
    1a2e:	aa 27       	eor	r26, r26
    1a30:	8c 91       	ld	r24, X

	CHECK_BUSY(motor, status);
    1a32:	90 81       	ld	r25, Z
    1a34:	90 93 f6 02 	sts	0x02F6, r25
    1a38:	90 fd       	sbrc	r25, 0
    1a3a:	fb cf       	rjmp	.-10     	; 0x1a32 <ReadData+0x1c>
    // 입력된 데이터 리턴
    return data;
}    
    1a3c:	08 95       	ret

00001a3e <WriteCommand>:
// Return    : 없음

void WriteCommand(unsigned char motor, unsigned char cmd)
{
    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	80 96       	adiw	r24, 0x20	; 32
    1a42:	f8 2f       	mov	r31, r24
    1a44:	ee 27       	eor	r30, r30
    1a46:	80 81       	ld	r24, Z
    1a48:	80 93 f6 02 	sts	0x02F6, r24
    1a4c:	80 fd       	sbrc	r24, 0
    1a4e:	fb cf       	rjmp	.-10     	; 0x1a46 <WriteCommand+0x8>
    // 커맨드 출력
    MOTOR_CMD(motor) = cmd;
    1a50:	60 83       	st	Z, r22

	CHECK_BUSY(motor, status);
    1a52:	80 81       	ld	r24, Z
    1a54:	80 93 f6 02 	sts	0x02F6, r24
    1a58:	80 fd       	sbrc	r24, 0
    1a5a:	fb cf       	rjmp	.-10     	; 0x1a52 <WriteCommand+0x14>
}
    1a5c:	08 95       	ret

00001a5e <WriteDataTwoByte>:
//      data  - 쓸 데이터
// Return    : 없음
void WriteDataTwoByte(unsigned char motor, int data)
{
    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
    1a5e:	a8 2f       	mov	r26, r24
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	fd 01       	movw	r30, r26
    1a64:	b0 96       	adiw	r30, 0x20	; 32
    1a66:	fe 2f       	mov	r31, r30
    1a68:	ee 27       	eor	r30, r30
    1a6a:	80 81       	ld	r24, Z
    1a6c:	80 93 f6 02 	sts	0x02F6, r24
    1a70:	80 fd       	sbrc	r24, 0
    1a72:	fb cf       	rjmp	.-10     	; 0x1a6a <WriteDataTwoByte+0xc>
    // 2 바이트 데이터 출력
    MOTOR_DATA(motor) = (uint8_t)((data >> 8)&0xFF);
    1a74:	98 96       	adiw	r26, 0x28	; 40
    1a76:	ba 2f       	mov	r27, r26
    1a78:	aa 27       	eor	r26, r26
    1a7a:	87 2f       	mov	r24, r23
    1a7c:	99 27       	eor	r25, r25
    1a7e:	87 fd       	sbrc	r24, 7
    1a80:	9a 95       	dec	r25
    1a82:	8c 93       	st	X, r24
	CHECK_BUSY(motor, status);
    1a84:	80 81       	ld	r24, Z
    1a86:	80 93 f6 02 	sts	0x02F6, r24
    1a8a:	80 fd       	sbrc	r24, 0
    1a8c:	fb cf       	rjmp	.-10     	; 0x1a84 <WriteDataTwoByte+0x26>
    MOTOR_DATA(motor) = (uint8_t)(data&0xFF);
    1a8e:	6c 93       	st	X, r22
	CHECK_BUSY(motor, status);
    1a90:	80 81       	ld	r24, Z
    1a92:	80 93 f6 02 	sts	0x02F6, r24
    1a96:	80 fd       	sbrc	r24, 0
    1a98:	fb cf       	rjmp	.-10     	; 0x1a90 <WriteDataTwoByte+0x32>
}
    1a9a:	08 95       	ret

00001a9c <WriteDataFourByte>:
// Parameter :
//      motor - 선택할 모터
//      data  - 쓸 데이터
// Return    : 없음
void WriteDataFourByte(unsigned char motor, long data)
{
    1a9c:	df 92       	push	r13
    1a9e:	ef 92       	push	r14
    1aa0:	ff 92       	push	r15
    1aa2:	0f 93       	push	r16
    1aa4:	1f 93       	push	r17
    1aa6:	d8 2e       	mov	r13, r24
    1aa8:	7a 01       	movw	r14, r20
    1aaa:	8b 01       	movw	r16, r22
    // 4 바이트의 데이터를 둘로 나누어서 WriteDataTwoByte함수를 두번 호출
    WriteDataTwoByte(motor, (int16_t)(data >> 16));
    1aac:	9b 01       	movw	r18, r22
    1aae:	55 27       	eor	r21, r21
    1ab0:	37 fd       	sbrc	r19, 7
    1ab2:	50 95       	com	r21
    1ab4:	45 2f       	mov	r20, r21
    1ab6:	b9 01       	movw	r22, r18
    1ab8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <WriteDataTwoByte>
    WriteDataTwoByte(motor, (int16_t)(data));
    1abc:	8d 2d       	mov	r24, r13
    1abe:	b7 01       	movw	r22, r14
    1ac0:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <WriteDataTwoByte>
}
    1ac4:	1f 91       	pop	r17
    1ac6:	0f 91       	pop	r16
    1ac8:	ff 90       	pop	r15
    1aca:	ef 90       	pop	r14
    1acc:	df 90       	pop	r13
    1ace:	08 95       	ret

00001ad0 <Motor_Reset>:
// Function  : LM629를 리셋한다.
// Parameter :
//      motor - 선택할 모터
// Return    : 없음
void Motor_Reset(uint8_t motor)
{
    1ad0:	1f 93       	push	r17
    1ad2:	18 2f       	mov	r17, r24
    // RESET 커맨드 출력
    WriteCommand(motor, RESET);
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <WriteCommand>
    1ada:	8c ec       	ldi	r24, 0xCC	; 204
    1adc:	9c e1       	ldi	r25, 0x1C	; 28
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <Motor_Reset+0xe>
    1ae2:	00 c0       	rjmp	.+0      	; 0x1ae4 <Motor_Reset+0x14>
    1ae4:	00 00       	nop
    // 리셋이 완료될 때까지 최소 1.5ms이상 대기
    _delay_ms(2);
	// Morot1 인터럽트 마스크 리셋
    WriteCommand(motor, RSTI);
    1ae6:	81 2f       	mov	r24, r17
    1ae8:	6d e1       	ldi	r22, 0x1D	; 29
    1aea:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <WriteCommand>
    WriteDataTwoByte(motor, 0x0000);
    1aee:	81 2f       	mov	r24, r17
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <WriteDataTwoByte>
}
    1af8:	1f 91       	pop	r17
    1afa:	08 95       	ret

00001afc <SetGain>:
//      kp    - P값
//      ki    - I값
//      kd    - D값
// Return    : 없음
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
{
    1afc:	af 92       	push	r10
    1afe:	bf 92       	push	r11
    1b00:	cf 92       	push	r12
    1b02:	df 92       	push	r13
    1b04:	ef 92       	push	r14
    1b06:	ff 92       	push	r15
    1b08:	0f 93       	push	r16
    1b0a:	1f 93       	push	r17
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	f8 2e       	mov	r15, r24
    1b12:	6b 01       	movw	r12, r22
    1b14:	ea 01       	movw	r28, r20
    1b16:	89 01       	movw	r16, r18
//      motor - 선택할 모터
//      kp    - P값
//      ki    - I값
//      kd    - D값
// Return    : 없음
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
    1b18:	aa 24       	eor	r10, r10
    1b1a:	a3 94       	inc	r10
    1b1c:	61 15       	cp	r22, r1
    1b1e:	71 05       	cpc	r23, r1
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <SetGain+0x28>
    1b22:	aa 24       	eor	r10, r10
    1b24:	bb 24       	eor	r11, r11
    1b26:	b3 94       	inc	r11
    1b28:	20 97       	sbiw	r28, 0x00	; 0
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <SetGain+0x32>
    1b2c:	bb 24       	eor	r11, r11
    1b2e:	ee 24       	eor	r14, r14
    1b30:	e3 94       	inc	r14
    1b32:	01 15       	cp	r16, r1
    1b34:	11 05       	cpc	r17, r1
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <SetGain+0x3e>
    1b38:	ee 24       	eor	r14, r14
	if(ki)LD_ki=1;
	else LD_ki=0;
	if(kd)LD_kd=1;
	else LD_kd=0;
	// LFIL 커맨드 출력
    WriteCommand(motor, LFIL);
    1b3a:	8f 2d       	mov	r24, r15
    1b3c:	6e e1       	ldi	r22, 0x1E	; 30
    1b3e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <WriteCommand>
    // 컨트롤 워드 출력, sampling interval은 341us 고정
    WriteDataTwoByte(motor, (0x0000) | (LD_kp << 3) | (LD_ki << 2) | (LD_kd << 1)  );
    1b42:	6b 2d       	mov	r22, r11
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	66 0f       	add	r22, r22
    1b48:	77 1f       	adc	r23, r23
    1b4a:	66 0f       	add	r22, r22
    1b4c:	77 1f       	adc	r23, r23
    1b4e:	8a 2d       	mov	r24, r10
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	43 e0       	ldi	r20, 0x03	; 3
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	4a 95       	dec	r20
    1b5a:	e1 f7       	brne	.-8      	; 0x1b54 <SetGain+0x58>
    1b5c:	68 2b       	or	r22, r24
    1b5e:	79 2b       	or	r23, r25
    1b60:	8e 2d       	mov	r24, r14
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	68 2b       	or	r22, r24
    1b6a:	79 2b       	or	r23, r25
    1b6c:	8f 2d       	mov	r24, r15
    1b6e:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <WriteDataTwoByte>
    ////////////////////////////
	// P값 출력
	if(kp)WriteDataTwoByte(motor, kp);
    1b72:	aa 20       	and	r10, r10
    1b74:	21 f0       	breq	.+8      	; 0x1b7e <SetGain+0x82>
    1b76:	8f 2d       	mov	r24, r15
    1b78:	b6 01       	movw	r22, r12
    1b7a:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <WriteDataTwoByte>
    // I값 출력
    if(ki)WriteDataTwoByte(motor, ki);
    1b7e:	bb 20       	and	r11, r11
    1b80:	21 f0       	breq	.+8      	; 0x1b8a <SetGain+0x8e>
    1b82:	8f 2d       	mov	r24, r15
    1b84:	be 01       	movw	r22, r28
    1b86:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <WriteDataTwoByte>
    // D값 출력
    if(kd)WriteDataTwoByte(motor, kd);
    1b8a:	ee 20       	and	r14, r14
    1b8c:	21 f0       	breq	.+8      	; 0x1b96 <SetGain+0x9a>
    1b8e:	8f 2d       	mov	r24, r15
    1b90:	b8 01       	movw	r22, r16
    1b92:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <WriteDataTwoByte>
    // 필터 업데이트
    WriteCommand(motor, UDF);
    1b96:	8f 2d       	mov	r24, r15
    1b98:	64 e0       	ldi	r22, 0x04	; 4
    1b9a:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <WriteCommand>
}
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16
    1ba6:	ff 90       	pop	r15
    1ba8:	ef 90       	pop	r14
    1baa:	df 90       	pop	r13
    1bac:	cf 90       	pop	r12
    1bae:	bf 90       	pop	r11
    1bb0:	af 90       	pop	r10
    1bb2:	08 95       	ret

00001bb4 <SetAcceleration>:
// Parameter :
//      motor - 선택할 모터
//      acc   - 가속도값
// Return    : 없음
void SetAcceleration(uint8_t motor, int32_t acc)
{
    1bb4:	df 92       	push	r13
    1bb6:	ef 92       	push	r14
    1bb8:	ff 92       	push	r15
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
    1bbe:	d8 2e       	mov	r13, r24
    1bc0:	7a 01       	movw	r14, r20
    1bc2:	8b 01       	movw	r16, r22
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);
    1bc4:	6f e1       	ldi	r22, 0x1F	; 31
    1bc6:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(motor, (1 << ACC_LOAD));
    1bca:	8d 2d       	mov	r24, r13
    1bcc:	60 e2       	ldi	r22, 0x20	; 32
    1bce:	70 e0       	ldi	r23, 0x00	; 0
    1bd0:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <WriteDataTwoByte>
    // 가속도값 출력
    WriteDataFourByte(motor, acc);
    1bd4:	8d 2d       	mov	r24, r13
    1bd6:	b8 01       	movw	r22, r16
    1bd8:	a7 01       	movw	r20, r14
    1bda:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <WriteDataFourByte>
}
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	ff 90       	pop	r15
    1be4:	ef 90       	pop	r14
    1be6:	df 90       	pop	r13
    1be8:	08 95       	ret

00001bea <Motor_init>:
// Parameter : 없음
// Return    : 없음
void Motor_init(void)
{	
    // Motor1 게인 설정
    SetGain(MOTOR0, 7, 3, 1);
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	67 e0       	ldi	r22, 0x07	; 7
    1bee:	70 e0       	ldi	r23, 0x00	; 0
    1bf0:	43 e0       	ldi	r20, 0x03	; 3
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	21 e0       	ldi	r18, 0x01	; 1
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <SetGain>
    // Motor2 게인 설정
    SetGain(MOTOR1, 7, 3, 1);
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	67 e0       	ldi	r22, 0x07	; 7
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	43 e0       	ldi	r20, 0x03	; 3
    1c04:	50 e0       	ldi	r21, 0x00	; 0
    1c06:	21 e0       	ldi	r18, 0x01	; 1
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <SetGain>
    // Motor3 게인 설정
    SetGain(MOTOR2, 7, 3, 1);
    1c0e:	82 e0       	ldi	r24, 0x02	; 2
    1c10:	67 e0       	ldi	r22, 0x07	; 7
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	43 e0       	ldi	r20, 0x03	; 3
    1c16:	50 e0       	ldi	r21, 0x00	; 0
    1c18:	21 e0       	ldi	r18, 0x01	; 1
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <SetGain>

    SetAcceleration(MOTOR0, 0x3FFFFFFF);
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	4f ef       	ldi	r20, 0xFF	; 255
    1c24:	5f ef       	ldi	r21, 0xFF	; 255
    1c26:	6f ef       	ldi	r22, 0xFF	; 255
    1c28:	7f e3       	ldi	r23, 0x3F	; 63
    1c2a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <SetAcceleration>
    SetAcceleration(MOTOR1, 0x3FFFFFFF);
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	4f ef       	ldi	r20, 0xFF	; 255
    1c32:	5f ef       	ldi	r21, 0xFF	; 255
    1c34:	6f ef       	ldi	r22, 0xFF	; 255
    1c36:	7f e3       	ldi	r23, 0x3F	; 63
    1c38:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <SetAcceleration>
    SetAcceleration(MOTOR2, 0x3FFFFFFF);
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	4f ef       	ldi	r20, 0xFF	; 255
    1c40:	5f ef       	ldi	r21, 0xFF	; 255
    1c42:	6f ef       	ldi	r22, 0xFF	; 255
    1c44:	7f e3       	ldi	r23, 0x3F	; 63
    1c46:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <SetAcceleration>
}
    1c4a:	08 95       	ret

00001c4c <SetVelocity>:
// Parameter :
//      motor    - 선택할 모터
//      velocity - 속도 설정  (0 ~ 1,073,741,823) 음수 입력시 역방향으로 회전
// Return    : 없음
void SetVelocity(uint8_t motor, int32_t velocity)
{
    1c4c:	df 92       	push	r13
    1c4e:	ef 92       	push	r14
    1c50:	ff 92       	push	r15
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	0f 92       	push	r0
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	d8 2e       	mov	r13, r24
    1c62:	7a 01       	movw	r14, r20
    1c64:	8b 01       	movw	r16, r22
	unsigned char dir=1;

	if(velocity<0){
    1c66:	77 ff       	sbrs	r23, 7
    1c68:	0a c0       	rjmp	.+20     	; 0x1c7e <SetVelocity+0x32>
		velocity*=(-1);
    1c6a:	10 95       	com	r17
    1c6c:	00 95       	com	r16
    1c6e:	f0 94       	com	r15
    1c70:	e0 94       	com	r14
    1c72:	e1 1c       	adc	r14, r1
    1c74:	f1 1c       	adc	r15, r1
    1c76:	01 1d       	adc	r16, r1
    1c78:	11 1d       	adc	r17, r1
		dir=0;
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	01 c0       	rjmp	.+2      	; 0x1c80 <SetVelocity+0x34>
//      motor    - 선택할 모터
//      velocity - 속도 설정  (0 ~ 1,073,741,823) 음수 입력시 역방향으로 회전
// Return    : 없음
void SetVelocity(uint8_t motor, int32_t velocity)
{
	unsigned char dir=1;
    1c7e:	91 e0       	ldi	r25, 0x01	; 1
	if(velocity<0){
		velocity*=(-1);
		dir=0;
	}
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);        
    1c80:	8d 2d       	mov	r24, r13
    1c82:	6f e1       	ldi	r22, 0x1F	; 31
    1c84:	99 83       	std	Y+1, r25	; 0x01
    1c86:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <WriteCommand>
    // 컨트롤 워드 출력        
    WriteDataTwoByte(motor,  (dir << FORWARD_DIR) | (1 << VELOCITY_MODE) | (1 << VELOCITY_LOAD));
    1c8a:	99 81       	ldd	r25, Y+1	; 0x01
    1c8c:	79 2f       	mov	r23, r25
    1c8e:	72 95       	swap	r23
    1c90:	70 7f       	andi	r23, 0xF0	; 240
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	68 60       	ori	r22, 0x08	; 8
    1c96:	78 60       	ori	r23, 0x08	; 8
    1c98:	8d 2d       	mov	r24, r13
    1c9a:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <WriteDataTwoByte>
    // 속도값 출력
    WriteDataFourByte(motor, velocity);
    1c9e:	8d 2d       	mov	r24, r13
    1ca0:	b8 01       	movw	r22, r16
    1ca2:	a7 01       	movw	r20, r14
    1ca4:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <WriteDataFourByte>
}
    1ca8:	0f 90       	pop	r0
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	1f 91       	pop	r17
    1cb0:	0f 91       	pop	r16
    1cb2:	ff 90       	pop	r15
    1cb4:	ef 90       	pop	r14
    1cb6:	df 90       	pop	r13
    1cb8:	08 95       	ret

00001cba <SetPosition>:
//		acc   - 가속도 설정  (0 ~ 1,073,741,823)
//   velocity - 속도 설정    (0 ~ 1,073,741,823)
//   position - 모터위치설정 (-1,073,741,824 ~ 1,073,741,823)counts
// Return    : 없음
void SetPosition(uint8_t motor, uint8_t mode, int32_t acc,int32_t velocity,int32_t position)
{
    1cba:	4f 92       	push	r4
    1cbc:	5f 92       	push	r5
    1cbe:	6f 92       	push	r6
    1cc0:	7f 92       	push	r7
    1cc2:	8f 92       	push	r8
    1cc4:	9f 92       	push	r9
    1cc6:	af 92       	push	r10
    1cc8:	bf 92       	push	r11
    1cca:	cf 92       	push	r12
    1ccc:	df 92       	push	r13
    1cce:	ef 92       	push	r14
    1cd0:	ff 92       	push	r15
    1cd2:	0f 93       	push	r16
    1cd4:	1f 93       	push	r17
    1cd6:	98 2e       	mov	r9, r24
    1cd8:	86 2e       	mov	r8, r22
    1cda:	29 01       	movw	r4, r18
    1cdc:	3a 01       	movw	r6, r20
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);
    1cde:	6f e1       	ldi	r22, 0x1F	; 31
    1ce0:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <WriteCommand>
    // 컨트롤 워드 출력
    // mode : 0 - Absolute Position, 1 - Relative Position
    // Position Mode로 설정
    
	WriteDataTwoByte(motor, (1 << ACC_LOAD) | (1 << VELOCITY_LOAD) | (1 << POSITION_LOAD) | (mode << POSITION_RELATIVE) );//WriteDataTwoByte(motor, 0x2A|mode);
    1ce4:	68 2d       	mov	r22, r8
    1ce6:	70 e0       	ldi	r23, 0x00	; 0
    1ce8:	6a 62       	ori	r22, 0x2A	; 42
    1cea:	89 2d       	mov	r24, r9
    1cec:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <WriteDataTwoByte>
    // 위치값 출력
	WriteDataFourByte(motor, acc);    
    1cf0:	89 2d       	mov	r24, r9
    1cf2:	b3 01       	movw	r22, r6
    1cf4:	a2 01       	movw	r20, r4
    1cf6:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <WriteDataFourByte>
	WriteDataFourByte(motor, velocity);
    1cfa:	89 2d       	mov	r24, r9
    1cfc:	b8 01       	movw	r22, r16
    1cfe:	a7 01       	movw	r20, r14
    1d00:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <WriteDataFourByte>
    WriteDataFourByte(motor, position);
    1d04:	89 2d       	mov	r24, r9
    1d06:	b6 01       	movw	r22, r12
    1d08:	a5 01       	movw	r20, r10
    1d0a:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <WriteDataFourByte>
}
    1d0e:	1f 91       	pop	r17
    1d10:	0f 91       	pop	r16
    1d12:	ff 90       	pop	r15
    1d14:	ef 90       	pop	r14
    1d16:	df 90       	pop	r13
    1d18:	cf 90       	pop	r12
    1d1a:	bf 90       	pop	r11
    1d1c:	af 90       	pop	r10
    1d1e:	9f 90       	pop	r9
    1d20:	8f 90       	pop	r8
    1d22:	7f 90       	pop	r7
    1d24:	6f 90       	pop	r6
    1d26:	5f 90       	pop	r5
    1d28:	4f 90       	pop	r4
    1d2a:	08 95       	ret

00001d2c <LM629_HW_Reset>:

// Function  : LM629 H/W Reset. 최초 전원 인가시 반드시 실행해야한다.
// Parameter : 없음
// Return    : 없음
void LM629_HW_Reset(void){
    1d2c:	8f 92       	push	r8
    1d2e:	9f 92       	push	r9
    1d30:	af 92       	push	r10
    1d32:	bf 92       	push	r11
    1d34:	cf 92       	push	r12
    1d36:	df 92       	push	r13
    1d38:	ef 92       	push	r14
    1d3a:	ff 92       	push	r15
    1d3c:	0f 93       	push	r16
    1d3e:	1f 93       	push	r17
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <LM629_HW_Reset+0x1a>
    1d46:	0f 92       	push	r0
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
	unsigned char status[3]={0, }, i=0, step=0;
	
	DDRA=0x00;
    1d4c:	1a ba       	out	0x1a, r1	; 26

	PORTC=0x00;
    1d4e:	15 ba       	out	0x15, r1	; 21
	DDRC=0xFF;
    1d50:	8f ef       	ldi	r24, 0xFF	; 255
    1d52:	84 bb       	out	0x14, r24	; 20

	PORTG=0x00;
    1d54:	10 92 65 00 	sts	0x0065, r1
	DDRG=0x03;
    1d58:	83 e0       	ldi	r24, 0x03	; 3
    1d5a:	80 93 64 00 	sts	0x0064, r24
			}
		}
		
		if(step==1){
			// SRE : 외부 데이터 메모리 영역 활성화
			MCUCR = (1 << SRE) | (0 << SRW10);
    1d5e:	e0 e8       	ldi	r30, 0x80	; 128
    1d60:	9e 2e       	mov	r9, r30
		    // SRL(0) : Upper Sector로만 사용 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
    1d62:	72 e0       	ldi	r23, 0x02	; 2
    1d64:	a7 2e       	mov	r10, r23
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
    1d66:	64 e8       	ldi	r22, 0x84	; 132
    1d68:	b6 2e       	mov	r11, r22
    1d6a:	6e 01       	movw	r12, r28
    1d6c:	08 94       	sec
    1d6e:	c1 1c       	adc	r12, r1
    1d70:	d1 1c       	adc	r13, r1
	DDRG=0x03;

	while(1){
		if(step==0){
			while(1){
				PORTC |= 0x05; //Hw Rst Hi(decoder = Low)
    1d72:	85 b3       	in	r24, 0x15	; 21
    1d74:	85 60       	ori	r24, 0x05	; 5
    1d76:	85 bb       	out	0x15, r24	; 21
    1d78:	83 e3       	ldi	r24, 0x33	; 51
    1d7a:	9b e2       	ldi	r25, 0x2B	; 43
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <LM629_HW_Reset+0x50>
				_delay_ms(3);
				PORTC &= ~0x05; //Hw Rst Low(decoder = Hi)
    1d80:	85 b3       	in	r24, 0x15	; 21
    1d82:	8a 7f       	andi	r24, 0xFA	; 250
    1d84:	85 bb       	out	0x15, r24	; 21
    1d86:	ec ec       	ldi	r30, 0xCC	; 204
    1d88:	fc e1       	ldi	r31, 0x1C	; 28
    1d8a:	31 97       	sbiw	r30, 0x01	; 1
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <LM629_HW_Reset+0x5e>
    1d8e:	00 c0       	rjmp	.+0      	; 0x1d90 <LM629_HW_Reset+0x64>
    1d90:	00 00       	nop
				_delay_ms(2);

				PORTG &= ~0x02; //RD low
    1d92:	80 91 65 00 	lds	r24, 0x0065
    1d96:	8d 7f       	andi	r24, 0xFD	; 253
    1d98:	80 93 65 00 	sts	0x0065, r24
				PORTC &= ~0x08; //PS low
    1d9c:	ab 98       	cbi	0x15, 3	; 21
		
				PORTC &=~0x07;	//cs motor0
    1d9e:	85 b3       	in	r24, 0x15	; 21
    1da0:	88 7f       	andi	r24, 0xF8	; 248
    1da2:	85 bb       	out	0x15, r24	; 21
				status[0]=PINA; //Read status motor0
    1da4:	29 b3       	in	r18, 0x19	; 25
    1da6:	29 83       	std	Y+1, r18	; 0x01
				
				PORTC |=0x01;	//cs motor1
    1da8:	a8 9a       	sbi	0x15, 0	; 21
				status[1]=PINA; //Read status motor0
    1daa:	99 b3       	in	r25, 0x19	; 25
    1dac:	9a 83       	std	Y+2, r25	; 0x02
				
				PORTC = (PORTC&0xF8)|0x02; 	//cs motor2
    1dae:	85 b3       	in	r24, 0x15	; 21
    1db0:	88 7f       	andi	r24, 0xF8	; 248
    1db2:	82 60       	ori	r24, 0x02	; 2
    1db4:	85 bb       	out	0x15, r24	; 21
				status[2]=PINA;  //Read status motor0
    1db6:	89 b3       	in	r24, 0x19	; 25
    1db8:	8b 83       	std	Y+3, r24	; 0x03

				if( (status[0]==0xC4||status[0]==0x84) && 
    1dba:	24 3c       	cpi	r18, 0xC4	; 196
    1dbc:	11 f0       	breq	.+4      	; 0x1dc2 <LM629_HW_Reset+0x96>
    1dbe:	24 38       	cpi	r18, 0x84	; 132
    1dc0:	c1 f5       	brne	.+112    	; 0x1e32 <LM629_HW_Reset+0x106>
    1dc2:	94 3c       	cpi	r25, 0xC4	; 196
    1dc4:	11 f0       	breq	.+4      	; 0x1dca <LM629_HW_Reset+0x9e>
					(status[1]==0xC4||status[1]==0x84) && 
    1dc6:	94 38       	cpi	r25, 0x84	; 132
    1dc8:	a1 f5       	brne	.+104    	; 0x1e32 <LM629_HW_Reset+0x106>
    1dca:	84 3c       	cpi	r24, 0xC4	; 196
    1dcc:	11 f0       	breq	.+4      	; 0x1dd2 <LM629_HW_Reset+0xa6>
					(status[2]==0xC4||status[2]==0x84) ){
    1dce:	84 38       	cpi	r24, 0x84	; 132
    1dd0:	81 f5       	brne	.+96     	; 0x1e32 <LM629_HW_Reset+0x106>
			}
		}
		
		if(step==1){
			// SRE : 외부 데이터 메모리 영역 활성화
			MCUCR = (1 << SRE) | (0 << SRW10);
    1dd2:	95 be       	out	0x35, r9	; 53
		    // SRL(0) : Upper Sector로만 사용 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
    1dd4:	a0 92 6d 00 	sts	0x006D, r10
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
    1dd8:	b0 92 6c 00 	sts	0x006C, r11
    1ddc:	76 01       	movw	r14, r12
    1dde:	00 e0       	ldi	r16, 0x00	; 0
    1de0:	10 e2       	ldi	r17, 0x20	; 32
    1de2:	8e 2c       	mov	r8, r14
    1de4:	8c 18       	sub	r8, r12
			while(1){
				for(i=0;i<3;++i){
		        	WriteCommand(i, RSTI);
    1de6:	88 2d       	mov	r24, r8
    1de8:	6d e1       	ldi	r22, 0x1D	; 29
    1dea:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <WriteCommand>
					WriteDataTwoByte(i, 0x0000);
    1dee:	88 2d       	mov	r24, r8
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	70 e0       	ldi	r23, 0x00	; 0
    1df4:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <WriteDataTwoByte>
					READ_STATUS(i, status[i]);
    1df8:	f8 01       	movw	r30, r16
    1dfa:	80 81       	ld	r24, Z
    1dfc:	f7 01       	movw	r30, r14
    1dfe:	81 93       	st	Z+, r24
    1e00:	7f 01       	movw	r14, r30
    1e02:	00 50       	subi	r16, 0x00	; 0
    1e04:	1f 4f       	sbci	r17, 0xFF	; 255
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
			while(1){
				for(i=0;i<3;++i){
    1e06:	f3 e2       	ldi	r31, 0x23	; 35
    1e08:	00 30       	cpi	r16, 0x00	; 0
    1e0a:	1f 07       	cpc	r17, r31
    1e0c:	51 f7       	brne	.-44     	; 0x1de2 <LM629_HW_Reset+0xb6>
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	80 3c       	cpi	r24, 0xC0	; 192
    1e12:	11 f0       	breq	.+4      	; 0x1e18 <LM629_HW_Reset+0xec>
    1e14:	80 38       	cpi	r24, 0x80	; 128
    1e16:	51 f4       	brne	.+20     	; 0x1e2c <LM629_HW_Reset+0x100>
					(status[1]==0xC0||status[1]==0x80) && 
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
				for(i=0;i<3;++i){
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
    1e1a:	80 3c       	cpi	r24, 0xC0	; 192
    1e1c:	11 f0       	breq	.+4      	; 0x1e22 <LM629_HW_Reset+0xf6>
					(status[1]==0xC0||status[1]==0x80) && 
    1e1e:	80 38       	cpi	r24, 0x80	; 128
    1e20:	29 f4       	brne	.+10     	; 0x1e2c <LM629_HW_Reset+0x100>
					(status[2]==0xC0||status[2]==0x80) ){
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
					(status[1]==0xC0||status[1]==0x80) && 
    1e24:	80 3c       	cpi	r24, 0xC0	; 192
    1e26:	69 f0       	breq	.+26     	; 0x1e42 <LM629_HW_Reset+0x116>
					(status[2]==0xC0||status[2]==0x80) ){
    1e28:	80 38       	cpi	r24, 0x80	; 128
    1e2a:	59 f0       	breq	.+22     	; 0x1e42 <LM629_HW_Reset+0x116>
					break;
				}
				else{	//다시 처음부터 LM629초기화
					step=0;	
					// SRE : 외부 데이터 메모리 영역 비활성화
					MCUCR &= ~(1 << SRE) & ~(1 << SRW10);
    1e2c:	85 b7       	in	r24, 0x35	; 53
    1e2e:	8f 73       	andi	r24, 0x3F	; 63
    1e30:	85 bf       	out	0x35, r24	; 53
					PORTC=0x00;
    1e32:	15 ba       	out	0x15, r1	; 21
					lcd_display_str(0,0,"Error. Restart");
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	60 e0       	ldi	r22, 0x00	; 0
    1e38:	4c e8       	ldi	r20, 0x8C	; 140
    1e3a:	51 e0       	ldi	r21, 0x01	; 1
    1e3c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_display_str>
    1e40:	98 cf       	rjmp	.-208    	; 0x1d72 <LM629_HW_Reset+0x46>
					break;
				}
			}
		}
		if(step==2){
			lcd_display_str(0,0,"Initialize success.");
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	4b e9       	ldi	r20, 0x9B	; 155
    1e48:	51 e0       	ldi	r21, 0x01	; 1
    1e4a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_display_str>
    1e4e:	83 e0       	ldi	r24, 0x03	; 3
			for(i=0;i<3;++i){
				PORTB|=0x07;
    1e50:	98 b3       	in	r25, 0x18	; 24
    1e52:	97 60       	ori	r25, 0x07	; 7
    1e54:	98 bb       	out	0x18, r25	; 24
    1e56:	2f ef       	ldi	r18, 0xFF	; 255
    1e58:	3f eb       	ldi	r19, 0xBF	; 191
    1e5a:	46 e0       	ldi	r20, 0x06	; 6
    1e5c:	21 50       	subi	r18, 0x01	; 1
    1e5e:	30 40       	sbci	r19, 0x00	; 0
    1e60:	40 40       	sbci	r20, 0x00	; 0
    1e62:	e1 f7       	brne	.-8      	; 0x1e5c <LM629_HW_Reset+0x130>
    1e64:	00 c0       	rjmp	.+0      	; 0x1e66 <LM629_HW_Reset+0x13a>
    1e66:	00 00       	nop
				_delay_ms(150);
				PORTB&=~0x07;
    1e68:	98 b3       	in	r25, 0x18	; 24
    1e6a:	98 7f       	andi	r25, 0xF8	; 248
    1e6c:	98 bb       	out	0x18, r25	; 24
    1e6e:	2f ef       	ldi	r18, 0xFF	; 255
    1e70:	3f eb       	ldi	r19, 0xBF	; 191
    1e72:	46 e0       	ldi	r20, 0x06	; 6
    1e74:	21 50       	subi	r18, 0x01	; 1
    1e76:	30 40       	sbci	r19, 0x00	; 0
    1e78:	40 40       	sbci	r20, 0x00	; 0
    1e7a:	e1 f7       	brne	.-8      	; 0x1e74 <LM629_HW_Reset+0x148>
    1e7c:	00 c0       	rjmp	.+0      	; 0x1e7e <LM629_HW_Reset+0x152>
    1e7e:	00 00       	nop
    1e80:	81 50       	subi	r24, 0x01	; 1
				}
			}
		}
		if(step==2){
			lcd_display_str(0,0,"Initialize success.");
			for(i=0;i<3;++i){
    1e82:	31 f7       	brne	.-52     	; 0x1e50 <LM629_HW_Reset+0x124>
				PORTB|=0x07;
				_delay_ms(150);
				PORTB&=~0x07;
				_delay_ms(150);
			}
			lcd_clear_screen();
    1e84:	0e 94 44 01 	call	0x288	; 0x288 <lcd_clear_screen>
			break;
		}
	}
}
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	1f 91       	pop	r17
    1e94:	0f 91       	pop	r16
    1e96:	ff 90       	pop	r15
    1e98:	ef 90       	pop	r14
    1e9a:	df 90       	pop	r13
    1e9c:	cf 90       	pop	r12
    1e9e:	bf 90       	pop	r11
    1ea0:	af 90       	pop	r10
    1ea2:	9f 90       	pop	r9
    1ea4:	8f 90       	pop	r8
    1ea6:	08 95       	ret

00001ea8 <StartMotion>:
// Function  : 모든 모터의 모션을 시작한다.
// Parameter : 없음
// Return    : 없음
void StartMotion(void)
{
    WriteCommand(MOTOR0, STT);
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	61 e0       	ldi	r22, 0x01	; 1
    1eac:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <WriteCommand>
    WriteCommand(MOTOR1, STT);
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	61 e0       	ldi	r22, 0x01	; 1
    1eb4:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <WriteCommand>
    WriteCommand(MOTOR2, STT);
    1eb8:	82 e0       	ldi	r24, 0x02	; 2
    1eba:	61 e0       	ldi	r22, 0x01	; 1
    1ebc:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <WriteCommand>
}
    1ec0:	08 95       	ret

00001ec2 <StopMotion>:

// Function  : 모든 모터의 모션을 정지한다.
// Parameter : 없음
// Return    : 없음
void StopMotion(uint16_t mode)
{
    1ec2:	1f 93       	push	r17
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
    1ec8:	18 2f       	mov	r17, r24
    // Motor1 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR0, LTRJ);
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	6f e1       	ldi	r22, 0x1F	; 31
    1ece:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR0, (1 << mode));
    1ed2:	c1 e0       	ldi	r28, 0x01	; 1
    1ed4:	d0 e0       	ldi	r29, 0x00	; 0
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <StopMotion+0x1a>
    1ed8:	cc 0f       	add	r28, r28
    1eda:	dd 1f       	adc	r29, r29
    1edc:	1a 95       	dec	r17
    1ede:	e2 f7       	brpl	.-8      	; 0x1ed8 <StopMotion+0x16>
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	be 01       	movw	r22, r28
    1ee4:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <WriteDataTwoByte>

    // Motor2 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR1, LTRJ);
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	6f e1       	ldi	r22, 0x1F	; 31
    1eec:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR1, (1 << mode));
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	be 01       	movw	r22, r28
    1ef4:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <WriteDataTwoByte>

    // Motor3 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR2, LTRJ);
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	6f e1       	ldi	r22, 0x1F	; 31
    1efc:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR2, (1 << mode));
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	be 01       	movw	r22, r28
    1f04:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <WriteDataTwoByte>

    // 모션 정지
    WriteCommand(MOTOR0, STT);
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	61 e0       	ldi	r22, 0x01	; 1
    1f0c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <WriteCommand>
    WriteCommand(MOTOR1, STT);
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	61 e0       	ldi	r22, 0x01	; 1
    1f14:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <WriteCommand>
    WriteCommand(MOTOR2, STT);
    1f18:	82 e0       	ldi	r24, 0x02	; 2
    1f1a:	61 e0       	ldi	r22, 0x01	; 1
    1f1c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <WriteCommand>
}
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	1f 91       	pop	r17
    1f26:	08 95       	ret

00001f28 <MOTOR_CTR>:

void MOTOR_CTR(long MT0,long MT1,long MT2){
    1f28:	af 92       	push	r10
    1f2a:	bf 92       	push	r11
    1f2c:	cf 92       	push	r12
    1f2e:	df 92       	push	r13
    1f30:	ef 92       	push	r14
    1f32:	ff 92       	push	r15
    1f34:	0f 93       	push	r16
    1f36:	1f 93       	push	r17
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	2c 97       	sbiw	r28, 0x0c	; 12
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	f8 94       	cli
    1f46:	de bf       	out	0x3e, r29	; 62
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	cd bf       	out	0x3d, r28	; 61
    1f4c:	59 01       	movw	r10, r18
    1f4e:	6a 01       	movw	r12, r20
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};
    1f50:	0e 94 12 14 	call	0x2824	; 0x2824 <__floatsisf>
    1f54:	69 83       	std	Y+1, r22	; 0x01
    1f56:	7a 83       	std	Y+2, r23	; 0x02
    1f58:	8b 83       	std	Y+3, r24	; 0x03
    1f5a:	9c 83       	std	Y+4, r25	; 0x04
    1f5c:	c6 01       	movw	r24, r12
    1f5e:	b5 01       	movw	r22, r10
    1f60:	0e 94 12 14 	call	0x2824	; 0x2824 <__floatsisf>
    1f64:	6d 83       	std	Y+5, r22	; 0x05
    1f66:	7e 83       	std	Y+6, r23	; 0x06
    1f68:	8f 83       	std	Y+7, r24	; 0x07
    1f6a:	98 87       	std	Y+8, r25	; 0x08
    1f6c:	c8 01       	movw	r24, r16
    1f6e:	b7 01       	movw	r22, r14
    1f70:	0e 94 12 14 	call	0x2824	; 0x2824 <__floatsisf>
    1f74:	69 87       	std	Y+9, r22	; 0x09
    1f76:	7a 87       	std	Y+10, r23	; 0x0a
    1f78:	8b 87       	std	Y+11, r24	; 0x0b
    1f7a:	9c 87       	std	Y+12, r25	; 0x0c
    1f7c:	8e 01       	movw	r16, r28
    1f7e:	0f 5f       	subi	r16, 0xFF	; 255
    1f80:	1f 4f       	sbci	r17, 0xFF	; 255

	for(i=0;i<3;++i){
    1f82:	ee 24       	eor	r14, r14
		
		V[i]=V[i]*0.2728;
    1f84:	f8 01       	movw	r30, r16
    1f86:	60 81       	ld	r22, Z
    1f88:	71 81       	ldd	r23, Z+1	; 0x01
    1f8a:	82 81       	ldd	r24, Z+2	; 0x02
    1f8c:	93 81       	ldd	r25, Z+3	; 0x03
    1f8e:	21 e7       	ldi	r18, 0x71	; 113
    1f90:	3c ea       	ldi	r19, 0xAC	; 172
    1f92:	4b e8       	ldi	r20, 0x8B	; 139
    1f94:	5e e3       	ldi	r21, 0x3E	; 62
    1f96:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
    1f9a:	9b 01       	movw	r18, r22
    1f9c:	ac 01       	movw	r20, r24
    1f9e:	f8 01       	movw	r30, r16
    1fa0:	21 93       	st	Z+, r18
    1fa2:	31 93       	st	Z+, r19
    1fa4:	41 93       	st	Z+, r20
    1fa6:	51 93       	st	Z+, r21
    1fa8:	8f 01       	movw	r16, r30

		SetVelocity(i, V[i]*65536);
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e8       	ldi	r20, 0x80	; 128
    1fb0:	57 e4       	ldi	r21, 0x47	; 71
    1fb2:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3>
    1fb6:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__fixsfsi>
    1fba:	ab 01       	movw	r20, r22
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	8e 2d       	mov	r24, r14
    1fc0:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <SetVelocity>
void MOTOR_CTR(long MT0,long MT1,long MT2){
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};

	for(i=0;i<3;++i){
    1fc4:	e3 94       	inc	r14
    1fc6:	fe 2d       	mov	r31, r14
    1fc8:	f3 30       	cpi	r31, 0x03	; 3
    1fca:	e1 f6       	brne	.-72     	; 0x1f84 <MOTOR_CTR+0x5c>
		
		V[i]=V[i]*0.2728;

		SetVelocity(i, V[i]*65536);
	}
	StartMotion();	
    1fcc:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <StartMotion>
}
    1fd0:	2c 96       	adiw	r28, 0x0c	; 12
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	ff 90       	pop	r15
    1fe6:	ef 90       	pop	r14
    1fe8:	df 90       	pop	r13
    1fea:	cf 90       	pop	r12
    1fec:	bf 90       	pop	r11
    1fee:	af 90       	pop	r10
    1ff0:	08 95       	ret

00001ff2 <Camera_init>:


void Camera_init(void){
	unsigned char buff=0;
	while(1){	//우선순위 큰것부터
		putchar1(11);
    1ff2:	8b e0       	ldi	r24, 0x0B	; 11
    1ff4:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		while(!rx1_flg); 
    1ff8:	80 91 b8 02 	lds	r24, 0x02B8
    1ffc:	88 23       	and	r24, r24
    1ffe:	e1 f3       	breq	.-8      	; 0x1ff8 <Camera_init+0x6>
		buff=getchar1();
    2000:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
		if(buff){
    2004:	88 23       	and	r24, r24
    2006:	a9 f3       	breq	.-22     	; 0x1ff2 <Camera_init>
			buff=0;
			break;
		}
	}
	while(1){	//추적 할 최소 픽셀수  255픽셀
		putchar1(17);
    2008:	81 e1       	ldi	r24, 0x11	; 17
    200a:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		putchar1(255);
    200e:	8f ef       	ldi	r24, 0xFF	; 255
    2010:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		while(!rx1_flg);
    2014:	80 91 b8 02 	lds	r24, 0x02B8
    2018:	88 23       	and	r24, r24
    201a:	e1 f3       	breq	.-8      	; 0x2014 <Camera_init+0x22>
		buff=getchar1();
    201c:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
		if(buff)break;
    2020:	88 23       	and	r24, r24
    2022:	91 f3       	breq	.-28     	; 0x2008 <Camera_init+0x16>
	}
}
    2024:	08 95       	ret

00002026 <Camera_Cmd>:

unsigned char Camera_Cmd(unsigned char color, unsigned char cmd){
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	00 d0       	rcall	.+0      	; 0x202c <Camera_Cmd+0x6>
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
	
	volatile unsigned char buff=0, data=0;
    2030:	19 82       	std	Y+1, r1	; 0x01
    2032:	1a 82       	std	Y+2, r1	; 0x02
	
	data=cmd+(color*10);
    2034:	88 0f       	add	r24, r24
    2036:	98 2f       	mov	r25, r24
    2038:	99 0f       	add	r25, r25
    203a:	99 0f       	add	r25, r25
    203c:	98 0f       	add	r25, r24
    203e:	69 0f       	add	r22, r25
    2040:	6a 83       	std	Y+2, r22	; 0x02

	putchar1(data);
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
	while(!rx1_flg);
    2048:	80 91 b8 02 	lds	r24, 0x02B8
    204c:	88 23       	and	r24, r24
    204e:	e1 f3       	breq	.-8      	; 0x2048 <Camera_Cmd+0x22>
	buff=getchar1();
    2050:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
    2054:	89 83       	std	Y+1, r24	; 0x01
	
	return buff;
    2056:	89 81       	ldd	r24, Y+1	; 0x01
}
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <Sensor_init>:
// Function  : IR, PSD 센서를 초기화
// Parameter : 없음
// Return    : 없음
void Sensor_init(void)
{
    DDRE  &= ~0x1C;
    2062:	82 b1       	in	r24, 0x02	; 2
    2064:	83 7e       	andi	r24, 0xE3	; 227
    2066:	82 b9       	out	0x02, r24	; 2
    DDRG  &= ~0x18;
    2068:	e4 e6       	ldi	r30, 0x64	; 100
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	87 7e       	andi	r24, 0xE7	; 231
    2070:	80 83       	st	Z, r24

    UCSR0A = 0x00;
    2072:	1b b8       	out	0x0b, r1	; 11
    UCSR0B = 0x98;
    2074:	88 e9       	ldi	r24, 0x98	; 152
    2076:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = 0x06;
    2078:	86 e0       	ldi	r24, 0x06	; 6
    207a:	80 93 95 00 	sts	0x0095, r24
    UBRR0H = 0x00;
    207e:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 0x0F;
    2082:	8f e0       	ldi	r24, 0x0F	; 15
    2084:	89 b9       	out	0x09, r24	; 9

    sei();
    2086:	78 94       	sei
}
    2088:	08 95       	ret

0000208a <__vector_18>:

// Function  : USART를 통해 전송되는 PSD 센서값을 전역변수에 저장하는 ISR
// Parameter : 없음
// Return    : 없음
ISR(USART0_RX_vect)
{
    208a:	1f 92       	push	r1
    208c:	0f 92       	push	r0
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	0f 92       	push	r0
    2092:	0b b6       	in	r0, 0x3b	; 59
    2094:	0f 92       	push	r0
    2096:	11 24       	eor	r1, r1
    2098:	2f 93       	push	r18
    209a:	3f 93       	push	r19
    209c:	8f 93       	push	r24
    209e:	9f 93       	push	r25
    20a0:	ef 93       	push	r30
    20a2:	ff 93       	push	r31
    volatile static unsigned char rx_cnt = 0;
    volatile static unsigned char chksum = 0;
    volatile static unsigned char buf[11] = {0, };
    uint8_t rxbuf = 0, i;

    rxbuf = UDR0;
    20a4:	9c b1       	in	r25, 0x0c	; 12
    //수신완료 및 에러 검출되지 않을시
    while(!(UCSR0A & 0xB8));
    20a6:	8b b1       	in	r24, 0x0b	; 11
    20a8:	88 7b       	andi	r24, 0xB8	; 184
    20aa:	e9 f3       	breq	.-6      	; 0x20a6 <__vector_18+0x1c>

    if(rxbuf == 0xFF)
    20ac:	9f 3f       	cpi	r25, 0xFF	; 255
    20ae:	21 f4       	brne	.+8      	; 0x20b8 <__vector_18+0x2e>
    {
        //시작 버퍼 수신
        rx_en = 1;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	80 93 f5 02 	sts	0x02F5, r24
    20b6:	47 c0       	rjmp	.+142    	; 0x2146 <__vector_18+0xbc>
    }
    else if(rx_en == 1)
    20b8:	80 91 f5 02 	lds	r24, 0x02F5
    20bc:	81 30       	cpi	r24, 0x01	; 1
    20be:	09 f0       	breq	.+2      	; 0x20c2 <__vector_18+0x38>
    20c0:	42 c0       	rjmp	.+132    	; 0x2146 <__vector_18+0xbc>
    {
        //데이터 받기
        //0번지부터 PSD0 저장
        buf[rx_cnt++] = rxbuf;
    20c2:	80 91 f4 02 	lds	r24, 0x02F4
    20c6:	e8 2f       	mov	r30, r24
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	e8 51       	subi	r30, 0x18	; 24
    20cc:	fd 4f       	sbci	r31, 0xFD	; 253
    20ce:	90 83       	st	Z, r25
    20d0:	8f 5f       	subi	r24, 0xFF	; 255
    20d2:	80 93 f4 02 	sts	0x02F4, r24

        if(rx_cnt > 10)
    20d6:	80 91 f4 02 	lds	r24, 0x02F4
    20da:	8b 30       	cpi	r24, 0x0B	; 11
    20dc:	a0 f1       	brcs	.+104    	; 0x2146 <__vector_18+0xbc>
        {
            // PSD 10개, 체크섬 1개 수신 완료되면
            //플래그 리셋
            rx_en = rx_cnt = 0;
    20de:	10 92 f4 02 	sts	0x02F4, r1
    20e2:	80 91 f4 02 	lds	r24, 0x02F4
    20e6:	80 93 f5 02 	sts	0x02F5, r24
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	90 e0       	ldi	r25, 0x00	; 0

            // 체크섬 계산
            for(i = 0 ; i < 10 ; i++)
                chksum += buf[i];
    20ee:	30 91 f3 02 	lds	r19, 0x02F3
    20f2:	fc 01       	movw	r30, r24
    20f4:	e8 51       	subi	r30, 0x18	; 24
    20f6:	fd 4f       	sbci	r31, 0xFD	; 253
    20f8:	20 81       	ld	r18, Z
    20fa:	23 0f       	add	r18, r19
    20fc:	20 93 f3 02 	sts	0x02F3, r18
    2100:	01 96       	adiw	r24, 0x01	; 1
            // PSD 10개, 체크섬 1개 수신 완료되면
            //플래그 리셋
            rx_en = rx_cnt = 0;

            // 체크섬 계산
            for(i = 0 ; i < 10 ; i++)
    2102:	8a 30       	cpi	r24, 0x0A	; 10
    2104:	91 05       	cpc	r25, r1
    2106:	99 f7       	brne	.-26     	; 0x20ee <__vector_18+0x64>
                chksum += buf[i];

            //00~FE 이므로 FF나오면 +1 (오류방지)
            if(chksum == 0xFF)chksum++;
    2108:	80 91 f3 02 	lds	r24, 0x02F3
    210c:	8f 3f       	cpi	r24, 0xFF	; 255
    210e:	29 f4       	brne	.+10     	; 0x211a <__vector_18+0x90>
    2110:	80 91 f3 02 	lds	r24, 0x02F3
    2114:	8f 5f       	subi	r24, 0xFF	; 255
    2116:	80 93 f3 02 	sts	0x02F3, r24

            // 체크섬이 올바른지 체크 후 맞으면 전역변수로 이동
            if(chksum == buf[10])
    211a:	90 91 f3 02 	lds	r25, 0x02F3
    211e:	80 91 f2 02 	lds	r24, 0x02F2
    2122:	98 17       	cp	r25, r24
    2124:	71 f4       	brne	.+28     	; 0x2142 <__vector_18+0xb8>
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
                for(i = 0 ; i < 10 ; i++)
                    psd_value[i] = buf[i];
    212a:	fc 01       	movw	r30, r24
    212c:	e8 51       	subi	r30, 0x18	; 24
    212e:	fd 4f       	sbci	r31, 0xFD	; 253
    2130:	20 81       	ld	r18, Z
    2132:	fc 01       	movw	r30, r24
    2134:	e6 50       	subi	r30, 0x06	; 6
    2136:	fd 4f       	sbci	r31, 0xFD	; 253
    2138:	20 83       	st	Z, r18
    213a:	01 96       	adiw	r24, 0x01	; 1
            //00~FE 이므로 FF나오면 +1 (오류방지)
            if(chksum == 0xFF)chksum++;

            // 체크섬이 올바른지 체크 후 맞으면 전역변수로 이동
            if(chksum == buf[10])
                for(i = 0 ; i < 10 ; i++)
    213c:	8a 30       	cpi	r24, 0x0A	; 10
    213e:	91 05       	cpc	r25, r1
    2140:	a1 f7       	brne	.-24     	; 0x212a <__vector_18+0xa0>
                    psd_value[i] = buf[i];

            //체크섬 리셋
            chksum = 0;
    2142:	10 92 f3 02 	sts	0x02F3, r1
    	}
    }
}
    2146:	ff 91       	pop	r31
    2148:	ef 91       	pop	r30
    214a:	9f 91       	pop	r25
    214c:	8f 91       	pop	r24
    214e:	3f 91       	pop	r19
    2150:	2f 91       	pop	r18
    2152:	0f 90       	pop	r0
    2154:	0b be       	out	0x3b, r0	; 59
    2156:	0f 90       	pop	r0
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	0f 90       	pop	r0
    215c:	1f 90       	pop	r1
    215e:	18 95       	reti

00002160 <_fpadd_parts>:
    2160:	a0 e0       	ldi	r26, 0x00	; 0
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e6 eb       	ldi	r30, 0xB6	; 182
    2166:	f0 e1       	ldi	r31, 0x10	; 16
    2168:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__prologue_saves__+0x8>
    216c:	fc 01       	movw	r30, r24
    216e:	ea 01       	movw	r28, r20
    2170:	80 81       	ld	r24, Z
    2172:	82 30       	cpi	r24, 0x02	; 2
    2174:	08 f4       	brcc	.+2      	; 0x2178 <_fpadd_parts+0x18>
    2176:	38 c1       	rjmp	.+624    	; 0x23e8 <_fpadd_parts+0x288>
    2178:	db 01       	movw	r26, r22
    217a:	9c 91       	ld	r25, X
    217c:	92 30       	cpi	r25, 0x02	; 2
    217e:	08 f4       	brcc	.+2      	; 0x2182 <_fpadd_parts+0x22>
    2180:	30 c1       	rjmp	.+608    	; 0x23e2 <_fpadd_parts+0x282>
    2182:	84 30       	cpi	r24, 0x04	; 4
    2184:	59 f4       	brne	.+22     	; 0x219c <_fpadd_parts+0x3c>
    2186:	94 30       	cpi	r25, 0x04	; 4
    2188:	09 f0       	breq	.+2      	; 0x218c <_fpadd_parts+0x2c>
    218a:	2e c1       	rjmp	.+604    	; 0x23e8 <_fpadd_parts+0x288>
    218c:	91 81       	ldd	r25, Z+1	; 0x01
    218e:	11 96       	adiw	r26, 0x01	; 1
    2190:	8c 91       	ld	r24, X
    2192:	11 97       	sbiw	r26, 0x01	; 1
    2194:	98 17       	cp	r25, r24
    2196:	09 f0       	breq	.+2      	; 0x219a <_fpadd_parts+0x3a>
    2198:	21 c1       	rjmp	.+578    	; 0x23dc <_fpadd_parts+0x27c>
    219a:	26 c1       	rjmp	.+588    	; 0x23e8 <_fpadd_parts+0x288>
    219c:	94 30       	cpi	r25, 0x04	; 4
    219e:	09 f4       	brne	.+2      	; 0x21a2 <_fpadd_parts+0x42>
    21a0:	20 c1       	rjmp	.+576    	; 0x23e2 <_fpadd_parts+0x282>
    21a2:	92 30       	cpi	r25, 0x02	; 2
    21a4:	b1 f4       	brne	.+44     	; 0x21d2 <_fpadd_parts+0x72>
    21a6:	82 30       	cpi	r24, 0x02	; 2
    21a8:	09 f0       	breq	.+2      	; 0x21ac <_fpadd_parts+0x4c>
    21aa:	1e c1       	rjmp	.+572    	; 0x23e8 <_fpadd_parts+0x288>
    21ac:	ca 01       	movw	r24, r20
    21ae:	af 01       	movw	r20, r30
    21b0:	28 e0       	ldi	r18, 0x08	; 8
    21b2:	da 01       	movw	r26, r20
    21b4:	0d 90       	ld	r0, X+
    21b6:	ad 01       	movw	r20, r26
    21b8:	dc 01       	movw	r26, r24
    21ba:	0d 92       	st	X+, r0
    21bc:	cd 01       	movw	r24, r26
    21be:	21 50       	subi	r18, 0x01	; 1
    21c0:	c1 f7       	brne	.-16     	; 0x21b2 <_fpadd_parts+0x52>
    21c2:	db 01       	movw	r26, r22
    21c4:	11 96       	adiw	r26, 0x01	; 1
    21c6:	8c 91       	ld	r24, X
    21c8:	11 97       	sbiw	r26, 0x01	; 1
    21ca:	91 81       	ldd	r25, Z+1	; 0x01
    21cc:	89 23       	and	r24, r25
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	0a c1       	rjmp	.+532    	; 0x23e6 <_fpadd_parts+0x286>
    21d2:	82 30       	cpi	r24, 0x02	; 2
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <_fpadd_parts+0x78>
    21d6:	05 c1       	rjmp	.+522    	; 0x23e2 <_fpadd_parts+0x282>
    21d8:	c2 80       	ldd	r12, Z+2	; 0x02
    21da:	d3 80       	ldd	r13, Z+3	; 0x03
    21dc:	db 01       	movw	r26, r22
    21de:	12 96       	adiw	r26, 0x02	; 2
    21e0:	6d 90       	ld	r6, X+
    21e2:	7c 90       	ld	r7, X
    21e4:	13 97       	sbiw	r26, 0x03	; 3
    21e6:	24 81       	ldd	r18, Z+4	; 0x04
    21e8:	35 81       	ldd	r19, Z+5	; 0x05
    21ea:	46 81       	ldd	r20, Z+6	; 0x06
    21ec:	57 81       	ldd	r21, Z+7	; 0x07
    21ee:	14 96       	adiw	r26, 0x04	; 4
    21f0:	ed 90       	ld	r14, X+
    21f2:	fd 90       	ld	r15, X+
    21f4:	0d 91       	ld	r16, X+
    21f6:	1c 91       	ld	r17, X
    21f8:	17 97       	sbiw	r26, 0x07	; 7
    21fa:	c6 01       	movw	r24, r12
    21fc:	86 19       	sub	r24, r6
    21fe:	97 09       	sbc	r25, r7
    2200:	5c 01       	movw	r10, r24
    2202:	97 ff       	sbrs	r25, 7
    2204:	04 c0       	rjmp	.+8      	; 0x220e <_fpadd_parts+0xae>
    2206:	aa 24       	eor	r10, r10
    2208:	bb 24       	eor	r11, r11
    220a:	a8 1a       	sub	r10, r24
    220c:	b9 0a       	sbc	r11, r25
    220e:	b0 e2       	ldi	r27, 0x20	; 32
    2210:	ab 16       	cp	r10, r27
    2212:	b1 04       	cpc	r11, r1
    2214:	0c f0       	brlt	.+2      	; 0x2218 <_fpadd_parts+0xb8>
    2216:	61 c0       	rjmp	.+194    	; 0x22da <_fpadd_parts+0x17a>
    2218:	18 16       	cp	r1, r24
    221a:	19 06       	cpc	r1, r25
    221c:	6c f5       	brge	.+90     	; 0x2278 <_fpadd_parts+0x118>
    221e:	37 01       	movw	r6, r14
    2220:	48 01       	movw	r8, r16
    2222:	0a 2c       	mov	r0, r10
    2224:	04 c0       	rjmp	.+8      	; 0x222e <_fpadd_parts+0xce>
    2226:	96 94       	lsr	r9
    2228:	87 94       	ror	r8
    222a:	77 94       	ror	r7
    222c:	67 94       	ror	r6
    222e:	0a 94       	dec	r0
    2230:	d2 f7       	brpl	.-12     	; 0x2226 <_fpadd_parts+0xc6>
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	a0 e0       	ldi	r26, 0x00	; 0
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	0a 2c       	mov	r0, r10
    223c:	04 c0       	rjmp	.+8      	; 0x2246 <_fpadd_parts+0xe6>
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	aa 1f       	adc	r26, r26
    2244:	bb 1f       	adc	r27, r27
    2246:	0a 94       	dec	r0
    2248:	d2 f7       	brpl	.-12     	; 0x223e <_fpadd_parts+0xde>
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	a1 09       	sbc	r26, r1
    224e:	b1 09       	sbc	r27, r1
    2250:	8e 21       	and	r24, r14
    2252:	9f 21       	and	r25, r15
    2254:	a0 23       	and	r26, r16
    2256:	b1 23       	and	r27, r17
    2258:	ee 24       	eor	r14, r14
    225a:	ff 24       	eor	r15, r15
    225c:	87 01       	movw	r16, r14
    225e:	e3 94       	inc	r14
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	a1 05       	cpc	r26, r1
    2264:	b1 05       	cpc	r27, r1
    2266:	19 f4       	brne	.+6      	; 0x226e <_fpadd_parts+0x10e>
    2268:	ee 24       	eor	r14, r14
    226a:	ff 24       	eor	r15, r15
    226c:	87 01       	movw	r16, r14
    226e:	e6 28       	or	r14, r6
    2270:	f7 28       	or	r15, r7
    2272:	08 29       	or	r16, r8
    2274:	19 29       	or	r17, r9
    2276:	3c c0       	rjmp	.+120    	; 0x22f0 <_fpadd_parts+0x190>
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	d1 f1       	breq	.+116    	; 0x22f0 <_fpadd_parts+0x190>
    227c:	ca 0c       	add	r12, r10
    227e:	db 1c       	adc	r13, r11
    2280:	39 01       	movw	r6, r18
    2282:	4a 01       	movw	r8, r20
    2284:	0a 2c       	mov	r0, r10
    2286:	04 c0       	rjmp	.+8      	; 0x2290 <_fpadd_parts+0x130>
    2288:	96 94       	lsr	r9
    228a:	87 94       	ror	r8
    228c:	77 94       	ror	r7
    228e:	67 94       	ror	r6
    2290:	0a 94       	dec	r0
    2292:	d2 f7       	brpl	.-12     	; 0x2288 <_fpadd_parts+0x128>
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	a0 e0       	ldi	r26, 0x00	; 0
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	0a 2c       	mov	r0, r10
    229e:	04 c0       	rjmp	.+8      	; 0x22a8 <_fpadd_parts+0x148>
    22a0:	88 0f       	add	r24, r24
    22a2:	99 1f       	adc	r25, r25
    22a4:	aa 1f       	adc	r26, r26
    22a6:	bb 1f       	adc	r27, r27
    22a8:	0a 94       	dec	r0
    22aa:	d2 f7       	brpl	.-12     	; 0x22a0 <_fpadd_parts+0x140>
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	a1 09       	sbc	r26, r1
    22b0:	b1 09       	sbc	r27, r1
    22b2:	82 23       	and	r24, r18
    22b4:	93 23       	and	r25, r19
    22b6:	a4 23       	and	r26, r20
    22b8:	b5 23       	and	r27, r21
    22ba:	21 e0       	ldi	r18, 0x01	; 1
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e0       	ldi	r20, 0x00	; 0
    22c0:	50 e0       	ldi	r21, 0x00	; 0
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	a1 05       	cpc	r26, r1
    22c6:	b1 05       	cpc	r27, r1
    22c8:	19 f4       	brne	.+6      	; 0x22d0 <_fpadd_parts+0x170>
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	a9 01       	movw	r20, r18
    22d0:	26 29       	or	r18, r6
    22d2:	37 29       	or	r19, r7
    22d4:	48 29       	or	r20, r8
    22d6:	59 29       	or	r21, r9
    22d8:	0b c0       	rjmp	.+22     	; 0x22f0 <_fpadd_parts+0x190>
    22da:	6c 14       	cp	r6, r12
    22dc:	7d 04       	cpc	r7, r13
    22de:	24 f4       	brge	.+8      	; 0x22e8 <_fpadd_parts+0x188>
    22e0:	ee 24       	eor	r14, r14
    22e2:	ff 24       	eor	r15, r15
    22e4:	87 01       	movw	r16, r14
    22e6:	04 c0       	rjmp	.+8      	; 0x22f0 <_fpadd_parts+0x190>
    22e8:	63 01       	movw	r12, r6
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	a9 01       	movw	r20, r18
    22f0:	81 81       	ldd	r24, Z+1	; 0x01
    22f2:	fb 01       	movw	r30, r22
    22f4:	91 81       	ldd	r25, Z+1	; 0x01
    22f6:	89 17       	cp	r24, r25
    22f8:	09 f4       	brne	.+2      	; 0x22fc <_fpadd_parts+0x19c>
    22fa:	45 c0       	rjmp	.+138    	; 0x2386 <_fpadd_parts+0x226>
    22fc:	88 23       	and	r24, r24
    22fe:	49 f0       	breq	.+18     	; 0x2312 <_fpadd_parts+0x1b2>
    2300:	d8 01       	movw	r26, r16
    2302:	c7 01       	movw	r24, r14
    2304:	82 1b       	sub	r24, r18
    2306:	93 0b       	sbc	r25, r19
    2308:	a4 0b       	sbc	r26, r20
    230a:	b5 0b       	sbc	r27, r21
    230c:	9c 01       	movw	r18, r24
    230e:	ad 01       	movw	r20, r26
    2310:	04 c0       	rjmp	.+8      	; 0x231a <_fpadd_parts+0x1ba>
    2312:	2e 19       	sub	r18, r14
    2314:	3f 09       	sbc	r19, r15
    2316:	40 0b       	sbc	r20, r16
    2318:	51 0b       	sbc	r21, r17
    231a:	57 fd       	sbrc	r21, 7
    231c:	04 c0       	rjmp	.+8      	; 0x2326 <_fpadd_parts+0x1c6>
    231e:	19 82       	std	Y+1, r1	; 0x01
    2320:	db 82       	std	Y+3, r13	; 0x03
    2322:	ca 82       	std	Y+2, r12	; 0x02
    2324:	0b c0       	rjmp	.+22     	; 0x233c <_fpadd_parts+0x1dc>
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	db 82       	std	Y+3, r13	; 0x03
    232c:	ca 82       	std	Y+2, r12	; 0x02
    232e:	50 95       	com	r21
    2330:	40 95       	com	r20
    2332:	30 95       	com	r19
    2334:	21 95       	neg	r18
    2336:	3f 4f       	sbci	r19, 0xFF	; 255
    2338:	4f 4f       	sbci	r20, 0xFF	; 255
    233a:	5f 4f       	sbci	r21, 0xFF	; 255
    233c:	2c 83       	std	Y+4, r18	; 0x04
    233e:	3d 83       	std	Y+5, r19	; 0x05
    2340:	4e 83       	std	Y+6, r20	; 0x06
    2342:	5f 83       	std	Y+7, r21	; 0x07
    2344:	0d c0       	rjmp	.+26     	; 0x2360 <_fpadd_parts+0x200>
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	aa 1f       	adc	r26, r26
    234c:	bb 1f       	adc	r27, r27
    234e:	8c 83       	std	Y+4, r24	; 0x04
    2350:	9d 83       	std	Y+5, r25	; 0x05
    2352:	ae 83       	std	Y+6, r26	; 0x06
    2354:	bf 83       	std	Y+7, r27	; 0x07
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	9b 81       	ldd	r25, Y+3	; 0x03
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	9b 83       	std	Y+3, r25	; 0x03
    235e:	8a 83       	std	Y+2, r24	; 0x02
    2360:	8c 81       	ldd	r24, Y+4	; 0x04
    2362:	9d 81       	ldd	r25, Y+5	; 0x05
    2364:	ae 81       	ldd	r26, Y+6	; 0x06
    2366:	bf 81       	ldd	r27, Y+7	; 0x07
    2368:	9c 01       	movw	r18, r24
    236a:	ad 01       	movw	r20, r26
    236c:	21 50       	subi	r18, 0x01	; 1
    236e:	30 40       	sbci	r19, 0x00	; 0
    2370:	40 40       	sbci	r20, 0x00	; 0
    2372:	50 40       	sbci	r21, 0x00	; 0
    2374:	2f 3f       	cpi	r18, 0xFF	; 255
    2376:	ef ef       	ldi	r30, 0xFF	; 255
    2378:	3e 07       	cpc	r19, r30
    237a:	ef ef       	ldi	r30, 0xFF	; 255
    237c:	4e 07       	cpc	r20, r30
    237e:	ef e3       	ldi	r30, 0x3F	; 63
    2380:	5e 07       	cpc	r21, r30
    2382:	08 f3       	brcs	.-62     	; 0x2346 <_fpadd_parts+0x1e6>
    2384:	0b c0       	rjmp	.+22     	; 0x239c <_fpadd_parts+0x23c>
    2386:	89 83       	std	Y+1, r24	; 0x01
    2388:	db 82       	std	Y+3, r13	; 0x03
    238a:	ca 82       	std	Y+2, r12	; 0x02
    238c:	2e 0d       	add	r18, r14
    238e:	3f 1d       	adc	r19, r15
    2390:	40 1f       	adc	r20, r16
    2392:	51 1f       	adc	r21, r17
    2394:	2c 83       	std	Y+4, r18	; 0x04
    2396:	3d 83       	std	Y+5, r19	; 0x05
    2398:	4e 83       	std	Y+6, r20	; 0x06
    239a:	5f 83       	std	Y+7, r21	; 0x07
    239c:	83 e0       	ldi	r24, 0x03	; 3
    239e:	88 83       	st	Y, r24
    23a0:	2c 81       	ldd	r18, Y+4	; 0x04
    23a2:	3d 81       	ldd	r19, Y+5	; 0x05
    23a4:	4e 81       	ldd	r20, Y+6	; 0x06
    23a6:	5f 81       	ldd	r21, Y+7	; 0x07
    23a8:	57 ff       	sbrs	r21, 7
    23aa:	1d c0       	rjmp	.+58     	; 0x23e6 <_fpadd_parts+0x286>
    23ac:	da 01       	movw	r26, r20
    23ae:	c9 01       	movw	r24, r18
    23b0:	81 70       	andi	r24, 0x01	; 1
    23b2:	90 70       	andi	r25, 0x00	; 0
    23b4:	a0 70       	andi	r26, 0x00	; 0
    23b6:	b0 70       	andi	r27, 0x00	; 0
    23b8:	56 95       	lsr	r21
    23ba:	47 95       	ror	r20
    23bc:	37 95       	ror	r19
    23be:	27 95       	ror	r18
    23c0:	82 2b       	or	r24, r18
    23c2:	93 2b       	or	r25, r19
    23c4:	a4 2b       	or	r26, r20
    23c6:	b5 2b       	or	r27, r21
    23c8:	8c 83       	std	Y+4, r24	; 0x04
    23ca:	9d 83       	std	Y+5, r25	; 0x05
    23cc:	ae 83       	std	Y+6, r26	; 0x06
    23ce:	bf 83       	std	Y+7, r27	; 0x07
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	9b 81       	ldd	r25, Y+3	; 0x03
    23d4:	01 96       	adiw	r24, 0x01	; 1
    23d6:	9b 83       	std	Y+3, r25	; 0x03
    23d8:	8a 83       	std	Y+2, r24	; 0x02
    23da:	05 c0       	rjmp	.+10     	; 0x23e6 <_fpadd_parts+0x286>
    23dc:	ef ea       	ldi	r30, 0xAF	; 175
    23de:	f1 e0       	ldi	r31, 0x01	; 1
    23e0:	03 c0       	rjmp	.+6      	; 0x23e8 <_fpadd_parts+0x288>
    23e2:	fb 01       	movw	r30, r22
    23e4:	01 c0       	rjmp	.+2      	; 0x23e8 <_fpadd_parts+0x288>
    23e6:	fe 01       	movw	r30, r28
    23e8:	cf 01       	movw	r24, r30
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	ee e0       	ldi	r30, 0x0E	; 14
    23f0:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__epilogue_restores__+0x8>

000023f4 <__addsf3>:
    23f4:	a0 e2       	ldi	r26, 0x20	; 32
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e0 e0       	ldi	r30, 0x00	; 0
    23fa:	f2 e1       	ldi	r31, 0x12	; 18
    23fc:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__prologue_saves__+0x18>
    2400:	69 83       	std	Y+1, r22	; 0x01
    2402:	7a 83       	std	Y+2, r23	; 0x02
    2404:	8b 83       	std	Y+3, r24	; 0x03
    2406:	9c 83       	std	Y+4, r25	; 0x04
    2408:	2d 83       	std	Y+5, r18	; 0x05
    240a:	3e 83       	std	Y+6, r19	; 0x06
    240c:	4f 83       	std	Y+7, r20	; 0x07
    240e:	58 87       	std	Y+8, r21	; 0x08
    2410:	89 e0       	ldi	r24, 0x09	; 9
    2412:	e8 2e       	mov	r14, r24
    2414:	f1 2c       	mov	r15, r1
    2416:	ec 0e       	add	r14, r28
    2418:	fd 1e       	adc	r15, r29
    241a:	ce 01       	movw	r24, r28
    241c:	01 96       	adiw	r24, 0x01	; 1
    241e:	b7 01       	movw	r22, r14
    2420:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__unpack_f>
    2424:	8e 01       	movw	r16, r28
    2426:	0f 5e       	subi	r16, 0xEF	; 239
    2428:	1f 4f       	sbci	r17, 0xFF	; 255
    242a:	ce 01       	movw	r24, r28
    242c:	05 96       	adiw	r24, 0x05	; 5
    242e:	b8 01       	movw	r22, r16
    2430:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__unpack_f>
    2434:	c7 01       	movw	r24, r14
    2436:	b8 01       	movw	r22, r16
    2438:	ae 01       	movw	r20, r28
    243a:	47 5e       	subi	r20, 0xE7	; 231
    243c:	5f 4f       	sbci	r21, 0xFF	; 255
    243e:	0e 94 b0 10 	call	0x2160	; 0x2160 <_fpadd_parts>
    2442:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__pack_f>
    2446:	a0 96       	adiw	r28, 0x20	; 32
    2448:	e6 e0       	ldi	r30, 0x06	; 6
    244a:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__epilogue_restores__+0x18>

0000244e <__subsf3>:
    244e:	a0 e2       	ldi	r26, 0x20	; 32
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	ed e2       	ldi	r30, 0x2D	; 45
    2454:	f2 e1       	ldi	r31, 0x12	; 18
    2456:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__prologue_saves__+0x18>
    245a:	69 83       	std	Y+1, r22	; 0x01
    245c:	7a 83       	std	Y+2, r23	; 0x02
    245e:	8b 83       	std	Y+3, r24	; 0x03
    2460:	9c 83       	std	Y+4, r25	; 0x04
    2462:	2d 83       	std	Y+5, r18	; 0x05
    2464:	3e 83       	std	Y+6, r19	; 0x06
    2466:	4f 83       	std	Y+7, r20	; 0x07
    2468:	58 87       	std	Y+8, r21	; 0x08
    246a:	8e 01       	movw	r16, r28
    246c:	07 5f       	subi	r16, 0xF7	; 247
    246e:	1f 4f       	sbci	r17, 0xFF	; 255
    2470:	ce 01       	movw	r24, r28
    2472:	01 96       	adiw	r24, 0x01	; 1
    2474:	b8 01       	movw	r22, r16
    2476:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__unpack_f>
    247a:	91 e1       	ldi	r25, 0x11	; 17
    247c:	e9 2e       	mov	r14, r25
    247e:	f1 2c       	mov	r15, r1
    2480:	ec 0e       	add	r14, r28
    2482:	fd 1e       	adc	r15, r29
    2484:	ce 01       	movw	r24, r28
    2486:	05 96       	adiw	r24, 0x05	; 5
    2488:	b7 01       	movw	r22, r14
    248a:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__unpack_f>
    248e:	8a 89       	ldd	r24, Y+18	; 0x12
    2490:	91 e0       	ldi	r25, 0x01	; 1
    2492:	89 27       	eor	r24, r25
    2494:	8a 8b       	std	Y+18, r24	; 0x12
    2496:	c8 01       	movw	r24, r16
    2498:	b7 01       	movw	r22, r14
    249a:	ae 01       	movw	r20, r28
    249c:	47 5e       	subi	r20, 0xE7	; 231
    249e:	5f 4f       	sbci	r21, 0xFF	; 255
    24a0:	0e 94 b0 10 	call	0x2160	; 0x2160 <_fpadd_parts>
    24a4:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__pack_f>
    24a8:	a0 96       	adiw	r28, 0x20	; 32
    24aa:	e6 e0       	ldi	r30, 0x06	; 6
    24ac:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__epilogue_restores__+0x18>

000024b0 <__mulsf3>:
    24b0:	a0 e2       	ldi	r26, 0x20	; 32
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	ee e5       	ldi	r30, 0x5E	; 94
    24b6:	f2 e1       	ldi	r31, 0x12	; 18
    24b8:	0c 94 32 17 	jmp	0x2e64	; 0x2e64 <__prologue_saves__>
    24bc:	69 83       	std	Y+1, r22	; 0x01
    24be:	7a 83       	std	Y+2, r23	; 0x02
    24c0:	8b 83       	std	Y+3, r24	; 0x03
    24c2:	9c 83       	std	Y+4, r25	; 0x04
    24c4:	2d 83       	std	Y+5, r18	; 0x05
    24c6:	3e 83       	std	Y+6, r19	; 0x06
    24c8:	4f 83       	std	Y+7, r20	; 0x07
    24ca:	58 87       	std	Y+8, r21	; 0x08
    24cc:	ce 01       	movw	r24, r28
    24ce:	01 96       	adiw	r24, 0x01	; 1
    24d0:	be 01       	movw	r22, r28
    24d2:	67 5f       	subi	r22, 0xF7	; 247
    24d4:	7f 4f       	sbci	r23, 0xFF	; 255
    24d6:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__unpack_f>
    24da:	ce 01       	movw	r24, r28
    24dc:	05 96       	adiw	r24, 0x05	; 5
    24de:	be 01       	movw	r22, r28
    24e0:	6f 5e       	subi	r22, 0xEF	; 239
    24e2:	7f 4f       	sbci	r23, 0xFF	; 255
    24e4:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__unpack_f>
    24e8:	99 85       	ldd	r25, Y+9	; 0x09
    24ea:	92 30       	cpi	r25, 0x02	; 2
    24ec:	78 f0       	brcs	.+30     	; 0x250c <__mulsf3+0x5c>
    24ee:	89 89       	ldd	r24, Y+17	; 0x11
    24f0:	82 30       	cpi	r24, 0x02	; 2
    24f2:	c0 f0       	brcs	.+48     	; 0x2524 <__mulsf3+0x74>
    24f4:	94 30       	cpi	r25, 0x04	; 4
    24f6:	19 f4       	brne	.+6      	; 0x24fe <__mulsf3+0x4e>
    24f8:	82 30       	cpi	r24, 0x02	; 2
    24fa:	41 f4       	brne	.+16     	; 0x250c <__mulsf3+0x5c>
    24fc:	cb c0       	rjmp	.+406    	; 0x2694 <__mulsf3+0x1e4>
    24fe:	84 30       	cpi	r24, 0x04	; 4
    2500:	19 f4       	brne	.+6      	; 0x2508 <__mulsf3+0x58>
    2502:	92 30       	cpi	r25, 0x02	; 2
    2504:	79 f4       	brne	.+30     	; 0x2524 <__mulsf3+0x74>
    2506:	c6 c0       	rjmp	.+396    	; 0x2694 <__mulsf3+0x1e4>
    2508:	92 30       	cpi	r25, 0x02	; 2
    250a:	51 f4       	brne	.+20     	; 0x2520 <__mulsf3+0x70>
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2510:	9a 89       	ldd	r25, Y+18	; 0x12
    2512:	29 17       	cp	r18, r25
    2514:	09 f4       	brne	.+2      	; 0x2518 <__mulsf3+0x68>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	8a 87       	std	Y+10, r24	; 0x0a
    251a:	ce 01       	movw	r24, r28
    251c:	09 96       	adiw	r24, 0x09	; 9
    251e:	bc c0       	rjmp	.+376    	; 0x2698 <__mulsf3+0x1e8>
    2520:	82 30       	cpi	r24, 0x02	; 2
    2522:	51 f4       	brne	.+20     	; 0x2538 <__mulsf3+0x88>
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	2a 85       	ldd	r18, Y+10	; 0x0a
    2528:	9a 89       	ldd	r25, Y+18	; 0x12
    252a:	29 17       	cp	r18, r25
    252c:	09 f4       	brne	.+2      	; 0x2530 <__mulsf3+0x80>
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	8a 8b       	std	Y+18, r24	; 0x12
    2532:	ce 01       	movw	r24, r28
    2534:	41 96       	adiw	r24, 0x11	; 17
    2536:	b0 c0       	rjmp	.+352    	; 0x2698 <__mulsf3+0x1e8>
    2538:	6d 84       	ldd	r6, Y+13	; 0x0d
    253a:	7e 84       	ldd	r7, Y+14	; 0x0e
    253c:	8f 84       	ldd	r8, Y+15	; 0x0f
    253e:	98 88       	ldd	r9, Y+16	; 0x10
    2540:	ed 88       	ldd	r14, Y+21	; 0x15
    2542:	fe 88       	ldd	r15, Y+22	; 0x16
    2544:	0f 89       	ldd	r16, Y+23	; 0x17
    2546:	18 8d       	ldd	r17, Y+24	; 0x18
    2548:	e0 e2       	ldi	r30, 0x20	; 32
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	dc 01       	movw	r26, r24
    2552:	aa 24       	eor	r10, r10
    2554:	bb 24       	eor	r11, r11
    2556:	65 01       	movw	r12, r10
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	a9 01       	movw	r20, r18
    255e:	b3 01       	movw	r22, r6
    2560:	61 70       	andi	r22, 0x01	; 1
    2562:	70 70       	andi	r23, 0x00	; 0
    2564:	61 15       	cp	r22, r1
    2566:	71 05       	cpc	r23, r1
    2568:	d1 f0       	breq	.+52     	; 0x259e <__mulsf3+0xee>
    256a:	2e 0d       	add	r18, r14
    256c:	3f 1d       	adc	r19, r15
    256e:	40 1f       	adc	r20, r16
    2570:	51 1f       	adc	r21, r17
    2572:	15 01       	movw	r2, r10
    2574:	26 01       	movw	r4, r12
    2576:	28 0e       	add	r2, r24
    2578:	39 1e       	adc	r3, r25
    257a:	4a 1e       	adc	r4, r26
    257c:	5b 1e       	adc	r5, r27
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	a0 e0       	ldi	r26, 0x00	; 0
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	2e 15       	cp	r18, r14
    2588:	3f 05       	cpc	r19, r15
    258a:	40 07       	cpc	r20, r16
    258c:	51 07       	cpc	r21, r17
    258e:	18 f0       	brcs	.+6      	; 0x2596 <__mulsf3+0xe6>
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	dc 01       	movw	r26, r24
    2596:	82 0d       	add	r24, r2
    2598:	93 1d       	adc	r25, r3
    259a:	a4 1d       	adc	r26, r4
    259c:	b5 1d       	adc	r27, r5
    259e:	aa 0c       	add	r10, r10
    25a0:	bb 1c       	adc	r11, r11
    25a2:	cc 1c       	adc	r12, r12
    25a4:	dd 1c       	adc	r13, r13
    25a6:	17 ff       	sbrs	r17, 7
    25a8:	09 c0       	rjmp	.+18     	; 0x25bc <__mulsf3+0x10c>
    25aa:	61 e0       	ldi	r22, 0x01	; 1
    25ac:	26 2e       	mov	r2, r22
    25ae:	31 2c       	mov	r3, r1
    25b0:	41 2c       	mov	r4, r1
    25b2:	51 2c       	mov	r5, r1
    25b4:	a2 28       	or	r10, r2
    25b6:	b3 28       	or	r11, r3
    25b8:	c4 28       	or	r12, r4
    25ba:	d5 28       	or	r13, r5
    25bc:	31 97       	sbiw	r30, 0x01	; 1
    25be:	49 f0       	breq	.+18     	; 0x25d2 <__mulsf3+0x122>
    25c0:	ee 0c       	add	r14, r14
    25c2:	ff 1c       	adc	r15, r15
    25c4:	00 1f       	adc	r16, r16
    25c6:	11 1f       	adc	r17, r17
    25c8:	96 94       	lsr	r9
    25ca:	87 94       	ror	r8
    25cc:	77 94       	ror	r7
    25ce:	67 94       	ror	r6
    25d0:	c6 cf       	rjmp	.-116    	; 0x255e <__mulsf3+0xae>
    25d2:	6b 89       	ldd	r22, Y+19	; 0x13
    25d4:	7c 89       	ldd	r23, Y+20	; 0x14
    25d6:	eb 85       	ldd	r30, Y+11	; 0x0b
    25d8:	fc 85       	ldd	r31, Y+12	; 0x0c
    25da:	6e 0f       	add	r22, r30
    25dc:	7f 1f       	adc	r23, r31
    25de:	6e 5f       	subi	r22, 0xFE	; 254
    25e0:	7f 4f       	sbci	r23, 0xFF	; 255
    25e2:	7c 8f       	std	Y+28, r23	; 0x1c
    25e4:	6b 8f       	std	Y+27, r22	; 0x1b
    25e6:	61 e0       	ldi	r22, 0x01	; 1
    25e8:	ea 85       	ldd	r30, Y+10	; 0x0a
    25ea:	7a 89       	ldd	r23, Y+18	; 0x12
    25ec:	e7 17       	cp	r30, r23
    25ee:	09 f4       	brne	.+2      	; 0x25f2 <__mulsf3+0x142>
    25f0:	60 e0       	ldi	r22, 0x00	; 0
    25f2:	6a 8f       	std	Y+26, r22	; 0x1a
    25f4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    25f6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    25f8:	10 c0       	rjmp	.+32     	; 0x261a <__mulsf3+0x16a>
    25fa:	fc 01       	movw	r30, r24
    25fc:	e1 70       	andi	r30, 0x01	; 1
    25fe:	f0 70       	andi	r31, 0x00	; 0
    2600:	30 97       	sbiw	r30, 0x00	; 0
    2602:	29 f0       	breq	.+10     	; 0x260e <__mulsf3+0x15e>
    2604:	56 95       	lsr	r21
    2606:	47 95       	ror	r20
    2608:	37 95       	ror	r19
    260a:	27 95       	ror	r18
    260c:	50 68       	ori	r21, 0x80	; 128
    260e:	b6 95       	lsr	r27
    2610:	a7 95       	ror	r26
    2612:	97 95       	ror	r25
    2614:	87 95       	ror	r24
    2616:	6f 5f       	subi	r22, 0xFF	; 255
    2618:	7f 4f       	sbci	r23, 0xFF	; 255
    261a:	b7 fd       	sbrc	r27, 7
    261c:	ee cf       	rjmp	.-36     	; 0x25fa <__mulsf3+0x14a>
    261e:	0c c0       	rjmp	.+24     	; 0x2638 <__mulsf3+0x188>
    2620:	88 0f       	add	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	aa 1f       	adc	r26, r26
    2626:	bb 1f       	adc	r27, r27
    2628:	57 fd       	sbrc	r21, 7
    262a:	81 60       	ori	r24, 0x01	; 1
    262c:	22 0f       	add	r18, r18
    262e:	33 1f       	adc	r19, r19
    2630:	44 1f       	adc	r20, r20
    2632:	55 1f       	adc	r21, r21
    2634:	61 50       	subi	r22, 0x01	; 1
    2636:	70 40       	sbci	r23, 0x00	; 0
    2638:	80 30       	cpi	r24, 0x00	; 0
    263a:	e0 e0       	ldi	r30, 0x00	; 0
    263c:	9e 07       	cpc	r25, r30
    263e:	e0 e0       	ldi	r30, 0x00	; 0
    2640:	ae 07       	cpc	r26, r30
    2642:	e0 e4       	ldi	r30, 0x40	; 64
    2644:	be 07       	cpc	r27, r30
    2646:	60 f3       	brcs	.-40     	; 0x2620 <__mulsf3+0x170>
    2648:	6b 8f       	std	Y+27, r22	; 0x1b
    264a:	7c 8f       	std	Y+28, r23	; 0x1c
    264c:	6f e7       	ldi	r22, 0x7F	; 127
    264e:	e6 2e       	mov	r14, r22
    2650:	f1 2c       	mov	r15, r1
    2652:	01 2d       	mov	r16, r1
    2654:	11 2d       	mov	r17, r1
    2656:	e8 22       	and	r14, r24
    2658:	f9 22       	and	r15, r25
    265a:	0a 23       	and	r16, r26
    265c:	1b 23       	and	r17, r27
    265e:	60 e4       	ldi	r22, 0x40	; 64
    2660:	e6 16       	cp	r14, r22
    2662:	f1 04       	cpc	r15, r1
    2664:	01 05       	cpc	r16, r1
    2666:	11 05       	cpc	r17, r1
    2668:	61 f4       	brne	.+24     	; 0x2682 <__mulsf3+0x1d2>
    266a:	87 fd       	sbrc	r24, 7
    266c:	0a c0       	rjmp	.+20     	; 0x2682 <__mulsf3+0x1d2>
    266e:	21 15       	cp	r18, r1
    2670:	31 05       	cpc	r19, r1
    2672:	41 05       	cpc	r20, r1
    2674:	51 05       	cpc	r21, r1
    2676:	29 f0       	breq	.+10     	; 0x2682 <__mulsf3+0x1d2>
    2678:	80 5c       	subi	r24, 0xC0	; 192
    267a:	9f 4f       	sbci	r25, 0xFF	; 255
    267c:	af 4f       	sbci	r26, 0xFF	; 255
    267e:	bf 4f       	sbci	r27, 0xFF	; 255
    2680:	80 78       	andi	r24, 0x80	; 128
    2682:	8d 8f       	std	Y+29, r24	; 0x1d
    2684:	9e 8f       	std	Y+30, r25	; 0x1e
    2686:	af 8f       	std	Y+31, r26	; 0x1f
    2688:	b8 a3       	std	Y+32, r27	; 0x20
    268a:	83 e0       	ldi	r24, 0x03	; 3
    268c:	89 8f       	std	Y+25, r24	; 0x19
    268e:	ce 01       	movw	r24, r28
    2690:	49 96       	adiw	r24, 0x19	; 25
    2692:	02 c0       	rjmp	.+4      	; 0x2698 <__mulsf3+0x1e8>
    2694:	8f ea       	ldi	r24, 0xAF	; 175
    2696:	91 e0       	ldi	r25, 0x01	; 1
    2698:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__pack_f>
    269c:	a0 96       	adiw	r28, 0x20	; 32
    269e:	e2 e1       	ldi	r30, 0x12	; 18
    26a0:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <__epilogue_restores__>

000026a4 <__gtsf2>:
    26a4:	a8 e1       	ldi	r26, 0x18	; 24
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e8 e5       	ldi	r30, 0x58	; 88
    26aa:	f3 e1       	ldi	r31, 0x13	; 19
    26ac:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__prologue_saves__+0x18>
    26b0:	69 83       	std	Y+1, r22	; 0x01
    26b2:	7a 83       	std	Y+2, r23	; 0x02
    26b4:	8b 83       	std	Y+3, r24	; 0x03
    26b6:	9c 83       	std	Y+4, r25	; 0x04
    26b8:	2d 83       	std	Y+5, r18	; 0x05
    26ba:	3e 83       	std	Y+6, r19	; 0x06
    26bc:	4f 83       	std	Y+7, r20	; 0x07
    26be:	58 87       	std	Y+8, r21	; 0x08
    26c0:	8e 01       	movw	r16, r28
    26c2:	07 5f       	subi	r16, 0xF7	; 247
    26c4:	1f 4f       	sbci	r17, 0xFF	; 255
    26c6:	ce 01       	movw	r24, r28
    26c8:	01 96       	adiw	r24, 0x01	; 1
    26ca:	b8 01       	movw	r22, r16
    26cc:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__unpack_f>
    26d0:	81 e1       	ldi	r24, 0x11	; 17
    26d2:	e8 2e       	mov	r14, r24
    26d4:	f1 2c       	mov	r15, r1
    26d6:	ec 0e       	add	r14, r28
    26d8:	fd 1e       	adc	r15, r29
    26da:	ce 01       	movw	r24, r28
    26dc:	05 96       	adiw	r24, 0x05	; 5
    26de:	b7 01       	movw	r22, r14
    26e0:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__unpack_f>
    26e4:	89 85       	ldd	r24, Y+9	; 0x09
    26e6:	82 30       	cpi	r24, 0x02	; 2
    26e8:	40 f0       	brcs	.+16     	; 0x26fa <__gtsf2+0x56>
    26ea:	89 89       	ldd	r24, Y+17	; 0x11
    26ec:	82 30       	cpi	r24, 0x02	; 2
    26ee:	28 f0       	brcs	.+10     	; 0x26fa <__gtsf2+0x56>
    26f0:	c8 01       	movw	r24, r16
    26f2:	b7 01       	movw	r22, r14
    26f4:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__fpcmp_parts_f>
    26f8:	01 c0       	rjmp	.+2      	; 0x26fc <__gtsf2+0x58>
    26fa:	8f ef       	ldi	r24, 0xFF	; 255
    26fc:	68 96       	adiw	r28, 0x18	; 24
    26fe:	e6 e0       	ldi	r30, 0x06	; 6
    2700:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__epilogue_restores__+0x18>

00002704 <__gesf2>:
    2704:	a8 e1       	ldi	r26, 0x18	; 24
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	e8 e8       	ldi	r30, 0x88	; 136
    270a:	f3 e1       	ldi	r31, 0x13	; 19
    270c:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__prologue_saves__+0x18>
    2710:	69 83       	std	Y+1, r22	; 0x01
    2712:	7a 83       	std	Y+2, r23	; 0x02
    2714:	8b 83       	std	Y+3, r24	; 0x03
    2716:	9c 83       	std	Y+4, r25	; 0x04
    2718:	2d 83       	std	Y+5, r18	; 0x05
    271a:	3e 83       	std	Y+6, r19	; 0x06
    271c:	4f 83       	std	Y+7, r20	; 0x07
    271e:	58 87       	std	Y+8, r21	; 0x08
    2720:	8e 01       	movw	r16, r28
    2722:	07 5f       	subi	r16, 0xF7	; 247
    2724:	1f 4f       	sbci	r17, 0xFF	; 255
    2726:	ce 01       	movw	r24, r28
    2728:	01 96       	adiw	r24, 0x01	; 1
    272a:	b8 01       	movw	r22, r16
    272c:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__unpack_f>
    2730:	81 e1       	ldi	r24, 0x11	; 17
    2732:	e8 2e       	mov	r14, r24
    2734:	f1 2c       	mov	r15, r1
    2736:	ec 0e       	add	r14, r28
    2738:	fd 1e       	adc	r15, r29
    273a:	ce 01       	movw	r24, r28
    273c:	05 96       	adiw	r24, 0x05	; 5
    273e:	b7 01       	movw	r22, r14
    2740:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__unpack_f>
    2744:	89 85       	ldd	r24, Y+9	; 0x09
    2746:	82 30       	cpi	r24, 0x02	; 2
    2748:	40 f0       	brcs	.+16     	; 0x275a <__gesf2+0x56>
    274a:	89 89       	ldd	r24, Y+17	; 0x11
    274c:	82 30       	cpi	r24, 0x02	; 2
    274e:	28 f0       	brcs	.+10     	; 0x275a <__gesf2+0x56>
    2750:	c8 01       	movw	r24, r16
    2752:	b7 01       	movw	r22, r14
    2754:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__fpcmp_parts_f>
    2758:	01 c0       	rjmp	.+2      	; 0x275c <__gesf2+0x58>
    275a:	8f ef       	ldi	r24, 0xFF	; 255
    275c:	68 96       	adiw	r28, 0x18	; 24
    275e:	e6 e0       	ldi	r30, 0x06	; 6
    2760:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__epilogue_restores__+0x18>

00002764 <__ltsf2>:
    2764:	a8 e1       	ldi	r26, 0x18	; 24
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	e8 eb       	ldi	r30, 0xB8	; 184
    276a:	f3 e1       	ldi	r31, 0x13	; 19
    276c:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__prologue_saves__+0x18>
    2770:	69 83       	std	Y+1, r22	; 0x01
    2772:	7a 83       	std	Y+2, r23	; 0x02
    2774:	8b 83       	std	Y+3, r24	; 0x03
    2776:	9c 83       	std	Y+4, r25	; 0x04
    2778:	2d 83       	std	Y+5, r18	; 0x05
    277a:	3e 83       	std	Y+6, r19	; 0x06
    277c:	4f 83       	std	Y+7, r20	; 0x07
    277e:	58 87       	std	Y+8, r21	; 0x08
    2780:	8e 01       	movw	r16, r28
    2782:	07 5f       	subi	r16, 0xF7	; 247
    2784:	1f 4f       	sbci	r17, 0xFF	; 255
    2786:	ce 01       	movw	r24, r28
    2788:	01 96       	adiw	r24, 0x01	; 1
    278a:	b8 01       	movw	r22, r16
    278c:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__unpack_f>
    2790:	81 e1       	ldi	r24, 0x11	; 17
    2792:	e8 2e       	mov	r14, r24
    2794:	f1 2c       	mov	r15, r1
    2796:	ec 0e       	add	r14, r28
    2798:	fd 1e       	adc	r15, r29
    279a:	ce 01       	movw	r24, r28
    279c:	05 96       	adiw	r24, 0x05	; 5
    279e:	b7 01       	movw	r22, r14
    27a0:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__unpack_f>
    27a4:	89 85       	ldd	r24, Y+9	; 0x09
    27a6:	82 30       	cpi	r24, 0x02	; 2
    27a8:	40 f0       	brcs	.+16     	; 0x27ba <__ltsf2+0x56>
    27aa:	89 89       	ldd	r24, Y+17	; 0x11
    27ac:	82 30       	cpi	r24, 0x02	; 2
    27ae:	28 f0       	brcs	.+10     	; 0x27ba <__ltsf2+0x56>
    27b0:	c8 01       	movw	r24, r16
    27b2:	b7 01       	movw	r22, r14
    27b4:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__fpcmp_parts_f>
    27b8:	01 c0       	rjmp	.+2      	; 0x27bc <__ltsf2+0x58>
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	68 96       	adiw	r28, 0x18	; 24
    27be:	e6 e0       	ldi	r30, 0x06	; 6
    27c0:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__epilogue_restores__+0x18>

000027c4 <__lesf2>:
    27c4:	a8 e1       	ldi	r26, 0x18	; 24
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	e8 ee       	ldi	r30, 0xE8	; 232
    27ca:	f3 e1       	ldi	r31, 0x13	; 19
    27cc:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__prologue_saves__+0x18>
    27d0:	69 83       	std	Y+1, r22	; 0x01
    27d2:	7a 83       	std	Y+2, r23	; 0x02
    27d4:	8b 83       	std	Y+3, r24	; 0x03
    27d6:	9c 83       	std	Y+4, r25	; 0x04
    27d8:	2d 83       	std	Y+5, r18	; 0x05
    27da:	3e 83       	std	Y+6, r19	; 0x06
    27dc:	4f 83       	std	Y+7, r20	; 0x07
    27de:	58 87       	std	Y+8, r21	; 0x08
    27e0:	8e 01       	movw	r16, r28
    27e2:	07 5f       	subi	r16, 0xF7	; 247
    27e4:	1f 4f       	sbci	r17, 0xFF	; 255
    27e6:	ce 01       	movw	r24, r28
    27e8:	01 96       	adiw	r24, 0x01	; 1
    27ea:	b8 01       	movw	r22, r16
    27ec:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__unpack_f>
    27f0:	81 e1       	ldi	r24, 0x11	; 17
    27f2:	e8 2e       	mov	r14, r24
    27f4:	f1 2c       	mov	r15, r1
    27f6:	ec 0e       	add	r14, r28
    27f8:	fd 1e       	adc	r15, r29
    27fa:	ce 01       	movw	r24, r28
    27fc:	05 96       	adiw	r24, 0x05	; 5
    27fe:	b7 01       	movw	r22, r14
    2800:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__unpack_f>
    2804:	89 85       	ldd	r24, Y+9	; 0x09
    2806:	82 30       	cpi	r24, 0x02	; 2
    2808:	40 f0       	brcs	.+16     	; 0x281a <__lesf2+0x56>
    280a:	89 89       	ldd	r24, Y+17	; 0x11
    280c:	82 30       	cpi	r24, 0x02	; 2
    280e:	28 f0       	brcs	.+10     	; 0x281a <__lesf2+0x56>
    2810:	c8 01       	movw	r24, r16
    2812:	b7 01       	movw	r22, r14
    2814:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__fpcmp_parts_f>
    2818:	01 c0       	rjmp	.+2      	; 0x281c <__lesf2+0x58>
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	68 96       	adiw	r28, 0x18	; 24
    281e:	e6 e0       	ldi	r30, 0x06	; 6
    2820:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__epilogue_restores__+0x18>

00002824 <__floatsisf>:
    2824:	a8 e0       	ldi	r26, 0x08	; 8
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	e8 e1       	ldi	r30, 0x18	; 24
    282a:	f4 e1       	ldi	r31, 0x14	; 20
    282c:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__prologue_saves__+0x18>
    2830:	7b 01       	movw	r14, r22
    2832:	8c 01       	movw	r16, r24
    2834:	83 e0       	ldi	r24, 0x03	; 3
    2836:	89 83       	std	Y+1, r24	; 0x01
    2838:	d8 01       	movw	r26, r16
    283a:	c7 01       	movw	r24, r14
    283c:	88 27       	eor	r24, r24
    283e:	b7 fd       	sbrc	r27, 7
    2840:	83 95       	inc	r24
    2842:	99 27       	eor	r25, r25
    2844:	aa 27       	eor	r26, r26
    2846:	bb 27       	eor	r27, r27
    2848:	28 2f       	mov	r18, r24
    284a:	8a 83       	std	Y+2, r24	; 0x02
    284c:	e1 14       	cp	r14, r1
    284e:	f1 04       	cpc	r15, r1
    2850:	01 05       	cpc	r16, r1
    2852:	11 05       	cpc	r17, r1
    2854:	19 f4       	brne	.+6      	; 0x285c <__floatsisf+0x38>
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	89 83       	std	Y+1, r24	; 0x01
    285a:	37 c0       	rjmp	.+110    	; 0x28ca <__floatsisf+0xa6>
    285c:	8e e1       	ldi	r24, 0x1E	; 30
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	9c 83       	std	Y+4, r25	; 0x04
    2862:	8b 83       	std	Y+3, r24	; 0x03
    2864:	22 23       	and	r18, r18
    2866:	89 f0       	breq	.+34     	; 0x288a <__floatsisf+0x66>
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	e8 16       	cp	r14, r24
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	f8 06       	cpc	r15, r24
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	08 07       	cpc	r16, r24
    2874:	80 e8       	ldi	r24, 0x80	; 128
    2876:	18 07       	cpc	r17, r24
    2878:	69 f1       	breq	.+90     	; 0x28d4 <__floatsisf+0xb0>
    287a:	10 95       	com	r17
    287c:	00 95       	com	r16
    287e:	f0 94       	com	r15
    2880:	e0 94       	com	r14
    2882:	e1 1c       	adc	r14, r1
    2884:	f1 1c       	adc	r15, r1
    2886:	01 1d       	adc	r16, r1
    2888:	11 1d       	adc	r17, r1
    288a:	ed 82       	std	Y+5, r14	; 0x05
    288c:	fe 82       	std	Y+6, r15	; 0x06
    288e:	0f 83       	std	Y+7, r16	; 0x07
    2890:	18 87       	std	Y+8, r17	; 0x08
    2892:	c8 01       	movw	r24, r16
    2894:	b7 01       	movw	r22, r14
    2896:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <__clzsi2>
    289a:	9c 01       	movw	r18, r24
    289c:	21 50       	subi	r18, 0x01	; 1
    289e:	30 40       	sbci	r19, 0x00	; 0
    28a0:	12 16       	cp	r1, r18
    28a2:	13 06       	cpc	r1, r19
    28a4:	94 f4       	brge	.+36     	; 0x28ca <__floatsisf+0xa6>
    28a6:	02 2e       	mov	r0, r18
    28a8:	04 c0       	rjmp	.+8      	; 0x28b2 <__floatsisf+0x8e>
    28aa:	ee 0c       	add	r14, r14
    28ac:	ff 1c       	adc	r15, r15
    28ae:	00 1f       	adc	r16, r16
    28b0:	11 1f       	adc	r17, r17
    28b2:	0a 94       	dec	r0
    28b4:	d2 f7       	brpl	.-12     	; 0x28aa <__floatsisf+0x86>
    28b6:	ed 82       	std	Y+5, r14	; 0x05
    28b8:	fe 82       	std	Y+6, r15	; 0x06
    28ba:	0f 83       	std	Y+7, r16	; 0x07
    28bc:	18 87       	std	Y+8, r17	; 0x08
    28be:	8e e1       	ldi	r24, 0x1E	; 30
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	82 1b       	sub	r24, r18
    28c4:	93 0b       	sbc	r25, r19
    28c6:	9c 83       	std	Y+4, r25	; 0x04
    28c8:	8b 83       	std	Y+3, r24	; 0x03
    28ca:	ce 01       	movw	r24, r28
    28cc:	01 96       	adiw	r24, 0x01	; 1
    28ce:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__pack_f>
    28d2:	04 c0       	rjmp	.+8      	; 0x28dc <__floatsisf+0xb8>
    28d4:	60 e0       	ldi	r22, 0x00	; 0
    28d6:	70 e0       	ldi	r23, 0x00	; 0
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	9f ec       	ldi	r25, 0xCF	; 207
    28dc:	28 96       	adiw	r28, 0x08	; 8
    28de:	e6 e0       	ldi	r30, 0x06	; 6
    28e0:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__epilogue_restores__+0x18>

000028e4 <__fixsfsi>:
    28e4:	ac e0       	ldi	r26, 0x0C	; 12
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e8 e7       	ldi	r30, 0x78	; 120
    28ea:	f4 e1       	ldi	r31, 0x14	; 20
    28ec:	0c 94 42 17 	jmp	0x2e84	; 0x2e84 <__prologue_saves__+0x20>
    28f0:	69 83       	std	Y+1, r22	; 0x01
    28f2:	7a 83       	std	Y+2, r23	; 0x02
    28f4:	8b 83       	std	Y+3, r24	; 0x03
    28f6:	9c 83       	std	Y+4, r25	; 0x04
    28f8:	ce 01       	movw	r24, r28
    28fa:	01 96       	adiw	r24, 0x01	; 1
    28fc:	be 01       	movw	r22, r28
    28fe:	6b 5f       	subi	r22, 0xFB	; 251
    2900:	7f 4f       	sbci	r23, 0xFF	; 255
    2902:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__unpack_f>
    2906:	8d 81       	ldd	r24, Y+5	; 0x05
    2908:	82 30       	cpi	r24, 0x02	; 2
    290a:	81 f1       	breq	.+96     	; 0x296c <__fixsfsi+0x88>
    290c:	82 30       	cpi	r24, 0x02	; 2
    290e:	70 f1       	brcs	.+92     	; 0x296c <__fixsfsi+0x88>
    2910:	84 30       	cpi	r24, 0x04	; 4
    2912:	21 f4       	brne	.+8      	; 0x291c <__fixsfsi+0x38>
    2914:	8e 81       	ldd	r24, Y+6	; 0x06
    2916:	88 23       	and	r24, r24
    2918:	69 f1       	breq	.+90     	; 0x2974 <__fixsfsi+0x90>
    291a:	0a c0       	rjmp	.+20     	; 0x2930 <__fixsfsi+0x4c>
    291c:	2f 81       	ldd	r18, Y+7	; 0x07
    291e:	38 85       	ldd	r19, Y+8	; 0x08
    2920:	37 fd       	sbrc	r19, 7
    2922:	24 c0       	rjmp	.+72     	; 0x296c <__fixsfsi+0x88>
    2924:	6e 81       	ldd	r22, Y+6	; 0x06
    2926:	2f 31       	cpi	r18, 0x1F	; 31
    2928:	31 05       	cpc	r19, r1
    292a:	3c f0       	brlt	.+14     	; 0x293a <__fixsfsi+0x56>
    292c:	66 23       	and	r22, r22
    292e:	11 f1       	breq	.+68     	; 0x2974 <__fixsfsi+0x90>
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	50 e8       	ldi	r21, 0x80	; 128
    2938:	21 c0       	rjmp	.+66     	; 0x297c <__fixsfsi+0x98>
    293a:	8e e1       	ldi	r24, 0x1E	; 30
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	82 1b       	sub	r24, r18
    2940:	93 0b       	sbc	r25, r19
    2942:	29 85       	ldd	r18, Y+9	; 0x09
    2944:	3a 85       	ldd	r19, Y+10	; 0x0a
    2946:	4b 85       	ldd	r20, Y+11	; 0x0b
    2948:	5c 85       	ldd	r21, Y+12	; 0x0c
    294a:	04 c0       	rjmp	.+8      	; 0x2954 <__fixsfsi+0x70>
    294c:	56 95       	lsr	r21
    294e:	47 95       	ror	r20
    2950:	37 95       	ror	r19
    2952:	27 95       	ror	r18
    2954:	8a 95       	dec	r24
    2956:	d2 f7       	brpl	.-12     	; 0x294c <__fixsfsi+0x68>
    2958:	66 23       	and	r22, r22
    295a:	81 f0       	breq	.+32     	; 0x297c <__fixsfsi+0x98>
    295c:	50 95       	com	r21
    295e:	40 95       	com	r20
    2960:	30 95       	com	r19
    2962:	21 95       	neg	r18
    2964:	3f 4f       	sbci	r19, 0xFF	; 255
    2966:	4f 4f       	sbci	r20, 0xFF	; 255
    2968:	5f 4f       	sbci	r21, 0xFF	; 255
    296a:	08 c0       	rjmp	.+16     	; 0x297c <__fixsfsi+0x98>
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	a9 01       	movw	r20, r18
    2972:	04 c0       	rjmp	.+8      	; 0x297c <__fixsfsi+0x98>
    2974:	2f ef       	ldi	r18, 0xFF	; 255
    2976:	3f ef       	ldi	r19, 0xFF	; 255
    2978:	4f ef       	ldi	r20, 0xFF	; 255
    297a:	5f e7       	ldi	r21, 0x7F	; 127
    297c:	b9 01       	movw	r22, r18
    297e:	ca 01       	movw	r24, r20
    2980:	2c 96       	adiw	r28, 0x0c	; 12
    2982:	e2 e0       	ldi	r30, 0x02	; 2
    2984:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__epilogue_restores__+0x20>

00002988 <__floatunsisf>:
    2988:	a8 e0       	ldi	r26, 0x08	; 8
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	ea ec       	ldi	r30, 0xCA	; 202
    298e:	f4 e1       	ldi	r31, 0x14	; 20
    2990:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__prologue_saves__+0x14>
    2994:	7b 01       	movw	r14, r22
    2996:	8c 01       	movw	r16, r24
    2998:	1a 82       	std	Y+2, r1	; 0x02
    299a:	61 15       	cp	r22, r1
    299c:	71 05       	cpc	r23, r1
    299e:	81 05       	cpc	r24, r1
    29a0:	91 05       	cpc	r25, r1
    29a2:	19 f4       	brne	.+6      	; 0x29aa <__floatunsisf+0x22>
    29a4:	82 e0       	ldi	r24, 0x02	; 2
    29a6:	89 83       	std	Y+1, r24	; 0x01
    29a8:	5f c0       	rjmp	.+190    	; 0x2a68 <__floatunsisf+0xe0>
    29aa:	83 e0       	ldi	r24, 0x03	; 3
    29ac:	89 83       	std	Y+1, r24	; 0x01
    29ae:	8e e1       	ldi	r24, 0x1E	; 30
    29b0:	c8 2e       	mov	r12, r24
    29b2:	d1 2c       	mov	r13, r1
    29b4:	dc 82       	std	Y+4, r13	; 0x04
    29b6:	cb 82       	std	Y+3, r12	; 0x03
    29b8:	ed 82       	std	Y+5, r14	; 0x05
    29ba:	fe 82       	std	Y+6, r15	; 0x06
    29bc:	0f 83       	std	Y+7, r16	; 0x07
    29be:	18 87       	std	Y+8, r17	; 0x08
    29c0:	c8 01       	movw	r24, r16
    29c2:	b7 01       	movw	r22, r14
    29c4:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <__clzsi2>
    29c8:	fc 01       	movw	r30, r24
    29ca:	31 97       	sbiw	r30, 0x01	; 1
    29cc:	f7 ff       	sbrs	r31, 7
    29ce:	3a c0       	rjmp	.+116    	; 0x2a44 <__floatunsisf+0xbc>
    29d0:	aa 27       	eor	r26, r26
    29d2:	bb 27       	eor	r27, r27
    29d4:	ae 1b       	sub	r26, r30
    29d6:	bf 0b       	sbc	r27, r31
    29d8:	21 e0       	ldi	r18, 0x01	; 1
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	40 e0       	ldi	r20, 0x00	; 0
    29de:	50 e0       	ldi	r21, 0x00	; 0
    29e0:	0a 2e       	mov	r0, r26
    29e2:	04 c0       	rjmp	.+8      	; 0x29ec <__floatunsisf+0x64>
    29e4:	22 0f       	add	r18, r18
    29e6:	33 1f       	adc	r19, r19
    29e8:	44 1f       	adc	r20, r20
    29ea:	55 1f       	adc	r21, r21
    29ec:	0a 94       	dec	r0
    29ee:	d2 f7       	brpl	.-12     	; 0x29e4 <__floatunsisf+0x5c>
    29f0:	21 50       	subi	r18, 0x01	; 1
    29f2:	30 40       	sbci	r19, 0x00	; 0
    29f4:	40 40       	sbci	r20, 0x00	; 0
    29f6:	50 40       	sbci	r21, 0x00	; 0
    29f8:	2e 21       	and	r18, r14
    29fa:	3f 21       	and	r19, r15
    29fc:	40 23       	and	r20, r16
    29fe:	51 23       	and	r21, r17
    2a00:	61 e0       	ldi	r22, 0x01	; 1
    2a02:	70 e0       	ldi	r23, 0x00	; 0
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	21 15       	cp	r18, r1
    2a0a:	31 05       	cpc	r19, r1
    2a0c:	41 05       	cpc	r20, r1
    2a0e:	51 05       	cpc	r21, r1
    2a10:	19 f4       	brne	.+6      	; 0x2a18 <__floatunsisf+0x90>
    2a12:	60 e0       	ldi	r22, 0x00	; 0
    2a14:	70 e0       	ldi	r23, 0x00	; 0
    2a16:	cb 01       	movw	r24, r22
    2a18:	04 c0       	rjmp	.+8      	; 0x2a22 <__floatunsisf+0x9a>
    2a1a:	16 95       	lsr	r17
    2a1c:	07 95       	ror	r16
    2a1e:	f7 94       	ror	r15
    2a20:	e7 94       	ror	r14
    2a22:	aa 95       	dec	r26
    2a24:	d2 f7       	brpl	.-12     	; 0x2a1a <__floatunsisf+0x92>
    2a26:	e6 2a       	or	r14, r22
    2a28:	f7 2a       	or	r15, r23
    2a2a:	08 2b       	or	r16, r24
    2a2c:	19 2b       	or	r17, r25
    2a2e:	ed 82       	std	Y+5, r14	; 0x05
    2a30:	fe 82       	std	Y+6, r15	; 0x06
    2a32:	0f 83       	std	Y+7, r16	; 0x07
    2a34:	18 87       	std	Y+8, r17	; 0x08
    2a36:	8e e1       	ldi	r24, 0x1E	; 30
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	8e 1b       	sub	r24, r30
    2a3c:	9f 0b       	sbc	r25, r31
    2a3e:	9c 83       	std	Y+4, r25	; 0x04
    2a40:	8b 83       	std	Y+3, r24	; 0x03
    2a42:	12 c0       	rjmp	.+36     	; 0x2a68 <__floatunsisf+0xe0>
    2a44:	30 97       	sbiw	r30, 0x00	; 0
    2a46:	81 f0       	breq	.+32     	; 0x2a68 <__floatunsisf+0xe0>
    2a48:	0e 2e       	mov	r0, r30
    2a4a:	04 c0       	rjmp	.+8      	; 0x2a54 <__floatunsisf+0xcc>
    2a4c:	ee 0c       	add	r14, r14
    2a4e:	ff 1c       	adc	r15, r15
    2a50:	00 1f       	adc	r16, r16
    2a52:	11 1f       	adc	r17, r17
    2a54:	0a 94       	dec	r0
    2a56:	d2 f7       	brpl	.-12     	; 0x2a4c <__floatunsisf+0xc4>
    2a58:	ed 82       	std	Y+5, r14	; 0x05
    2a5a:	fe 82       	std	Y+6, r15	; 0x06
    2a5c:	0f 83       	std	Y+7, r16	; 0x07
    2a5e:	18 87       	std	Y+8, r17	; 0x08
    2a60:	ce 1a       	sub	r12, r30
    2a62:	df 0a       	sbc	r13, r31
    2a64:	dc 82       	std	Y+4, r13	; 0x04
    2a66:	cb 82       	std	Y+3, r12	; 0x03
    2a68:	ce 01       	movw	r24, r28
    2a6a:	01 96       	adiw	r24, 0x01	; 1
    2a6c:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__pack_f>
    2a70:	28 96       	adiw	r28, 0x08	; 8
    2a72:	e8 e0       	ldi	r30, 0x08	; 8
    2a74:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__epilogue_restores__+0x14>

00002a78 <__clzsi2>:
    2a78:	af 92       	push	r10
    2a7a:	bf 92       	push	r11
    2a7c:	cf 92       	push	r12
    2a7e:	df 92       	push	r13
    2a80:	ef 92       	push	r14
    2a82:	ff 92       	push	r15
    2a84:	0f 93       	push	r16
    2a86:	1f 93       	push	r17
    2a88:	7b 01       	movw	r14, r22
    2a8a:	8c 01       	movw	r16, r24
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	e8 16       	cp	r14, r24
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	f8 06       	cpc	r15, r24
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	08 07       	cpc	r16, r24
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	18 07       	cpc	r17, r24
    2a9c:	58 f4       	brcc	.+22     	; 0x2ab4 <__clzsi2+0x3c>
    2a9e:	ef ef       	ldi	r30, 0xFF	; 255
    2aa0:	ee 16       	cp	r14, r30
    2aa2:	f1 04       	cpc	r15, r1
    2aa4:	01 05       	cpc	r16, r1
    2aa6:	11 05       	cpc	r17, r1
    2aa8:	09 f0       	breq	.+2      	; 0x2aac <__clzsi2+0x34>
    2aaa:	90 f4       	brcc	.+36     	; 0x2ad0 <__clzsi2+0x58>
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	17 c0       	rjmp	.+46     	; 0x2ae2 <__clzsi2+0x6a>
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	ef 16       	cp	r14, r31
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	ff 06       	cpc	r15, r31
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	0f 07       	cpc	r16, r31
    2ac0:	f1 e0       	ldi	r31, 0x01	; 1
    2ac2:	1f 07       	cpc	r17, r31
    2ac4:	50 f4       	brcc	.+20     	; 0x2ada <__clzsi2+0x62>
    2ac6:	80 e1       	ldi	r24, 0x10	; 16
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	a0 e0       	ldi	r26, 0x00	; 0
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	09 c0       	rjmp	.+18     	; 0x2ae2 <__clzsi2+0x6a>
    2ad0:	88 e0       	ldi	r24, 0x08	; 8
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	a0 e0       	ldi	r26, 0x00	; 0
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	04 c0       	rjmp	.+8      	; 0x2ae2 <__clzsi2+0x6a>
    2ada:	88 e1       	ldi	r24, 0x18	; 24
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	a0 e0       	ldi	r26, 0x00	; 0
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	20 e2       	ldi	r18, 0x20	; 32
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	40 e0       	ldi	r20, 0x00	; 0
    2ae8:	50 e0       	ldi	r21, 0x00	; 0
    2aea:	28 1b       	sub	r18, r24
    2aec:	39 0b       	sbc	r19, r25
    2aee:	4a 0b       	sbc	r20, r26
    2af0:	5b 0b       	sbc	r21, r27
    2af2:	57 01       	movw	r10, r14
    2af4:	68 01       	movw	r12, r16
    2af6:	04 c0       	rjmp	.+8      	; 0x2b00 <__clzsi2+0x88>
    2af8:	d6 94       	lsr	r13
    2afa:	c7 94       	ror	r12
    2afc:	b7 94       	ror	r11
    2afe:	a7 94       	ror	r10
    2b00:	8a 95       	dec	r24
    2b02:	d2 f7       	brpl	.-12     	; 0x2af8 <__clzsi2+0x80>
    2b04:	d6 01       	movw	r26, r12
    2b06:	c5 01       	movw	r24, r10
    2b08:	89 54       	subi	r24, 0x49	; 73
    2b0a:	9e 4f       	sbci	r25, 0xFE	; 254
    2b0c:	fc 01       	movw	r30, r24
    2b0e:	80 81       	ld	r24, Z
    2b10:	28 1b       	sub	r18, r24
    2b12:	31 09       	sbc	r19, r1
    2b14:	41 09       	sbc	r20, r1
    2b16:	51 09       	sbc	r21, r1
    2b18:	c9 01       	movw	r24, r18
    2b1a:	1f 91       	pop	r17
    2b1c:	0f 91       	pop	r16
    2b1e:	ff 90       	pop	r15
    2b20:	ef 90       	pop	r14
    2b22:	df 90       	pop	r13
    2b24:	cf 90       	pop	r12
    2b26:	bf 90       	pop	r11
    2b28:	af 90       	pop	r10
    2b2a:	08 95       	ret

00002b2c <__pack_f>:
    2b2c:	ef 92       	push	r14
    2b2e:	ff 92       	push	r15
    2b30:	0f 93       	push	r16
    2b32:	1f 93       	push	r17
    2b34:	cf 93       	push	r28
    2b36:	df 93       	push	r29
    2b38:	fc 01       	movw	r30, r24
    2b3a:	24 81       	ldd	r18, Z+4	; 0x04
    2b3c:	35 81       	ldd	r19, Z+5	; 0x05
    2b3e:	46 81       	ldd	r20, Z+6	; 0x06
    2b40:	57 81       	ldd	r21, Z+7	; 0x07
    2b42:	61 81       	ldd	r22, Z+1	; 0x01
    2b44:	80 81       	ld	r24, Z
    2b46:	82 30       	cpi	r24, 0x02	; 2
    2b48:	20 f4       	brcc	.+8      	; 0x2b52 <__pack_f+0x26>
    2b4a:	40 61       	ori	r20, 0x10	; 16
    2b4c:	ef ef       	ldi	r30, 0xFF	; 255
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	a3 c0       	rjmp	.+326    	; 0x2c98 <__pack_f+0x16c>
    2b52:	84 30       	cpi	r24, 0x04	; 4
    2b54:	09 f4       	brne	.+2      	; 0x2b58 <__pack_f+0x2c>
    2b56:	9b c0       	rjmp	.+310    	; 0x2c8e <__pack_f+0x162>
    2b58:	82 30       	cpi	r24, 0x02	; 2
    2b5a:	09 f4       	brne	.+2      	; 0x2b5e <__pack_f+0x32>
    2b5c:	92 c0       	rjmp	.+292    	; 0x2c82 <__pack_f+0x156>
    2b5e:	21 15       	cp	r18, r1
    2b60:	31 05       	cpc	r19, r1
    2b62:	41 05       	cpc	r20, r1
    2b64:	51 05       	cpc	r21, r1
    2b66:	09 f4       	brne	.+2      	; 0x2b6a <__pack_f+0x3e>
    2b68:	8f c0       	rjmp	.+286    	; 0x2c88 <__pack_f+0x15c>
    2b6a:	02 80       	ldd	r0, Z+2	; 0x02
    2b6c:	f3 81       	ldd	r31, Z+3	; 0x03
    2b6e:	e0 2d       	mov	r30, r0
    2b70:	8f ef       	ldi	r24, 0xFF	; 255
    2b72:	e2 38       	cpi	r30, 0x82	; 130
    2b74:	f8 07       	cpc	r31, r24
    2b76:	0c f0       	brlt	.+2      	; 0x2b7a <__pack_f+0x4e>
    2b78:	5a c0       	rjmp	.+180    	; 0x2c2e <__pack_f+0x102>
    2b7a:	c2 e8       	ldi	r28, 0x82	; 130
    2b7c:	df ef       	ldi	r29, 0xFF	; 255
    2b7e:	ce 1b       	sub	r28, r30
    2b80:	df 0b       	sbc	r29, r31
    2b82:	ca 31       	cpi	r28, 0x1A	; 26
    2b84:	d1 05       	cpc	r29, r1
    2b86:	6c f5       	brge	.+90     	; 0x2be2 <__pack_f+0xb6>
    2b88:	79 01       	movw	r14, r18
    2b8a:	8a 01       	movw	r16, r20
    2b8c:	0c 2e       	mov	r0, r28
    2b8e:	04 c0       	rjmp	.+8      	; 0x2b98 <__pack_f+0x6c>
    2b90:	16 95       	lsr	r17
    2b92:	07 95       	ror	r16
    2b94:	f7 94       	ror	r15
    2b96:	e7 94       	ror	r14
    2b98:	0a 94       	dec	r0
    2b9a:	d2 f7       	brpl	.-12     	; 0x2b90 <__pack_f+0x64>
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	a0 e0       	ldi	r26, 0x00	; 0
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	0c 2e       	mov	r0, r28
    2ba6:	04 c0       	rjmp	.+8      	; 0x2bb0 <__pack_f+0x84>
    2ba8:	88 0f       	add	r24, r24
    2baa:	99 1f       	adc	r25, r25
    2bac:	aa 1f       	adc	r26, r26
    2bae:	bb 1f       	adc	r27, r27
    2bb0:	0a 94       	dec	r0
    2bb2:	d2 f7       	brpl	.-12     	; 0x2ba8 <__pack_f+0x7c>
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	a1 09       	sbc	r26, r1
    2bb8:	b1 09       	sbc	r27, r1
    2bba:	82 23       	and	r24, r18
    2bbc:	93 23       	and	r25, r19
    2bbe:	a4 23       	and	r26, r20
    2bc0:	b5 23       	and	r27, r21
    2bc2:	21 e0       	ldi	r18, 0x01	; 1
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e0       	ldi	r20, 0x00	; 0
    2bc8:	50 e0       	ldi	r21, 0x00	; 0
    2bca:	00 97       	sbiw	r24, 0x00	; 0
    2bcc:	a1 05       	cpc	r26, r1
    2bce:	b1 05       	cpc	r27, r1
    2bd0:	19 f4       	brne	.+6      	; 0x2bd8 <__pack_f+0xac>
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	a9 01       	movw	r20, r18
    2bd8:	2e 29       	or	r18, r14
    2bda:	3f 29       	or	r19, r15
    2bdc:	40 2b       	or	r20, r16
    2bde:	51 2b       	or	r21, r17
    2be0:	03 c0       	rjmp	.+6      	; 0x2be8 <__pack_f+0xbc>
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	a9 01       	movw	r20, r18
    2be8:	da 01       	movw	r26, r20
    2bea:	c9 01       	movw	r24, r18
    2bec:	8f 77       	andi	r24, 0x7F	; 127
    2bee:	90 70       	andi	r25, 0x00	; 0
    2bf0:	a0 70       	andi	r26, 0x00	; 0
    2bf2:	b0 70       	andi	r27, 0x00	; 0
    2bf4:	80 34       	cpi	r24, 0x40	; 64
    2bf6:	91 05       	cpc	r25, r1
    2bf8:	a1 05       	cpc	r26, r1
    2bfa:	b1 05       	cpc	r27, r1
    2bfc:	39 f4       	brne	.+14     	; 0x2c0c <__pack_f+0xe0>
    2bfe:	27 ff       	sbrs	r18, 7
    2c00:	09 c0       	rjmp	.+18     	; 0x2c14 <__pack_f+0xe8>
    2c02:	20 5c       	subi	r18, 0xC0	; 192
    2c04:	3f 4f       	sbci	r19, 0xFF	; 255
    2c06:	4f 4f       	sbci	r20, 0xFF	; 255
    2c08:	5f 4f       	sbci	r21, 0xFF	; 255
    2c0a:	04 c0       	rjmp	.+8      	; 0x2c14 <__pack_f+0xe8>
    2c0c:	21 5c       	subi	r18, 0xC1	; 193
    2c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c10:	4f 4f       	sbci	r20, 0xFF	; 255
    2c12:	5f 4f       	sbci	r21, 0xFF	; 255
    2c14:	e1 e0       	ldi	r30, 0x01	; 1
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	20 30       	cpi	r18, 0x00	; 0
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	38 07       	cpc	r19, r24
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	48 07       	cpc	r20, r24
    2c22:	80 e4       	ldi	r24, 0x40	; 64
    2c24:	58 07       	cpc	r21, r24
    2c26:	28 f5       	brcc	.+74     	; 0x2c72 <__pack_f+0x146>
    2c28:	e0 e0       	ldi	r30, 0x00	; 0
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	22 c0       	rjmp	.+68     	; 0x2c72 <__pack_f+0x146>
    2c2e:	e0 38       	cpi	r30, 0x80	; 128
    2c30:	f1 05       	cpc	r31, r1
    2c32:	6c f5       	brge	.+90     	; 0x2c8e <__pack_f+0x162>
    2c34:	e1 58       	subi	r30, 0x81	; 129
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	da 01       	movw	r26, r20
    2c3a:	c9 01       	movw	r24, r18
    2c3c:	8f 77       	andi	r24, 0x7F	; 127
    2c3e:	90 70       	andi	r25, 0x00	; 0
    2c40:	a0 70       	andi	r26, 0x00	; 0
    2c42:	b0 70       	andi	r27, 0x00	; 0
    2c44:	80 34       	cpi	r24, 0x40	; 64
    2c46:	91 05       	cpc	r25, r1
    2c48:	a1 05       	cpc	r26, r1
    2c4a:	b1 05       	cpc	r27, r1
    2c4c:	39 f4       	brne	.+14     	; 0x2c5c <__pack_f+0x130>
    2c4e:	27 ff       	sbrs	r18, 7
    2c50:	09 c0       	rjmp	.+18     	; 0x2c64 <__pack_f+0x138>
    2c52:	20 5c       	subi	r18, 0xC0	; 192
    2c54:	3f 4f       	sbci	r19, 0xFF	; 255
    2c56:	4f 4f       	sbci	r20, 0xFF	; 255
    2c58:	5f 4f       	sbci	r21, 0xFF	; 255
    2c5a:	04 c0       	rjmp	.+8      	; 0x2c64 <__pack_f+0x138>
    2c5c:	21 5c       	subi	r18, 0xC1	; 193
    2c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c60:	4f 4f       	sbci	r20, 0xFF	; 255
    2c62:	5f 4f       	sbci	r21, 0xFF	; 255
    2c64:	57 ff       	sbrs	r21, 7
    2c66:	05 c0       	rjmp	.+10     	; 0x2c72 <__pack_f+0x146>
    2c68:	56 95       	lsr	r21
    2c6a:	47 95       	ror	r20
    2c6c:	37 95       	ror	r19
    2c6e:	27 95       	ror	r18
    2c70:	31 96       	adiw	r30, 0x01	; 1
    2c72:	87 e0       	ldi	r24, 0x07	; 7
    2c74:	56 95       	lsr	r21
    2c76:	47 95       	ror	r20
    2c78:	37 95       	ror	r19
    2c7a:	27 95       	ror	r18
    2c7c:	8a 95       	dec	r24
    2c7e:	d1 f7       	brne	.-12     	; 0x2c74 <__pack_f+0x148>
    2c80:	0b c0       	rjmp	.+22     	; 0x2c98 <__pack_f+0x16c>
    2c82:	e0 e0       	ldi	r30, 0x00	; 0
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	05 c0       	rjmp	.+10     	; 0x2c92 <__pack_f+0x166>
    2c88:	e0 e0       	ldi	r30, 0x00	; 0
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	05 c0       	rjmp	.+10     	; 0x2c98 <__pack_f+0x16c>
    2c8e:	ef ef       	ldi	r30, 0xFF	; 255
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	a9 01       	movw	r20, r18
    2c98:	8e 2f       	mov	r24, r30
    2c9a:	87 95       	ror	r24
    2c9c:	88 27       	eor	r24, r24
    2c9e:	87 95       	ror	r24
    2ca0:	94 2f       	mov	r25, r20
    2ca2:	9f 77       	andi	r25, 0x7F	; 127
    2ca4:	67 95       	ror	r22
    2ca6:	66 27       	eor	r22, r22
    2ca8:	67 95       	ror	r22
    2caa:	e6 95       	lsr	r30
    2cac:	e2 2e       	mov	r14, r18
    2cae:	a9 2f       	mov	r26, r25
    2cb0:	a8 2b       	or	r26, r24
    2cb2:	fe 2f       	mov	r31, r30
    2cb4:	f6 2b       	or	r31, r22
    2cb6:	62 2f       	mov	r22, r18
    2cb8:	73 2f       	mov	r23, r19
    2cba:	8a 2f       	mov	r24, r26
    2cbc:	9f 2f       	mov	r25, r31
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
    2cc2:	e6 e0       	ldi	r30, 0x06	; 6
    2cc4:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__epilogue_restores__+0x18>

00002cc8 <__unpack_f>:
    2cc8:	dc 01       	movw	r26, r24
    2cca:	fb 01       	movw	r30, r22
    2ccc:	2c 91       	ld	r18, X
    2cce:	11 96       	adiw	r26, 0x01	; 1
    2cd0:	3c 91       	ld	r19, X
    2cd2:	11 97       	sbiw	r26, 0x01	; 1
    2cd4:	12 96       	adiw	r26, 0x02	; 2
    2cd6:	8c 91       	ld	r24, X
    2cd8:	12 97       	sbiw	r26, 0x02	; 2
    2cda:	48 2f       	mov	r20, r24
    2cdc:	4f 77       	andi	r20, 0x7F	; 127
    2cde:	50 e0       	ldi	r21, 0x00	; 0
    2ce0:	98 2f       	mov	r25, r24
    2ce2:	99 1f       	adc	r25, r25
    2ce4:	99 27       	eor	r25, r25
    2ce6:	99 1f       	adc	r25, r25
    2ce8:	13 96       	adiw	r26, 0x03	; 3
    2cea:	6c 91       	ld	r22, X
    2cec:	13 97       	sbiw	r26, 0x03	; 3
    2cee:	86 2f       	mov	r24, r22
    2cf0:	88 0f       	add	r24, r24
    2cf2:	89 2b       	or	r24, r25
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	66 1f       	adc	r22, r22
    2cf8:	66 27       	eor	r22, r22
    2cfa:	66 1f       	adc	r22, r22
    2cfc:	61 83       	std	Z+1, r22	; 0x01
    2cfe:	00 97       	sbiw	r24, 0x00	; 0
    2d00:	39 f5       	brne	.+78     	; 0x2d50 <__unpack_f+0x88>
    2d02:	21 15       	cp	r18, r1
    2d04:	31 05       	cpc	r19, r1
    2d06:	41 05       	cpc	r20, r1
    2d08:	51 05       	cpc	r21, r1
    2d0a:	11 f4       	brne	.+4      	; 0x2d10 <__unpack_f+0x48>
    2d0c:	82 e0       	ldi	r24, 0x02	; 2
    2d0e:	29 c0       	rjmp	.+82     	; 0x2d62 <__unpack_f+0x9a>
    2d10:	82 e8       	ldi	r24, 0x82	; 130
    2d12:	9f ef       	ldi	r25, 0xFF	; 255
    2d14:	93 83       	std	Z+3, r25	; 0x03
    2d16:	82 83       	std	Z+2, r24	; 0x02
    2d18:	67 e0       	ldi	r22, 0x07	; 7
    2d1a:	22 0f       	add	r18, r18
    2d1c:	33 1f       	adc	r19, r19
    2d1e:	44 1f       	adc	r20, r20
    2d20:	55 1f       	adc	r21, r21
    2d22:	6a 95       	dec	r22
    2d24:	d1 f7       	brne	.-12     	; 0x2d1a <__unpack_f+0x52>
    2d26:	83 e0       	ldi	r24, 0x03	; 3
    2d28:	80 83       	st	Z, r24
    2d2a:	09 c0       	rjmp	.+18     	; 0x2d3e <__unpack_f+0x76>
    2d2c:	22 0f       	add	r18, r18
    2d2e:	33 1f       	adc	r19, r19
    2d30:	44 1f       	adc	r20, r20
    2d32:	55 1f       	adc	r21, r21
    2d34:	82 81       	ldd	r24, Z+2	; 0x02
    2d36:	93 81       	ldd	r25, Z+3	; 0x03
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	93 83       	std	Z+3, r25	; 0x03
    2d3c:	82 83       	std	Z+2, r24	; 0x02
    2d3e:	20 30       	cpi	r18, 0x00	; 0
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	38 07       	cpc	r19, r24
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	48 07       	cpc	r20, r24
    2d48:	80 e4       	ldi	r24, 0x40	; 64
    2d4a:	58 07       	cpc	r21, r24
    2d4c:	78 f3       	brcs	.-34     	; 0x2d2c <__unpack_f+0x64>
    2d4e:	20 c0       	rjmp	.+64     	; 0x2d90 <__unpack_f+0xc8>
    2d50:	8f 3f       	cpi	r24, 0xFF	; 255
    2d52:	91 05       	cpc	r25, r1
    2d54:	79 f4       	brne	.+30     	; 0x2d74 <__unpack_f+0xac>
    2d56:	21 15       	cp	r18, r1
    2d58:	31 05       	cpc	r19, r1
    2d5a:	41 05       	cpc	r20, r1
    2d5c:	51 05       	cpc	r21, r1
    2d5e:	19 f4       	brne	.+6      	; 0x2d66 <__unpack_f+0x9e>
    2d60:	84 e0       	ldi	r24, 0x04	; 4
    2d62:	80 83       	st	Z, r24
    2d64:	08 95       	ret
    2d66:	44 ff       	sbrs	r20, 4
    2d68:	03 c0       	rjmp	.+6      	; 0x2d70 <__unpack_f+0xa8>
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	80 83       	st	Z, r24
    2d6e:	10 c0       	rjmp	.+32     	; 0x2d90 <__unpack_f+0xc8>
    2d70:	10 82       	st	Z, r1
    2d72:	0e c0       	rjmp	.+28     	; 0x2d90 <__unpack_f+0xc8>
    2d74:	8f 57       	subi	r24, 0x7F	; 127
    2d76:	90 40       	sbci	r25, 0x00	; 0
    2d78:	93 83       	std	Z+3, r25	; 0x03
    2d7a:	82 83       	std	Z+2, r24	; 0x02
    2d7c:	83 e0       	ldi	r24, 0x03	; 3
    2d7e:	80 83       	st	Z, r24
    2d80:	87 e0       	ldi	r24, 0x07	; 7
    2d82:	22 0f       	add	r18, r18
    2d84:	33 1f       	adc	r19, r19
    2d86:	44 1f       	adc	r20, r20
    2d88:	55 1f       	adc	r21, r21
    2d8a:	8a 95       	dec	r24
    2d8c:	d1 f7       	brne	.-12     	; 0x2d82 <__unpack_f+0xba>
    2d8e:	50 64       	ori	r21, 0x40	; 64
    2d90:	24 83       	std	Z+4, r18	; 0x04
    2d92:	35 83       	std	Z+5, r19	; 0x05
    2d94:	46 83       	std	Z+6, r20	; 0x06
    2d96:	57 83       	std	Z+7, r21	; 0x07
    2d98:	08 95       	ret

00002d9a <__fpcmp_parts_f>:
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	db 01       	movw	r26, r22
    2d9e:	90 81       	ld	r25, Z
    2da0:	92 30       	cpi	r25, 0x02	; 2
    2da2:	08 f4       	brcc	.+2      	; 0x2da6 <__fpcmp_parts_f+0xc>
    2da4:	49 c0       	rjmp	.+146    	; 0x2e38 <__fpcmp_parts_f+0x9e>
    2da6:	8c 91       	ld	r24, X
    2da8:	82 30       	cpi	r24, 0x02	; 2
    2daa:	08 f4       	brcc	.+2      	; 0x2dae <__fpcmp_parts_f+0x14>
    2dac:	45 c0       	rjmp	.+138    	; 0x2e38 <__fpcmp_parts_f+0x9e>
    2dae:	94 30       	cpi	r25, 0x04	; 4
    2db0:	51 f4       	brne	.+20     	; 0x2dc6 <__fpcmp_parts_f+0x2c>
    2db2:	61 81       	ldd	r22, Z+1	; 0x01
    2db4:	84 30       	cpi	r24, 0x04	; 4
    2db6:	b1 f5       	brne	.+108    	; 0x2e24 <__fpcmp_parts_f+0x8a>
    2db8:	11 96       	adiw	r26, 0x01	; 1
    2dba:	2c 91       	ld	r18, X
    2dbc:	11 97       	sbiw	r26, 0x01	; 1
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	26 1b       	sub	r18, r22
    2dc2:	31 09       	sbc	r19, r1
    2dc4:	41 c0       	rjmp	.+130    	; 0x2e48 <__fpcmp_parts_f+0xae>
    2dc6:	84 30       	cpi	r24, 0x04	; 4
    2dc8:	21 f0       	breq	.+8      	; 0x2dd2 <__fpcmp_parts_f+0x38>
    2dca:	92 30       	cpi	r25, 0x02	; 2
    2dcc:	41 f4       	brne	.+16     	; 0x2dde <__fpcmp_parts_f+0x44>
    2dce:	82 30       	cpi	r24, 0x02	; 2
    2dd0:	b1 f1       	breq	.+108    	; 0x2e3e <__fpcmp_parts_f+0xa4>
    2dd2:	11 96       	adiw	r26, 0x01	; 1
    2dd4:	8c 91       	ld	r24, X
    2dd6:	11 97       	sbiw	r26, 0x01	; 1
    2dd8:	88 23       	and	r24, r24
    2dda:	a1 f1       	breq	.+104    	; 0x2e44 <__fpcmp_parts_f+0xaa>
    2ddc:	2d c0       	rjmp	.+90     	; 0x2e38 <__fpcmp_parts_f+0x9e>
    2dde:	61 81       	ldd	r22, Z+1	; 0x01
    2de0:	82 30       	cpi	r24, 0x02	; 2
    2de2:	01 f1       	breq	.+64     	; 0x2e24 <__fpcmp_parts_f+0x8a>
    2de4:	11 96       	adiw	r26, 0x01	; 1
    2de6:	8c 91       	ld	r24, X
    2de8:	11 97       	sbiw	r26, 0x01	; 1
    2dea:	68 17       	cp	r22, r24
    2dec:	d9 f4       	brne	.+54     	; 0x2e24 <__fpcmp_parts_f+0x8a>
    2dee:	22 81       	ldd	r18, Z+2	; 0x02
    2df0:	33 81       	ldd	r19, Z+3	; 0x03
    2df2:	12 96       	adiw	r26, 0x02	; 2
    2df4:	8d 91       	ld	r24, X+
    2df6:	9c 91       	ld	r25, X
    2df8:	13 97       	sbiw	r26, 0x03	; 3
    2dfa:	82 17       	cp	r24, r18
    2dfc:	93 07       	cpc	r25, r19
    2dfe:	94 f0       	brlt	.+36     	; 0x2e24 <__fpcmp_parts_f+0x8a>
    2e00:	28 17       	cp	r18, r24
    2e02:	39 07       	cpc	r19, r25
    2e04:	bc f0       	brlt	.+46     	; 0x2e34 <__fpcmp_parts_f+0x9a>
    2e06:	24 81       	ldd	r18, Z+4	; 0x04
    2e08:	35 81       	ldd	r19, Z+5	; 0x05
    2e0a:	46 81       	ldd	r20, Z+6	; 0x06
    2e0c:	57 81       	ldd	r21, Z+7	; 0x07
    2e0e:	14 96       	adiw	r26, 0x04	; 4
    2e10:	8d 91       	ld	r24, X+
    2e12:	9d 91       	ld	r25, X+
    2e14:	0d 90       	ld	r0, X+
    2e16:	bc 91       	ld	r27, X
    2e18:	a0 2d       	mov	r26, r0
    2e1a:	82 17       	cp	r24, r18
    2e1c:	93 07       	cpc	r25, r19
    2e1e:	a4 07       	cpc	r26, r20
    2e20:	b5 07       	cpc	r27, r21
    2e22:	18 f4       	brcc	.+6      	; 0x2e2a <__fpcmp_parts_f+0x90>
    2e24:	66 23       	and	r22, r22
    2e26:	41 f0       	breq	.+16     	; 0x2e38 <__fpcmp_parts_f+0x9e>
    2e28:	0d c0       	rjmp	.+26     	; 0x2e44 <__fpcmp_parts_f+0xaa>
    2e2a:	28 17       	cp	r18, r24
    2e2c:	39 07       	cpc	r19, r25
    2e2e:	4a 07       	cpc	r20, r26
    2e30:	5b 07       	cpc	r21, r27
    2e32:	28 f4       	brcc	.+10     	; 0x2e3e <__fpcmp_parts_f+0xa4>
    2e34:	66 23       	and	r22, r22
    2e36:	31 f0       	breq	.+12     	; 0x2e44 <__fpcmp_parts_f+0xaa>
    2e38:	21 e0       	ldi	r18, 0x01	; 1
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	05 c0       	rjmp	.+10     	; 0x2e48 <__fpcmp_parts_f+0xae>
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	02 c0       	rjmp	.+4      	; 0x2e48 <__fpcmp_parts_f+0xae>
    2e44:	2f ef       	ldi	r18, 0xFF	; 255
    2e46:	3f ef       	ldi	r19, 0xFF	; 255
    2e48:	c9 01       	movw	r24, r18
    2e4a:	08 95       	ret

00002e4c <__udivmodqi4>:
    2e4c:	99 1b       	sub	r25, r25
    2e4e:	79 e0       	ldi	r23, 0x09	; 9
    2e50:	04 c0       	rjmp	.+8      	; 0x2e5a <__udivmodqi4_ep>

00002e52 <__udivmodqi4_loop>:
    2e52:	99 1f       	adc	r25, r25
    2e54:	96 17       	cp	r25, r22
    2e56:	08 f0       	brcs	.+2      	; 0x2e5a <__udivmodqi4_ep>
    2e58:	96 1b       	sub	r25, r22

00002e5a <__udivmodqi4_ep>:
    2e5a:	88 1f       	adc	r24, r24
    2e5c:	7a 95       	dec	r23
    2e5e:	c9 f7       	brne	.-14     	; 0x2e52 <__udivmodqi4_loop>
    2e60:	80 95       	com	r24
    2e62:	08 95       	ret

00002e64 <__prologue_saves__>:
    2e64:	2f 92       	push	r2
    2e66:	3f 92       	push	r3
    2e68:	4f 92       	push	r4
    2e6a:	5f 92       	push	r5
    2e6c:	6f 92       	push	r6
    2e6e:	7f 92       	push	r7
    2e70:	8f 92       	push	r8
    2e72:	9f 92       	push	r9
    2e74:	af 92       	push	r10
    2e76:	bf 92       	push	r11
    2e78:	cf 92       	push	r12
    2e7a:	df 92       	push	r13
    2e7c:	ef 92       	push	r14
    2e7e:	ff 92       	push	r15
    2e80:	0f 93       	push	r16
    2e82:	1f 93       	push	r17
    2e84:	cf 93       	push	r28
    2e86:	df 93       	push	r29
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
    2e8c:	ca 1b       	sub	r28, r26
    2e8e:	db 0b       	sbc	r29, r27
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	f8 94       	cli
    2e94:	de bf       	out	0x3e, r29	; 62
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	cd bf       	out	0x3d, r28	; 61
    2e9a:	09 94       	ijmp

00002e9c <__epilogue_restores__>:
    2e9c:	2a 88       	ldd	r2, Y+18	; 0x12
    2e9e:	39 88       	ldd	r3, Y+17	; 0x11
    2ea0:	48 88       	ldd	r4, Y+16	; 0x10
    2ea2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ea4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ea6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ea8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2eaa:	9b 84       	ldd	r9, Y+11	; 0x0b
    2eac:	aa 84       	ldd	r10, Y+10	; 0x0a
    2eae:	b9 84       	ldd	r11, Y+9	; 0x09
    2eb0:	c8 84       	ldd	r12, Y+8	; 0x08
    2eb2:	df 80       	ldd	r13, Y+7	; 0x07
    2eb4:	ee 80       	ldd	r14, Y+6	; 0x06
    2eb6:	fd 80       	ldd	r15, Y+5	; 0x05
    2eb8:	0c 81       	ldd	r16, Y+4	; 0x04
    2eba:	1b 81       	ldd	r17, Y+3	; 0x03
    2ebc:	aa 81       	ldd	r26, Y+2	; 0x02
    2ebe:	b9 81       	ldd	r27, Y+1	; 0x01
    2ec0:	ce 0f       	add	r28, r30
    2ec2:	d1 1d       	adc	r29, r1
    2ec4:	0f b6       	in	r0, 0x3f	; 63
    2ec6:	f8 94       	cli
    2ec8:	de bf       	out	0x3e, r29	; 62
    2eca:	0f be       	out	0x3f, r0	; 63
    2ecc:	cd bf       	out	0x3d, r28	; 61
    2ece:	ed 01       	movw	r28, r26
    2ed0:	08 95       	ret

00002ed2 <cos>:
    2ed2:	03 d0       	rcall	.+6      	; 0x2eda <__fp_rempio2>
    2ed4:	e3 95       	inc	r30
    2ed6:	28 c0       	rjmp	.+80     	; 0x2f28 <__fp_sinus>
    2ed8:	ce c0       	rjmp	.+412    	; 0x3076 <__fp_nan>

00002eda <__fp_rempio2>:
    2eda:	3f d0       	rcall	.+126    	; 0x2f5a <__fp_splitA>
    2edc:	e8 f3       	brcs	.-6      	; 0x2ed8 <cos+0x6>
    2ede:	e8 94       	clt
    2ee0:	e0 e0       	ldi	r30, 0x00	; 0
    2ee2:	bb 27       	eor	r27, r27
    2ee4:	9f 57       	subi	r25, 0x7F	; 127
    2ee6:	f0 f0       	brcs	.+60     	; 0x2f24 <__fp_rempio2+0x4a>
    2ee8:	2a ed       	ldi	r18, 0xDA	; 218
    2eea:	3f e0       	ldi	r19, 0x0F	; 15
    2eec:	49 ec       	ldi	r20, 0xC9	; 201
    2eee:	06 c0       	rjmp	.+12     	; 0x2efc <__fp_rempio2+0x22>
    2ef0:	ee 0f       	add	r30, r30
    2ef2:	bb 0f       	add	r27, r27
    2ef4:	66 1f       	adc	r22, r22
    2ef6:	77 1f       	adc	r23, r23
    2ef8:	88 1f       	adc	r24, r24
    2efa:	28 f0       	brcs	.+10     	; 0x2f06 <__fp_rempio2+0x2c>
    2efc:	b2 3a       	cpi	r27, 0xA2	; 162
    2efe:	62 07       	cpc	r22, r18
    2f00:	73 07       	cpc	r23, r19
    2f02:	84 07       	cpc	r24, r20
    2f04:	28 f0       	brcs	.+10     	; 0x2f10 <__fp_rempio2+0x36>
    2f06:	b2 5a       	subi	r27, 0xA2	; 162
    2f08:	62 0b       	sbc	r22, r18
    2f0a:	73 0b       	sbc	r23, r19
    2f0c:	84 0b       	sbc	r24, r20
    2f0e:	e3 95       	inc	r30
    2f10:	9a 95       	dec	r25
    2f12:	72 f7       	brpl	.-36     	; 0x2ef0 <__fp_rempio2+0x16>
    2f14:	80 38       	cpi	r24, 0x80	; 128
    2f16:	30 f4       	brcc	.+12     	; 0x2f24 <__fp_rempio2+0x4a>
    2f18:	9a 95       	dec	r25
    2f1a:	bb 0f       	add	r27, r27
    2f1c:	66 1f       	adc	r22, r22
    2f1e:	77 1f       	adc	r23, r23
    2f20:	88 1f       	adc	r24, r24
    2f22:	d2 f7       	brpl	.-12     	; 0x2f18 <__fp_rempio2+0x3e>
    2f24:	90 48       	sbci	r25, 0x80	; 128
    2f26:	9b c0       	rjmp	.+310    	; 0x305e <__fp_mpack_finite>

00002f28 <__fp_sinus>:
    2f28:	ef 93       	push	r30
    2f2a:	e0 ff       	sbrs	r30, 0
    2f2c:	06 c0       	rjmp	.+12     	; 0x2f3a <__fp_sinus+0x12>
    2f2e:	a2 ea       	ldi	r26, 0xA2	; 162
    2f30:	2a ed       	ldi	r18, 0xDA	; 218
    2f32:	3f e0       	ldi	r19, 0x0F	; 15
    2f34:	49 ec       	ldi	r20, 0xC9	; 201
    2f36:	5f eb       	ldi	r21, 0xBF	; 191
    2f38:	37 d0       	rcall	.+110    	; 0x2fa8 <__addsf3x>
    2f3a:	bf d0       	rcall	.+382    	; 0x30ba <__fp_round>
    2f3c:	0f 90       	pop	r0
    2f3e:	03 94       	inc	r0
    2f40:	01 fc       	sbrc	r0, 1
    2f42:	90 58       	subi	r25, 0x80	; 128
    2f44:	ec e8       	ldi	r30, 0x8C	; 140
    2f46:	f0 e0       	ldi	r31, 0x00	; 0
    2f48:	99 c0       	rjmp	.+306    	; 0x307c <__fp_powsodd>

00002f4a <__fp_split3>:
    2f4a:	57 fd       	sbrc	r21, 7
    2f4c:	90 58       	subi	r25, 0x80	; 128
    2f4e:	44 0f       	add	r20, r20
    2f50:	55 1f       	adc	r21, r21
    2f52:	59 f0       	breq	.+22     	; 0x2f6a <__fp_splitA+0x10>
    2f54:	5f 3f       	cpi	r21, 0xFF	; 255
    2f56:	71 f0       	breq	.+28     	; 0x2f74 <__fp_splitA+0x1a>
    2f58:	47 95       	ror	r20

00002f5a <__fp_splitA>:
    2f5a:	88 0f       	add	r24, r24
    2f5c:	97 fb       	bst	r25, 7
    2f5e:	99 1f       	adc	r25, r25
    2f60:	61 f0       	breq	.+24     	; 0x2f7a <__fp_splitA+0x20>
    2f62:	9f 3f       	cpi	r25, 0xFF	; 255
    2f64:	79 f0       	breq	.+30     	; 0x2f84 <__fp_splitA+0x2a>
    2f66:	87 95       	ror	r24
    2f68:	08 95       	ret
    2f6a:	12 16       	cp	r1, r18
    2f6c:	13 06       	cpc	r1, r19
    2f6e:	14 06       	cpc	r1, r20
    2f70:	55 1f       	adc	r21, r21
    2f72:	f2 cf       	rjmp	.-28     	; 0x2f58 <__fp_split3+0xe>
    2f74:	46 95       	lsr	r20
    2f76:	f1 df       	rcall	.-30     	; 0x2f5a <__fp_splitA>
    2f78:	08 c0       	rjmp	.+16     	; 0x2f8a <__fp_splitA+0x30>
    2f7a:	16 16       	cp	r1, r22
    2f7c:	17 06       	cpc	r1, r23
    2f7e:	18 06       	cpc	r1, r24
    2f80:	99 1f       	adc	r25, r25
    2f82:	f1 cf       	rjmp	.-30     	; 0x2f66 <__fp_splitA+0xc>
    2f84:	86 95       	lsr	r24
    2f86:	71 05       	cpc	r23, r1
    2f88:	61 05       	cpc	r22, r1
    2f8a:	08 94       	sec
    2f8c:	08 95       	ret
    2f8e:	87 d0       	rcall	.+270    	; 0x309e <__fp_pscA>
    2f90:	30 f0       	brcs	.+12     	; 0x2f9e <__fp_splitA+0x44>
    2f92:	8c d0       	rcall	.+280    	; 0x30ac <__fp_pscB>
    2f94:	20 f0       	brcs	.+8      	; 0x2f9e <__fp_splitA+0x44>
    2f96:	31 f4       	brne	.+12     	; 0x2fa4 <__fp_splitA+0x4a>
    2f98:	9f 3f       	cpi	r25, 0xFF	; 255
    2f9a:	11 f4       	brne	.+4      	; 0x2fa0 <__fp_splitA+0x46>
    2f9c:	1e f4       	brtc	.+6      	; 0x2fa4 <__fp_splitA+0x4a>
    2f9e:	6b c0       	rjmp	.+214    	; 0x3076 <__fp_nan>
    2fa0:	0e f4       	brtc	.+2      	; 0x2fa4 <__fp_splitA+0x4a>
    2fa2:	e0 95       	com	r30
    2fa4:	e7 fb       	bst	r30, 7
    2fa6:	53 c0       	rjmp	.+166    	; 0x304e <__fp_inf>

00002fa8 <__addsf3x>:
    2fa8:	e9 2f       	mov	r30, r25
    2faa:	cf df       	rcall	.-98     	; 0x2f4a <__fp_split3>
    2fac:	80 f3       	brcs	.-32     	; 0x2f8e <__fp_splitA+0x34>
    2fae:	ba 17       	cp	r27, r26
    2fb0:	62 07       	cpc	r22, r18
    2fb2:	73 07       	cpc	r23, r19
    2fb4:	84 07       	cpc	r24, r20
    2fb6:	95 07       	cpc	r25, r21
    2fb8:	18 f0       	brcs	.+6      	; 0x2fc0 <__addsf3x+0x18>
    2fba:	71 f4       	brne	.+28     	; 0x2fd8 <__addsf3x+0x30>
    2fbc:	9e f5       	brtc	.+102    	; 0x3024 <__addsf3x+0x7c>
    2fbe:	8e c0       	rjmp	.+284    	; 0x30dc <__fp_zero>
    2fc0:	0e f4       	brtc	.+2      	; 0x2fc4 <__addsf3x+0x1c>
    2fc2:	e0 95       	com	r30
    2fc4:	0b 2e       	mov	r0, r27
    2fc6:	ba 2f       	mov	r27, r26
    2fc8:	a0 2d       	mov	r26, r0
    2fca:	0b 01       	movw	r0, r22
    2fcc:	b9 01       	movw	r22, r18
    2fce:	90 01       	movw	r18, r0
    2fd0:	0c 01       	movw	r0, r24
    2fd2:	ca 01       	movw	r24, r20
    2fd4:	a0 01       	movw	r20, r0
    2fd6:	11 24       	eor	r1, r1
    2fd8:	ff 27       	eor	r31, r31
    2fda:	59 1b       	sub	r21, r25
    2fdc:	99 f0       	breq	.+38     	; 0x3004 <__addsf3x+0x5c>
    2fde:	59 3f       	cpi	r21, 0xF9	; 249
    2fe0:	50 f4       	brcc	.+20     	; 0x2ff6 <__addsf3x+0x4e>
    2fe2:	50 3e       	cpi	r21, 0xE0	; 224
    2fe4:	68 f1       	brcs	.+90     	; 0x3040 <__addsf3x+0x98>
    2fe6:	1a 16       	cp	r1, r26
    2fe8:	f0 40       	sbci	r31, 0x00	; 0
    2fea:	a2 2f       	mov	r26, r18
    2fec:	23 2f       	mov	r18, r19
    2fee:	34 2f       	mov	r19, r20
    2ff0:	44 27       	eor	r20, r20
    2ff2:	58 5f       	subi	r21, 0xF8	; 248
    2ff4:	f3 cf       	rjmp	.-26     	; 0x2fdc <__addsf3x+0x34>
    2ff6:	46 95       	lsr	r20
    2ff8:	37 95       	ror	r19
    2ffa:	27 95       	ror	r18
    2ffc:	a7 95       	ror	r26
    2ffe:	f0 40       	sbci	r31, 0x00	; 0
    3000:	53 95       	inc	r21
    3002:	c9 f7       	brne	.-14     	; 0x2ff6 <__addsf3x+0x4e>
    3004:	7e f4       	brtc	.+30     	; 0x3024 <__addsf3x+0x7c>
    3006:	1f 16       	cp	r1, r31
    3008:	ba 0b       	sbc	r27, r26
    300a:	62 0b       	sbc	r22, r18
    300c:	73 0b       	sbc	r23, r19
    300e:	84 0b       	sbc	r24, r20
    3010:	ba f0       	brmi	.+46     	; 0x3040 <__addsf3x+0x98>
    3012:	91 50       	subi	r25, 0x01	; 1
    3014:	a1 f0       	breq	.+40     	; 0x303e <__addsf3x+0x96>
    3016:	ff 0f       	add	r31, r31
    3018:	bb 1f       	adc	r27, r27
    301a:	66 1f       	adc	r22, r22
    301c:	77 1f       	adc	r23, r23
    301e:	88 1f       	adc	r24, r24
    3020:	c2 f7       	brpl	.-16     	; 0x3012 <__addsf3x+0x6a>
    3022:	0e c0       	rjmp	.+28     	; 0x3040 <__addsf3x+0x98>
    3024:	ba 0f       	add	r27, r26
    3026:	62 1f       	adc	r22, r18
    3028:	73 1f       	adc	r23, r19
    302a:	84 1f       	adc	r24, r20
    302c:	48 f4       	brcc	.+18     	; 0x3040 <__addsf3x+0x98>
    302e:	87 95       	ror	r24
    3030:	77 95       	ror	r23
    3032:	67 95       	ror	r22
    3034:	b7 95       	ror	r27
    3036:	f7 95       	ror	r31
    3038:	9e 3f       	cpi	r25, 0xFE	; 254
    303a:	08 f0       	brcs	.+2      	; 0x303e <__addsf3x+0x96>
    303c:	b3 cf       	rjmp	.-154    	; 0x2fa4 <__fp_splitA+0x4a>
    303e:	93 95       	inc	r25
    3040:	88 0f       	add	r24, r24
    3042:	08 f0       	brcs	.+2      	; 0x3046 <__addsf3x+0x9e>
    3044:	99 27       	eor	r25, r25
    3046:	ee 0f       	add	r30, r30
    3048:	97 95       	ror	r25
    304a:	87 95       	ror	r24
    304c:	08 95       	ret

0000304e <__fp_inf>:
    304e:	97 f9       	bld	r25, 7
    3050:	9f 67       	ori	r25, 0x7F	; 127
    3052:	80 e8       	ldi	r24, 0x80	; 128
    3054:	70 e0       	ldi	r23, 0x00	; 0
    3056:	60 e0       	ldi	r22, 0x00	; 0
    3058:	08 95       	ret

0000305a <__fp_mpack>:
    305a:	9f 3f       	cpi	r25, 0xFF	; 255
    305c:	31 f0       	breq	.+12     	; 0x306a <__fp_mpack_finite+0xc>

0000305e <__fp_mpack_finite>:
    305e:	91 50       	subi	r25, 0x01	; 1
    3060:	20 f4       	brcc	.+8      	; 0x306a <__fp_mpack_finite+0xc>
    3062:	87 95       	ror	r24
    3064:	77 95       	ror	r23
    3066:	67 95       	ror	r22
    3068:	b7 95       	ror	r27
    306a:	88 0f       	add	r24, r24
    306c:	91 1d       	adc	r25, r1
    306e:	96 95       	lsr	r25
    3070:	87 95       	ror	r24
    3072:	97 f9       	bld	r25, 7
    3074:	08 95       	ret

00003076 <__fp_nan>:
    3076:	9f ef       	ldi	r25, 0xFF	; 255
    3078:	80 ec       	ldi	r24, 0xC0	; 192
    307a:	08 95       	ret

0000307c <__fp_powsodd>:
    307c:	9f 93       	push	r25
    307e:	8f 93       	push	r24
    3080:	7f 93       	push	r23
    3082:	6f 93       	push	r22
    3084:	ff 93       	push	r31
    3086:	ef 93       	push	r30
    3088:	9b 01       	movw	r18, r22
    308a:	ac 01       	movw	r20, r24
    308c:	11 da       	rcall	.-3038   	; 0x24b0 <__mulsf3>
    308e:	ef 91       	pop	r30
    3090:	ff 91       	pop	r31
    3092:	2b d0       	rcall	.+86     	; 0x30ea <__fp_powser>
    3094:	2f 91       	pop	r18
    3096:	3f 91       	pop	r19
    3098:	4f 91       	pop	r20
    309a:	5f 91       	pop	r21
    309c:	09 ca       	rjmp	.-3054   	; 0x24b0 <__mulsf3>

0000309e <__fp_pscA>:
    309e:	00 24       	eor	r0, r0
    30a0:	0a 94       	dec	r0
    30a2:	16 16       	cp	r1, r22
    30a4:	17 06       	cpc	r1, r23
    30a6:	18 06       	cpc	r1, r24
    30a8:	09 06       	cpc	r0, r25
    30aa:	08 95       	ret

000030ac <__fp_pscB>:
    30ac:	00 24       	eor	r0, r0
    30ae:	0a 94       	dec	r0
    30b0:	12 16       	cp	r1, r18
    30b2:	13 06       	cpc	r1, r19
    30b4:	14 06       	cpc	r1, r20
    30b6:	05 06       	cpc	r0, r21
    30b8:	08 95       	ret

000030ba <__fp_round>:
    30ba:	09 2e       	mov	r0, r25
    30bc:	03 94       	inc	r0
    30be:	00 0c       	add	r0, r0
    30c0:	11 f4       	brne	.+4      	; 0x30c6 <__fp_round+0xc>
    30c2:	88 23       	and	r24, r24
    30c4:	52 f0       	brmi	.+20     	; 0x30da <__fp_round+0x20>
    30c6:	bb 0f       	add	r27, r27
    30c8:	40 f4       	brcc	.+16     	; 0x30da <__fp_round+0x20>
    30ca:	bf 2b       	or	r27, r31
    30cc:	11 f4       	brne	.+4      	; 0x30d2 <__fp_round+0x18>
    30ce:	60 ff       	sbrs	r22, 0
    30d0:	04 c0       	rjmp	.+8      	; 0x30da <__fp_round+0x20>
    30d2:	6f 5f       	subi	r22, 0xFF	; 255
    30d4:	7f 4f       	sbci	r23, 0xFF	; 255
    30d6:	8f 4f       	sbci	r24, 0xFF	; 255
    30d8:	9f 4f       	sbci	r25, 0xFF	; 255
    30da:	08 95       	ret

000030dc <__fp_zero>:
    30dc:	e8 94       	clt

000030de <__fp_szero>:
    30de:	bb 27       	eor	r27, r27
    30e0:	66 27       	eor	r22, r22
    30e2:	77 27       	eor	r23, r23
    30e4:	cb 01       	movw	r24, r22
    30e6:	97 f9       	bld	r25, 7
    30e8:	08 95       	ret

000030ea <__fp_powser>:
    30ea:	df 93       	push	r29
    30ec:	cf 93       	push	r28
    30ee:	1f 93       	push	r17
    30f0:	0f 93       	push	r16
    30f2:	ff 92       	push	r15
    30f4:	ef 92       	push	r14
    30f6:	df 92       	push	r13
    30f8:	7b 01       	movw	r14, r22
    30fa:	8c 01       	movw	r16, r24
    30fc:	68 94       	set
    30fe:	05 c0       	rjmp	.+10     	; 0x310a <__fp_powser+0x20>
    3100:	da 2e       	mov	r13, r26
    3102:	ef 01       	movw	r28, r30
    3104:	21 d0       	rcall	.+66     	; 0x3148 <__mulsf3x>
    3106:	fe 01       	movw	r30, r28
    3108:	e8 94       	clt
    310a:	a5 91       	lpm	r26, Z+
    310c:	25 91       	lpm	r18, Z+
    310e:	35 91       	lpm	r19, Z+
    3110:	45 91       	lpm	r20, Z+
    3112:	55 91       	lpm	r21, Z+
    3114:	ae f3       	brts	.-22     	; 0x3100 <__fp_powser+0x16>
    3116:	ef 01       	movw	r28, r30
    3118:	47 df       	rcall	.-370    	; 0x2fa8 <__addsf3x>
    311a:	fe 01       	movw	r30, r28
    311c:	97 01       	movw	r18, r14
    311e:	a8 01       	movw	r20, r16
    3120:	da 94       	dec	r13
    3122:	79 f7       	brne	.-34     	; 0x3102 <__fp_powser+0x18>
    3124:	df 90       	pop	r13
    3126:	ef 90       	pop	r14
    3128:	ff 90       	pop	r15
    312a:	0f 91       	pop	r16
    312c:	1f 91       	pop	r17
    312e:	cf 91       	pop	r28
    3130:	df 91       	pop	r29
    3132:	08 95       	ret
    3134:	b4 df       	rcall	.-152    	; 0x309e <__fp_pscA>
    3136:	28 f0       	brcs	.+10     	; 0x3142 <__fp_powser+0x58>
    3138:	b9 df       	rcall	.-142    	; 0x30ac <__fp_pscB>
    313a:	18 f0       	brcs	.+6      	; 0x3142 <__fp_powser+0x58>
    313c:	95 23       	and	r25, r21
    313e:	09 f0       	breq	.+2      	; 0x3142 <__fp_powser+0x58>
    3140:	86 cf       	rjmp	.-244    	; 0x304e <__fp_inf>
    3142:	99 cf       	rjmp	.-206    	; 0x3076 <__fp_nan>
    3144:	11 24       	eor	r1, r1
    3146:	cb cf       	rjmp	.-106    	; 0x30de <__fp_szero>

00003148 <__mulsf3x>:
    3148:	00 df       	rcall	.-512    	; 0x2f4a <__fp_split3>
    314a:	a0 f3       	brcs	.-24     	; 0x3134 <__fp_powser+0x4a>

0000314c <__mulsf3_pse>:
    314c:	95 9f       	mul	r25, r21
    314e:	d1 f3       	breq	.-12     	; 0x3144 <__fp_powser+0x5a>
    3150:	95 0f       	add	r25, r21
    3152:	50 e0       	ldi	r21, 0x00	; 0
    3154:	55 1f       	adc	r21, r21
    3156:	62 9f       	mul	r22, r18
    3158:	f0 01       	movw	r30, r0
    315a:	72 9f       	mul	r23, r18
    315c:	bb 27       	eor	r27, r27
    315e:	f0 0d       	add	r31, r0
    3160:	b1 1d       	adc	r27, r1
    3162:	63 9f       	mul	r22, r19
    3164:	aa 27       	eor	r26, r26
    3166:	f0 0d       	add	r31, r0
    3168:	b1 1d       	adc	r27, r1
    316a:	aa 1f       	adc	r26, r26
    316c:	64 9f       	mul	r22, r20
    316e:	66 27       	eor	r22, r22
    3170:	b0 0d       	add	r27, r0
    3172:	a1 1d       	adc	r26, r1
    3174:	66 1f       	adc	r22, r22
    3176:	82 9f       	mul	r24, r18
    3178:	22 27       	eor	r18, r18
    317a:	b0 0d       	add	r27, r0
    317c:	a1 1d       	adc	r26, r1
    317e:	62 1f       	adc	r22, r18
    3180:	73 9f       	mul	r23, r19
    3182:	b0 0d       	add	r27, r0
    3184:	a1 1d       	adc	r26, r1
    3186:	62 1f       	adc	r22, r18
    3188:	83 9f       	mul	r24, r19
    318a:	a0 0d       	add	r26, r0
    318c:	61 1d       	adc	r22, r1
    318e:	22 1f       	adc	r18, r18
    3190:	74 9f       	mul	r23, r20
    3192:	33 27       	eor	r19, r19
    3194:	a0 0d       	add	r26, r0
    3196:	61 1d       	adc	r22, r1
    3198:	23 1f       	adc	r18, r19
    319a:	84 9f       	mul	r24, r20
    319c:	60 0d       	add	r22, r0
    319e:	21 1d       	adc	r18, r1
    31a0:	82 2f       	mov	r24, r18
    31a2:	76 2f       	mov	r23, r22
    31a4:	6a 2f       	mov	r22, r26
    31a6:	11 24       	eor	r1, r1
    31a8:	9f 57       	subi	r25, 0x7F	; 127
    31aa:	50 40       	sbci	r21, 0x00	; 0
    31ac:	8a f0       	brmi	.+34     	; 0x31d0 <__mulsf3_pse+0x84>
    31ae:	e1 f0       	breq	.+56     	; 0x31e8 <__mulsf3_pse+0x9c>
    31b0:	88 23       	and	r24, r24
    31b2:	4a f0       	brmi	.+18     	; 0x31c6 <__mulsf3_pse+0x7a>
    31b4:	ee 0f       	add	r30, r30
    31b6:	ff 1f       	adc	r31, r31
    31b8:	bb 1f       	adc	r27, r27
    31ba:	66 1f       	adc	r22, r22
    31bc:	77 1f       	adc	r23, r23
    31be:	88 1f       	adc	r24, r24
    31c0:	91 50       	subi	r25, 0x01	; 1
    31c2:	50 40       	sbci	r21, 0x00	; 0
    31c4:	a9 f7       	brne	.-22     	; 0x31b0 <__mulsf3_pse+0x64>
    31c6:	9e 3f       	cpi	r25, 0xFE	; 254
    31c8:	51 05       	cpc	r21, r1
    31ca:	70 f0       	brcs	.+28     	; 0x31e8 <__mulsf3_pse+0x9c>
    31cc:	40 cf       	rjmp	.-384    	; 0x304e <__fp_inf>
    31ce:	87 cf       	rjmp	.-242    	; 0x30de <__fp_szero>
    31d0:	5f 3f       	cpi	r21, 0xFF	; 255
    31d2:	ec f3       	brlt	.-6      	; 0x31ce <__mulsf3_pse+0x82>
    31d4:	98 3e       	cpi	r25, 0xE8	; 232
    31d6:	dc f3       	brlt	.-10     	; 0x31ce <__mulsf3_pse+0x82>
    31d8:	86 95       	lsr	r24
    31da:	77 95       	ror	r23
    31dc:	67 95       	ror	r22
    31de:	b7 95       	ror	r27
    31e0:	f7 95       	ror	r31
    31e2:	e7 95       	ror	r30
    31e4:	9f 5f       	subi	r25, 0xFF	; 255
    31e6:	c1 f7       	brne	.-16     	; 0x31d8 <__mulsf3_pse+0x8c>
    31e8:	fe 2b       	or	r31, r30
    31ea:	88 0f       	add	r24, r24
    31ec:	91 1d       	adc	r25, r1
    31ee:	96 95       	lsr	r25
    31f0:	87 95       	ror	r24
    31f2:	97 f9       	bld	r25, 7
    31f4:	08 95       	ret

000031f6 <_exit>:
    31f6:	f8 94       	cli

000031f8 <__stop_program>:
    31f8:	ff cf       	rjmp	.-2      	; 0x31f8 <__stop_program>
