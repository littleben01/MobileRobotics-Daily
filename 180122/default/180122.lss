
180122.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c0  00800100  0000332c  000033c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000332c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  008002c0  008002c0  00003580  2**0
                  ALLOC
  3 .stab         00001d34  00000000  00000000  00003580  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006ac  00000000  00000000  000052b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00005960  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000005c8  00000000  00000000  00005ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003947  00000000  00000000  00006168  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ad9  00000000  00000000  00009aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002bcd  00000000  00000000  0000b588  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000490  00000000  00000000  0000e158  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000774  00000000  00000000  0000e5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001e85  00000000  00000000  0000ed5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000007fb  00000000  00000000  00010be1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  000113dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 96 0b 	jmp	0x172c	; 0x172c <__vector_14>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__vector_18>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_30>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <Turn_and_Drive+0x142>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d0 e1       	ldi	r29, 0x10	; 16
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	12 e0       	ldi	r17, 0x02	; 2
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	ec e2       	ldi	r30, 0x2C	; 44
      be:	f3 e3       	ldi	r31, 0x33	; 51
      c0:	00 e0       	ldi	r16, 0x00	; 0
      c2:	0b bf       	out	0x3b, r16	; 59
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
      c6:	07 90       	elpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a0 3c       	cpi	r26, 0xC0	; 192
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
      d0:	13 e0       	ldi	r17, 0x03	; 3
      d2:	a0 ec       	ldi	r26, 0xC0	; 192
      d4:	b2 e0       	ldi	r27, 0x02	; 2
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	ac 30       	cpi	r26, 0x0C	; 12
      dc:	b1 07       	cpc	r27, r17
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	0e 94 66 0b 	call	0x16cc	; 0x16cc <main>
      e4:	0c 94 94 19 	jmp	0x3328	; 0x3328 <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <MCU_init>:
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART1 Receiver: On
	// USART1 Transmitter: On
	// USART1 Mode: Asynchronous
	// USART1 Baud Rate: 9600
	UCSR1A=0x00;
      ec:	10 92 9b 00 	sts	0x009B, r1
	UCSR1B=0x98;
      f0:	88 e9       	ldi	r24, 0x98	; 152
      f2:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C=0x06;
      f6:	86 e0       	ldi	r24, 0x06	; 6
      f8:	80 93 9d 00 	sts	0x009D, r24
	UBRR1H=0x00;
      fc:	10 92 98 00 	sts	0x0098, r1
	UBRR1L=0x5F;
     100:	8f e5       	ldi	r24, 0x5F	; 95
     102:	80 93 99 00 	sts	0x0099, r24

	sei();
     106:	78 94       	sei
}
     108:	08 95       	ret

0000010a <__vector_30>:

ISR(USART1_RX_vect)
{
     10a:	1f 92       	push	r1
     10c:	0f 92       	push	r0
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	0f 92       	push	r0
     112:	11 24       	eor	r1, r1
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
	char data;
	
	data=UDR1;
     118:	90 91 9c 00 	lds	r25, 0x009C
	while(!(UCSR1A&0xB8)); //수신완료 및 에러 검출되지 않을시
     11c:	80 91 9b 00 	lds	r24, 0x009B
     120:	88 7b       	andi	r24, 0xB8	; 184
     122:	e1 f3       	breq	.-8      	; 0x11c <__vector_30+0x12>
	rx1_flg=1;              //수신완료 플레그 set
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	80 93 c0 02 	sts	0x02C0, r24
	rx1_buff=data;	
     12a:	90 93 c1 02 	sts	0x02C1, r25
}
     12e:	9f 91       	pop	r25
     130:	8f 91       	pop	r24
     132:	0f 90       	pop	r0
     134:	0f be       	out	0x3f, r0	; 63
     136:	0f 90       	pop	r0
     138:	1f 90       	pop	r1
     13a:	18 95       	reti

0000013c <getchar1>:

char getchar1(void)  //uart 수신하기
{
	char data;
	
	data=rx1_buff;
     13c:	80 91 c1 02 	lds	r24, 0x02C1
	rx1_buff=0;
     140:	10 92 c1 02 	sts	0x02C1, r1
	cli();           //글로벌 인터럽트 disable
     144:	f8 94       	cli
	rx1_flg=0;       //수신완료 플레그 reset
     146:	10 92 c0 02 	sts	0x02C0, r1
	sei();           //글로벌 인터럽트 enable          
     14a:	78 94       	sei
	return data;     //수신데이터 반환
}
     14c:	08 95       	ret

0000014e <putchar1>:

void putchar1(char data) //uart 송신화기
{
	while(!(UCSR1A&0x20));  //송신 준비 완료시
     14e:	90 91 9b 00 	lds	r25, 0x009B
     152:	95 ff       	sbrs	r25, 5
     154:	fc cf       	rjmp	.-8      	; 0x14e <putchar1>
	UDR1=data;              //송신 버퍼에 데이터 쓰기
     156:	80 93 9c 00 	sts	0x009C, r24
}
     15a:	08 95       	ret

0000015c <Interface_init>:
// Parameter : 없음
// Return    : 없음
void Interface_init(void)
{
    // LCD / EX I/O Expander
	TWDR = 0xFF;
     15c:	8f ef       	ldi	r24, 0xFF	; 255
     15e:	80 93 73 00 	sts	0x0073, r24
	TWBR = 0x48;
     162:	88 e4       	ldi	r24, 0x48	; 72
     164:	80 93 70 00 	sts	0x0070, r24
}
     168:	08 95       	ret

0000016a <lcd_write_data>:
//          data - 전송할 한바이트 데이터
// Return    : 없음
void lcd_write_data(unsigned char data)
{
	// 시작
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     16a:	94 ea       	ldi	r25, 0xA4	; 164
     16c:	90 93 74 00 	sts	0x0074, r25
	// 준비상태 체크
    while(!(TWCR & (1 << TWINT)));
     170:	90 91 74 00 	lds	r25, 0x0074
     174:	97 ff       	sbrs	r25, 7
     176:	fc cf       	rjmp	.-8      	; 0x170 <lcd_write_data+0x6>
	
	// 주소 전송
    TWDR = SLA << 1;
     178:	9e e0       	ldi	r25, 0x0E	; 14
     17a:	90 93 73 00 	sts	0x0073, r25
	
	TWCR = (1 << TWINT) | (1 << TWEN);
     17e:	94 e8       	ldi	r25, 0x84	; 132
     180:	90 93 74 00 	sts	0x0074, r25
	while(!(TWCR & (1 << TWINT)));
     184:	90 91 74 00 	lds	r25, 0x0074
     188:	97 ff       	sbrs	r25, 7
     18a:	fc cf       	rjmp	.-8      	; 0x184 <lcd_write_data+0x1a>
	
	TWDR = data;
     18c:	80 93 73 00 	sts	0x0073, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
     190:	84 e8       	ldi	r24, 0x84	; 132
     192:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1 << TWINT)));
     196:	80 91 74 00 	lds	r24, 0x0074
     19a:	87 ff       	sbrs	r24, 7
     19c:	fc cf       	rjmp	.-8      	; 0x196 <lcd_write_data+0x2c>
	
    // 정지
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     19e:	84 e9       	ldi	r24, 0x94	; 148
     1a0:	80 93 74 00 	sts	0x0074, r24
}
     1a4:	08 95       	ret

000001a6 <lcd_display_str>:
// Parameter :
//          line   - 출력할 라인번호(0~3)
//          string - 출력할 문자열(최대 20자)
// Return    : 없음
void lcd_display_str(unsigned char Y_line, unsigned char X_line,char *string) //lcd 스트링데이터 쓰기
{
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <lcd_display_str+0xe>
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	08 2f       	mov	r16, r24
     1ba:	16 2f       	mov	r17, r22
    int i=X_line;

	if((Y_line<4) && (X_line<20)){
     1bc:	84 30       	cpi	r24, 0x04	; 4
     1be:	70 f5       	brcc	.+92     	; 0x21c <lcd_display_str+0x76>
     1c0:	64 31       	cpi	r22, 0x14	; 20
     1c2:	60 f5       	brcc	.+88     	; 0x21c <lcd_display_str+0x76>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     1c4:	8b e1       	ldi	r24, 0x1B	; 27
     1c6:	49 83       	std	Y+1, r20	; 0x01
     1c8:	5a 83       	std	Y+2, r21	; 0x02
     1ca:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1ce:	8c e4       	ldi	r24, 0x4C	; 76
     1d0:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     1d4:	81 2f       	mov	r24, r17
     1d6:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1da:	80 2f       	mov	r24, r16
     1dc:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e0:	80 e7       	ldi	r24, 0x70	; 112
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	01 97       	sbiw	r24, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_display_str+0x3e>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_display_str+0x44>
     1ea:	e1 2e       	mov	r14, r17
     1ec:	ff 24       	eor	r15, r15
     1ee:	49 81       	ldd	r20, Y+1	; 0x01
     1f0:	5a 81       	ldd	r21, Y+2	; 0x02
     1f2:	04 2f       	mov	r16, r20
     1f4:	15 2f       	mov	r17, r21
     1f6:	06 c0       	rjmp	.+12     	; 0x204 <lcd_display_str+0x5e>
		_delay_us(100);
    	while(((i++)<20)&&*string){
        	lcd_write_data(*string++);
     1f8:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1fc:	94 ec       	ldi	r25, 0xC4	; 196
     1fe:	9a 95       	dec	r25
     200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_display_str+0x58>
     202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_display_str+0x5e>

	if((Y_line<4) && (X_line<20)){
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
		lcd_write_data(X_line); lcd_write_data(Y_line);
		_delay_us(100);
    	while(((i++)<20)&&*string){
     204:	e4 e1       	ldi	r30, 0x14	; 20
     206:	ee 16       	cp	r14, r30
     208:	f1 04       	cpc	r15, r1
     20a:	44 f4       	brge	.+16     	; 0x21c <lcd_display_str+0x76>
     20c:	f8 01       	movw	r30, r16
     20e:	81 91       	ld	r24, Z+
     210:	8f 01       	movw	r16, r30
     212:	08 94       	sec
     214:	e1 1c       	adc	r14, r1
     216:	f1 1c       	adc	r15, r1
     218:	88 23       	and	r24, r24
     21a:	71 f7       	brne	.-36     	; 0x1f8 <lcd_display_str+0x52>
        	lcd_write_data(*string++);
			_delay_us(40);
		}
    }
}
     21c:	0f 90       	pop	r0
     21e:	0f 90       	pop	r0
     220:	cf 91       	pop	r28
     222:	df 91       	pop	r29
     224:	1f 91       	pop	r17
     226:	0f 91       	pop	r16
     228:	ff 90       	pop	r15
     22a:	ef 90       	pop	r14
     22c:	08 95       	ret

0000022e <write_lcd_data>:

void write_lcd_data(unsigned char Y_line, unsigned char X_line, long data) //lcd데이터 쓰기
{
     22e:	1f 93       	push	r17
     230:	df 93       	push	r29
     232:	cf 93       	push	r28
     234:	00 d0       	rcall	.+0      	; 0x236 <write_lcd_data+0x8>
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	18 2f       	mov	r17, r24
    if(Y_line<4 && X_line<20){
     23c:	84 30       	cpi	r24, 0x04	; 4
     23e:	f0 f4       	brcc	.+60     	; 0x27c <write_lcd_data+0x4e>
     240:	64 31       	cpi	r22, 0x14	; 20
     242:	e0 f4       	brcc	.+56     	; 0x27c <write_lcd_data+0x4e>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     244:	8b e1       	ldi	r24, 0x1B	; 27
     246:	2a 83       	std	Y+2, r18	; 0x02
     248:	69 83       	std	Y+1, r22	; 0x01
     24a:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     24e:	8c e4       	ldi	r24, 0x4C	; 76
     250:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     254:	69 81       	ldd	r22, Y+1	; 0x01
     256:	86 2f       	mov	r24, r22
     258:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     25c:	81 2f       	mov	r24, r17
     25e:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     262:	80 e7       	ldi	r24, 0x70	; 112
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <write_lcd_data+0x38>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <write_lcd_data+0x3e>
		_delay_us(100);
		lcd_write_data(data);
     26c:	2a 81       	ldd	r18, Y+2	; 0x02
     26e:	82 2f       	mov	r24, r18
     270:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     274:	94 ec       	ldi	r25, 0xC4	; 196
     276:	9a 95       	dec	r25
     278:	f1 f7       	brne	.-4      	; 0x276 <write_lcd_data+0x48>
     27a:	00 c0       	rjmp	.+0      	; 0x27c <write_lcd_data+0x4e>
		_delay_us(40);
    }
}
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	cf 91       	pop	r28
     282:	df 91       	pop	r29
     284:	1f 91       	pop	r17
     286:	08 95       	ret

00000288 <lcd_clear_screen>:

void lcd_clear_screen(void){ lcd_write_data(0x1B); lcd_write_data(0x43); _delay_ms(20); } //lcd전체화면 클리어
     288:	8b e1       	ldi	r24, 0x1B	; 27
     28a:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     28e:	83 e4       	ldi	r24, 0x43	; 67
     290:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     294:	86 e6       	ldi	r24, 0x66	; 102
     296:	96 ee       	ldi	r25, 0xE6	; 230
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	81 50       	subi	r24, 0x01	; 1
     29c:	90 40       	sbci	r25, 0x00	; 0
     29e:	a0 40       	sbci	r26, 0x00	; 0
     2a0:	e1 f7       	brne	.-8      	; 0x29a <lcd_clear_screen+0x12>
     2a2:	08 95       	ret

000002a4 <display_char>:
void display_char(unsigned char line, unsigned char col, unsigned char data) ////lcd char 데이터 표시
{
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	18 2f       	mov	r17, r24
     2ae:	f6 2e       	mov	r15, r22
     2b0:	e4 2e       	mov	r14, r20
    unsigned char val=0, val_buff=0;

	val=data;   

	val_buff=val/100;             
     2b2:	84 2f       	mov	r24, r20
     2b4:	64 e6       	ldi	r22, 0x64	; 100
     2b6:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__udivmodqi4>
     2ba:	08 2f       	mov	r16, r24
	write_lcd_data(line, col, val_buff+'0' );
     2bc:	28 2f       	mov	r18, r24
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	20 5d       	subi	r18, 0xD0	; 208
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
     2c4:	44 27       	eor	r20, r20
     2c6:	37 fd       	sbrc	r19, 7
     2c8:	40 95       	com	r20
     2ca:	54 2f       	mov	r21, r20
     2cc:	81 2f       	mov	r24, r17
     2ce:	6f 2d       	mov	r22, r15
     2d0:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
	val=val-(100*val_buff);
     2d4:	8c e9       	ldi	r24, 0x9C	; 156
     2d6:	08 9f       	mul	r16, r24
     2d8:	00 2d       	mov	r16, r0
     2da:	11 24       	eor	r1, r1
     2dc:	0e 0d       	add	r16, r14

	val_buff=val/10;
     2de:	80 2f       	mov	r24, r16
     2e0:	6a e0       	ldi	r22, 0x0A	; 10
     2e2:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__udivmodqi4>
     2e6:	e8 2e       	mov	r14, r24
	write_lcd_data(line, 1+col, val_buff+'0' );
     2e8:	6f 2d       	mov	r22, r15
     2ea:	6f 5f       	subi	r22, 0xFF	; 255
     2ec:	28 2f       	mov	r18, r24
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	20 5d       	subi	r18, 0xD0	; 208
     2f2:	3f 4f       	sbci	r19, 0xFF	; 255
     2f4:	44 27       	eor	r20, r20
     2f6:	37 fd       	sbrc	r19, 7
     2f8:	40 95       	com	r20
     2fa:	54 2f       	mov	r21, r20
     2fc:	81 2f       	mov	r24, r17
     2fe:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
	val=val-(10*val_buff);

	write_lcd_data(line, 2+col, val+'0');
     302:	6f 2d       	mov	r22, r15
     304:	6e 5f       	subi	r22, 0xFE	; 254
	write_lcd_data(line, col, val_buff+'0' );
	val=val-(100*val_buff);

	val_buff=val/10;
	write_lcd_data(line, 1+col, val_buff+'0' );
	val=val-(10*val_buff);
     306:	26 ef       	ldi	r18, 0xF6	; 246
     308:	e2 9e       	mul	r14, r18
     30a:	20 2d       	mov	r18, r0
     30c:	11 24       	eor	r1, r1
     30e:	20 0f       	add	r18, r16

	write_lcd_data(line, 2+col, val+'0');
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	20 5d       	subi	r18, 0xD0	; 208
     314:	3f 4f       	sbci	r19, 0xFF	; 255
     316:	44 27       	eor	r20, r20
     318:	37 fd       	sbrc	r19, 7
     31a:	40 95       	com	r20
     31c:	54 2f       	mov	r21, r20
     31e:	81 2f       	mov	r24, r17
     320:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
}
     324:	1f 91       	pop	r17
     326:	0f 91       	pop	r16
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	08 95       	ret

0000032e <Capt>:

void Turn_and_Drive(double f_agl, int f_speed, int fw_speed, unsigned int mm,int dgree, unsigned int stop, unsigned int wstop);

int Capt()
{
	if(Camera_Cmd(1,102) != 0) return 1;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	66 e6       	ldi	r22, 0x66	; 102
     332:	0e 94 a5 10 	call	0x214a	; 0x214a <Camera_Cmd>
     336:	21 e0       	ldi	r18, 0x01	; 1
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	88 23       	and	r24, r24
     33c:	11 f4       	brne	.+4      	; 0x342 <Capt+0x14>
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
	else return 0;
}
     342:	c9 01       	movw	r24, r18
     344:	08 95       	ret

00000346 <NextDir>:
}


int NextDir(int nowdir, int nextdir)
{
	if(nowdir == EAST && nextdir == SOUTH) return -90;
     346:	00 97       	sbiw	r24, 0x00	; 0
     348:	21 f4       	brne	.+8      	; 0x352 <NextDir+0xc>
     34a:	63 30       	cpi	r22, 0x03	; 3
     34c:	71 05       	cpc	r23, r1
     34e:	39 f4       	brne	.+14     	; 0x35e <NextDir+0x18>
     350:	12 c0       	rjmp	.+36     	; 0x376 <NextDir+0x30>
	if(nowdir == NORTH && nextdir == EAST) return -90;
     352:	81 30       	cpi	r24, 0x01	; 1
     354:	91 05       	cpc	r25, r1
     356:	19 f4       	brne	.+6      	; 0x35e <NextDir+0x18>
     358:	61 15       	cp	r22, r1
     35a:	71 05       	cpc	r23, r1
     35c:	61 f0       	breq	.+24     	; 0x376 <NextDir+0x30>
	return ((nowdir-nextdir)*90);
     35e:	86 1b       	sub	r24, r22
     360:	97 0b       	sbc	r25, r23
     362:	4a e5       	ldi	r20, 0x5A	; 90
     364:	50 e0       	ldi	r21, 0x00	; 0
     366:	84 9f       	mul	r24, r20
     368:	90 01       	movw	r18, r0
     36a:	85 9f       	mul	r24, r21
     36c:	30 0d       	add	r19, r0
     36e:	94 9f       	mul	r25, r20
     370:	30 0d       	add	r19, r0
     372:	11 24       	eor	r1, r1
     374:	02 c0       	rjmp	.+4      	; 0x37a <NextDir+0x34>


int NextDir(int nowdir, int nextdir)
{
	if(nowdir == EAST && nextdir == SOUTH) return -90;
	if(nowdir == NORTH && nextdir == EAST) return -90;
     376:	26 ea       	ldi	r18, 0xA6	; 166
     378:	3f ef       	ldi	r19, 0xFF	; 255
	return ((nowdir-nextdir)*90);
}
     37a:	c9 01       	movw	r24, r18
     37c:	08 95       	ret

0000037e <NextMove>:

int NextMove(int nowcross)
{
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
	for(int i = 0;i < 3;i++)
	{
		if(LINE[cross[nowcross][EAST]] == i)
     38a:	9c 01       	movw	r18, r24
     38c:	03 e0       	ldi	r16, 0x03	; 3
     38e:	22 0f       	add	r18, r18
     390:	33 1f       	adc	r19, r19
     392:	0a 95       	dec	r16
     394:	e1 f7       	brne	.-8      	; 0x38e <NextMove+0x10>
     396:	2f 5e       	subi	r18, 0xEF	; 239
     398:	3e 4f       	sbci	r19, 0xFE	; 254
     39a:	d9 01       	movw	r26, r18
     39c:	6d 91       	ld	r22, X+
     39e:	7d 91       	ld	r23, X+
     3a0:	fb 01       	movw	r30, r22
     3a2:	ee 0f       	add	r30, r30
     3a4:	ff 1f       	adc	r31, r31
     3a6:	ef 58       	subi	r30, 0x8F	; 143
     3a8:	fe 4f       	sbci	r31, 0xFE	; 254
     3aa:	40 81       	ld	r20, Z
     3ac:	51 81       	ldd	r21, Z+1	; 0x01
	return ((nowdir-nextdir)*90);
}

int NextMove(int nowcross)
{
	for(int i = 0;i < 3;i++)
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
		if(LINE[cross[nowcross][NORTH]] == i)
		{
			LINE[cross[nowcross][NORTH]]++;
			return NORTH;
		}
		if(LINE[cross[nowcross][WEST]] == i)
     3b2:	89 01       	movw	r16, r18
     3b4:	0c 5f       	subi	r16, 0xFC	; 252
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			LINE[cross[nowcross][WEST]]++;
			return WEST;
		}
		if(LINE[cross[nowcross][SOUTH]] == i)
     3b8:	e6 e0       	ldi	r30, 0x06	; 6
     3ba:	ee 2e       	mov	r14, r30
     3bc:	f1 2c       	mov	r15, r1
     3be:	e2 0e       	add	r14, r18
     3c0:	f3 1e       	adc	r15, r19

int NextMove(int nowcross)
{
	for(int i = 0;i < 3;i++)
	{
		if(LINE[cross[nowcross][EAST]] == i)
     3c2:	48 17       	cp	r20, r24
     3c4:	59 07       	cpc	r21, r25
     3c6:	51 f4       	brne	.+20     	; 0x3dc <NextMove+0x5e>
		{
			LINE[cross[nowcross][EAST]]++;
     3c8:	fb 01       	movw	r30, r22
     3ca:	ee 0f       	add	r30, r30
     3cc:	ff 1f       	adc	r31, r31
     3ce:	ef 58       	subi	r30, 0x8F	; 143
     3d0:	fe 4f       	sbci	r31, 0xFE	; 254
     3d2:	4f 5f       	subi	r20, 0xFF	; 255
     3d4:	5f 4f       	sbci	r21, 0xFF	; 255
     3d6:	51 83       	std	Z+1, r21	; 0x01
     3d8:	40 83       	st	Z, r20
     3da:	3d c0       	rjmp	.+122    	; 0x456 <NextMove+0xd8>
			return EAST;
		}
		if(LINE[cross[nowcross][NORTH]] == i)
     3dc:	ed 91       	ld	r30, X+
     3de:	fc 91       	ld	r31, X
     3e0:	11 97       	sbiw	r26, 0x01	; 1
     3e2:	ee 0f       	add	r30, r30
     3e4:	ff 1f       	adc	r31, r31
     3e6:	ef 58       	subi	r30, 0x8F	; 143
     3e8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ea:	20 81       	ld	r18, Z
     3ec:	31 81       	ldd	r19, Z+1	; 0x01
     3ee:	28 17       	cp	r18, r24
     3f0:	39 07       	cpc	r19, r25
     3f2:	31 f4       	brne	.+12     	; 0x400 <NextMove+0x82>
		{
			LINE[cross[nowcross][NORTH]]++;
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	91 83       	std	Z+1, r25	; 0x01
     3f8:	80 83       	st	Z, r24
			return NORTH;
     3fa:	21 e0       	ldi	r18, 0x01	; 1
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	2d c0       	rjmp	.+90     	; 0x45a <NextMove+0xdc>
		}
		if(LINE[cross[nowcross][WEST]] == i)
     400:	e8 01       	movw	r28, r16
     402:	e8 81       	ld	r30, Y
     404:	f9 81       	ldd	r31, Y+1	; 0x01
     406:	ee 0f       	add	r30, r30
     408:	ff 1f       	adc	r31, r31
     40a:	ef 58       	subi	r30, 0x8F	; 143
     40c:	fe 4f       	sbci	r31, 0xFE	; 254
     40e:	20 81       	ld	r18, Z
     410:	31 81       	ldd	r19, Z+1	; 0x01
     412:	28 17       	cp	r18, r24
     414:	39 07       	cpc	r19, r25
     416:	31 f4       	brne	.+12     	; 0x424 <NextMove+0xa6>
		{
			LINE[cross[nowcross][WEST]]++;
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	91 83       	std	Z+1, r25	; 0x01
     41c:	80 83       	st	Z, r24
			return WEST;
     41e:	22 e0       	ldi	r18, 0x02	; 2
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	1b c0       	rjmp	.+54     	; 0x45a <NextMove+0xdc>
		}
		if(LINE[cross[nowcross][SOUTH]] == i)
     424:	e7 01       	movw	r28, r14
     426:	e8 81       	ld	r30, Y
     428:	f9 81       	ldd	r31, Y+1	; 0x01
     42a:	ee 0f       	add	r30, r30
     42c:	ff 1f       	adc	r31, r31
     42e:	ef 58       	subi	r30, 0x8F	; 143
     430:	fe 4f       	sbci	r31, 0xFE	; 254
     432:	c0 81       	ld	r28, Z
     434:	d1 81       	ldd	r29, Z+1	; 0x01
     436:	9c 01       	movw	r18, r24
     438:	2f 5f       	subi	r18, 0xFF	; 255
     43a:	3f 4f       	sbci	r19, 0xFF	; 255
     43c:	c8 17       	cp	r28, r24
     43e:	d9 07       	cpc	r29, r25
     440:	29 f4       	brne	.+10     	; 0x44c <NextMove+0xce>
		{
			LINE[cross[nowcross][SOUTH]]++;
     442:	31 83       	std	Z+1, r19	; 0x01
     444:	20 83       	st	Z, r18
			return SOUTH;
     446:	23 e0       	ldi	r18, 0x03	; 3
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	07 c0       	rjmp	.+14     	; 0x45a <NextMove+0xdc>
	return ((nowdir-nextdir)*90);
}

int NextMove(int nowcross)
{
	for(int i = 0;i < 3;i++)
     44c:	c9 01       	movw	r24, r18
     44e:	23 30       	cpi	r18, 0x03	; 3
     450:	31 05       	cpc	r19, r1
     452:	09 f0       	breq	.+2      	; 0x456 <NextMove+0xd8>
     454:	b6 cf       	rjmp	.-148    	; 0x3c2 <NextMove+0x44>
		{
			LINE[cross[nowcross][SOUTH]]++;
			return SOUTH;
		}
	}
	return 0;
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	30 e0       	ldi	r19, 0x00	; 0
}
     45a:	c9 01       	movw	r24, r18
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	08 95       	ret

0000046a <DumpCross>:

int DumpCross(int nowcross, int nextdir)
{
     46a:	9c 01       	movw	r18, r24
	if(nextdir == EAST) return (nowcross + 1);
     46c:	61 15       	cp	r22, r1
     46e:	71 05       	cpc	r23, r1
     470:	19 f4       	brne	.+6      	; 0x478 <DumpCross+0xe>
     472:	2f 5f       	subi	r18, 0xFF	; 255
     474:	3f 4f       	sbci	r19, 0xFF	; 255
     476:	0e c0       	rjmp	.+28     	; 0x494 <DumpCross+0x2a>
	else if(nextdir == WEST) return (nowcross - 1);
     478:	62 30       	cpi	r22, 0x02	; 2
     47a:	71 05       	cpc	r23, r1
     47c:	19 f4       	brne	.+6      	; 0x484 <DumpCross+0x1a>
     47e:	21 50       	subi	r18, 0x01	; 1
     480:	30 40       	sbci	r19, 0x00	; 0
     482:	08 c0       	rjmp	.+16     	; 0x494 <DumpCross+0x2a>
	else if(nextdir == SOUTH) return (nowcross + 4);
     484:	63 30       	cpi	r22, 0x03	; 3
     486:	71 05       	cpc	r23, r1
     488:	19 f4       	brne	.+6      	; 0x490 <DumpCross+0x26>
     48a:	2c 5f       	subi	r18, 0xFC	; 252
     48c:	3f 4f       	sbci	r19, 0xFF	; 255
     48e:	02 c0       	rjmp	.+4      	; 0x494 <DumpCross+0x2a>
	else return (nowcross - 4);
     490:	24 50       	subi	r18, 0x04	; 4
     492:	30 40       	sbci	r19, 0x00	; 0
}
     494:	c9 01       	movw	r24, r18
     496:	08 95       	ret

00000498 <HolonomicW>:
	}
				
}


void HolonomicW(int f_agl, int f_speed, int fw_speed){
     498:	2f 92       	push	r2
     49a:	3f 92       	push	r3
     49c:	4f 92       	push	r4
     49e:	5f 92       	push	r5
     4a0:	6f 92       	push	r6
     4a2:	7f 92       	push	r7
     4a4:	8f 92       	push	r8
     4a6:	9f 92       	push	r9
     4a8:	af 92       	push	r10
     4aa:	bf 92       	push	r11
     4ac:	cf 92       	push	r12
     4ae:	df 92       	push	r13
     4b0:	ef 92       	push	r14
     4b2:	ff 92       	push	r15
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	df 93       	push	r29
     4ba:	cf 93       	push	r28
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	60 97       	sbiw	r28, 0x10	; 16
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	cd bf       	out	0x3d, r28	; 61
     4cc:	8c 01       	movw	r16, r24
     4ce:	7b 01       	movw	r14, r22
     4d0:	1a 01       	movw	r2, r20
	double V[3]={0,0,0};

	unsigned char i=0;

	// 좌표계 변환
	if(f_agl <= 180) DesiredDirection = 180 - f_agl;
     4d2:	85 3b       	cpi	r24, 0xB5	; 181
     4d4:	91 05       	cpc	r25, r1
     4d6:	1c f4       	brge	.+6      	; 0x4de <HolonomicW+0x46>
     4d8:	64 eb       	ldi	r22, 0xB4	; 180
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <HolonomicW+0x4a>
	else if(f_agl > 180) DesiredDirection = 540 - f_agl;
     4de:	6c e1       	ldi	r22, 0x1C	; 28
     4e0:	72 e0       	ldi	r23, 0x02	; 2
     4e2:	60 1b       	sub	r22, r16
     4e4:	71 0b       	sbc	r23, r17
	
	// 라디안 변환
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
     4e6:	88 27       	eor	r24, r24
     4e8:	77 fd       	sbrc	r23, 7
     4ea:	80 95       	com	r24
     4ec:	98 2f       	mov	r25, r24
     4ee:	0e 94 a4 14 	call	0x2948	; 0x2948 <__floatsisf>
     4f2:	5b 01       	movw	r10, r22
     4f4:	6c 01       	movw	r12, r24
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	84 e3       	ldi	r24, 0x34	; 52
     4fc:	93 e4       	ldi	r25, 0x43	; 67
     4fe:	a6 01       	movw	r20, r12
     500:	95 01       	movw	r18, r10
     502:	0e 94 b9 12 	call	0x2572	; 0x2572 <__subsf3>
     506:	28 e9       	ldi	r18, 0x98	; 152
     508:	39 ef       	ldi	r19, 0xF9	; 249
     50a:	4e e8       	ldi	r20, 0x8E	; 142
     50c:	5c e3       	ldi	r21, 0x3C	; 60
     50e:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
	radianB = (90-(double)DesiredDirection) * 0.017453;

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
     512:	0e 94 02 18 	call	0x3004	; 0x3004 <cos>
     516:	3b 01       	movw	r6, r22
     518:	4c 01       	movw	r8, r24
	if(f_agl <= 180) DesiredDirection = 180 - f_agl;
	else if(f_agl > 180) DesiredDirection = 540 - f_agl;
	
	// 라디안 변환
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
	radianB = (90-(double)DesiredDirection) * 0.017453;
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	84 eb       	ldi	r24, 0xB4	; 180
     520:	92 e4       	ldi	r25, 0x42	; 66
     522:	a6 01       	movw	r20, r12
     524:	95 01       	movw	r18, r10
     526:	0e 94 b9 12 	call	0x2572	; 0x2572 <__subsf3>
     52a:	28 e9       	ldi	r18, 0x98	; 152
     52c:	39 ef       	ldi	r19, 0xF9	; 249
     52e:	4e e8       	ldi	r20, 0x8E	; 142
     530:	5c e3       	ldi	r21, 0x3C	; 60
     532:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
	Fy = f_speed * cos(radianB);
     536:	0e 94 02 18 	call	0x3004	; 0x3004 <cos>
     53a:	5b 01       	movw	r10, r22
     53c:	6c 01       	movw	r12, r24
	Fw=fw_speed;

	if(f_agl<0 || f_agl>=360){
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	08 36       	cpi	r16, 0x68	; 104
     542:	18 07       	cpc	r17, r24
     544:	28 f5       	brcc	.+74     	; 0x590 <HolonomicW+0xf8>
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
	radianB = (90-(double)DesiredDirection) * 0.017453;

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
     546:	b7 01       	movw	r22, r14
     548:	88 27       	eor	r24, r24
     54a:	77 fd       	sbrc	r23, 7
     54c:	80 95       	com	r24
     54e:	98 2f       	mov	r25, r24
     550:	0e 94 a4 14 	call	0x2948	; 0x2948 <__floatsisf>
     554:	7b 01       	movw	r14, r22
     556:	8c 01       	movw	r16, r24
     558:	a4 01       	movw	r20, r8
     55a:	93 01       	movw	r18, r6
     55c:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
     560:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__fixsfsi>
     564:	66 2e       	mov	r6, r22
     566:	77 2e       	mov	r7, r23
     568:	88 2e       	mov	r8, r24
     56a:	99 2e       	mov	r9, r25
	Fy = f_speed * cos(radianB);
     56c:	c8 01       	movw	r24, r16
     56e:	b7 01       	movw	r22, r14
     570:	a6 01       	movw	r20, r12
     572:	95 01       	movw	r18, r10
     574:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
     578:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__fixsfsi>
     57c:	e6 2e       	mov	r14, r22
     57e:	f7 2e       	mov	r15, r23
     580:	08 2f       	mov	r16, r24
     582:	19 2f       	mov	r17, r25
	Fw=fw_speed;
     584:	51 01       	movw	r10, r2
     586:	cc 24       	eor	r12, r12
     588:	b7 fc       	sbrc	r11, 7
     58a:	c0 94       	com	r12
     58c:	dc 2c       	mov	r13, r12
     58e:	11 c0       	rjmp	.+34     	; 0x5b2 <HolonomicW+0x11a>

	if(f_agl<0 || f_agl>=360){
		if(f_agl<0)Fw = -f_speed;
     590:	17 ff       	sbrs	r17, 7
     592:	04 c0       	rjmp	.+8      	; 0x59c <HolonomicW+0x104>
     594:	f0 94       	com	r15
     596:	e1 94       	neg	r14
     598:	f1 08       	sbc	r15, r1
     59a:	f3 94       	inc	r15
		else if(f_agl>=360)Fw = f_speed;
     59c:	57 01       	movw	r10, r14
     59e:	cc 24       	eor	r12, r12
     5a0:	b7 fc       	sbrc	r11, 7
     5a2:	c0 94       	com	r12
     5a4:	dc 2c       	mov	r13, r12
		Fx=0;
		Fy=0;
     5a6:	ee 24       	eor	r14, r14
     5a8:	ff 24       	eor	r15, r15
     5aa:	87 01       	movw	r16, r14
	Fw=fw_speed;

	if(f_agl<0 || f_agl>=360){
		if(f_agl<0)Fw = -f_speed;
		else if(f_agl>=360)Fw = f_speed;
		Fx=0;
     5ac:	66 24       	eor	r6, r6
     5ae:	77 24       	eor	r7, r7
     5b0:	43 01       	movw	r8, r6
		Fy=0;
	}
		
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
     5b2:	c4 01       	movw	r24, r8
     5b4:	b3 01       	movw	r22, r6
     5b6:	0e 94 a4 14 	call	0x2948	; 0x2948 <__floatsisf>
     5ba:	6d 87       	std	Y+13, r22	; 0x0d
     5bc:	7e 87       	std	Y+14, r23	; 0x0e
     5be:	8f 87       	std	Y+15, r24	; 0x0f
     5c0:	98 8b       	std	Y+16, r25	; 0x10
     5c2:	c8 01       	movw	r24, r16
     5c4:	b7 01       	movw	r22, r14
     5c6:	0e 94 a4 14 	call	0x2948	; 0x2948 <__floatsisf>
     5ca:	1b 01       	movw	r2, r22
     5cc:	2c 01       	movw	r4, r24
     5ce:	22 e0       	ldi	r18, 0x02	; 2
     5d0:	3b e2       	ldi	r19, 0x2B	; 43
     5d2:	47 e0       	ldi	r20, 0x07	; 7
     5d4:	5d e3       	ldi	r21, 0x3D	; 61
     5d6:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
     5da:	16 2f       	mov	r17, r22
     5dc:	f7 2e       	mov	r15, r23
     5de:	98 2e       	mov	r9, r24
     5e0:	89 2e       	mov	r8, r25
     5e2:	c6 01       	movw	r24, r12
     5e4:	b5 01       	movw	r22, r10
     5e6:	0e 94 a4 14 	call	0x2948	; 0x2948 <__floatsisf>
     5ea:	2e e4       	ldi	r18, 0x4E	; 78
     5ec:	32 e6       	ldi	r19, 0x62	; 98
     5ee:	40 e1       	ldi	r20, 0x10	; 16
     5f0:	5e e3       	ldi	r21, 0x3E	; 62
     5f2:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
     5f6:	a6 2e       	mov	r10, r22
     5f8:	e7 2e       	mov	r14, r23
     5fa:	08 2f       	mov	r16, r24
     5fc:	69 2e       	mov	r6, r25
     5fe:	6d 85       	ldd	r22, Y+13	; 0x0d
     600:	7e 85       	ldd	r23, Y+14	; 0x0e
     602:	8f 85       	ldd	r24, Y+15	; 0x0f
     604:	98 89       	ldd	r25, Y+16	; 0x10
     606:	25 ed       	ldi	r18, 0xD5	; 213
     608:	38 e7       	ldi	r19, 0x78	; 120
     60a:	49 e6       	ldi	r20, 0x69	; 105
     60c:	5d e3       	ldi	r21, 0x3D	; 61
     60e:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
     612:	f4 01       	movw	r30, r8
     614:	21 2f       	mov	r18, r17
     616:	3f 2d       	mov	r19, r15
     618:	4f 2f       	mov	r20, r31
     61a:	5e 2f       	mov	r21, r30
     61c:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
     620:	2a 2d       	mov	r18, r10
     622:	3e 2d       	mov	r19, r14
     624:	40 2f       	mov	r20, r16
     626:	56 2d       	mov	r21, r6
     628:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
     62c:	69 83       	std	Y+1, r22	; 0x01
     62e:	7a 83       	std	Y+2, r23	; 0x02
     630:	8b 83       	std	Y+3, r24	; 0x03
     632:	9c 83       	std	Y+4, r25	; 0x04
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
     634:	c2 01       	movw	r24, r4
     636:	b1 01       	movw	r22, r2
     638:	28 eb       	ldi	r18, 0xB8	; 184
     63a:	3e e1       	ldi	r19, 0x1E	; 30
     63c:	45 e8       	ldi	r20, 0x85	; 133
     63e:	5d eb       	ldi	r21, 0xBD	; 189
     640:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
     644:	2a 2d       	mov	r18, r10
     646:	3e 2d       	mov	r19, r14
     648:	40 2f       	mov	r20, r16
     64a:	56 2d       	mov	r21, r6
     64c:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
     650:	6d 83       	std	Y+5, r22	; 0x05
     652:	7e 83       	std	Y+6, r23	; 0x06
     654:	8f 83       	std	Y+7, r24	; 0x07
     656:	98 87       	std	Y+8, r25	; 0x08
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
     658:	6d 85       	ldd	r22, Y+13	; 0x0d
     65a:	7e 85       	ldd	r23, Y+14	; 0x0e
     65c:	8f 85       	ldd	r24, Y+15	; 0x0f
     65e:	98 89       	ldd	r25, Y+16	; 0x10
     660:	25 ed       	ldi	r18, 0xD5	; 213
     662:	38 e7       	ldi	r19, 0x78	; 120
     664:	49 e6       	ldi	r20, 0x69	; 105
     666:	5d eb       	ldi	r21, 0xBD	; 189
     668:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
     66c:	f4 01       	movw	r30, r8
     66e:	21 2f       	mov	r18, r17
     670:	3f 2d       	mov	r19, r15
     672:	4f 2f       	mov	r20, r31
     674:	5e 2f       	mov	r21, r30
     676:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
     67a:	2a 2d       	mov	r18, r10
     67c:	3e 2d       	mov	r19, r14
     67e:	40 2f       	mov	r20, r16
     680:	56 2d       	mov	r21, r6
     682:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
     686:	69 87       	std	Y+9, r22	; 0x09
     688:	7a 87       	std	Y+10, r23	; 0x0a
     68a:	8b 87       	std	Y+11, r24	; 0x0b
     68c:	9c 87       	std	Y+12, r25	; 0x0c
     68e:	8e 01       	movw	r16, r28
     690:	0f 5f       	subi	r16, 0xFF	; 255
     692:	1f 4f       	sbci	r17, 0xFF	; 255
	
    for(i=0;i<3;++i){
     694:	ee 24       	eor	r14, r14
	}
				
}


void HolonomicW(int f_agl, int f_speed, int fw_speed){
     696:	58 01       	movw	r10, r16
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
	
    for(i=0;i<3;++i){
		if(V[i]>=40)V[i]=40;
     698:	f8 01       	movw	r30, r16
     69a:	60 81       	ld	r22, Z
     69c:	71 81       	ldd	r23, Z+1	; 0x01
     69e:	82 81       	ldd	r24, Z+2	; 0x02
     6a0:	93 81       	ldd	r25, Z+3	; 0x03
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	40 e2       	ldi	r20, 0x20	; 32
     6a8:	52 e4       	ldi	r21, 0x42	; 66
     6aa:	0e 94 14 14 	call	0x2828	; 0x2828 <__gesf2>
     6ae:	87 fd       	sbrc	r24, 7
     6b0:	09 c0       	rjmp	.+18     	; 0x6c4 <HolonomicW+0x22c>
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	a0 e2       	ldi	r26, 0x20	; 32
     6b8:	b2 e4       	ldi	r27, 0x42	; 66
     6ba:	f8 01       	movw	r30, r16
     6bc:	80 83       	st	Z, r24
     6be:	91 83       	std	Z+1, r25	; 0x01
     6c0:	a2 83       	std	Z+2, r26	; 0x02
     6c2:	b3 83       	std	Z+3, r27	; 0x03
		if(V[i]<=(-40))V[i]=-40;
     6c4:	f8 01       	movw	r30, r16
     6c6:	60 81       	ld	r22, Z
     6c8:	71 81       	ldd	r23, Z+1	; 0x01
     6ca:	82 81       	ldd	r24, Z+2	; 0x02
     6cc:	93 81       	ldd	r25, Z+3	; 0x03
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	40 e2       	ldi	r20, 0x20	; 32
     6d4:	52 ec       	ldi	r21, 0xC2	; 194
     6d6:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__lesf2>
     6da:	18 16       	cp	r1, r24
     6dc:	4c f0       	brlt	.+18     	; 0x6f0 <HolonomicW+0x258>
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	a0 e2       	ldi	r26, 0x20	; 32
     6e4:	b2 ec       	ldi	r27, 0xC2	; 194
     6e6:	f8 01       	movw	r30, r16
     6e8:	80 83       	st	Z, r24
     6ea:	91 83       	std	Z+1, r25	; 0x01
     6ec:	a2 83       	std	Z+2, r26	; 0x02
     6ee:	b3 83       	std	Z+3, r27	; 0x03
     6f0:	0c 5f       	subi	r16, 0xFC	; 252
     6f2:	1f 4f       	sbci	r17, 0xFF	; 255
		SetVelocity(i, V[i]*65536);
     6f4:	f5 01       	movw	r30, r10
     6f6:	60 81       	ld	r22, Z
     6f8:	71 81       	ldd	r23, Z+1	; 0x01
     6fa:	82 81       	ldd	r24, Z+2	; 0x02
     6fc:	93 81       	ldd	r25, Z+3	; 0x03
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	40 e8       	ldi	r20, 0x80	; 128
     704:	57 e4       	ldi	r21, 0x47	; 71
     706:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
     70a:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__fixsfsi>
     70e:	ab 01       	movw	r20, r22
     710:	bc 01       	movw	r22, r24
     712:	8e 2d       	mov	r24, r14
     714:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <SetVelocity>
		
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
	
    for(i=0;i<3;++i){
     718:	e3 94       	inc	r14
     71a:	fe 2d       	mov	r31, r14
     71c:	f3 30       	cpi	r31, 0x03	; 3
     71e:	09 f0       	breq	.+2      	; 0x722 <HolonomicW+0x28a>
     720:	ba cf       	rjmp	.-140    	; 0x696 <HolonomicW+0x1fe>
		if(V[i]>=40)V[i]=40;
		if(V[i]<=(-40))V[i]=-40;
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
     722:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <StartMotion>
}
     726:	60 96       	adiw	r28, 0x10	; 16
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
     732:	cf 91       	pop	r28
     734:	df 91       	pop	r29
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	df 90       	pop	r13
     740:	cf 90       	pop	r12
     742:	bf 90       	pop	r11
     744:	af 90       	pop	r10
     746:	9f 90       	pop	r9
     748:	8f 90       	pop	r8
     74a:	7f 90       	pop	r7
     74c:	6f 90       	pop	r6
     74e:	5f 90       	pop	r5
     750:	4f 90       	pop	r4
     752:	3f 90       	pop	r3
     754:	2f 90       	pop	r2
     756:	08 95       	ret

00000758 <Holonomic_distance>:
		if(flg0 && flg1)
			break;
	}
}

void Holonomic_distance(int f_agl,int f_speed,unsigned int distance,unsigned stop){
     758:	2f 92       	push	r2
     75a:	3f 92       	push	r3
     75c:	4f 92       	push	r4
     75e:	5f 92       	push	r5
     760:	6f 92       	push	r6
     762:	7f 92       	push	r7
     764:	8f 92       	push	r8
     766:	9f 92       	push	r9
     768:	af 92       	push	r10
     76a:	bf 92       	push	r11
     76c:	cf 92       	push	r12
     76e:	df 92       	push	r13
     770:	ef 92       	push	r14
     772:	ff 92       	push	r15
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	df 93       	push	r29
     77a:	cf 93       	push	r28
     77c:	00 d0       	rcall	.+0      	; 0x77e <Holonomic_distance+0x26>
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	9a 83       	std	Y+2, r25	; 0x02
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	1a 01       	movw	r2, r20
     788:	79 01       	movw	r14, r18
//1.각도	2.속도	3.거리	4.감속지점	
	next_speed=f_speed;
     78a:	88 27       	eor	r24, r24
     78c:	77 fd       	sbrc	r23, 7
     78e:	80 95       	com	r24
     790:	98 2f       	mov	r25, r24
     792:	0e 94 a4 14 	call	0x2948	; 0x2948 <__floatsisf>
     796:	60 93 c8 02 	sts	0x02C8, r22
     79a:	70 93 c9 02 	sts	0x02C9, r23
     79e:	80 93 ca 02 	sts	0x02CA, r24
     7a2:	90 93 cb 02 	sts	0x02CB, r25
	acc=5;
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	a0 ea       	ldi	r26, 0xA0	; 160
     7ac:	b0 e4       	ldi	r27, 0x40	; 64
     7ae:	80 93 09 01 	sts	0x0109, r24
     7b2:	90 93 0a 01 	sts	0x010A, r25
     7b6:	a0 93 0b 01 	sts	0x010B, r26
     7ba:	b0 93 0c 01 	sts	0x010C, r27
	TCNT1H=0xFF; TCNT1L=0x70;	//0.01초
     7be:	8f ef       	ldi	r24, 0xFF	; 255
     7c0:	8d bd       	out	0x2d, r24	; 45
     7c2:	80 e7       	ldi	r24, 0x70	; 112
     7c4:	8c bd       	out	0x2c, r24	; 44
	sec=0;
     7c6:	10 92 c3 02 	sts	0x02C3, r1
     7ca:	10 92 c2 02 	sts	0x02C2, r1
	disMD=0;	//거리 초기화
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	dc 01       	movw	r26, r24
     7d4:	80 93 e0 02 	sts	0x02E0, r24
     7d8:	90 93 e1 02 	sts	0x02E1, r25
     7dc:	a0 93 e2 02 	sts	0x02E2, r26
     7e0:	b0 93 e3 02 	sts	0x02E3, r27
	
	while(1){
	
		HolonomicW(f_agl,speed,0);
	
		if(disMD>=distance) break;
     7e4:	44 24       	eor	r4, r4
     7e6:	55 24       	eor	r5, r5
		else if(disMD>=stop) next_speed=50;
     7e8:	57 01       	movw	r10, r14
     7ea:	cc 24       	eor	r12, r12
     7ec:	dd 24       	eor	r13, r13
     7ee:	0f 2e       	mov	r0, r31
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	6f 2e       	mov	r6, r31
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	7f 2e       	mov	r7, r31
     7f8:	f8 e4       	ldi	r31, 0x48	; 72
     7fa:	8f 2e       	mov	r8, r31
     7fc:	f2 e4       	ldi	r31, 0x42	; 66
     7fe:	9f 2e       	mov	r9, r31
     800:	f0 2d       	mov	r31, r0
	sec=0;
	disMD=0;	//거리 초기화
	
	while(1){
	
		HolonomicW(f_agl,speed,0);
     802:	60 91 c4 02 	lds	r22, 0x02C4
     806:	70 91 c5 02 	lds	r23, 0x02C5
     80a:	80 91 c6 02 	lds	r24, 0x02C6
     80e:	90 91 c7 02 	lds	r25, 0x02C7
     812:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__fixsfsi>
     816:	9b 01       	movw	r18, r22
     818:	ac 01       	movw	r20, r24
     81a:	89 81       	ldd	r24, Y+1	; 0x01
     81c:	9a 81       	ldd	r25, Y+2	; 0x02
     81e:	b9 01       	movw	r22, r18
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	0e 94 4c 02 	call	0x498	; 0x498 <HolonomicW>
	
		if(disMD>=distance) break;
     828:	e0 90 e0 02 	lds	r14, 0x02E0
     82c:	f0 90 e1 02 	lds	r15, 0x02E1
     830:	00 91 e2 02 	lds	r16, 0x02E2
     834:	10 91 e3 02 	lds	r17, 0x02E3
     838:	c2 01       	movw	r24, r4
     83a:	b1 01       	movw	r22, r2
     83c:	0e 94 56 15 	call	0x2aac	; 0x2aac <__floatunsisf>
     840:	9b 01       	movw	r18, r22
     842:	ac 01       	movw	r20, r24
     844:	c8 01       	movw	r24, r16
     846:	b7 01       	movw	r22, r14
     848:	0e 94 14 14 	call	0x2828	; 0x2828 <__gesf2>
     84c:	87 ff       	sbrs	r24, 7
     84e:	1d c0       	rjmp	.+58     	; 0x88a <Holonomic_distance+0x132>
		else if(disMD>=stop) next_speed=50;
     850:	e0 90 e0 02 	lds	r14, 0x02E0
     854:	f0 90 e1 02 	lds	r15, 0x02E1
     858:	00 91 e2 02 	lds	r16, 0x02E2
     85c:	10 91 e3 02 	lds	r17, 0x02E3
     860:	c6 01       	movw	r24, r12
     862:	b5 01       	movw	r22, r10
     864:	0e 94 56 15 	call	0x2aac	; 0x2aac <__floatunsisf>
     868:	9b 01       	movw	r18, r22
     86a:	ac 01       	movw	r20, r24
     86c:	c8 01       	movw	r24, r16
     86e:	b7 01       	movw	r22, r14
     870:	0e 94 14 14 	call	0x2828	; 0x2828 <__gesf2>
     874:	87 fd       	sbrc	r24, 7
     876:	c5 cf       	rjmp	.-118    	; 0x802 <Holonomic_distance+0xaa>
     878:	60 92 c8 02 	sts	0x02C8, r6
     87c:	70 92 c9 02 	sts	0x02C9, r7
     880:	80 92 ca 02 	sts	0x02CA, r8
     884:	90 92 cb 02 	sts	0x02CB, r9
     888:	bc cf       	rjmp	.-136    	; 0x802 <Holonomic_distance+0xaa>
	}
}
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	cf 91       	pop	r28
     890:	df 91       	pop	r29
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	df 90       	pop	r13
     89c:	cf 90       	pop	r12
     89e:	bf 90       	pop	r11
     8a0:	af 90       	pop	r10
     8a2:	9f 90       	pop	r9
     8a4:	8f 90       	pop	r8
     8a6:	7f 90       	pop	r7
     8a8:	6f 90       	pop	r6
     8aa:	5f 90       	pop	r5
     8ac:	4f 90       	pop	r4
     8ae:	3f 90       	pop	r3
     8b0:	2f 90       	pop	r2
     8b2:	08 95       	ret

000008b4 <Turn_and_Drive>:
//5. 회전이동거리 (회전 각도)
//6. 정지 시점
//7. 회전정지시점

void Turn_and_Drive(double f_agl, int f_speed, int fw_speed, unsigned int mm,int dgree, unsigned int stop, unsigned int wstop)
{
     8b4:	2f 92       	push	r2
     8b6:	3f 92       	push	r3
     8b8:	4f 92       	push	r4
     8ba:	5f 92       	push	r5
     8bc:	6f 92       	push	r6
     8be:	7f 92       	push	r7
     8c0:	8f 92       	push	r8
     8c2:	9f 92       	push	r9
     8c4:	af 92       	push	r10
     8c6:	bf 92       	push	r11
     8c8:	cf 92       	push	r12
     8ca:	df 92       	push	r13
     8cc:	ef 92       	push	r14
     8ce:	ff 92       	push	r15
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	df 93       	push	r29
     8d6:	cf 93       	push	r28
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	a6 97       	sbiw	r28, 0x26	; 38
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	96 2e       	mov	r9, r22
     8ea:	87 2e       	mov	r8, r23
     8ec:	78 2e       	mov	r7, r24
     8ee:	69 2e       	mov	r6, r25
     8f0:	29 01       	movw	r4, r18
     8f2:	dc 86       	std	Y+12, r13	; 0x0c
     8f4:	cb 86       	std	Y+11, r12	; 0x0b
     8f6:	be 86       	std	Y+14, r11	; 0x0e
     8f8:	ad 86       	std	Y+13, r10	; 0x0d
	double distance=0, distanceW=0;
	float S_distance=0, S_distanceW=0;
	unsigned char flg0=0, flg1=0;

	TCNT1H=0xFF; TCNT1L=0x70;
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	8d bd       	out	0x2d, r24	; 45
     8fe:	80 e7       	ldi	r24, 0x70	; 112
     900:	8c bd       	out	0x2c, r24	; 44
	sec=1;
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	90 93 c3 02 	sts	0x02C3, r25
     90a:	80 93 c2 02 	sts	0x02C2, r24

	acc=5;	accW=3;
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	a0 ea       	ldi	r26, 0xA0	; 160
     914:	b0 e4       	ldi	r27, 0x40	; 64
     916:	80 93 09 01 	sts	0x0109, r24
     91a:	90 93 0a 01 	sts	0x010A, r25
     91e:	a0 93 0b 01 	sts	0x010B, r26
     922:	b0 93 0c 01 	sts	0x010C, r27
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	a0 e4       	ldi	r26, 0x40	; 64
     92c:	b0 e4       	ldi	r27, 0x40	; 64
     92e:	80 93 0d 01 	sts	0x010D, r24
     932:	90 93 0e 01 	sts	0x010E, r25
     936:	a0 93 0f 01 	sts	0x010F, r26
     93a:	b0 93 10 01 	sts	0x0110, r27
	next_speed=f_speed;
     93e:	ba 01       	movw	r22, r20
     940:	88 27       	eor	r24, r24
     942:	77 fd       	sbrc	r23, 7
     944:	80 95       	com	r24
     946:	98 2f       	mov	r25, r24
     948:	0e 94 a4 14 	call	0x2948	; 0x2948 <__floatsisf>
     94c:	60 93 c8 02 	sts	0x02C8, r22
     950:	70 93 c9 02 	sts	0x02C9, r23
     954:	80 93 ca 02 	sts	0x02CA, r24
     958:	90 93 cb 02 	sts	0x02CB, r25
	next_wspeed=fw_speed;
     95c:	b2 01       	movw	r22, r4
     95e:	88 27       	eor	r24, r24
     960:	77 fd       	sbrc	r23, 7
     962:	80 95       	com	r24
     964:	98 2f       	mov	r25, r24
     966:	0e 94 a4 14 	call	0x2948	; 0x2948 <__floatsisf>
     96a:	60 93 d0 02 	sts	0x02D0, r22
     96e:	70 93 d1 02 	sts	0x02D1, r23
     972:	80 93 d2 02 	sts	0x02D2, r24
     976:	90 93 d3 02 	sts	0x02D3, r25

void Turn_and_Drive(double f_agl, int f_speed, int fw_speed, unsigned int mm,int dgree, unsigned int stop, unsigned int wstop)
{
	double distance=0, distanceW=0;
	float S_distance=0, S_distanceW=0;
	unsigned char flg0=0, flg1=0;
     97a:	1a 86       	std	Y+10, r1	; 0x0a
     97c:	19 86       	std	Y+9, r1	; 0x09
//6. 정지 시점
//7. 회전정지시점

void Turn_and_Drive(double f_agl, int f_speed, int fw_speed, unsigned int mm,int dgree, unsigned int stop, unsigned int wstop)
{
	double distance=0, distanceW=0;
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	dc 01       	movw	r26, r24
     984:	8d 83       	std	Y+5, r24	; 0x05
     986:	9e 83       	std	Y+6, r25	; 0x06
     988:	af 83       	std	Y+7, r26	; 0x07
     98a:	b8 87       	std	Y+8, r27	; 0x08
     98c:	89 83       	std	Y+1, r24	; 0x01
     98e:	9a 83       	std	Y+2, r25	; 0x02
     990:	ab 83       	std	Y+3, r26	; 0x03
     992:	bc 83       	std	Y+4, r27	; 0x04

			HolonomicW((int)(f_agl),speed,wspeed);

			distance+=S_distance;
			distanceW+=S_distanceW;
			if(distance>=stop && stop!=0)next_speed=100;
     994:	ab 85       	ldd	r26, Y+11	; 0x0b
     996:	bc 85       	ldd	r27, Y+12	; 0x0c
     998:	cd 01       	movw	r24, r26
     99a:	a0 e0       	ldi	r26, 0x00	; 0
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	8f 8b       	std	Y+23, r24	; 0x17
     9a0:	98 8f       	std	Y+24, r25	; 0x18
     9a2:	a9 8f       	std	Y+25, r26	; 0x19
     9a4:	ba 8f       	std	Y+26, r27	; 0x1a
			if(fabs(distanceW)>=wstop && wstop!=0){
     9a6:	ad 85       	ldd	r26, Y+13	; 0x0d
     9a8:	be 85       	ldd	r27, Y+14	; 0x0e
     9aa:	cd 01       	movw	r24, r26
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	8b 8f       	std	Y+27, r24	; 0x1b
     9b2:	9c 8f       	std	Y+28, r25	; 0x1c
     9b4:	ad 8f       	std	Y+29, r26	; 0x1d
     9b6:	be 8f       	std	Y+30, r27	; 0x1e
				next_wspeed=20;
				if(wspeed<=0)next_wspeed=-20;
			}

			if(distance>=mm || (distance*-1)>=mm){
     9b8:	c8 01       	movw	r24, r16
     9ba:	a0 e0       	ldi	r26, 0x00	; 0
     9bc:	b0 e0       	ldi	r27, 0x00	; 0
     9be:	8f 8f       	std	Y+31, r24	; 0x1f
     9c0:	98 a3       	std	Y+32, r25	; 0x20
     9c2:	a9 a3       	std	Y+33, r26	; 0x21
     9c4:	ba a3       	std	Y+34, r27	; 0x22
				flg0=1;
				next_speed=0;
				speed=0;
			}
			if(fabs(distanceW)>=dgree){
     9c6:	c7 01       	movw	r24, r14
     9c8:	aa 27       	eor	r26, r26
     9ca:	97 fd       	sbrc	r25, 7
     9cc:	a0 95       	com	r26
     9ce:	ba 2f       	mov	r27, r26
     9d0:	8b a3       	std	Y+35, r24	; 0x23
     9d2:	9c a3       	std	Y+36, r25	; 0x24
     9d4:	ad a3       	std	Y+37, r26	; 0x25
     9d6:	be a3       	std	Y+38, r27	; 0x26
	next_speed=f_speed;
	next_wspeed=fw_speed;

	while(1){

		if(sec){
     9d8:	80 91 c2 02 	lds	r24, 0x02C2
     9dc:	90 91 c3 02 	lds	r25, 0x02C3
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <Turn_and_Drive+0x132>
     9e4:	82 c1       	rjmp	.+772    	; 0xcea <Turn_and_Drive+0x436>
			sec=0;
     9e6:	10 92 c3 02 	sts	0x02C3, r1
     9ea:	10 92 c2 02 	sts	0x02C2, r1

			S_distance=speed*0.01;	//0.01 순간 이동거리
     9ee:	60 91 c4 02 	lds	r22, 0x02C4
     9f2:	70 91 c5 02 	lds	r23, 0x02C5
     9f6:	80 91 c6 02 	lds	r24, 0x02C6
     9fa:	90 91 c7 02 	lds	r25, 0x02C7
     9fe:	2a e0       	ldi	r18, 0x0A	; 10
     a00:	37 ed       	ldi	r19, 0xD7	; 215
     a02:	43 e2       	ldi	r20, 0x23	; 35
     a04:	5c e3       	ldi	r21, 0x3C	; 60
     a06:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
     a0a:	6b 8b       	std	Y+19, r22	; 0x13
     a0c:	7c 8b       	std	Y+20, r23	; 0x14
     a0e:	8d 8b       	std	Y+21, r24	; 0x15
     a10:	9e 8b       	std	Y+22, r25	; 0x16
			S_distanceW=wspeed*0.01;	//0.01 순간 이동거리 
     a12:	60 91 cc 02 	lds	r22, 0x02CC
     a16:	70 91 cd 02 	lds	r23, 0x02CD
     a1a:	80 91 ce 02 	lds	r24, 0x02CE
     a1e:	90 91 cf 02 	lds	r25, 0x02CF
     a22:	2a e0       	ldi	r18, 0x0A	; 10
     a24:	37 ed       	ldi	r19, 0xD7	; 215
     a26:	43 e2       	ldi	r20, 0x23	; 35
     a28:	5c e3       	ldi	r21, 0x3C	; 60
     a2a:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
     a2e:	56 2e       	mov	r5, r22
     a30:	47 2e       	mov	r4, r23
     a32:	38 2e       	mov	r3, r24
     a34:	29 2e       	mov	r2, r25

			f_agl=f_agl-S_distanceW;
     a36:	a4 01       	movw	r20, r8
     a38:	93 01       	movw	r18, r6
     a3a:	65 2f       	mov	r22, r21
     a3c:	78 2d       	mov	r23, r8
     a3e:	83 2f       	mov	r24, r19
     a40:	96 2d       	mov	r25, r6
     a42:	d2 01       	movw	r26, r4
     a44:	f1 01       	movw	r30, r2
     a46:	2b 2f       	mov	r18, r27
     a48:	3a 2f       	mov	r19, r26
     a4a:	4f 2f       	mov	r20, r31
     a4c:	5e 2f       	mov	r21, r30
     a4e:	0e 94 b9 12 	call	0x2572	; 0x2572 <__subsf3>
     a52:	96 2e       	mov	r9, r22
     a54:	87 2e       	mov	r8, r23
     a56:	78 2e       	mov	r7, r24
     a58:	69 2e       	mov	r6, r25

			if(f_agl<0)f_agl+=360;
     a5a:	a4 01       	movw	r20, r8
     a5c:	93 01       	movw	r18, r6
     a5e:	65 2f       	mov	r22, r21
     a60:	74 2f       	mov	r23, r20
     a62:	83 2f       	mov	r24, r19
     a64:	92 2f       	mov	r25, r18
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	a9 01       	movw	r20, r18
     a6c:	0e 94 44 14 	call	0x2888	; 0x2888 <__ltsf2>
     a70:	87 ff       	sbrs	r24, 7
     a72:	0d c0       	rjmp	.+26     	; 0xa8e <Turn_and_Drive+0x1da>
     a74:	a4 01       	movw	r20, r8
     a76:	93 01       	movw	r18, r6
     a78:	65 2f       	mov	r22, r21
     a7a:	74 2f       	mov	r23, r20
     a7c:	83 2f       	mov	r24, r19
     a7e:	92 2f       	mov	r25, r18
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	44 eb       	ldi	r20, 0xB4	; 180
     a86:	53 e4       	ldi	r21, 0x43	; 67
     a88:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
     a8c:	1a c0       	rjmp	.+52     	; 0xac2 <Turn_and_Drive+0x20e>
			else if(f_agl>=360)f_agl-=360;
     a8e:	a4 01       	movw	r20, r8
     a90:	93 01       	movw	r18, r6
     a92:	65 2f       	mov	r22, r21
     a94:	74 2f       	mov	r23, r20
     a96:	83 2f       	mov	r24, r19
     a98:	92 2f       	mov	r25, r18
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	44 eb       	ldi	r20, 0xB4	; 180
     aa0:	53 e4       	ldi	r21, 0x43	; 67
     aa2:	0e 94 14 14 	call	0x2828	; 0x2828 <__gesf2>
     aa6:	87 fd       	sbrc	r24, 7
     aa8:	10 c0       	rjmp	.+32     	; 0xaca <Turn_and_Drive+0x216>
     aaa:	a4 01       	movw	r20, r8
     aac:	93 01       	movw	r18, r6
     aae:	65 2f       	mov	r22, r21
     ab0:	74 2f       	mov	r23, r20
     ab2:	83 2f       	mov	r24, r19
     ab4:	92 2f       	mov	r25, r18
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	44 eb       	ldi	r20, 0xB4	; 180
     abc:	53 e4       	ldi	r21, 0x43	; 67
     abe:	0e 94 b9 12 	call	0x2572	; 0x2572 <__subsf3>
     ac2:	96 2e       	mov	r9, r22
     ac4:	87 2e       	mov	r8, r23
     ac6:	78 2e       	mov	r7, r24
     ac8:	69 2e       	mov	r6, r25

			HolonomicW((int)(f_agl),speed,wspeed);
     aca:	e0 90 c4 02 	lds	r14, 0x02C4
     ace:	f0 90 c5 02 	lds	r15, 0x02C5
     ad2:	00 91 c6 02 	lds	r16, 0x02C6
     ad6:	10 91 c7 02 	lds	r17, 0x02C7
     ada:	a0 90 cc 02 	lds	r10, 0x02CC
     ade:	b0 90 cd 02 	lds	r11, 0x02CD
     ae2:	c0 90 ce 02 	lds	r12, 0x02CE
     ae6:	d0 90 cf 02 	lds	r13, 0x02CF
     aea:	a4 01       	movw	r20, r8
     aec:	93 01       	movw	r18, r6
     aee:	65 2f       	mov	r22, r21
     af0:	78 2d       	mov	r23, r8
     af2:	83 2f       	mov	r24, r19
     af4:	96 2d       	mov	r25, r6
     af6:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__fixsfsi>
     afa:	6f 87       	std	Y+15, r22	; 0x0f
     afc:	78 8b       	std	Y+16, r23	; 0x10
     afe:	89 8b       	std	Y+17, r24	; 0x11
     b00:	9a 8b       	std	Y+18, r25	; 0x12
     b02:	c8 01       	movw	r24, r16
     b04:	b7 01       	movw	r22, r14
     b06:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__fixsfsi>
     b0a:	7b 01       	movw	r14, r22
     b0c:	8c 01       	movw	r16, r24
     b0e:	c6 01       	movw	r24, r12
     b10:	b5 01       	movw	r22, r10
     b12:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__fixsfsi>
     b16:	9b 01       	movw	r18, r22
     b18:	ac 01       	movw	r20, r24
     b1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b1c:	98 89       	ldd	r25, Y+16	; 0x10
     b1e:	b7 01       	movw	r22, r14
     b20:	a9 01       	movw	r20, r18
     b22:	0e 94 4c 02 	call	0x498	; 0x498 <HolonomicW>

			distance+=S_distance;
     b26:	69 81       	ldd	r22, Y+1	; 0x01
     b28:	7a 81       	ldd	r23, Y+2	; 0x02
     b2a:	8b 81       	ldd	r24, Y+3	; 0x03
     b2c:	9c 81       	ldd	r25, Y+4	; 0x04
     b2e:	bb 89       	ldd	r27, Y+19	; 0x13
     b30:	ac 89       	ldd	r26, Y+20	; 0x14
     b32:	1d 89       	ldd	r17, Y+21	; 0x15
     b34:	0e 89       	ldd	r16, Y+22	; 0x16
     b36:	2b 2f       	mov	r18, r27
     b38:	3a 2f       	mov	r19, r26
     b3a:	41 2f       	mov	r20, r17
     b3c:	50 2f       	mov	r21, r16
     b3e:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
     b42:	16 2f       	mov	r17, r22
     b44:	07 2f       	mov	r16, r23
     b46:	e8 2e       	mov	r14, r24
     b48:	a9 2e       	mov	r10, r25
     b4a:	86 2f       	mov	r24, r22
     b4c:	90 2f       	mov	r25, r16
     b4e:	ae 2d       	mov	r26, r14
     b50:	ba 2d       	mov	r27, r10
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	9a 83       	std	Y+2, r25	; 0x02
     b56:	ab 83       	std	Y+3, r26	; 0x03
     b58:	bc 83       	std	Y+4, r27	; 0x04
			distanceW+=S_distanceW;
     b5a:	6d 81       	ldd	r22, Y+5	; 0x05
     b5c:	7e 81       	ldd	r23, Y+6	; 0x06
     b5e:	8f 81       	ldd	r24, Y+7	; 0x07
     b60:	98 85       	ldd	r25, Y+8	; 0x08
     b62:	d2 01       	movw	r26, r4
     b64:	f1 01       	movw	r30, r2
     b66:	2b 2f       	mov	r18, r27
     b68:	34 2d       	mov	r19, r4
     b6a:	4f 2f       	mov	r20, r31
     b6c:	52 2d       	mov	r21, r2
     b6e:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
     b72:	26 2f       	mov	r18, r22
     b74:	37 2f       	mov	r19, r23
     b76:	48 2f       	mov	r20, r24
     b78:	59 2f       	mov	r21, r25
     b7a:	2d 83       	std	Y+5, r18	; 0x05
     b7c:	3e 83       	std	Y+6, r19	; 0x06
     b7e:	4f 83       	std	Y+7, r20	; 0x07
     b80:	58 87       	std	Y+8, r21	; 0x08
			if(distance>=stop && stop!=0)next_speed=100;
     b82:	6f 89       	ldd	r22, Y+23	; 0x17
     b84:	78 8d       	ldd	r23, Y+24	; 0x18
     b86:	89 8d       	ldd	r24, Y+25	; 0x19
     b88:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b8a:	0e 94 56 15 	call	0x2aac	; 0x2aac <__floatunsisf>
     b8e:	9b 01       	movw	r18, r22
     b90:	ac 01       	movw	r20, r24
     b92:	61 2f       	mov	r22, r17
     b94:	70 2f       	mov	r23, r16
     b96:	8e 2d       	mov	r24, r14
     b98:	9a 2d       	mov	r25, r10
     b9a:	0e 94 14 14 	call	0x2828	; 0x2828 <__gesf2>
     b9e:	87 fd       	sbrc	r24, 7
     ba0:	10 c0       	rjmp	.+32     	; 0xbc2 <Turn_and_Drive+0x30e>
     ba2:	ab 85       	ldd	r26, Y+11	; 0x0b
     ba4:	bc 85       	ldd	r27, Y+12	; 0x0c
     ba6:	10 97       	sbiw	r26, 0x00	; 0
     ba8:	61 f0       	breq	.+24     	; 0xbc2 <Turn_and_Drive+0x30e>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a8 ec       	ldi	r26, 0xC8	; 200
     bb0:	b2 e4       	ldi	r27, 0x42	; 66
     bb2:	80 93 c8 02 	sts	0x02C8, r24
     bb6:	90 93 c9 02 	sts	0x02C9, r25
     bba:	a0 93 ca 02 	sts	0x02CA, r26
     bbe:	b0 93 cb 02 	sts	0x02CB, r27
			if(fabs(distanceW)>=wstop && wstop!=0){
     bc2:	ad 80       	ldd	r10, Y+5	; 0x05
     bc4:	be 80       	ldd	r11, Y+6	; 0x06
     bc6:	cf 80       	ldd	r12, Y+7	; 0x07
     bc8:	d8 84       	ldd	r13, Y+8	; 0x08
     bca:	e8 94       	clt
     bcc:	d7 f8       	bld	r13, 7
     bce:	6b 8d       	ldd	r22, Y+27	; 0x1b
     bd0:	7c 8d       	ldd	r23, Y+28	; 0x1c
     bd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bd4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bd6:	0e 94 56 15 	call	0x2aac	; 0x2aac <__floatunsisf>
     bda:	9b 01       	movw	r18, r22
     bdc:	ac 01       	movw	r20, r24
     bde:	c6 01       	movw	r24, r12
     be0:	b5 01       	movw	r22, r10
     be2:	0e 94 14 14 	call	0x2828	; 0x2828 <__gesf2>
     be6:	87 fd       	sbrc	r24, 7
     be8:	2b c0       	rjmp	.+86     	; 0xc40 <Turn_and_Drive+0x38c>
     bea:	ad 85       	ldd	r26, Y+13	; 0x0d
     bec:	be 85       	ldd	r27, Y+14	; 0x0e
     bee:	10 97       	sbiw	r26, 0x00	; 0
     bf0:	39 f1       	breq	.+78     	; 0xc40 <Turn_and_Drive+0x38c>
				next_wspeed=20;
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	a0 ea       	ldi	r26, 0xA0	; 160
     bf8:	b1 e4       	ldi	r27, 0x41	; 65
     bfa:	80 93 d0 02 	sts	0x02D0, r24
     bfe:	90 93 d1 02 	sts	0x02D1, r25
     c02:	a0 93 d2 02 	sts	0x02D2, r26
     c06:	b0 93 d3 02 	sts	0x02D3, r27
				if(wspeed<=0)next_wspeed=-20;
     c0a:	60 91 cc 02 	lds	r22, 0x02CC
     c0e:	70 91 cd 02 	lds	r23, 0x02CD
     c12:	80 91 ce 02 	lds	r24, 0x02CE
     c16:	90 91 cf 02 	lds	r25, 0x02CF
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	a9 01       	movw	r20, r18
     c20:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__lesf2>
     c24:	18 16       	cp	r1, r24
     c26:	64 f0       	brlt	.+24     	; 0xc40 <Turn_and_Drive+0x38c>
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 ea       	ldi	r26, 0xA0	; 160
     c2e:	b1 ec       	ldi	r27, 0xC1	; 193
     c30:	80 93 d0 02 	sts	0x02D0, r24
     c34:	90 93 d1 02 	sts	0x02D1, r25
     c38:	a0 93 d2 02 	sts	0x02D2, r26
     c3c:	b0 93 d3 02 	sts	0x02D3, r27
			}

			if(distance>=mm || (distance*-1)>=mm){
     c40:	6f 8d       	ldd	r22, Y+31	; 0x1f
     c42:	78 a1       	ldd	r23, Y+32	; 0x20
     c44:	89 a1       	ldd	r24, Y+33	; 0x21
     c46:	9a a1       	ldd	r25, Y+34	; 0x22
     c48:	0e 94 56 15 	call	0x2aac	; 0x2aac <__floatunsisf>
     c4c:	7b 01       	movw	r14, r22
     c4e:	8c 01       	movw	r16, r24
     c50:	69 81       	ldd	r22, Y+1	; 0x01
     c52:	7a 81       	ldd	r23, Y+2	; 0x02
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	9c 81       	ldd	r25, Y+4	; 0x04
     c58:	a8 01       	movw	r20, r16
     c5a:	97 01       	movw	r18, r14
     c5c:	0e 94 14 14 	call	0x2828	; 0x2828 <__gesf2>
     c60:	87 ff       	sbrs	r24, 7
     c62:	0b c0       	rjmp	.+22     	; 0xc7a <Turn_and_Drive+0x3c6>
     c64:	69 81       	ldd	r22, Y+1	; 0x01
     c66:	7a 81       	ldd	r23, Y+2	; 0x02
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	9c 81       	ldd	r25, Y+4	; 0x04
     c6c:	90 58       	subi	r25, 0x80	; 128
     c6e:	a8 01       	movw	r20, r16
     c70:	97 01       	movw	r18, r14
     c72:	0e 94 14 14 	call	0x2828	; 0x2828 <__gesf2>
     c76:	87 fd       	sbrc	r24, 7
     c78:	15 c0       	rjmp	.+42     	; 0xca4 <Turn_and_Drive+0x3f0>
				flg0=1;
				next_speed=0;
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	dc 01       	movw	r26, r24
     c80:	80 93 c8 02 	sts	0x02C8, r24
     c84:	90 93 c9 02 	sts	0x02C9, r25
     c88:	a0 93 ca 02 	sts	0x02CA, r26
     c8c:	b0 93 cb 02 	sts	0x02CB, r27
				speed=0;
     c90:	80 93 c4 02 	sts	0x02C4, r24
     c94:	90 93 c5 02 	sts	0x02C5, r25
     c98:	a0 93 c6 02 	sts	0x02C6, r26
     c9c:	b0 93 c7 02 	sts	0x02C7, r27
				next_wspeed=20;
				if(wspeed<=0)next_wspeed=-20;
			}

			if(distance>=mm || (distance*-1)>=mm){
				flg0=1;
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	99 87       	std	Y+9, r25	; 0x09
				next_speed=0;
				speed=0;
			}
			if(fabs(distanceW)>=dgree){
     ca4:	6b a1       	ldd	r22, Y+35	; 0x23
     ca6:	7c a1       	ldd	r23, Y+36	; 0x24
     ca8:	8d a1       	ldd	r24, Y+37	; 0x25
     caa:	9e a1       	ldd	r25, Y+38	; 0x26
     cac:	0e 94 a4 14 	call	0x2948	; 0x2948 <__floatsisf>
     cb0:	9b 01       	movw	r18, r22
     cb2:	ac 01       	movw	r20, r24
     cb4:	c6 01       	movw	r24, r12
     cb6:	b5 01       	movw	r22, r10
     cb8:	0e 94 14 14 	call	0x2828	; 0x2828 <__gesf2>
     cbc:	87 fd       	sbrc	r24, 7
     cbe:	15 c0       	rjmp	.+42     	; 0xcea <Turn_and_Drive+0x436>
				flg1=1;
				next_wspeed=0;
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	dc 01       	movw	r26, r24
     cc6:	80 93 d0 02 	sts	0x02D0, r24
     cca:	90 93 d1 02 	sts	0x02D1, r25
     cce:	a0 93 d2 02 	sts	0x02D2, r26
     cd2:	b0 93 d3 02 	sts	0x02D3, r27
				wspeed=0;
     cd6:	80 93 cc 02 	sts	0x02CC, r24
     cda:	90 93 cd 02 	sts	0x02CD, r25
     cde:	a0 93 ce 02 	sts	0x02CE, r26
     ce2:	b0 93 cf 02 	sts	0x02CF, r27
				flg0=1;
				next_speed=0;
				speed=0;
			}
			if(fabs(distanceW)>=dgree){
				flg1=1;
     ce6:	a1 e0       	ldi	r26, 0x01	; 1
     ce8:	aa 87       	std	Y+10, r26	; 0x0a
				next_wspeed=0;
				wspeed=0;
			}
		}
		if(flg0 && flg1)
     cea:	b9 85       	ldd	r27, Y+9	; 0x09
     cec:	bb 23       	and	r27, r27
     cee:	09 f4       	brne	.+2      	; 0xcf2 <Turn_and_Drive+0x43e>
     cf0:	73 ce       	rjmp	.-794    	; 0x9d8 <Turn_and_Drive+0x124>
     cf2:	ea 85       	ldd	r30, Y+10	; 0x0a
     cf4:	ee 23       	and	r30, r30
     cf6:	09 f4       	brne	.+2      	; 0xcfa <Turn_and_Drive+0x446>
     cf8:	6f ce       	rjmp	.-802    	; 0x9d8 <Turn_and_Drive+0x124>
			break;
	}
}
     cfa:	a6 96       	adiw	r28, 0x26	; 38
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	de bf       	out	0x3e, r29	; 62
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	cd bf       	out	0x3d, r28	; 61
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	ff 90       	pop	r15
     d10:	ef 90       	pop	r14
     d12:	df 90       	pop	r13
     d14:	cf 90       	pop	r12
     d16:	bf 90       	pop	r11
     d18:	af 90       	pop	r10
     d1a:	9f 90       	pop	r9
     d1c:	8f 90       	pop	r8
     d1e:	7f 90       	pop	r7
     d20:	6f 90       	pop	r6
     d22:	5f 90       	pop	r5
     d24:	4f 90       	pop	r4
     d26:	3f 90       	pop	r3
     d28:	2f 90       	pop	r2
     d2a:	08 95       	ret

00000d2c <non_Holonomic>:
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
}

void non_Holonomic(long Fx, long Fy, long Fw){
     d2c:	2f 92       	push	r2
     d2e:	3f 92       	push	r3
     d30:	4f 92       	push	r4
     d32:	5f 92       	push	r5
     d34:	6f 92       	push	r6
     d36:	7f 92       	push	r7
     d38:	8f 92       	push	r8
     d3a:	9f 92       	push	r9
     d3c:	af 92       	push	r10
     d3e:	bf 92       	push	r11
     d40:	cf 92       	push	r12
     d42:	df 92       	push	r13
     d44:	ef 92       	push	r14
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	2d 97       	sbiw	r28, 0x0d	; 13
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	3b 01       	movw	r6, r22
     d62:	4c 01       	movw	r8, r24
     d64:	59 01       	movw	r10, r18
     d66:	6a 01       	movw	r12, r20

	unsigned char i=0;
	double V[3]={0,0,0};
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	dc 01       	movw	r26, r24
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	9a 83       	std	Y+2, r25	; 0x02
     d72:	ab 83       	std	Y+3, r26	; 0x03
     d74:	bc 83       	std	Y+4, r27	; 0x04
     d76:	8d 83       	std	Y+5, r24	; 0x05
     d78:	9e 83       	std	Y+6, r25	; 0x06
     d7a:	af 83       	std	Y+7, r26	; 0x07
     d7c:	b8 87       	std	Y+8, r27	; 0x08
     d7e:	89 87       	std	Y+9, r24	; 0x09
     d80:	9a 87       	std	Y+10, r25	; 0x0a
     d82:	ab 87       	std	Y+11, r26	; 0x0b
     d84:	bc 87       	std	Y+12, r27	; 0x0c

	if(Fx==0 && Fy==0 && Fw==0)StopMotion(STOP_ABRUPTLY);
     d86:	61 14       	cp	r6, r1
     d88:	71 04       	cpc	r7, r1
     d8a:	81 04       	cpc	r8, r1
     d8c:	91 04       	cpc	r9, r1
     d8e:	71 f4       	brne	.+28     	; 0xdac <non_Holonomic+0x80>
     d90:	21 15       	cp	r18, r1
     d92:	31 05       	cpc	r19, r1
     d94:	41 05       	cpc	r20, r1
     d96:	51 05       	cpc	r21, r1
     d98:	49 f4       	brne	.+18     	; 0xdac <non_Holonomic+0x80>
     d9a:	e1 14       	cp	r14, r1
     d9c:	f1 04       	cpc	r15, r1
     d9e:	01 05       	cpc	r16, r1
     da0:	11 05       	cpc	r17, r1
     da2:	21 f4       	brne	.+8      	; 0xdac <non_Holonomic+0x80>
     da4:	89 e0       	ldi	r24, 0x09	; 9
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <StopMotion>

	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
     dac:	c4 01       	movw	r24, r8
     dae:	b3 01       	movw	r22, r6
     db0:	0e 94 a4 14 	call	0x2948	; 0x2948 <__floatsisf>
     db4:	1b 01       	movw	r2, r22
     db6:	2c 01       	movw	r4, r24
     db8:	c6 01       	movw	r24, r12
     dba:	b5 01       	movw	r22, r10
     dbc:	0e 94 a4 14 	call	0x2948	; 0x2948 <__floatsisf>
     dc0:	3b 01       	movw	r6, r22
     dc2:	4c 01       	movw	r8, r24
     dc4:	22 e0       	ldi	r18, 0x02	; 2
     dc6:	3b e2       	ldi	r19, 0x2B	; 43
     dc8:	47 e0       	ldi	r20, 0x07	; 7
     dca:	5d e3       	ldi	r21, 0x3D	; 61
     dcc:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
     dd0:	d6 2e       	mov	r13, r22
     dd2:	c7 2e       	mov	r12, r23
     dd4:	b8 2e       	mov	r11, r24
     dd6:	9d 87       	std	Y+13, r25	; 0x0d
     dd8:	c8 01       	movw	r24, r16
     dda:	b7 01       	movw	r22, r14
     ddc:	0e 94 a4 14 	call	0x2948	; 0x2948 <__floatsisf>
     de0:	29 e2       	ldi	r18, 0x29	; 41
     de2:	3c e5       	ldi	r19, 0x5C	; 92
     de4:	4f e0       	ldi	r20, 0x0F	; 15
     de6:	5e e3       	ldi	r21, 0x3E	; 62
     de8:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
     dec:	a6 2e       	mov	r10, r22
     dee:	e7 2e       	mov	r14, r23
     df0:	8c 01       	movw	r16, r24
     df2:	c2 01       	movw	r24, r4
     df4:	b1 01       	movw	r22, r2
     df6:	22 e4       	ldi	r18, 0x42	; 66
     df8:	30 e6       	ldi	r19, 0x60	; 96
     dfa:	45 e6       	ldi	r20, 0x65	; 101
     dfc:	5d e3       	ldi	r21, 0x3D	; 61
     dfe:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
     e02:	d6 01       	movw	r26, r12
     e04:	ed 85       	ldd	r30, Y+13	; 0x0d
     e06:	2b 2f       	mov	r18, r27
     e08:	3a 2f       	mov	r19, r26
     e0a:	4b 2d       	mov	r20, r11
     e0c:	5e 2f       	mov	r21, r30
     e0e:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
     e12:	2a 2d       	mov	r18, r10
     e14:	3e 2d       	mov	r19, r14
     e16:	40 2f       	mov	r20, r16
     e18:	51 2f       	mov	r21, r17
     e1a:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
     e1e:	69 83       	std	Y+1, r22	; 0x01
     e20:	7a 83       	std	Y+2, r23	; 0x02
     e22:	8b 83       	std	Y+3, r24	; 0x03
     e24:	9c 83       	std	Y+4, r25	; 0x04
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
     e26:	c4 01       	movw	r24, r8
     e28:	b3 01       	movw	r22, r6
     e2a:	28 eb       	ldi	r18, 0xB8	; 184
     e2c:	3e e1       	ldi	r19, 0x1E	; 30
     e2e:	45 e8       	ldi	r20, 0x85	; 133
     e30:	5d eb       	ldi	r21, 0xBD	; 189
     e32:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
     e36:	2a 2d       	mov	r18, r10
     e38:	3e 2d       	mov	r19, r14
     e3a:	40 2f       	mov	r20, r16
     e3c:	51 2f       	mov	r21, r17
     e3e:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
     e42:	6d 83       	std	Y+5, r22	; 0x05
     e44:	7e 83       	std	Y+6, r23	; 0x06
     e46:	8f 83       	std	Y+7, r24	; 0x07
     e48:	98 87       	std	Y+8, r25	; 0x08
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
     e4a:	c2 01       	movw	r24, r4
     e4c:	b1 01       	movw	r22, r2
     e4e:	22 e4       	ldi	r18, 0x42	; 66
     e50:	30 e6       	ldi	r19, 0x60	; 96
     e52:	45 e6       	ldi	r20, 0x65	; 101
     e54:	5d eb       	ldi	r21, 0xBD	; 189
     e56:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
     e5a:	d6 01       	movw	r26, r12
     e5c:	ed 85       	ldd	r30, Y+13	; 0x0d
     e5e:	2b 2f       	mov	r18, r27
     e60:	3a 2f       	mov	r19, r26
     e62:	4b 2d       	mov	r20, r11
     e64:	5e 2f       	mov	r21, r30
     e66:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
     e6a:	2a 2d       	mov	r18, r10
     e6c:	3e 2d       	mov	r19, r14
     e6e:	40 2f       	mov	r20, r16
     e70:	51 2f       	mov	r21, r17
     e72:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
     e76:	69 87       	std	Y+9, r22	; 0x09
     e78:	7a 87       	std	Y+10, r23	; 0x0a
     e7a:	8b 87       	std	Y+11, r24	; 0x0b
     e7c:	9c 87       	std	Y+12, r25	; 0x0c
     e7e:	8e 01       	movw	r16, r28
     e80:	0f 5f       	subi	r16, 0xFF	; 255
     e82:	1f 4f       	sbci	r17, 0xFF	; 255

	for(i=0;i<3;++i){
     e84:	ee 24       	eor	r14, r14
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
}

void non_Holonomic(long Fx, long Fy, long Fw){
     e86:	58 01       	movw	r10, r16
	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));

	for(i=0;i<3;++i){
		if(V[i]>=40)V[i]=40;
     e88:	f8 01       	movw	r30, r16
     e8a:	60 81       	ld	r22, Z
     e8c:	71 81       	ldd	r23, Z+1	; 0x01
     e8e:	82 81       	ldd	r24, Z+2	; 0x02
     e90:	93 81       	ldd	r25, Z+3	; 0x03
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	40 e2       	ldi	r20, 0x20	; 32
     e98:	52 e4       	ldi	r21, 0x42	; 66
     e9a:	0e 94 14 14 	call	0x2828	; 0x2828 <__gesf2>
     e9e:	87 fd       	sbrc	r24, 7
     ea0:	09 c0       	rjmp	.+18     	; 0xeb4 <non_Holonomic+0x188>
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	a0 e2       	ldi	r26, 0x20	; 32
     ea8:	b2 e4       	ldi	r27, 0x42	; 66
     eaa:	f8 01       	movw	r30, r16
     eac:	80 83       	st	Z, r24
     eae:	91 83       	std	Z+1, r25	; 0x01
     eb0:	a2 83       	std	Z+2, r26	; 0x02
     eb2:	b3 83       	std	Z+3, r27	; 0x03
		if(V[i]<=(-40))V[i]=-40;
     eb4:	f8 01       	movw	r30, r16
     eb6:	60 81       	ld	r22, Z
     eb8:	71 81       	ldd	r23, Z+1	; 0x01
     eba:	82 81       	ldd	r24, Z+2	; 0x02
     ebc:	93 81       	ldd	r25, Z+3	; 0x03
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e2       	ldi	r20, 0x20	; 32
     ec4:	52 ec       	ldi	r21, 0xC2	; 194
     ec6:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__lesf2>
     eca:	18 16       	cp	r1, r24
     ecc:	4c f0       	brlt	.+18     	; 0xee0 <non_Holonomic+0x1b4>
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	a0 e2       	ldi	r26, 0x20	; 32
     ed4:	b2 ec       	ldi	r27, 0xC2	; 194
     ed6:	f8 01       	movw	r30, r16
     ed8:	80 83       	st	Z, r24
     eda:	91 83       	std	Z+1, r25	; 0x01
     edc:	a2 83       	std	Z+2, r26	; 0x02
     ede:	b3 83       	std	Z+3, r27	; 0x03
     ee0:	0c 5f       	subi	r16, 0xFC	; 252
     ee2:	1f 4f       	sbci	r17, 0xFF	; 255
		SetVelocity(i, V[i]*65536);
     ee4:	f5 01       	movw	r30, r10
     ee6:	60 81       	ld	r22, Z
     ee8:	71 81       	ldd	r23, Z+1	; 0x01
     eea:	82 81       	ldd	r24, Z+2	; 0x02
     eec:	93 81       	ldd	r25, Z+3	; 0x03
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e8       	ldi	r20, 0x80	; 128
     ef4:	57 e4       	ldi	r21, 0x47	; 71
     ef6:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
     efa:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__fixsfsi>
     efe:	ab 01       	movw	r20, r22
     f00:	bc 01       	movw	r22, r24
     f02:	8e 2d       	mov	r24, r14
     f04:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <SetVelocity>

	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));

	for(i=0;i<3;++i){
     f08:	e3 94       	inc	r14
     f0a:	fe 2d       	mov	r31, r14
     f0c:	f3 30       	cpi	r31, 0x03	; 3
     f0e:	09 f0       	breq	.+2      	; 0xf12 <non_Holonomic+0x1e6>
     f10:	ba cf       	rjmp	.-140    	; 0xe86 <non_Holonomic+0x15a>
		if(V[i]>=40)V[i]=40;
		if(V[i]<=(-40))V[i]=-40;
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
     f12:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <StartMotion>
}
     f16:	2d 96       	adiw	r28, 0x0d	; 13
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
     f2e:	df 90       	pop	r13
     f30:	cf 90       	pop	r12
     f32:	bf 90       	pop	r11
     f34:	af 90       	pop	r10
     f36:	9f 90       	pop	r9
     f38:	8f 90       	pop	r8
     f3a:	7f 90       	pop	r7
     f3c:	6f 90       	pop	r6
     f3e:	5f 90       	pop	r5
     f40:	4f 90       	pop	r4
     f42:	3f 90       	pop	r3
     f44:	2f 90       	pop	r2
     f46:	08 95       	ret

00000f48 <MoveLine>:
	if(Camera_Cmd(1,102) != 0) return 1;
	else return 0;
}

int MoveLine(int speed)
{
     f48:	af 92       	push	r10
     f4a:	bf 92       	push	r11
     f4c:	cf 92       	push	r12
     f4e:	df 92       	push	r13
     f50:	ef 92       	push	r14
     f52:	ff 92       	push	r15
     f54:	0f 93       	push	r16
     f56:	1f 93       	push	r17
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	a8 97       	sbiw	r28, 0x28	; 40
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	cd bf       	out	0x3d, r28	; 61
     f6c:	8c 01       	movw	r16, r24
	sec = 0;
     f6e:	10 92 c3 02 	sts	0x02C3, r1
     f72:	10 92 c2 02 	sts	0x02C2, r1
	char str[40];
	sprintf(str,"MoveLine");
     f76:	5e 01       	movw	r10, r28
     f78:	08 94       	sec
     f7a:	a1 1c       	adc	r10, r1
     f7c:	b1 1c       	adc	r11, r1
     f7e:	c5 01       	movw	r24, r10
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	71 e0       	ldi	r23, 0x01	; 1
     f84:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <strcpy>
	lcd_display_str(0,0,str);
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	a5 01       	movw	r20, r10
     f8e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_display_str>
		}
		if(psd_value[0] > 100){
			display_char(1,0,100);
			return 3;
		}
		if(READ_SENSOR() == 8) non_Holonomic(speed,0,15);
     f92:	58 01       	movw	r10, r16
     f94:	cc 24       	eor	r12, r12
     f96:	b7 fc       	sbrc	r11, 7
     f98:	c0 94       	com	r12
     f9a:	dc 2c       	mov	r13, r12
	char str[40];
	sprintf(str,"MoveLine");
	lcd_display_str(0,0,str);
	while(1)
	{
		if(READ_SENSOR() == 28 ) {
     f9c:	80 91 63 00 	lds	r24, 0x0063
     fa0:	21 b1       	in	r18, 0x01	; 1
     fa2:	86 95       	lsr	r24
     fa4:	86 95       	lsr	r24
     fa6:	86 95       	lsr	r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	80 95       	com	r24
     fac:	90 95       	com	r25
     fae:	83 70       	andi	r24, 0x03	; 3
     fb0:	90 70       	andi	r25, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	20 95       	com	r18
     fb6:	30 95       	com	r19
     fb8:	2c 71       	andi	r18, 0x1C	; 28
     fba:	30 70       	andi	r19, 0x00	; 0
     fbc:	82 2b       	or	r24, r18
     fbe:	93 2b       	or	r25, r19
     fc0:	8c 31       	cpi	r24, 0x1C	; 28
     fc2:	91 05       	cpc	r25, r1
     fc4:	41 f4       	brne	.+16     	; 0xfd6 <MoveLine+0x8e>
			display_char(1,0,28);
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	60 e0       	ldi	r22, 0x00	; 0
     fca:	4c e1       	ldi	r20, 0x1C	; 28
     fcc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
			return 0;
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	8d c0       	rjmp	.+282    	; 0x10f0 <MoveLine+0x1a8>
		}
		if(READ_SENSOR() == 24 ){
     fd6:	80 91 63 00 	lds	r24, 0x0063
     fda:	21 b1       	in	r18, 0x01	; 1
     fdc:	86 95       	lsr	r24
     fde:	86 95       	lsr	r24
     fe0:	86 95       	lsr	r24
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	80 95       	com	r24
     fe6:	90 95       	com	r25
     fe8:	83 70       	andi	r24, 0x03	; 3
     fea:	90 70       	andi	r25, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	20 95       	com	r18
     ff0:	30 95       	com	r19
     ff2:	2c 71       	andi	r18, 0x1C	; 28
     ff4:	30 70       	andi	r19, 0x00	; 0
     ff6:	82 2b       	or	r24, r18
     ff8:	93 2b       	or	r25, r19
     ffa:	88 31       	cpi	r24, 0x18	; 24
     ffc:	91 05       	cpc	r25, r1
     ffe:	41 f4       	brne	.+16     	; 0x1010 <MoveLine+0xc8>
		 	display_char(1,0,24);
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	48 e1       	ldi	r20, 0x18	; 24
    1006:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
			return 1;
    100a:	21 e0       	ldi	r18, 0x01	; 1
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	70 c0       	rjmp	.+224    	; 0x10f0 <MoveLine+0x1a8>
		}
		if(READ_SENSOR() == 12 ){
    1010:	80 91 63 00 	lds	r24, 0x0063
    1014:	21 b1       	in	r18, 0x01	; 1
    1016:	86 95       	lsr	r24
    1018:	86 95       	lsr	r24
    101a:	86 95       	lsr	r24
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	80 95       	com	r24
    1020:	90 95       	com	r25
    1022:	83 70       	andi	r24, 0x03	; 3
    1024:	90 70       	andi	r25, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	20 95       	com	r18
    102a:	30 95       	com	r19
    102c:	2c 71       	andi	r18, 0x1C	; 28
    102e:	30 70       	andi	r19, 0x00	; 0
    1030:	82 2b       	or	r24, r18
    1032:	93 2b       	or	r25, r19
    1034:	8c 30       	cpi	r24, 0x0C	; 12
    1036:	91 05       	cpc	r25, r1
    1038:	41 f4       	brne	.+16     	; 0x104a <MoveLine+0x102>
			display_char(1,0,28);
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	4c e1       	ldi	r20, 0x1C	; 28
    1040:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
			return 2;
    1044:	22 e0       	ldi	r18, 0x02	; 2
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	53 c0       	rjmp	.+166    	; 0x10f0 <MoveLine+0x1a8>
		}
		if(psd_value[0] > 100){
    104a:	80 91 02 03 	lds	r24, 0x0302
    104e:	85 36       	cpi	r24, 0x65	; 101
    1050:	40 f0       	brcs	.+16     	; 0x1062 <MoveLine+0x11a>
			display_char(1,0,100);
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	44 e6       	ldi	r20, 0x64	; 100
    1058:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
			return 3;
    105c:	23 e0       	ldi	r18, 0x03	; 3
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	47 c0       	rjmp	.+142    	; 0x10f0 <MoveLine+0x1a8>
		}
		if(READ_SENSOR() == 8) non_Holonomic(speed,0,15);
    1062:	80 91 63 00 	lds	r24, 0x0063
    1066:	21 b1       	in	r18, 0x01	; 1
    1068:	86 95       	lsr	r24
    106a:	86 95       	lsr	r24
    106c:	86 95       	lsr	r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	80 95       	com	r24
    1072:	90 95       	com	r25
    1074:	83 70       	andi	r24, 0x03	; 3
    1076:	90 70       	andi	r25, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	20 95       	com	r18
    107c:	30 95       	com	r19
    107e:	2c 71       	andi	r18, 0x1C	; 28
    1080:	30 70       	andi	r19, 0x00	; 0
    1082:	82 2b       	or	r24, r18
    1084:	93 2b       	or	r25, r19
    1086:	88 30       	cpi	r24, 0x08	; 8
    1088:	91 05       	cpc	r25, r1
    108a:	61 f4       	brne	.+24     	; 0x10a4 <MoveLine+0x15c>
    108c:	c6 01       	movw	r24, r12
    108e:	b5 01       	movw	r22, r10
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	a9 01       	movw	r20, r18
    1096:	ff e0       	ldi	r31, 0x0F	; 15
    1098:	ef 2e       	mov	r14, r31
    109a:	f1 2c       	mov	r15, r1
    109c:	01 2d       	mov	r16, r1
    109e:	11 2d       	mov	r17, r1
    10a0:	0e 94 96 06 	call	0xd2c	; 0xd2c <non_Holonomic>
		if(READ_SENSOR() != 8) non_Holonomic(speed,0,-15);
    10a4:	80 91 63 00 	lds	r24, 0x0063
    10a8:	21 b1       	in	r18, 0x01	; 1
    10aa:	86 95       	lsr	r24
    10ac:	86 95       	lsr	r24
    10ae:	86 95       	lsr	r24
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	80 95       	com	r24
    10b4:	90 95       	com	r25
    10b6:	83 70       	andi	r24, 0x03	; 3
    10b8:	90 70       	andi	r25, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	20 95       	com	r18
    10be:	30 95       	com	r19
    10c0:	2c 71       	andi	r18, 0x1C	; 28
    10c2:	30 70       	andi	r19, 0x00	; 0
    10c4:	82 2b       	or	r24, r18
    10c6:	93 2b       	or	r25, r19
    10c8:	88 30       	cpi	r24, 0x08	; 8
    10ca:	91 05       	cpc	r25, r1
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <MoveLine+0x188>
    10ce:	66 cf       	rjmp	.-308    	; 0xf9c <MoveLine+0x54>
    10d0:	c6 01       	movw	r24, r12
    10d2:	b5 01       	movw	r22, r10
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	a9 01       	movw	r20, r18
    10da:	e1 ef       	ldi	r30, 0xF1	; 241
    10dc:	ee 2e       	mov	r14, r30
    10de:	ef ef       	ldi	r30, 0xFF	; 255
    10e0:	fe 2e       	mov	r15, r30
    10e2:	ef ef       	ldi	r30, 0xFF	; 255
    10e4:	0e 2f       	mov	r16, r30
    10e6:	ef ef       	ldi	r30, 0xFF	; 255
    10e8:	1e 2f       	mov	r17, r30
    10ea:	0e 94 96 06 	call	0xd2c	; 0xd2c <non_Holonomic>
    10ee:	56 cf       	rjmp	.-340    	; 0xf9c <MoveLine+0x54>
	}
}
    10f0:	c9 01       	movw	r24, r18
    10f2:	a8 96       	adiw	r28, 0x28	; 40
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	ff 90       	pop	r15
    1108:	ef 90       	pop	r14
    110a:	df 90       	pop	r13
    110c:	cf 90       	pop	r12
    110e:	bf 90       	pop	r11
    1110:	af 90       	pop	r10
    1112:	08 95       	ret

00001114 <SmartMoving>:
	else if(nextdir == SOUTH) return (nowcross + 4);
	else return (nowcross - 4);
}

void SmartMoving()
{
    1114:	2f 92       	push	r2
    1116:	3f 92       	push	r3
    1118:	4f 92       	push	r4
    111a:	5f 92       	push	r5
    111c:	6f 92       	push	r6
    111e:	7f 92       	push	r7
    1120:	8f 92       	push	r8
    1122:	9f 92       	push	r9
    1124:	af 92       	push	r10
    1126:	bf 92       	push	r11
    1128:	cf 92       	push	r12
    112a:	df 92       	push	r13
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
	int nowdir = EAST;
	int nextdir = 0;
	int result = 0;
	int dir = 0;
	int Puck = 0;
	int count = 0;
    1138:	88 24       	eor	r8, r8
    113a:	99 24       	eor	r9, r9
	int nowcross = 8;
	int nowdir = EAST;
	int nextdir = 0;
	int result = 0;
	int dir = 0;
	int Puck = 0;
    113c:	66 24       	eor	r6, r6
    113e:	77 24       	eor	r7, r7
}

void SmartMoving()
{
	int nowcross = 8;
	int nowdir = EAST;
    1140:	00 e0       	ldi	r16, 0x00	; 0
    1142:	10 e0       	ldi	r17, 0x00	; 0
	else return (nowcross - 4);
}

void SmartMoving()
{
	int nowcross = 8;
    1144:	88 e0       	ldi	r24, 0x08	; 8
    1146:	48 2e       	mov	r4, r24
    1148:	51 2c       	mov	r5, r1
    114a:	01 c0       	rjmp	.+2      	; 0x114e <SmartMoving+0x3a>
	int dir = 0;
	int Puck = 0;
	int count = 0;
	while(1)
	{
		nextdir = NextMove(nowcross);
    114c:	8e 01       	movw	r16, r28
    114e:	c2 01       	movw	r24, r4
    1150:	0e 94 bf 01 	call	0x37e	; 0x37e <NextMove>
    1154:	ec 01       	movw	r28, r24
		dir = NextDir(nowdir, nextdir);
    1156:	c8 01       	movw	r24, r16
    1158:	be 01       	movw	r22, r28
    115a:	0e 94 a3 01 	call	0x346	; 0x346 <NextDir>
    115e:	1c 01       	movw	r2, r24
    1160:	b1 ef       	ldi	r27, 0xF1	; 241
    1162:	eb 2e       	mov	r14, r27
    1164:	bf ef       	ldi	r27, 0xFF	; 255
    1166:	fb 2e       	mov	r15, r27
    1168:	e8 0e       	add	r14, r24
    116a:	f9 1e       	adc	r15, r25
		if(dir < 0) 	Turn_and_Drive(0, 0, -150, 0,dir-15, 0, 0);
    116c:	97 ff       	sbrs	r25, 7
    116e:	10 c0       	rjmp	.+32     	; 0x1190 <SmartMoving+0x7c>
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	cb 01       	movw	r24, r22
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	2a e6       	ldi	r18, 0x6A	; 106
    117c:	3f ef       	ldi	r19, 0xFF	; 255
    117e:	00 e0       	ldi	r16, 0x00	; 0
    1180:	10 e0       	ldi	r17, 0x00	; 0
    1182:	cc 24       	eor	r12, r12
    1184:	dd 24       	eor	r13, r13
    1186:	aa 24       	eor	r10, r10
    1188:	bb 24       	eor	r11, r11
    118a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Turn_and_Drive>
    118e:	20 c0       	rjmp	.+64     	; 0x11d0 <SmartMoving+0xbc>
		else 	Turn_and_Drive(0, 0, 150, 0,dir-15, 0, 0);
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	cb 01       	movw	r24, r22
    1196:	40 e0       	ldi	r20, 0x00	; 0
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	26 e9       	ldi	r18, 0x96	; 150
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	00 e0       	ldi	r16, 0x00	; 0
    11a0:	10 e0       	ldi	r17, 0x00	; 0
    11a2:	cc 24       	eor	r12, r12
    11a4:	dd 24       	eor	r13, r13
    11a6:	aa 24       	eor	r10, r10
    11a8:	bb 24       	eor	r11, r11
    11aa:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Turn_and_Drive>
		
		if(dir != 0)
    11ae:	21 14       	cp	r2, r1
    11b0:	31 04       	cpc	r3, r1
    11b2:	19 f1       	breq	.+70     	; 0x11fa <SmartMoving+0xe6>
    11b4:	0d c0       	rjmp	.+26     	; 0x11d0 <SmartMoving+0xbc>
		{
			while(READ_SENSOR() != 8) non_Holonomic(0,0,100);
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	cb 01       	movw	r24, r22
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	a9 01       	movw	r20, r18
    11c2:	a4 e6       	ldi	r26, 0x64	; 100
    11c4:	ea 2e       	mov	r14, r26
    11c6:	f1 2c       	mov	r15, r1
    11c8:	01 2d       	mov	r16, r1
    11ca:	11 2d       	mov	r17, r1
    11cc:	0e 94 96 06 	call	0xd2c	; 0xd2c <non_Holonomic>
    11d0:	80 91 63 00 	lds	r24, 0x0063
    11d4:	21 b1       	in	r18, 0x01	; 1
    11d6:	86 95       	lsr	r24
    11d8:	86 95       	lsr	r24
    11da:	86 95       	lsr	r24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	80 95       	com	r24
    11e0:	90 95       	com	r25
    11e2:	83 70       	andi	r24, 0x03	; 3
    11e4:	90 70       	andi	r25, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	20 95       	com	r18
    11ea:	30 95       	com	r19
    11ec:	2c 71       	andi	r18, 0x1C	; 28
    11ee:	30 70       	andi	r19, 0x00	; 0
    11f0:	82 2b       	or	r24, r18
    11f2:	93 2b       	or	r25, r19
    11f4:	88 30       	cpi	r24, 0x08	; 8
    11f6:	91 05       	cpc	r25, r1
    11f8:	f1 f6       	brne	.-68     	; 0x11b6 <SmartMoving+0xa2>
		}
		sec = 0;
    11fa:	10 92 c3 02 	sts	0x02C3, r1
    11fe:	10 92 c2 02 	sts	0x02C2, r1
		result = MoveLine(200);
    1202:	88 ec       	ldi	r24, 0xC8	; 200
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 a4 07 	call	0xf48	; 0xf48 <MoveLine>
    120a:	1c 01       	movw	r2, r24

		nowdir = nextdir;

		if(result == 2)
    120c:	82 30       	cpi	r24, 0x02	; 2
    120e:	91 05       	cpc	r25, r1
    1210:	09 f0       	breq	.+2      	; 0x1214 <SmartMoving+0x100>
    1212:	7c c0       	rjmp	.+248    	; 0x130c <SmartMoving+0x1f8>
		{
			Turn_and_Drive(0, 0, 150, 0,160, 0, 0);
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	cb 01       	movw	r24, r22
    121a:	40 e0       	ldi	r20, 0x00	; 0
    121c:	50 e0       	ldi	r21, 0x00	; 0
    121e:	26 e9       	ldi	r18, 0x96	; 150
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	00 e0       	ldi	r16, 0x00	; 0
    1224:	10 e0       	ldi	r17, 0x00	; 0
    1226:	f0 ea       	ldi	r31, 0xA0	; 160
    1228:	ef 2e       	mov	r14, r31
    122a:	f1 2c       	mov	r15, r1
    122c:	cc 24       	eor	r12, r12
    122e:	dd 24       	eor	r13, r13
    1230:	aa 24       	eor	r10, r10
    1232:	bb 24       	eor	r11, r11
    1234:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Turn_and_Drive>
			while(READ_SENSOR() != 8) non_Holonomic(0,0,100);
    1238:	0d c0       	rjmp	.+26     	; 0x1254 <SmartMoving+0x140>
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	cb 01       	movw	r24, r22
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	a9 01       	movw	r20, r18
    1246:	e4 e6       	ldi	r30, 0x64	; 100
    1248:	ee 2e       	mov	r14, r30
    124a:	f1 2c       	mov	r15, r1
    124c:	01 2d       	mov	r16, r1
    124e:	11 2d       	mov	r17, r1
    1250:	0e 94 96 06 	call	0xd2c	; 0xd2c <non_Holonomic>
    1254:	80 91 63 00 	lds	r24, 0x0063
    1258:	21 b1       	in	r18, 0x01	; 1
    125a:	86 95       	lsr	r24
    125c:	86 95       	lsr	r24
    125e:	86 95       	lsr	r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	80 95       	com	r24
    1264:	90 95       	com	r25
    1266:	83 70       	andi	r24, 0x03	; 3
    1268:	90 70       	andi	r25, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	20 95       	com	r18
    126e:	30 95       	com	r19
    1270:	2c 71       	andi	r18, 0x1C	; 28
    1272:	30 70       	andi	r19, 0x00	; 0
    1274:	82 2b       	or	r24, r18
    1276:	93 2b       	or	r25, r19
    1278:	88 30       	cpi	r24, 0x08	; 8
    127a:	91 05       	cpc	r25, r1
    127c:	f1 f6       	brne	.-68     	; 0x123a <SmartMoving+0x126>
			MoveLine(200);
    127e:	88 ec       	ldi	r24, 0xC8	; 200
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 a4 07 	call	0xf48	; 0xf48 <MoveLine>
			Turn_and_Drive(0, 200, 0, 130,0, 0, 0);
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	cb 01       	movw	r24, r22
    128c:	48 ec       	ldi	r20, 0xC8	; 200
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	02 e8       	ldi	r16, 0x82	; 130
    1296:	10 e0       	ldi	r17, 0x00	; 0
    1298:	ee 24       	eor	r14, r14
    129a:	ff 24       	eor	r15, r15
    129c:	cc 24       	eor	r12, r12
    129e:	dd 24       	eor	r13, r13
    12a0:	aa 24       	eor	r10, r10
    12a2:	bb 24       	eor	r11, r11
    12a4:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Turn_and_Drive>
			Turn_and_Drive(0, 0, 150, 0,160, 0, 0);
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	cb 01       	movw	r24, r22
    12ae:	40 e0       	ldi	r20, 0x00	; 0
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	26 e9       	ldi	r18, 0x96	; 150
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	00 e0       	ldi	r16, 0x00	; 0
    12b8:	10 e0       	ldi	r17, 0x00	; 0
    12ba:	b0 ea       	ldi	r27, 0xA0	; 160
    12bc:	eb 2e       	mov	r14, r27
    12be:	f1 2c       	mov	r15, r1
    12c0:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Turn_and_Drive>
			while(READ_SENSOR() != 8) non_Holonomic(0,0,100);
    12c4:	0d c0       	rjmp	.+26     	; 0x12e0 <SmartMoving+0x1cc>
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	cb 01       	movw	r24, r22
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	a9 01       	movw	r20, r18
    12d2:	a4 e6       	ldi	r26, 0x64	; 100
    12d4:	ea 2e       	mov	r14, r26
    12d6:	f1 2c       	mov	r15, r1
    12d8:	01 2d       	mov	r16, r1
    12da:	11 2d       	mov	r17, r1
    12dc:	0e 94 96 06 	call	0xd2c	; 0xd2c <non_Holonomic>
    12e0:	80 91 63 00 	lds	r24, 0x0063
    12e4:	21 b1       	in	r18, 0x01	; 1
    12e6:	86 95       	lsr	r24
    12e8:	86 95       	lsr	r24
    12ea:	86 95       	lsr	r24
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	80 95       	com	r24
    12f0:	90 95       	com	r25
    12f2:	83 70       	andi	r24, 0x03	; 3
    12f4:	90 70       	andi	r25, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	20 95       	com	r18
    12fa:	30 95       	com	r19
    12fc:	2c 71       	andi	r18, 0x1C	; 28
    12fe:	30 70       	andi	r19, 0x00	; 0
    1300:	82 2b       	or	r24, r18
    1302:	93 2b       	or	r25, r19
    1304:	88 30       	cpi	r24, 0x08	; 8
    1306:	91 05       	cpc	r25, r1
    1308:	f1 f6       	brne	.-68     	; 0x12c6 <SmartMoving+0x1b2>
    130a:	c3 c1       	rjmp	.+902    	; 0x1692 <SmartMoving+0x57e>
		}
		else
		{
			Turn_and_Drive(0, 200, 0, 130,0, 0, 0);
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	cb 01       	movw	r24, r22
    1312:	48 ec       	ldi	r20, 0xC8	; 200
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	02 e8       	ldi	r16, 0x82	; 130
    131c:	10 e0       	ldi	r17, 0x00	; 0
    131e:	ee 24       	eor	r14, r14
    1320:	ff 24       	eor	r15, r15
    1322:	cc 24       	eor	r12, r12
    1324:	dd 24       	eor	r13, r13
    1326:	aa 24       	eor	r10, r10
    1328:	bb 24       	eor	r11, r11
    132a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Turn_and_Drive>
			if(nextdir == WEST || nextdir == EAST)
    132e:	c2 30       	cpi	r28, 0x02	; 2
    1330:	d1 05       	cpc	r29, r1
    1332:	19 f0       	breq	.+6      	; 0x133a <SmartMoving+0x226>
    1334:	20 97       	sbiw	r28, 0x00	; 0
    1336:	09 f0       	breq	.+2      	; 0x133a <SmartMoving+0x226>
    1338:	5b c0       	rjmp	.+182    	; 0x13f0 <SmartMoving+0x2dc>
			{
				if(sec < 500 && count == 0) //라인 이동중 퍽라인 발견
    133a:	80 91 c2 02 	lds	r24, 0x02C2
    133e:	90 91 c3 02 	lds	r25, 0x02C3
    1342:	a1 e0       	ldi	r26, 0x01	; 1
    1344:	84 3f       	cpi	r24, 0xF4	; 244
    1346:	9a 07       	cpc	r25, r26
    1348:	08 f0       	brcs	.+2      	; 0x134c <SmartMoving+0x238>
    134a:	01 c1       	rjmp	.+514    	; 0x154e <SmartMoving+0x43a>
    134c:	81 14       	cp	r8, r1
    134e:	91 04       	cpc	r9, r1
    1350:	09 f0       	breq	.+2      	; 0x1354 <SmartMoving+0x240>
    1352:	fd c0       	rjmp	.+506    	; 0x154e <SmartMoving+0x43a>
				{
					count++;
					if(result == 1) //오른쪽라인 
    1354:	b1 e0       	ldi	r27, 0x01	; 1
    1356:	2b 16       	cp	r2, r27
    1358:	31 04       	cpc	r3, r1
    135a:	b1 f5       	brne	.+108    	; 0x13c8 <SmartMoving+0x2b4>
					{
						Turn_and_Drive(0, 0, 150, 0,160, 0, 0);
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	cb 01       	movw	r24, r22
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	26 e9       	ldi	r18, 0x96	; 150
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	00 e0       	ldi	r16, 0x00	; 0
    136c:	10 e0       	ldi	r17, 0x00	; 0
    136e:	f0 ea       	ldi	r31, 0xA0	; 160
    1370:	ef 2e       	mov	r14, r31
    1372:	f1 2c       	mov	r15, r1
    1374:	cc 24       	eor	r12, r12
    1376:	dd 24       	eor	r13, r13
    1378:	aa 24       	eor	r10, r10
    137a:	bb 24       	eor	r11, r11
    137c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Turn_and_Drive>
						while(READ_SENSOR() != 8) non_Holonomic(0,0,100);
    1380:	0d c0       	rjmp	.+26     	; 0x139c <SmartMoving+0x288>
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	cb 01       	movw	r24, r22
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	a9 01       	movw	r20, r18
    138e:	e4 e6       	ldi	r30, 0x64	; 100
    1390:	ee 2e       	mov	r14, r30
    1392:	f1 2c       	mov	r15, r1
    1394:	01 2d       	mov	r16, r1
    1396:	11 2d       	mov	r17, r1
    1398:	0e 94 96 06 	call	0xd2c	; 0xd2c <non_Holonomic>
    139c:	80 91 63 00 	lds	r24, 0x0063
    13a0:	21 b1       	in	r18, 0x01	; 1
    13a2:	86 95       	lsr	r24
    13a4:	86 95       	lsr	r24
    13a6:	86 95       	lsr	r24
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	80 95       	com	r24
    13ac:	90 95       	com	r25
    13ae:	83 70       	andi	r24, 0x03	; 3
    13b0:	90 70       	andi	r25, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	20 95       	com	r18
    13b6:	30 95       	com	r19
    13b8:	2c 71       	andi	r18, 0x1C	; 28
    13ba:	30 70       	andi	r19, 0x00	; 0
    13bc:	82 2b       	or	r24, r18
    13be:	93 2b       	or	r25, r19
    13c0:	88 30       	cpi	r24, 0x08	; 8
    13c2:	91 05       	cpc	r25, r1
    13c4:	f1 f6       	brne	.-68     	; 0x1382 <SmartMoving+0x26e>
    13c6:	93 c0       	rjmp	.+294    	; 0x14ee <SmartMoving+0x3da>
						non_Holonomic(-150,0,0);
						_delay_ms(1000);
					}
					else //왼쪽라인
					{
						Turn_and_Drive(0, 0, 150, 0,-160, 0, 0);
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	cb 01       	movw	r24, r22
    13ce:	40 e0       	ldi	r20, 0x00	; 0
    13d0:	50 e0       	ldi	r21, 0x00	; 0
    13d2:	26 e9       	ldi	r18, 0x96	; 150
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	00 e0       	ldi	r16, 0x00	; 0
    13d8:	10 e0       	ldi	r17, 0x00	; 0
    13da:	b0 e6       	ldi	r27, 0x60	; 96
    13dc:	eb 2e       	mov	r14, r27
    13de:	bf ef       	ldi	r27, 0xFF	; 255
    13e0:	fb 2e       	mov	r15, r27
    13e2:	cc 24       	eor	r12, r12
    13e4:	dd 24       	eor	r13, r13
    13e6:	aa 24       	eor	r10, r10
    13e8:	bb 24       	eor	r11, r11
    13ea:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Turn_and_Drive>
    13ee:	7f c0       	rjmp	.+254    	; 0x14ee <SmartMoving+0x3da>
					}
				}
			}
			else
			{
				if(sec < 200 && count == 0) //라인 이동중 퍽라인 발견
    13f0:	80 91 c2 02 	lds	r24, 0x02C2
    13f4:	90 91 c3 02 	lds	r25, 0x02C3
    13f8:	88 3c       	cpi	r24, 0xC8	; 200
    13fa:	91 05       	cpc	r25, r1
    13fc:	08 f0       	brcs	.+2      	; 0x1400 <SmartMoving+0x2ec>
    13fe:	a7 c0       	rjmp	.+334    	; 0x154e <SmartMoving+0x43a>
    1400:	81 14       	cp	r8, r1
    1402:	91 04       	cpc	r9, r1
    1404:	09 f0       	breq	.+2      	; 0x1408 <SmartMoving+0x2f4>
    1406:	a3 c0       	rjmp	.+326    	; 0x154e <SmartMoving+0x43a>
				{
					count++;
					if(result == 1) //오른쪽라인 
    1408:	91 e0       	ldi	r25, 0x01	; 1
    140a:	29 16       	cp	r2, r25
    140c:	31 04       	cpc	r3, r1
    140e:	b1 f5       	brne	.+108    	; 0x147c <SmartMoving+0x368>
					{
						Turn_and_Drive(0, 0, 150, 0,160, 0, 0);
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	cb 01       	movw	r24, r22
    1416:	40 e0       	ldi	r20, 0x00	; 0
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	26 e9       	ldi	r18, 0x96	; 150
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	00 e0       	ldi	r16, 0x00	; 0
    1420:	10 e0       	ldi	r17, 0x00	; 0
    1422:	a0 ea       	ldi	r26, 0xA0	; 160
    1424:	ea 2e       	mov	r14, r26
    1426:	f1 2c       	mov	r15, r1
    1428:	cc 24       	eor	r12, r12
    142a:	dd 24       	eor	r13, r13
    142c:	aa 24       	eor	r10, r10
    142e:	bb 24       	eor	r11, r11
    1430:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Turn_and_Drive>
						while(READ_SENSOR() != 8) non_Holonomic(0,0,100);
    1434:	0d c0       	rjmp	.+26     	; 0x1450 <SmartMoving+0x33c>
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	cb 01       	movw	r24, r22
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	a9 01       	movw	r20, r18
    1442:	f4 e6       	ldi	r31, 0x64	; 100
    1444:	ef 2e       	mov	r14, r31
    1446:	f1 2c       	mov	r15, r1
    1448:	01 2d       	mov	r16, r1
    144a:	11 2d       	mov	r17, r1
    144c:	0e 94 96 06 	call	0xd2c	; 0xd2c <non_Holonomic>
    1450:	80 91 63 00 	lds	r24, 0x0063
    1454:	21 b1       	in	r18, 0x01	; 1
    1456:	86 95       	lsr	r24
    1458:	86 95       	lsr	r24
    145a:	86 95       	lsr	r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	80 95       	com	r24
    1460:	90 95       	com	r25
    1462:	83 70       	andi	r24, 0x03	; 3
    1464:	90 70       	andi	r25, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	20 95       	com	r18
    146a:	30 95       	com	r19
    146c:	2c 71       	andi	r18, 0x1C	; 28
    146e:	30 70       	andi	r19, 0x00	; 0
    1470:	82 2b       	or	r24, r18
    1472:	93 2b       	or	r25, r19
    1474:	88 30       	cpi	r24, 0x08	; 8
    1476:	91 05       	cpc	r25, r1
    1478:	f1 f6       	brne	.-68     	; 0x1436 <SmartMoving+0x322>
    147a:	39 c0       	rjmp	.+114    	; 0x14ee <SmartMoving+0x3da>
						non_Holonomic(-150,0,0);
						_delay_ms(1000);	
					}
					else //왼쪽라인
					{
						Turn_and_Drive(0, 0, 150, 0,-160, 0, 0);
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	cb 01       	movw	r24, r22
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	26 e9       	ldi	r18, 0x96	; 150
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	00 e0       	ldi	r16, 0x00	; 0
    148c:	10 e0       	ldi	r17, 0x00	; 0
    148e:	e0 e6       	ldi	r30, 0x60	; 96
    1490:	ee 2e       	mov	r14, r30
    1492:	ef ef       	ldi	r30, 0xFF	; 255
    1494:	fe 2e       	mov	r15, r30
    1496:	cc 24       	eor	r12, r12
    1498:	dd 24       	eor	r13, r13
    149a:	aa 24       	eor	r10, r10
    149c:	bb 24       	eor	r11, r11
    149e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Turn_and_Drive>
						while(READ_SENSOR() != 8) non_Holonomic(0,0,-100);
    14a2:	10 c0       	rjmp	.+32     	; 0x14c4 <SmartMoving+0x3b0>
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	cb 01       	movw	r24, r22
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	a9 01       	movw	r20, r18
    14b0:	bc e9       	ldi	r27, 0x9C	; 156
    14b2:	eb 2e       	mov	r14, r27
    14b4:	bf ef       	ldi	r27, 0xFF	; 255
    14b6:	fb 2e       	mov	r15, r27
    14b8:	bf ef       	ldi	r27, 0xFF	; 255
    14ba:	0b 2f       	mov	r16, r27
    14bc:	bf ef       	ldi	r27, 0xFF	; 255
    14be:	1b 2f       	mov	r17, r27
    14c0:	0e 94 96 06 	call	0xd2c	; 0xd2c <non_Holonomic>
    14c4:	80 91 63 00 	lds	r24, 0x0063
    14c8:	21 b1       	in	r18, 0x01	; 1
    14ca:	86 95       	lsr	r24
    14cc:	86 95       	lsr	r24
    14ce:	86 95       	lsr	r24
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	80 95       	com	r24
    14d4:	90 95       	com	r25
    14d6:	83 70       	andi	r24, 0x03	; 3
    14d8:	90 70       	andi	r25, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	20 95       	com	r18
    14de:	30 95       	com	r19
    14e0:	2c 71       	andi	r18, 0x1C	; 28
    14e2:	30 70       	andi	r19, 0x00	; 0
    14e4:	82 2b       	or	r24, r18
    14e6:	93 2b       	or	r25, r19
    14e8:	88 30       	cpi	r24, 0x08	; 8
    14ea:	91 05       	cpc	r25, r1
    14ec:	d9 f6       	brne	.-74     	; 0x14a4 <SmartMoving+0x390>
						non_Holonomic(150,0,0);
    14ee:	66 e9       	ldi	r22, 0x96	; 150
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	a9 01       	movw	r20, r18
    14fc:	ee 24       	eor	r14, r14
    14fe:	ff 24       	eor	r15, r15
    1500:	87 01       	movw	r16, r14
    1502:	0e 94 96 06 	call	0xd2c	; 0xd2c <non_Holonomic>
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	9f ef       	ldi	r25, 0xFF	; 255
    150a:	ac e2       	ldi	r26, 0x2C	; 44
    150c:	81 50       	subi	r24, 0x01	; 1
    150e:	90 40       	sbci	r25, 0x00	; 0
    1510:	a0 40       	sbci	r26, 0x00	; 0
    1512:	e1 f7       	brne	.-8      	; 0x150c <SmartMoving+0x3f8>
    1514:	00 c0       	rjmp	.+0      	; 0x1516 <SmartMoving+0x402>
    1516:	00 00       	nop
						_delay_ms(1000);
						non_Holonomic(-150,0,0);
    1518:	6a e6       	ldi	r22, 0x6A	; 106
    151a:	7f ef       	ldi	r23, 0xFF	; 255
    151c:	8f ef       	ldi	r24, 0xFF	; 255
    151e:	9f ef       	ldi	r25, 0xFF	; 255
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	a9 01       	movw	r20, r18
    1526:	0e 94 96 06 	call	0xd2c	; 0xd2c <non_Holonomic>
    152a:	8f ef       	ldi	r24, 0xFF	; 255
    152c:	9f ef       	ldi	r25, 0xFF	; 255
    152e:	ac e2       	ldi	r26, 0x2C	; 44
    1530:	81 50       	subi	r24, 0x01	; 1
    1532:	90 40       	sbci	r25, 0x00	; 0
    1534:	a0 40       	sbci	r26, 0x00	; 0
    1536:	e1 f7       	brne	.-8      	; 0x1530 <SmartMoving+0x41c>
    1538:	00 c0       	rjmp	.+0      	; 0x153a <SmartMoving+0x426>
    153a:	00 00       	nop
						_delay_ms(1000);
					}	
					if(Capt() == 1)
    153c:	0e 94 97 01 	call	0x32e	; 0x32e <Capt>
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	91 05       	cpc	r25, r1
    1544:	49 f4       	brne	.+18     	; 0x1558 <SmartMoving+0x444>
					{
						Puck++;
    1546:	08 94       	sec
    1548:	61 1c       	adc	r6, r1
    154a:	71 1c       	adc	r7, r1
    154c:	05 c0       	rjmp	.+10     	; 0x1558 <SmartMoving+0x444>
					}
				}
			}
			if(count == 1)
    154e:	91 e0       	ldi	r25, 0x01	; 1
    1550:	89 16       	cp	r8, r25
    1552:	91 04       	cpc	r9, r1
    1554:	09 f0       	breq	.+2      	; 0x1558 <SmartMoving+0x444>
    1556:	98 c0       	rjmp	.+304    	; 0x1688 <SmartMoving+0x574>
			{
				result = MoveLine(200);
    1558:	88 ec       	ldi	r24, 0xC8	; 200
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 a4 07 	call	0xf48	; 0xf48 <MoveLine>

				if(result == 2)
    1560:	82 30       	cpi	r24, 0x02	; 2
    1562:	91 05       	cpc	r25, r1
    1564:	09 f0       	breq	.+2      	; 0x1568 <SmartMoving+0x454>
    1566:	7c c0       	rjmp	.+248    	; 0x1660 <SmartMoving+0x54c>
				{
					Turn_and_Drive(0, 0, 150, 0,160, 0, 0);
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	cb 01       	movw	r24, r22
    156e:	40 e0       	ldi	r20, 0x00	; 0
    1570:	50 e0       	ldi	r21, 0x00	; 0
    1572:	26 e9       	ldi	r18, 0x96	; 150
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	00 e0       	ldi	r16, 0x00	; 0
    1578:	10 e0       	ldi	r17, 0x00	; 0
    157a:	a0 ea       	ldi	r26, 0xA0	; 160
    157c:	ea 2e       	mov	r14, r26
    157e:	f1 2c       	mov	r15, r1
    1580:	cc 24       	eor	r12, r12
    1582:	dd 24       	eor	r13, r13
    1584:	aa 24       	eor	r10, r10
    1586:	bb 24       	eor	r11, r11
    1588:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Turn_and_Drive>
					while(READ_SENSOR() != 8) non_Holonomic(0,0,100);
    158c:	0d c0       	rjmp	.+26     	; 0x15a8 <SmartMoving+0x494>
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	cb 01       	movw	r24, r22
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	a9 01       	movw	r20, r18
    159a:	f4 e6       	ldi	r31, 0x64	; 100
    159c:	ef 2e       	mov	r14, r31
    159e:	f1 2c       	mov	r15, r1
    15a0:	01 2d       	mov	r16, r1
    15a2:	11 2d       	mov	r17, r1
    15a4:	0e 94 96 06 	call	0xd2c	; 0xd2c <non_Holonomic>
    15a8:	80 91 63 00 	lds	r24, 0x0063
    15ac:	21 b1       	in	r18, 0x01	; 1
    15ae:	86 95       	lsr	r24
    15b0:	86 95       	lsr	r24
    15b2:	86 95       	lsr	r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	80 95       	com	r24
    15b8:	90 95       	com	r25
    15ba:	83 70       	andi	r24, 0x03	; 3
    15bc:	90 70       	andi	r25, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	20 95       	com	r18
    15c2:	30 95       	com	r19
    15c4:	2c 71       	andi	r18, 0x1C	; 28
    15c6:	30 70       	andi	r19, 0x00	; 0
    15c8:	82 2b       	or	r24, r18
    15ca:	93 2b       	or	r25, r19
    15cc:	88 30       	cpi	r24, 0x08	; 8
    15ce:	91 05       	cpc	r25, r1
    15d0:	f1 f6       	brne	.-68     	; 0x158e <SmartMoving+0x47a>
					MoveLine(200);
    15d2:	88 ec       	ldi	r24, 0xC8	; 200
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 a4 07 	call	0xf48	; 0xf48 <MoveLine>
					Turn_and_Drive(0, 200, 0, 130,0, 0, 0);
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	70 e0       	ldi	r23, 0x00	; 0
    15de:	cb 01       	movw	r24, r22
    15e0:	48 ec       	ldi	r20, 0xC8	; 200
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	02 e8       	ldi	r16, 0x82	; 130
    15ea:	10 e0       	ldi	r17, 0x00	; 0
    15ec:	ee 24       	eor	r14, r14
    15ee:	ff 24       	eor	r15, r15
    15f0:	cc 24       	eor	r12, r12
    15f2:	dd 24       	eor	r13, r13
    15f4:	aa 24       	eor	r10, r10
    15f6:	bb 24       	eor	r11, r11
    15f8:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Turn_and_Drive>
					Turn_and_Drive(0, 0, 150, 0,160, 0, 0);
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	cb 01       	movw	r24, r22
    1602:	40 e0       	ldi	r20, 0x00	; 0
    1604:	50 e0       	ldi	r21, 0x00	; 0
    1606:	26 e9       	ldi	r18, 0x96	; 150
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	00 e0       	ldi	r16, 0x00	; 0
    160c:	10 e0       	ldi	r17, 0x00	; 0
    160e:	e0 ea       	ldi	r30, 0xA0	; 160
    1610:	ee 2e       	mov	r14, r30
    1612:	f1 2c       	mov	r15, r1
    1614:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Turn_and_Drive>
					while(READ_SENSOR() != 8) non_Holonomic(0,0,100);
    1618:	0d c0       	rjmp	.+26     	; 0x1634 <SmartMoving+0x520>
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	cb 01       	movw	r24, r22
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	a9 01       	movw	r20, r18
    1626:	b4 e6       	ldi	r27, 0x64	; 100
    1628:	eb 2e       	mov	r14, r27
    162a:	f1 2c       	mov	r15, r1
    162c:	01 2d       	mov	r16, r1
    162e:	11 2d       	mov	r17, r1
    1630:	0e 94 96 06 	call	0xd2c	; 0xd2c <non_Holonomic>
    1634:	80 91 63 00 	lds	r24, 0x0063
    1638:	21 b1       	in	r18, 0x01	; 1
    163a:	86 95       	lsr	r24
    163c:	86 95       	lsr	r24
    163e:	86 95       	lsr	r24
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	80 95       	com	r24
    1644:	90 95       	com	r25
    1646:	83 70       	andi	r24, 0x03	; 3
    1648:	90 70       	andi	r25, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	20 95       	com	r18
    164e:	30 95       	com	r19
    1650:	2c 71       	andi	r18, 0x1C	; 28
    1652:	30 70       	andi	r19, 0x00	; 0
    1654:	82 2b       	or	r24, r18
    1656:	93 2b       	or	r25, r19
    1658:	88 30       	cpi	r24, 0x08	; 8
    165a:	91 05       	cpc	r25, r1
    165c:	f1 f6       	brne	.-68     	; 0x161a <SmartMoving+0x506>
    165e:	11 c0       	rjmp	.+34     	; 0x1682 <SmartMoving+0x56e>
				}
				else  Turn_and_Drive(0, 200, 0, 130,0, 0, 0);
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	cb 01       	movw	r24, r22
    1666:	48 ec       	ldi	r20, 0xC8	; 200
    1668:	50 e0       	ldi	r21, 0x00	; 0
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	02 e8       	ldi	r16, 0x82	; 130
    1670:	10 e0       	ldi	r17, 0x00	; 0
    1672:	ee 24       	eor	r14, r14
    1674:	ff 24       	eor	r15, r15
    1676:	cc 24       	eor	r12, r12
    1678:	dd 24       	eor	r13, r13
    167a:	aa 24       	eor	r10, r10
    167c:	bb 24       	eor	r11, r11
    167e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Turn_and_Drive>
    1682:	a1 e0       	ldi	r26, 0x01	; 1
    1684:	8a 2e       	mov	r8, r26
    1686:	91 2c       	mov	r9, r1
			}
			nowcross = DumpCross(nowcross, nextdir);
    1688:	c2 01       	movw	r24, r4
    168a:	be 01       	movw	r22, r28
    168c:	0e 94 35 02 	call	0x46a	; 0x46a <DumpCross>
    1690:	2c 01       	movw	r4, r24
		}
		if(Puck == 1 && nowcross == 11) break; //과제 수행 종료
    1692:	a1 e0       	ldi	r26, 0x01	; 1
    1694:	6a 16       	cp	r6, r26
    1696:	71 04       	cpc	r7, r1
    1698:	09 f0       	breq	.+2      	; 0x169c <SmartMoving+0x588>
    169a:	58 cd       	rjmp	.-1360   	; 0x114c <SmartMoving+0x38>
    169c:	bb e0       	ldi	r27, 0x0B	; 11
    169e:	4b 16       	cp	r4, r27
    16a0:	51 04       	cpc	r5, r1
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <SmartMoving+0x592>
    16a4:	53 cd       	rjmp	.-1370   	; 0x114c <SmartMoving+0x38>
	}
}
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	ff 90       	pop	r15
    16b0:	ef 90       	pop	r14
    16b2:	df 90       	pop	r13
    16b4:	cf 90       	pop	r12
    16b6:	bf 90       	pop	r11
    16b8:	af 90       	pop	r10
    16ba:	9f 90       	pop	r9
    16bc:	8f 90       	pop	r8
    16be:	7f 90       	pop	r7
    16c0:	6f 90       	pop	r6
    16c2:	5f 90       	pop	r5
    16c4:	4f 90       	pop	r4
    16c6:	3f 90       	pop	r3
    16c8:	2f 90       	pop	r2
    16ca:	08 95       	ret

000016cc <main>:


int main(void)
{    

    Interface_init(); //인터페이스 초기화
    16cc:	0e 94 ae 00 	call	0x15c	; 0x15c <Interface_init>

	LM629_HW_Reset();
    16d0:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LM629_HW_Reset>
	MCU_init();	   // MCU 초기화
    16d4:	0e 94 76 00 	call	0xec	; 0xec <MCU_init>
	Motor_init();  // Motor 드라이버 초기화
    16d8:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <Motor_init>

	Sensor_init();
    16dc:	0e 94 c3 10 	call	0x2186	; 0x2186 <Sensor_init>

	DDRB=0x0F;		//LED, BZ, SW
    16e0:	8f e0       	ldi	r24, 0x0F	; 15
    16e2:	87 bb       	out	0x17, r24	; 23
	TCCR1A=0x00;	// Clock value: 14.400 kHz
    16e4:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x05;
    16e6:	85 e0       	ldi	r24, 0x05	; 5
    16e8:	8e bd       	out	0x2e, r24	; 46

	TCNT1H=0xFF;	//0.01초
    16ea:	8f ef       	ldi	r24, 0xFF	; 255
    16ec:	8d bd       	out	0x2d, r24	; 45
	TCNT1L=0x70;
    16ee:	80 e7       	ldi	r24, 0x70	; 112
    16f0:	8c bd       	out	0x2c, r24	; 44
	TIMSK=0x04;
    16f2:	84 e0       	ldi	r24, 0x04	; 4
    16f4:	87 bf       	out	0x37, r24	; 55

	sei();
    16f6:	78 94       	sei
	while(1){
			
//		int left,right;

		if(SW1)
    16f8:	b4 99       	sbic	0x16, 4	; 22
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <main+0x34>
		{
			SmartMoving();
    16fc:	0e 94 8a 08 	call	0x1114	; 0x1114 <SmartMoving>
		}

		if(SW2)
    1700:	86 b3       	in	r24, 0x16	; 22
		{
	
		}

		if(SW3)
    1702:	b6 99       	sbic	0x16, 6	; 22
    1704:	f9 cf       	rjmp	.-14     	; 0x16f8 <main+0x2c>
		{	


			while(1){
				display_char(0,5,psd_value[0]);
    1706:	40 91 02 03 	lds	r20, 0x0302
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	65 e0       	ldi	r22, 0x05	; 5
    170e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
				display_char(1,2,psd_value[2]);								
    1712:	40 91 04 03 	lds	r20, 0x0304
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	62 e0       	ldi	r22, 0x02	; 2
    171a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
				display_char(1,8,psd_value[7]);
    171e:	40 91 09 03 	lds	r20, 0x0309
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	68 e0       	ldi	r22, 0x08	; 8
    1726:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
    172a:	ed cf       	rjmp	.-38     	; 0x1706 <main+0x3a>

0000172c <__vector_14>:
}



ISR (TIMER1_OVF_vect)
{
    172c:	1f 92       	push	r1
    172e:	0f 92       	push	r0
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	0f 92       	push	r0
    1734:	0b b6       	in	r0, 0x3b	; 59
    1736:	0f 92       	push	r0
    1738:	11 24       	eor	r1, r1
    173a:	ef 92       	push	r14
    173c:	ff 92       	push	r15
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	2f 93       	push	r18
    1744:	3f 93       	push	r19
    1746:	4f 93       	push	r20
    1748:	5f 93       	push	r21
    174a:	6f 93       	push	r22
    174c:	7f 93       	push	r23
    174e:	8f 93       	push	r24
    1750:	9f 93       	push	r25
    1752:	af 93       	push	r26
    1754:	bf 93       	push	r27
    1756:	ef 93       	push	r30
    1758:	ff 93       	push	r31
	TCNT1H=0xFF; TCNT1L=0x70; //0.01초
    175a:	8f ef       	ldi	r24, 0xFF	; 255
    175c:	8d bd       	out	0x2d, r24	; 45
    175e:	80 e7       	ldi	r24, 0x70	; 112
    1760:	8c bd       	out	0x2c, r24	; 44
	++sec;
    1762:	80 91 c2 02 	lds	r24, 0x02C2
    1766:	90 91 c3 02 	lds	r25, 0x02C3
    176a:	01 96       	adiw	r24, 0x01	; 1
    176c:	90 93 c3 02 	sts	0x02C3, r25
    1770:	80 93 c2 02 	sts	0x02C2, r24
	
	disMD+=speed*0.01;
    1774:	e0 90 e0 02 	lds	r14, 0x02E0
    1778:	f0 90 e1 02 	lds	r15, 0x02E1
    177c:	00 91 e2 02 	lds	r16, 0x02E2
    1780:	10 91 e3 02 	lds	r17, 0x02E3
    1784:	60 91 c4 02 	lds	r22, 0x02C4
    1788:	70 91 c5 02 	lds	r23, 0x02C5
    178c:	80 91 c6 02 	lds	r24, 0x02C6
    1790:	90 91 c7 02 	lds	r25, 0x02C7
    1794:	2a e0       	ldi	r18, 0x0A	; 10
    1796:	37 ed       	ldi	r19, 0xD7	; 215
    1798:	43 e2       	ldi	r20, 0x23	; 35
    179a:	5c e3       	ldi	r21, 0x3C	; 60
    179c:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
    17a0:	9b 01       	movw	r18, r22
    17a2:	ac 01       	movw	r20, r24
    17a4:	c8 01       	movw	r24, r16
    17a6:	b7 01       	movw	r22, r14
    17a8:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
    17ac:	9b 01       	movw	r18, r22
    17ae:	ac 01       	movw	r20, r24
    17b0:	20 93 e0 02 	sts	0x02E0, r18
    17b4:	30 93 e1 02 	sts	0x02E1, r19
    17b8:	40 93 e2 02 	sts	0x02E2, r20
    17bc:	50 93 e3 02 	sts	0x02E3, r21
	disW+=speedW*0.01;
    17c0:	e0 90 dc 02 	lds	r14, 0x02DC
    17c4:	f0 90 dd 02 	lds	r15, 0x02DD
    17c8:	00 91 de 02 	lds	r16, 0x02DE
    17cc:	10 91 df 02 	lds	r17, 0x02DF
    17d0:	60 91 ec 02 	lds	r22, 0x02EC
    17d4:	70 91 ed 02 	lds	r23, 0x02ED
    17d8:	80 91 ee 02 	lds	r24, 0x02EE
    17dc:	90 91 ef 02 	lds	r25, 0x02EF
    17e0:	2a e0       	ldi	r18, 0x0A	; 10
    17e2:	37 ed       	ldi	r19, 0xD7	; 215
    17e4:	43 e2       	ldi	r20, 0x23	; 35
    17e6:	5c e3       	ldi	r21, 0x3C	; 60
    17e8:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
    17ec:	9b 01       	movw	r18, r22
    17ee:	ac 01       	movw	r20, r24
    17f0:	c8 01       	movw	r24, r16
    17f2:	b7 01       	movw	r22, r14
    17f4:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
    17f8:	9b 01       	movw	r18, r22
    17fa:	ac 01       	movw	r20, r24
    17fc:	20 93 dc 02 	sts	0x02DC, r18
    1800:	30 93 dd 02 	sts	0x02DD, r19
    1804:	40 93 de 02 	sts	0x02DE, r20
    1808:	50 93 df 02 	sts	0x02DF, r21
	disX+=(speedX*0.01);
    180c:	e0 90 d4 02 	lds	r14, 0x02D4
    1810:	f0 90 d5 02 	lds	r15, 0x02D5
    1814:	00 91 d6 02 	lds	r16, 0x02D6
    1818:	10 91 d7 02 	lds	r17, 0x02D7
    181c:	60 91 e4 02 	lds	r22, 0x02E4
    1820:	70 91 e5 02 	lds	r23, 0x02E5
    1824:	80 91 e6 02 	lds	r24, 0x02E6
    1828:	90 91 e7 02 	lds	r25, 0x02E7
    182c:	2a e0       	ldi	r18, 0x0A	; 10
    182e:	37 ed       	ldi	r19, 0xD7	; 215
    1830:	43 e2       	ldi	r20, 0x23	; 35
    1832:	5c e3       	ldi	r21, 0x3C	; 60
    1834:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
    1838:	9b 01       	movw	r18, r22
    183a:	ac 01       	movw	r20, r24
    183c:	c8 01       	movw	r24, r16
    183e:	b7 01       	movw	r22, r14
    1840:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
    1844:	9b 01       	movw	r18, r22
    1846:	ac 01       	movw	r20, r24
    1848:	20 93 d4 02 	sts	0x02D4, r18
    184c:	30 93 d5 02 	sts	0x02D5, r19
    1850:	40 93 d6 02 	sts	0x02D6, r20
    1854:	50 93 d7 02 	sts	0x02D7, r21
	disY+=(speedY*0.01);
    1858:	e0 90 d8 02 	lds	r14, 0x02D8
    185c:	f0 90 d9 02 	lds	r15, 0x02D9
    1860:	00 91 da 02 	lds	r16, 0x02DA
    1864:	10 91 db 02 	lds	r17, 0x02DB
    1868:	60 91 e8 02 	lds	r22, 0x02E8
    186c:	70 91 e9 02 	lds	r23, 0x02E9
    1870:	80 91 ea 02 	lds	r24, 0x02EA
    1874:	90 91 eb 02 	lds	r25, 0x02EB
    1878:	2a e0       	ldi	r18, 0x0A	; 10
    187a:	37 ed       	ldi	r19, 0xD7	; 215
    187c:	43 e2       	ldi	r20, 0x23	; 35
    187e:	5c e3       	ldi	r21, 0x3C	; 60
    1880:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
    1884:	9b 01       	movw	r18, r22
    1886:	ac 01       	movw	r20, r24
    1888:	c8 01       	movw	r24, r16
    188a:	b7 01       	movw	r22, r14
    188c:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
    1890:	9b 01       	movw	r18, r22
    1892:	ac 01       	movw	r20, r24
    1894:	20 93 d8 02 	sts	0x02D8, r18
    1898:	30 93 d9 02 	sts	0x02D9, r19
    189c:	40 93 da 02 	sts	0x02DA, r20
    18a0:	50 93 db 02 	sts	0x02DB, r21

	if(next_speed>speed){
    18a4:	60 91 c8 02 	lds	r22, 0x02C8
    18a8:	70 91 c9 02 	lds	r23, 0x02C9
    18ac:	80 91 ca 02 	lds	r24, 0x02CA
    18b0:	90 91 cb 02 	lds	r25, 0x02CB
    18b4:	20 91 c4 02 	lds	r18, 0x02C4
    18b8:	30 91 c5 02 	lds	r19, 0x02C5
    18bc:	40 91 c6 02 	lds	r20, 0x02C6
    18c0:	50 91 c7 02 	lds	r21, 0x02C7
    18c4:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__gtsf2>
    18c8:	18 16       	cp	r1, r24
    18ca:	94 f5       	brge	.+100    	; 0x1930 <__vector_14+0x204>
		speed+=acc;
    18cc:	60 91 c4 02 	lds	r22, 0x02C4
    18d0:	70 91 c5 02 	lds	r23, 0x02C5
    18d4:	80 91 c6 02 	lds	r24, 0x02C6
    18d8:	90 91 c7 02 	lds	r25, 0x02C7
    18dc:	20 91 09 01 	lds	r18, 0x0109
    18e0:	30 91 0a 01 	lds	r19, 0x010A
    18e4:	40 91 0b 01 	lds	r20, 0x010B
    18e8:	50 91 0c 01 	lds	r21, 0x010C
    18ec:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
    18f0:	9b 01       	movw	r18, r22
    18f2:	ac 01       	movw	r20, r24
    18f4:	20 93 c4 02 	sts	0x02C4, r18
    18f8:	30 93 c5 02 	sts	0x02C5, r19
    18fc:	40 93 c6 02 	sts	0x02C6, r20
    1900:	50 93 c7 02 	sts	0x02C7, r21
		if(next_speed<=speed)speed=next_speed;
    1904:	60 91 c8 02 	lds	r22, 0x02C8
    1908:	70 91 c9 02 	lds	r23, 0x02C9
    190c:	80 91 ca 02 	lds	r24, 0x02CA
    1910:	90 91 cb 02 	lds	r25, 0x02CB
    1914:	20 91 c4 02 	lds	r18, 0x02C4
    1918:	30 91 c5 02 	lds	r19, 0x02C5
    191c:	40 91 c6 02 	lds	r20, 0x02C6
    1920:	50 91 c7 02 	lds	r21, 0x02C7
    1924:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__lesf2>
    1928:	18 16       	cp	r1, r24
    192a:	0c f4       	brge	.+2      	; 0x192e <__vector_14+0x202>
    192c:	55 c0       	rjmp	.+170    	; 0x19d8 <__vector_14+0x2ac>
    192e:	44 c0       	rjmp	.+136    	; 0x19b8 <__vector_14+0x28c>
	}
	else if(next_speed<speed){
    1930:	60 91 c8 02 	lds	r22, 0x02C8
    1934:	70 91 c9 02 	lds	r23, 0x02C9
    1938:	80 91 ca 02 	lds	r24, 0x02CA
    193c:	90 91 cb 02 	lds	r25, 0x02CB
    1940:	20 91 c4 02 	lds	r18, 0x02C4
    1944:	30 91 c5 02 	lds	r19, 0x02C5
    1948:	40 91 c6 02 	lds	r20, 0x02C6
    194c:	50 91 c7 02 	lds	r21, 0x02C7
    1950:	0e 94 44 14 	call	0x2888	; 0x2888 <__ltsf2>
    1954:	87 ff       	sbrs	r24, 7
    1956:	40 c0       	rjmp	.+128    	; 0x19d8 <__vector_14+0x2ac>
		speed-=acc;
    1958:	60 91 c4 02 	lds	r22, 0x02C4
    195c:	70 91 c5 02 	lds	r23, 0x02C5
    1960:	80 91 c6 02 	lds	r24, 0x02C6
    1964:	90 91 c7 02 	lds	r25, 0x02C7
    1968:	20 91 09 01 	lds	r18, 0x0109
    196c:	30 91 0a 01 	lds	r19, 0x010A
    1970:	40 91 0b 01 	lds	r20, 0x010B
    1974:	50 91 0c 01 	lds	r21, 0x010C
    1978:	0e 94 b9 12 	call	0x2572	; 0x2572 <__subsf3>
    197c:	9b 01       	movw	r18, r22
    197e:	ac 01       	movw	r20, r24
    1980:	20 93 c4 02 	sts	0x02C4, r18
    1984:	30 93 c5 02 	sts	0x02C5, r19
    1988:	40 93 c6 02 	sts	0x02C6, r20
    198c:	50 93 c7 02 	sts	0x02C7, r21
		if(next_speed>=speed)speed=next_speed;
    1990:	60 91 c8 02 	lds	r22, 0x02C8
    1994:	70 91 c9 02 	lds	r23, 0x02C9
    1998:	80 91 ca 02 	lds	r24, 0x02CA
    199c:	90 91 cb 02 	lds	r25, 0x02CB
    19a0:	20 91 c4 02 	lds	r18, 0x02C4
    19a4:	30 91 c5 02 	lds	r19, 0x02C5
    19a8:	40 91 c6 02 	lds	r20, 0x02C6
    19ac:	50 91 c7 02 	lds	r21, 0x02C7
    19b0:	0e 94 14 14 	call	0x2828	; 0x2828 <__gesf2>
    19b4:	87 fd       	sbrc	r24, 7
    19b6:	10 c0       	rjmp	.+32     	; 0x19d8 <__vector_14+0x2ac>
    19b8:	80 91 c8 02 	lds	r24, 0x02C8
    19bc:	90 91 c9 02 	lds	r25, 0x02C9
    19c0:	a0 91 ca 02 	lds	r26, 0x02CA
    19c4:	b0 91 cb 02 	lds	r27, 0x02CB
    19c8:	80 93 c4 02 	sts	0x02C4, r24
    19cc:	90 93 c5 02 	sts	0x02C5, r25
    19d0:	a0 93 c6 02 	sts	0x02C6, r26
    19d4:	b0 93 c7 02 	sts	0x02C7, r27
	}
	if(next_wspeed>wspeed){
    19d8:	60 91 d0 02 	lds	r22, 0x02D0
    19dc:	70 91 d1 02 	lds	r23, 0x02D1
    19e0:	80 91 d2 02 	lds	r24, 0x02D2
    19e4:	90 91 d3 02 	lds	r25, 0x02D3
    19e8:	20 91 cc 02 	lds	r18, 0x02CC
    19ec:	30 91 cd 02 	lds	r19, 0x02CD
    19f0:	40 91 ce 02 	lds	r20, 0x02CE
    19f4:	50 91 cf 02 	lds	r21, 0x02CF
    19f8:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__gtsf2>
    19fc:	18 16       	cp	r1, r24
    19fe:	94 f5       	brge	.+100    	; 0x1a64 <__vector_14+0x338>
		wspeed+=accW;
    1a00:	60 91 cc 02 	lds	r22, 0x02CC
    1a04:	70 91 cd 02 	lds	r23, 0x02CD
    1a08:	80 91 ce 02 	lds	r24, 0x02CE
    1a0c:	90 91 cf 02 	lds	r25, 0x02CF
    1a10:	20 91 0d 01 	lds	r18, 0x010D
    1a14:	30 91 0e 01 	lds	r19, 0x010E
    1a18:	40 91 0f 01 	lds	r20, 0x010F
    1a1c:	50 91 10 01 	lds	r21, 0x0110
    1a20:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
    1a24:	9b 01       	movw	r18, r22
    1a26:	ac 01       	movw	r20, r24
    1a28:	20 93 cc 02 	sts	0x02CC, r18
    1a2c:	30 93 cd 02 	sts	0x02CD, r19
    1a30:	40 93 ce 02 	sts	0x02CE, r20
    1a34:	50 93 cf 02 	sts	0x02CF, r21
		if(next_wspeed<=wspeed)wspeed=next_wspeed;
    1a38:	60 91 d0 02 	lds	r22, 0x02D0
    1a3c:	70 91 d1 02 	lds	r23, 0x02D1
    1a40:	80 91 d2 02 	lds	r24, 0x02D2
    1a44:	90 91 d3 02 	lds	r25, 0x02D3
    1a48:	20 91 cc 02 	lds	r18, 0x02CC
    1a4c:	30 91 cd 02 	lds	r19, 0x02CD
    1a50:	40 91 ce 02 	lds	r20, 0x02CE
    1a54:	50 91 cf 02 	lds	r21, 0x02CF
    1a58:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__lesf2>
    1a5c:	18 16       	cp	r1, r24
    1a5e:	0c f4       	brge	.+2      	; 0x1a62 <__vector_14+0x336>
    1a60:	55 c0       	rjmp	.+170    	; 0x1b0c <__vector_14+0x3e0>
    1a62:	44 c0       	rjmp	.+136    	; 0x1aec <__vector_14+0x3c0>
	}
	else if(next_wspeed<wspeed){
    1a64:	60 91 d0 02 	lds	r22, 0x02D0
    1a68:	70 91 d1 02 	lds	r23, 0x02D1
    1a6c:	80 91 d2 02 	lds	r24, 0x02D2
    1a70:	90 91 d3 02 	lds	r25, 0x02D3
    1a74:	20 91 cc 02 	lds	r18, 0x02CC
    1a78:	30 91 cd 02 	lds	r19, 0x02CD
    1a7c:	40 91 ce 02 	lds	r20, 0x02CE
    1a80:	50 91 cf 02 	lds	r21, 0x02CF
    1a84:	0e 94 44 14 	call	0x2888	; 0x2888 <__ltsf2>
    1a88:	87 ff       	sbrs	r24, 7
    1a8a:	40 c0       	rjmp	.+128    	; 0x1b0c <__vector_14+0x3e0>
		wspeed-=accW;
    1a8c:	60 91 cc 02 	lds	r22, 0x02CC
    1a90:	70 91 cd 02 	lds	r23, 0x02CD
    1a94:	80 91 ce 02 	lds	r24, 0x02CE
    1a98:	90 91 cf 02 	lds	r25, 0x02CF
    1a9c:	20 91 0d 01 	lds	r18, 0x010D
    1aa0:	30 91 0e 01 	lds	r19, 0x010E
    1aa4:	40 91 0f 01 	lds	r20, 0x010F
    1aa8:	50 91 10 01 	lds	r21, 0x0110
    1aac:	0e 94 b9 12 	call	0x2572	; 0x2572 <__subsf3>
    1ab0:	9b 01       	movw	r18, r22
    1ab2:	ac 01       	movw	r20, r24
    1ab4:	20 93 cc 02 	sts	0x02CC, r18
    1ab8:	30 93 cd 02 	sts	0x02CD, r19
    1abc:	40 93 ce 02 	sts	0x02CE, r20
    1ac0:	50 93 cf 02 	sts	0x02CF, r21
		if(next_wspeed>=wspeed)wspeed=next_wspeed;
    1ac4:	60 91 d0 02 	lds	r22, 0x02D0
    1ac8:	70 91 d1 02 	lds	r23, 0x02D1
    1acc:	80 91 d2 02 	lds	r24, 0x02D2
    1ad0:	90 91 d3 02 	lds	r25, 0x02D3
    1ad4:	20 91 cc 02 	lds	r18, 0x02CC
    1ad8:	30 91 cd 02 	lds	r19, 0x02CD
    1adc:	40 91 ce 02 	lds	r20, 0x02CE
    1ae0:	50 91 cf 02 	lds	r21, 0x02CF
    1ae4:	0e 94 14 14 	call	0x2828	; 0x2828 <__gesf2>
    1ae8:	87 fd       	sbrc	r24, 7
    1aea:	10 c0       	rjmp	.+32     	; 0x1b0c <__vector_14+0x3e0>
    1aec:	80 91 d0 02 	lds	r24, 0x02D0
    1af0:	90 91 d1 02 	lds	r25, 0x02D1
    1af4:	a0 91 d2 02 	lds	r26, 0x02D2
    1af8:	b0 91 d3 02 	lds	r27, 0x02D3
    1afc:	80 93 cc 02 	sts	0x02CC, r24
    1b00:	90 93 cd 02 	sts	0x02CD, r25
    1b04:	a0 93 ce 02 	sts	0x02CE, r26
    1b08:	b0 93 cf 02 	sts	0x02CF, r27
	}
}
    1b0c:	ff 91       	pop	r31
    1b0e:	ef 91       	pop	r30
    1b10:	bf 91       	pop	r27
    1b12:	af 91       	pop	r26
    1b14:	9f 91       	pop	r25
    1b16:	8f 91       	pop	r24
    1b18:	7f 91       	pop	r23
    1b1a:	6f 91       	pop	r22
    1b1c:	5f 91       	pop	r21
    1b1e:	4f 91       	pop	r20
    1b20:	3f 91       	pop	r19
    1b22:	2f 91       	pop	r18
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	ff 90       	pop	r15
    1b2a:	ef 90       	pop	r14
    1b2c:	0f 90       	pop	r0
    1b2e:	0b be       	out	0x3b, r0	; 59
    1b30:	0f 90       	pop	r0
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	0f 90       	pop	r0
    1b36:	1f 90       	pop	r1
    1b38:	18 95       	reti

00001b3a <ReadData>:
unsigned char ReadData(unsigned char motor)
{
    unsigned char data;

    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	b0 96       	adiw	r30, 0x20	; 32
    1b40:	fe 2f       	mov	r31, r30
    1b42:	ee 27       	eor	r30, r30
    1b44:	20 81       	ld	r18, Z
    1b46:	20 93 fe 02 	sts	0x02FE, r18
    1b4a:	20 fd       	sbrc	r18, 0
    1b4c:	fb cf       	rjmp	.-10     	; 0x1b44 <ReadData+0xa>
    // 데이터 입력
    data = MOTOR_DATA(motor);
    1b4e:	88 96       	adiw	r24, 0x28	; 40
    1b50:	b8 2f       	mov	r27, r24
    1b52:	aa 27       	eor	r26, r26
    1b54:	8c 91       	ld	r24, X

	CHECK_BUSY(motor, status);
    1b56:	90 81       	ld	r25, Z
    1b58:	90 93 fe 02 	sts	0x02FE, r25
    1b5c:	90 fd       	sbrc	r25, 0
    1b5e:	fb cf       	rjmp	.-10     	; 0x1b56 <ReadData+0x1c>
    // 입력된 데이터 리턴
    return data;
}    
    1b60:	08 95       	ret

00001b62 <WriteCommand>:
// Return    : 없음

void WriteCommand(unsigned char motor, unsigned char cmd)
{
    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	80 96       	adiw	r24, 0x20	; 32
    1b66:	f8 2f       	mov	r31, r24
    1b68:	ee 27       	eor	r30, r30
    1b6a:	80 81       	ld	r24, Z
    1b6c:	80 93 fe 02 	sts	0x02FE, r24
    1b70:	80 fd       	sbrc	r24, 0
    1b72:	fb cf       	rjmp	.-10     	; 0x1b6a <WriteCommand+0x8>
    // 커맨드 출력
    MOTOR_CMD(motor) = cmd;
    1b74:	60 83       	st	Z, r22

	CHECK_BUSY(motor, status);
    1b76:	80 81       	ld	r24, Z
    1b78:	80 93 fe 02 	sts	0x02FE, r24
    1b7c:	80 fd       	sbrc	r24, 0
    1b7e:	fb cf       	rjmp	.-10     	; 0x1b76 <WriteCommand+0x14>
}
    1b80:	08 95       	ret

00001b82 <WriteDataTwoByte>:
//      data  - 쓸 데이터
// Return    : 없음
void WriteDataTwoByte(unsigned char motor, int data)
{
    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
    1b82:	a8 2f       	mov	r26, r24
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	fd 01       	movw	r30, r26
    1b88:	b0 96       	adiw	r30, 0x20	; 32
    1b8a:	fe 2f       	mov	r31, r30
    1b8c:	ee 27       	eor	r30, r30
    1b8e:	80 81       	ld	r24, Z
    1b90:	80 93 fe 02 	sts	0x02FE, r24
    1b94:	80 fd       	sbrc	r24, 0
    1b96:	fb cf       	rjmp	.-10     	; 0x1b8e <WriteDataTwoByte+0xc>
    // 2 바이트 데이터 출력
    MOTOR_DATA(motor) = (uint8_t)((data >> 8)&0xFF);
    1b98:	98 96       	adiw	r26, 0x28	; 40
    1b9a:	ba 2f       	mov	r27, r26
    1b9c:	aa 27       	eor	r26, r26
    1b9e:	87 2f       	mov	r24, r23
    1ba0:	99 27       	eor	r25, r25
    1ba2:	87 fd       	sbrc	r24, 7
    1ba4:	9a 95       	dec	r25
    1ba6:	8c 93       	st	X, r24
	CHECK_BUSY(motor, status);
    1ba8:	80 81       	ld	r24, Z
    1baa:	80 93 fe 02 	sts	0x02FE, r24
    1bae:	80 fd       	sbrc	r24, 0
    1bb0:	fb cf       	rjmp	.-10     	; 0x1ba8 <WriteDataTwoByte+0x26>
    MOTOR_DATA(motor) = (uint8_t)(data&0xFF);
    1bb2:	6c 93       	st	X, r22
	CHECK_BUSY(motor, status);
    1bb4:	80 81       	ld	r24, Z
    1bb6:	80 93 fe 02 	sts	0x02FE, r24
    1bba:	80 fd       	sbrc	r24, 0
    1bbc:	fb cf       	rjmp	.-10     	; 0x1bb4 <WriteDataTwoByte+0x32>
}
    1bbe:	08 95       	ret

00001bc0 <WriteDataFourByte>:
// Parameter :
//      motor - 선택할 모터
//      data  - 쓸 데이터
// Return    : 없음
void WriteDataFourByte(unsigned char motor, long data)
{
    1bc0:	df 92       	push	r13
    1bc2:	ef 92       	push	r14
    1bc4:	ff 92       	push	r15
    1bc6:	0f 93       	push	r16
    1bc8:	1f 93       	push	r17
    1bca:	d8 2e       	mov	r13, r24
    1bcc:	7a 01       	movw	r14, r20
    1bce:	8b 01       	movw	r16, r22
    // 4 바이트의 데이터를 둘로 나누어서 WriteDataTwoByte함수를 두번 호출
    WriteDataTwoByte(motor, (int16_t)(data >> 16));
    1bd0:	9b 01       	movw	r18, r22
    1bd2:	55 27       	eor	r21, r21
    1bd4:	37 fd       	sbrc	r19, 7
    1bd6:	50 95       	com	r21
    1bd8:	45 2f       	mov	r20, r21
    1bda:	b9 01       	movw	r22, r18
    1bdc:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <WriteDataTwoByte>
    WriteDataTwoByte(motor, (int16_t)(data));
    1be0:	8d 2d       	mov	r24, r13
    1be2:	b7 01       	movw	r22, r14
    1be4:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <WriteDataTwoByte>
}
    1be8:	1f 91       	pop	r17
    1bea:	0f 91       	pop	r16
    1bec:	ff 90       	pop	r15
    1bee:	ef 90       	pop	r14
    1bf0:	df 90       	pop	r13
    1bf2:	08 95       	ret

00001bf4 <Motor_Reset>:
// Function  : LM629를 리셋한다.
// Parameter :
//      motor - 선택할 모터
// Return    : 없음
void Motor_Reset(uint8_t motor)
{
    1bf4:	1f 93       	push	r17
    1bf6:	18 2f       	mov	r17, r24
    // RESET 커맨드 출력
    WriteCommand(motor, RESET);
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <WriteCommand>
    1bfe:	8c ec       	ldi	r24, 0xCC	; 204
    1c00:	9c e1       	ldi	r25, 0x1C	; 28
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <Motor_Reset+0xe>
    1c06:	00 c0       	rjmp	.+0      	; 0x1c08 <Motor_Reset+0x14>
    1c08:	00 00       	nop
    // 리셋이 완료될 때까지 최소 1.5ms이상 대기
    _delay_ms(2);
	// Morot1 인터럽트 마스크 리셋
    WriteCommand(motor, RSTI);
    1c0a:	81 2f       	mov	r24, r17
    1c0c:	6d e1       	ldi	r22, 0x1D	; 29
    1c0e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <WriteCommand>
    WriteDataTwoByte(motor, 0x0000);
    1c12:	81 2f       	mov	r24, r17
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <WriteDataTwoByte>
}
    1c1c:	1f 91       	pop	r17
    1c1e:	08 95       	ret

00001c20 <SetGain>:
//      kp    - P값
//      ki    - I값
//      kd    - D값
// Return    : 없음
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
{
    1c20:	af 92       	push	r10
    1c22:	bf 92       	push	r11
    1c24:	cf 92       	push	r12
    1c26:	df 92       	push	r13
    1c28:	ef 92       	push	r14
    1c2a:	ff 92       	push	r15
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	f8 2e       	mov	r15, r24
    1c36:	6b 01       	movw	r12, r22
    1c38:	ea 01       	movw	r28, r20
    1c3a:	89 01       	movw	r16, r18
//      motor - 선택할 모터
//      kp    - P값
//      ki    - I값
//      kd    - D값
// Return    : 없음
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
    1c3c:	aa 24       	eor	r10, r10
    1c3e:	a3 94       	inc	r10
    1c40:	61 15       	cp	r22, r1
    1c42:	71 05       	cpc	r23, r1
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <SetGain+0x28>
    1c46:	aa 24       	eor	r10, r10
    1c48:	bb 24       	eor	r11, r11
    1c4a:	b3 94       	inc	r11
    1c4c:	20 97       	sbiw	r28, 0x00	; 0
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <SetGain+0x32>
    1c50:	bb 24       	eor	r11, r11
    1c52:	ee 24       	eor	r14, r14
    1c54:	e3 94       	inc	r14
    1c56:	01 15       	cp	r16, r1
    1c58:	11 05       	cpc	r17, r1
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <SetGain+0x3e>
    1c5c:	ee 24       	eor	r14, r14
	if(ki)LD_ki=1;
	else LD_ki=0;
	if(kd)LD_kd=1;
	else LD_kd=0;
	// LFIL 커맨드 출력
    WriteCommand(motor, LFIL);
    1c5e:	8f 2d       	mov	r24, r15
    1c60:	6e e1       	ldi	r22, 0x1E	; 30
    1c62:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <WriteCommand>
    // 컨트롤 워드 출력, sampling interval은 341us 고정
    WriteDataTwoByte(motor, (0x0000) | (LD_kp << 3) | (LD_ki << 2) | (LD_kd << 1)  );
    1c66:	6b 2d       	mov	r22, r11
    1c68:	70 e0       	ldi	r23, 0x00	; 0
    1c6a:	66 0f       	add	r22, r22
    1c6c:	77 1f       	adc	r23, r23
    1c6e:	66 0f       	add	r22, r22
    1c70:	77 1f       	adc	r23, r23
    1c72:	8a 2d       	mov	r24, r10
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	43 e0       	ldi	r20, 0x03	; 3
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	4a 95       	dec	r20
    1c7e:	e1 f7       	brne	.-8      	; 0x1c78 <SetGain+0x58>
    1c80:	68 2b       	or	r22, r24
    1c82:	79 2b       	or	r23, r25
    1c84:	8e 2d       	mov	r24, r14
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	68 2b       	or	r22, r24
    1c8e:	79 2b       	or	r23, r25
    1c90:	8f 2d       	mov	r24, r15
    1c92:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <WriteDataTwoByte>
    ////////////////////////////
	// P값 출력
	if(kp)WriteDataTwoByte(motor, kp);
    1c96:	aa 20       	and	r10, r10
    1c98:	21 f0       	breq	.+8      	; 0x1ca2 <SetGain+0x82>
    1c9a:	8f 2d       	mov	r24, r15
    1c9c:	b6 01       	movw	r22, r12
    1c9e:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <WriteDataTwoByte>
    // I값 출력
    if(ki)WriteDataTwoByte(motor, ki);
    1ca2:	bb 20       	and	r11, r11
    1ca4:	21 f0       	breq	.+8      	; 0x1cae <SetGain+0x8e>
    1ca6:	8f 2d       	mov	r24, r15
    1ca8:	be 01       	movw	r22, r28
    1caa:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <WriteDataTwoByte>
    // D값 출력
    if(kd)WriteDataTwoByte(motor, kd);
    1cae:	ee 20       	and	r14, r14
    1cb0:	21 f0       	breq	.+8      	; 0x1cba <SetGain+0x9a>
    1cb2:	8f 2d       	mov	r24, r15
    1cb4:	b8 01       	movw	r22, r16
    1cb6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <WriteDataTwoByte>
    // 필터 업데이트
    WriteCommand(motor, UDF);
    1cba:	8f 2d       	mov	r24, r15
    1cbc:	64 e0       	ldi	r22, 0x04	; 4
    1cbe:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <WriteCommand>
}
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	1f 91       	pop	r17
    1cc8:	0f 91       	pop	r16
    1cca:	ff 90       	pop	r15
    1ccc:	ef 90       	pop	r14
    1cce:	df 90       	pop	r13
    1cd0:	cf 90       	pop	r12
    1cd2:	bf 90       	pop	r11
    1cd4:	af 90       	pop	r10
    1cd6:	08 95       	ret

00001cd8 <SetAcceleration>:
// Parameter :
//      motor - 선택할 모터
//      acc   - 가속도값
// Return    : 없음
void SetAcceleration(uint8_t motor, int32_t acc)
{
    1cd8:	df 92       	push	r13
    1cda:	ef 92       	push	r14
    1cdc:	ff 92       	push	r15
    1cde:	0f 93       	push	r16
    1ce0:	1f 93       	push	r17
    1ce2:	d8 2e       	mov	r13, r24
    1ce4:	7a 01       	movw	r14, r20
    1ce6:	8b 01       	movw	r16, r22
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);
    1ce8:	6f e1       	ldi	r22, 0x1F	; 31
    1cea:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(motor, (1 << ACC_LOAD));
    1cee:	8d 2d       	mov	r24, r13
    1cf0:	60 e2       	ldi	r22, 0x20	; 32
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <WriteDataTwoByte>
    // 가속도값 출력
    WriteDataFourByte(motor, acc);
    1cf8:	8d 2d       	mov	r24, r13
    1cfa:	b8 01       	movw	r22, r16
    1cfc:	a7 01       	movw	r20, r14
    1cfe:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <WriteDataFourByte>
}
    1d02:	1f 91       	pop	r17
    1d04:	0f 91       	pop	r16
    1d06:	ff 90       	pop	r15
    1d08:	ef 90       	pop	r14
    1d0a:	df 90       	pop	r13
    1d0c:	08 95       	ret

00001d0e <Motor_init>:
// Parameter : 없음
// Return    : 없음
void Motor_init(void)
{	
    // Motor1 게인 설정
    SetGain(MOTOR0, 7, 3, 1);
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	67 e0       	ldi	r22, 0x07	; 7
    1d12:	70 e0       	ldi	r23, 0x00	; 0
    1d14:	43 e0       	ldi	r20, 0x03	; 3
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <SetGain>
    // Motor2 게인 설정
    SetGain(MOTOR1, 7, 3, 1);
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	67 e0       	ldi	r22, 0x07	; 7
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	43 e0       	ldi	r20, 0x03	; 3
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	21 e0       	ldi	r18, 0x01	; 1
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <SetGain>
    // Motor3 게인 설정
    SetGain(MOTOR2, 7, 3, 1);
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	67 e0       	ldi	r22, 0x07	; 7
    1d36:	70 e0       	ldi	r23, 0x00	; 0
    1d38:	43 e0       	ldi	r20, 0x03	; 3
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	21 e0       	ldi	r18, 0x01	; 1
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <SetGain>

    SetAcceleration(MOTOR0, 0x3FFFFFFF);
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	4f ef       	ldi	r20, 0xFF	; 255
    1d48:	5f ef       	ldi	r21, 0xFF	; 255
    1d4a:	6f ef       	ldi	r22, 0xFF	; 255
    1d4c:	7f e3       	ldi	r23, 0x3F	; 63
    1d4e:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <SetAcceleration>
    SetAcceleration(MOTOR1, 0x3FFFFFFF);
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	4f ef       	ldi	r20, 0xFF	; 255
    1d56:	5f ef       	ldi	r21, 0xFF	; 255
    1d58:	6f ef       	ldi	r22, 0xFF	; 255
    1d5a:	7f e3       	ldi	r23, 0x3F	; 63
    1d5c:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <SetAcceleration>
    SetAcceleration(MOTOR2, 0x3FFFFFFF);
    1d60:	82 e0       	ldi	r24, 0x02	; 2
    1d62:	4f ef       	ldi	r20, 0xFF	; 255
    1d64:	5f ef       	ldi	r21, 0xFF	; 255
    1d66:	6f ef       	ldi	r22, 0xFF	; 255
    1d68:	7f e3       	ldi	r23, 0x3F	; 63
    1d6a:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <SetAcceleration>
}
    1d6e:	08 95       	ret

00001d70 <SetVelocity>:
// Parameter :
//      motor    - 선택할 모터
//      velocity - 속도 설정  (0 ~ 1,073,741,823) 음수 입력시 역방향으로 회전
// Return    : 없음
void SetVelocity(uint8_t motor, int32_t velocity)
{
    1d70:	df 92       	push	r13
    1d72:	ef 92       	push	r14
    1d74:	ff 92       	push	r15
    1d76:	0f 93       	push	r16
    1d78:	1f 93       	push	r17
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	0f 92       	push	r0
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	d8 2e       	mov	r13, r24
    1d86:	7a 01       	movw	r14, r20
    1d88:	8b 01       	movw	r16, r22
	unsigned char dir=1;

	if(velocity<0){
    1d8a:	77 ff       	sbrs	r23, 7
    1d8c:	0a c0       	rjmp	.+20     	; 0x1da2 <SetVelocity+0x32>
		velocity*=(-1);
    1d8e:	10 95       	com	r17
    1d90:	00 95       	com	r16
    1d92:	f0 94       	com	r15
    1d94:	e0 94       	com	r14
    1d96:	e1 1c       	adc	r14, r1
    1d98:	f1 1c       	adc	r15, r1
    1d9a:	01 1d       	adc	r16, r1
    1d9c:	11 1d       	adc	r17, r1
		dir=0;
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <SetVelocity+0x34>
//      motor    - 선택할 모터
//      velocity - 속도 설정  (0 ~ 1,073,741,823) 음수 입력시 역방향으로 회전
// Return    : 없음
void SetVelocity(uint8_t motor, int32_t velocity)
{
	unsigned char dir=1;
    1da2:	91 e0       	ldi	r25, 0x01	; 1
	if(velocity<0){
		velocity*=(-1);
		dir=0;
	}
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);        
    1da4:	8d 2d       	mov	r24, r13
    1da6:	6f e1       	ldi	r22, 0x1F	; 31
    1da8:	99 83       	std	Y+1, r25	; 0x01
    1daa:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <WriteCommand>
    // 컨트롤 워드 출력        
    WriteDataTwoByte(motor,  (dir << FORWARD_DIR) | (1 << VELOCITY_MODE) | (1 << VELOCITY_LOAD));
    1dae:	99 81       	ldd	r25, Y+1	; 0x01
    1db0:	79 2f       	mov	r23, r25
    1db2:	72 95       	swap	r23
    1db4:	70 7f       	andi	r23, 0xF0	; 240
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	68 60       	ori	r22, 0x08	; 8
    1dba:	78 60       	ori	r23, 0x08	; 8
    1dbc:	8d 2d       	mov	r24, r13
    1dbe:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <WriteDataTwoByte>
    // 속도값 출력
    WriteDataFourByte(motor, velocity);
    1dc2:	8d 2d       	mov	r24, r13
    1dc4:	b8 01       	movw	r22, r16
    1dc6:	a7 01       	movw	r20, r14
    1dc8:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <WriteDataFourByte>
}
    1dcc:	0f 90       	pop	r0
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	ff 90       	pop	r15
    1dd8:	ef 90       	pop	r14
    1dda:	df 90       	pop	r13
    1ddc:	08 95       	ret

00001dde <SetPosition>:
//		acc   - 가속도 설정  (0 ~ 1,073,741,823)
//   velocity - 속도 설정    (0 ~ 1,073,741,823)
//   position - 모터위치설정 (-1,073,741,824 ~ 1,073,741,823)counts
// Return    : 없음
void SetPosition(uint8_t motor, uint8_t mode, int32_t acc,int32_t velocity,int32_t position)
{
    1dde:	4f 92       	push	r4
    1de0:	5f 92       	push	r5
    1de2:	6f 92       	push	r6
    1de4:	7f 92       	push	r7
    1de6:	8f 92       	push	r8
    1de8:	9f 92       	push	r9
    1dea:	af 92       	push	r10
    1dec:	bf 92       	push	r11
    1dee:	cf 92       	push	r12
    1df0:	df 92       	push	r13
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	98 2e       	mov	r9, r24
    1dfc:	86 2e       	mov	r8, r22
    1dfe:	29 01       	movw	r4, r18
    1e00:	3a 01       	movw	r6, r20
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);
    1e02:	6f e1       	ldi	r22, 0x1F	; 31
    1e04:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <WriteCommand>
    // 컨트롤 워드 출력
    // mode : 0 - Absolute Position, 1 - Relative Position
    // Position Mode로 설정
    
	WriteDataTwoByte(motor, (1 << ACC_LOAD) | (1 << VELOCITY_LOAD) | (1 << POSITION_LOAD) | (mode << POSITION_RELATIVE) );//WriteDataTwoByte(motor, 0x2A|mode);
    1e08:	68 2d       	mov	r22, r8
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
    1e0c:	6a 62       	ori	r22, 0x2A	; 42
    1e0e:	89 2d       	mov	r24, r9
    1e10:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <WriteDataTwoByte>
    // 위치값 출력
	WriteDataFourByte(motor, acc);    
    1e14:	89 2d       	mov	r24, r9
    1e16:	b3 01       	movw	r22, r6
    1e18:	a2 01       	movw	r20, r4
    1e1a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <WriteDataFourByte>
	WriteDataFourByte(motor, velocity);
    1e1e:	89 2d       	mov	r24, r9
    1e20:	b8 01       	movw	r22, r16
    1e22:	a7 01       	movw	r20, r14
    1e24:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <WriteDataFourByte>
    WriteDataFourByte(motor, position);
    1e28:	89 2d       	mov	r24, r9
    1e2a:	b6 01       	movw	r22, r12
    1e2c:	a5 01       	movw	r20, r10
    1e2e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <WriteDataFourByte>
}
    1e32:	1f 91       	pop	r17
    1e34:	0f 91       	pop	r16
    1e36:	ff 90       	pop	r15
    1e38:	ef 90       	pop	r14
    1e3a:	df 90       	pop	r13
    1e3c:	cf 90       	pop	r12
    1e3e:	bf 90       	pop	r11
    1e40:	af 90       	pop	r10
    1e42:	9f 90       	pop	r9
    1e44:	8f 90       	pop	r8
    1e46:	7f 90       	pop	r7
    1e48:	6f 90       	pop	r6
    1e4a:	5f 90       	pop	r5
    1e4c:	4f 90       	pop	r4
    1e4e:	08 95       	ret

00001e50 <LM629_HW_Reset>:

// Function  : LM629 H/W Reset. 최초 전원 인가시 반드시 실행해야한다.
// Parameter : 없음
// Return    : 없음
void LM629_HW_Reset(void){
    1e50:	8f 92       	push	r8
    1e52:	9f 92       	push	r9
    1e54:	af 92       	push	r10
    1e56:	bf 92       	push	r11
    1e58:	cf 92       	push	r12
    1e5a:	df 92       	push	r13
    1e5c:	ef 92       	push	r14
    1e5e:	ff 92       	push	r15
    1e60:	0f 93       	push	r16
    1e62:	1f 93       	push	r17
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <LM629_HW_Reset+0x1a>
    1e6a:	0f 92       	push	r0
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
	unsigned char status[3]={0, }, i=0, step=0;
	
	DDRA=0x00;
    1e70:	1a ba       	out	0x1a, r1	; 26

	PORTC=0x00;
    1e72:	15 ba       	out	0x15, r1	; 21
	DDRC=0xFF;
    1e74:	8f ef       	ldi	r24, 0xFF	; 255
    1e76:	84 bb       	out	0x14, r24	; 20

	PORTG=0x00;
    1e78:	10 92 65 00 	sts	0x0065, r1
	DDRG=0x03;
    1e7c:	83 e0       	ldi	r24, 0x03	; 3
    1e7e:	80 93 64 00 	sts	0x0064, r24
			}
		}
		
		if(step==1){
			// SRE : 외부 데이터 메모리 영역 활성화
			MCUCR = (1 << SRE) | (0 << SRW10);
    1e82:	e0 e8       	ldi	r30, 0x80	; 128
    1e84:	9e 2e       	mov	r9, r30
		    // SRL(0) : Upper Sector로만 사용 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
    1e86:	72 e0       	ldi	r23, 0x02	; 2
    1e88:	a7 2e       	mov	r10, r23
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
    1e8a:	64 e8       	ldi	r22, 0x84	; 132
    1e8c:	b6 2e       	mov	r11, r22
    1e8e:	6e 01       	movw	r12, r28
    1e90:	08 94       	sec
    1e92:	c1 1c       	adc	r12, r1
    1e94:	d1 1c       	adc	r13, r1
	DDRG=0x03;

	while(1){
		if(step==0){
			while(1){
				PORTC |= 0x05; //Hw Rst Hi(decoder = Low)
    1e96:	85 b3       	in	r24, 0x15	; 21
    1e98:	85 60       	ori	r24, 0x05	; 5
    1e9a:	85 bb       	out	0x15, r24	; 21
    1e9c:	83 e3       	ldi	r24, 0x33	; 51
    1e9e:	9b e2       	ldi	r25, 0x2B	; 43
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <LM629_HW_Reset+0x50>
				_delay_ms(3);
				PORTC &= ~0x05; //Hw Rst Low(decoder = Hi)
    1ea4:	85 b3       	in	r24, 0x15	; 21
    1ea6:	8a 7f       	andi	r24, 0xFA	; 250
    1ea8:	85 bb       	out	0x15, r24	; 21
    1eaa:	ec ec       	ldi	r30, 0xCC	; 204
    1eac:	fc e1       	ldi	r31, 0x1C	; 28
    1eae:	31 97       	sbiw	r30, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <LM629_HW_Reset+0x5e>
    1eb2:	00 c0       	rjmp	.+0      	; 0x1eb4 <LM629_HW_Reset+0x64>
    1eb4:	00 00       	nop
				_delay_ms(2);

				PORTG &= ~0x02; //RD low
    1eb6:	80 91 65 00 	lds	r24, 0x0065
    1eba:	8d 7f       	andi	r24, 0xFD	; 253
    1ebc:	80 93 65 00 	sts	0x0065, r24
				PORTC &= ~0x08; //PS low
    1ec0:	ab 98       	cbi	0x15, 3	; 21
		
				PORTC &=~0x07;	//cs motor0
    1ec2:	85 b3       	in	r24, 0x15	; 21
    1ec4:	88 7f       	andi	r24, 0xF8	; 248
    1ec6:	85 bb       	out	0x15, r24	; 21
				status[0]=PINA; //Read status motor0
    1ec8:	29 b3       	in	r18, 0x19	; 25
    1eca:	29 83       	std	Y+1, r18	; 0x01
				
				PORTC |=0x01;	//cs motor1
    1ecc:	a8 9a       	sbi	0x15, 0	; 21
				status[1]=PINA; //Read status motor0
    1ece:	99 b3       	in	r25, 0x19	; 25
    1ed0:	9a 83       	std	Y+2, r25	; 0x02
				
				PORTC = (PORTC&0xF8)|0x02; 	//cs motor2
    1ed2:	85 b3       	in	r24, 0x15	; 21
    1ed4:	88 7f       	andi	r24, 0xF8	; 248
    1ed6:	82 60       	ori	r24, 0x02	; 2
    1ed8:	85 bb       	out	0x15, r24	; 21
				status[2]=PINA;  //Read status motor0
    1eda:	89 b3       	in	r24, 0x19	; 25
    1edc:	8b 83       	std	Y+3, r24	; 0x03

				if( (status[0]==0xC4||status[0]==0x84) && 
    1ede:	24 3c       	cpi	r18, 0xC4	; 196
    1ee0:	11 f0       	breq	.+4      	; 0x1ee6 <LM629_HW_Reset+0x96>
    1ee2:	24 38       	cpi	r18, 0x84	; 132
    1ee4:	c1 f5       	brne	.+112    	; 0x1f56 <LM629_HW_Reset+0x106>
    1ee6:	94 3c       	cpi	r25, 0xC4	; 196
    1ee8:	11 f0       	breq	.+4      	; 0x1eee <LM629_HW_Reset+0x9e>
					(status[1]==0xC4||status[1]==0x84) && 
    1eea:	94 38       	cpi	r25, 0x84	; 132
    1eec:	a1 f5       	brne	.+104    	; 0x1f56 <LM629_HW_Reset+0x106>
    1eee:	84 3c       	cpi	r24, 0xC4	; 196
    1ef0:	11 f0       	breq	.+4      	; 0x1ef6 <LM629_HW_Reset+0xa6>
					(status[2]==0xC4||status[2]==0x84) ){
    1ef2:	84 38       	cpi	r24, 0x84	; 132
    1ef4:	81 f5       	brne	.+96     	; 0x1f56 <LM629_HW_Reset+0x106>
			}
		}
		
		if(step==1){
			// SRE : 외부 데이터 메모리 영역 활성화
			MCUCR = (1 << SRE) | (0 << SRW10);
    1ef6:	95 be       	out	0x35, r9	; 53
		    // SRL(0) : Upper Sector로만 사용 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
    1ef8:	a0 92 6d 00 	sts	0x006D, r10
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
    1efc:	b0 92 6c 00 	sts	0x006C, r11
    1f00:	76 01       	movw	r14, r12
    1f02:	00 e0       	ldi	r16, 0x00	; 0
    1f04:	10 e2       	ldi	r17, 0x20	; 32
    1f06:	8e 2c       	mov	r8, r14
    1f08:	8c 18       	sub	r8, r12
			while(1){
				for(i=0;i<3;++i){
		        	WriteCommand(i, RSTI);
    1f0a:	88 2d       	mov	r24, r8
    1f0c:	6d e1       	ldi	r22, 0x1D	; 29
    1f0e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <WriteCommand>
					WriteDataTwoByte(i, 0x0000);
    1f12:	88 2d       	mov	r24, r8
    1f14:	60 e0       	ldi	r22, 0x00	; 0
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <WriteDataTwoByte>
					READ_STATUS(i, status[i]);
    1f1c:	f8 01       	movw	r30, r16
    1f1e:	80 81       	ld	r24, Z
    1f20:	f7 01       	movw	r30, r14
    1f22:	81 93       	st	Z+, r24
    1f24:	7f 01       	movw	r14, r30
    1f26:	00 50       	subi	r16, 0x00	; 0
    1f28:	1f 4f       	sbci	r17, 0xFF	; 255
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
			while(1){
				for(i=0;i<3;++i){
    1f2a:	f3 e2       	ldi	r31, 0x23	; 35
    1f2c:	00 30       	cpi	r16, 0x00	; 0
    1f2e:	1f 07       	cpc	r17, r31
    1f30:	51 f7       	brne	.-44     	; 0x1f06 <LM629_HW_Reset+0xb6>
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	80 3c       	cpi	r24, 0xC0	; 192
    1f36:	11 f0       	breq	.+4      	; 0x1f3c <LM629_HW_Reset+0xec>
    1f38:	80 38       	cpi	r24, 0x80	; 128
    1f3a:	51 f4       	brne	.+20     	; 0x1f50 <LM629_HW_Reset+0x100>
					(status[1]==0xC0||status[1]==0x80) && 
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
				for(i=0;i<3;++i){
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
    1f3e:	80 3c       	cpi	r24, 0xC0	; 192
    1f40:	11 f0       	breq	.+4      	; 0x1f46 <LM629_HW_Reset+0xf6>
					(status[1]==0xC0||status[1]==0x80) && 
    1f42:	80 38       	cpi	r24, 0x80	; 128
    1f44:	29 f4       	brne	.+10     	; 0x1f50 <LM629_HW_Reset+0x100>
					(status[2]==0xC0||status[2]==0x80) ){
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
					(status[1]==0xC0||status[1]==0x80) && 
    1f48:	80 3c       	cpi	r24, 0xC0	; 192
    1f4a:	69 f0       	breq	.+26     	; 0x1f66 <LM629_HW_Reset+0x116>
					(status[2]==0xC0||status[2]==0x80) ){
    1f4c:	80 38       	cpi	r24, 0x80	; 128
    1f4e:	59 f0       	breq	.+22     	; 0x1f66 <LM629_HW_Reset+0x116>
					break;
				}
				else{	//다시 처음부터 LM629초기화
					step=0;	
					// SRE : 외부 데이터 메모리 영역 비활성화
					MCUCR &= ~(1 << SRE) & ~(1 << SRW10);
    1f50:	85 b7       	in	r24, 0x35	; 53
    1f52:	8f 73       	andi	r24, 0x3F	; 63
    1f54:	85 bf       	out	0x35, r24	; 53
					PORTC=0x00;
    1f56:	15 ba       	out	0x15, r1	; 21
					lcd_display_str(0,0,"Error. Restart");
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	45 e9       	ldi	r20, 0x95	; 149
    1f5e:	51 e0       	ldi	r21, 0x01	; 1
    1f60:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_display_str>
    1f64:	98 cf       	rjmp	.-208    	; 0x1e96 <LM629_HW_Reset+0x46>
					break;
				}
			}
		}
		if(step==2){
			lcd_display_str(0,0,"Initialize success.");
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	60 e0       	ldi	r22, 0x00	; 0
    1f6a:	44 ea       	ldi	r20, 0xA4	; 164
    1f6c:	51 e0       	ldi	r21, 0x01	; 1
    1f6e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_display_str>
    1f72:	83 e0       	ldi	r24, 0x03	; 3
			for(i=0;i<3;++i){
				PORTB|=0x07;
    1f74:	98 b3       	in	r25, 0x18	; 24
    1f76:	97 60       	ori	r25, 0x07	; 7
    1f78:	98 bb       	out	0x18, r25	; 24
    1f7a:	2f ef       	ldi	r18, 0xFF	; 255
    1f7c:	3f eb       	ldi	r19, 0xBF	; 191
    1f7e:	46 e0       	ldi	r20, 0x06	; 6
    1f80:	21 50       	subi	r18, 0x01	; 1
    1f82:	30 40       	sbci	r19, 0x00	; 0
    1f84:	40 40       	sbci	r20, 0x00	; 0
    1f86:	e1 f7       	brne	.-8      	; 0x1f80 <LM629_HW_Reset+0x130>
    1f88:	00 c0       	rjmp	.+0      	; 0x1f8a <LM629_HW_Reset+0x13a>
    1f8a:	00 00       	nop
				_delay_ms(150);
				PORTB&=~0x07;
    1f8c:	98 b3       	in	r25, 0x18	; 24
    1f8e:	98 7f       	andi	r25, 0xF8	; 248
    1f90:	98 bb       	out	0x18, r25	; 24
    1f92:	2f ef       	ldi	r18, 0xFF	; 255
    1f94:	3f eb       	ldi	r19, 0xBF	; 191
    1f96:	46 e0       	ldi	r20, 0x06	; 6
    1f98:	21 50       	subi	r18, 0x01	; 1
    1f9a:	30 40       	sbci	r19, 0x00	; 0
    1f9c:	40 40       	sbci	r20, 0x00	; 0
    1f9e:	e1 f7       	brne	.-8      	; 0x1f98 <LM629_HW_Reset+0x148>
    1fa0:	00 c0       	rjmp	.+0      	; 0x1fa2 <LM629_HW_Reset+0x152>
    1fa2:	00 00       	nop
    1fa4:	81 50       	subi	r24, 0x01	; 1
				}
			}
		}
		if(step==2){
			lcd_display_str(0,0,"Initialize success.");
			for(i=0;i<3;++i){
    1fa6:	31 f7       	brne	.-52     	; 0x1f74 <LM629_HW_Reset+0x124>
				PORTB|=0x07;
				_delay_ms(150);
				PORTB&=~0x07;
				_delay_ms(150);
			}
			lcd_clear_screen();
    1fa8:	0e 94 44 01 	call	0x288	; 0x288 <lcd_clear_screen>
			break;
		}
	}
}
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	1f 91       	pop	r17
    1fb8:	0f 91       	pop	r16
    1fba:	ff 90       	pop	r15
    1fbc:	ef 90       	pop	r14
    1fbe:	df 90       	pop	r13
    1fc0:	cf 90       	pop	r12
    1fc2:	bf 90       	pop	r11
    1fc4:	af 90       	pop	r10
    1fc6:	9f 90       	pop	r9
    1fc8:	8f 90       	pop	r8
    1fca:	08 95       	ret

00001fcc <StartMotion>:
// Function  : 모든 모터의 모션을 시작한다.
// Parameter : 없음
// Return    : 없음
void StartMotion(void)
{
    WriteCommand(MOTOR0, STT);
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	61 e0       	ldi	r22, 0x01	; 1
    1fd0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <WriteCommand>
    WriteCommand(MOTOR1, STT);
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	61 e0       	ldi	r22, 0x01	; 1
    1fd8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <WriteCommand>
    WriteCommand(MOTOR2, STT);
    1fdc:	82 e0       	ldi	r24, 0x02	; 2
    1fde:	61 e0       	ldi	r22, 0x01	; 1
    1fe0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <WriteCommand>
}
    1fe4:	08 95       	ret

00001fe6 <StopMotion>:

// Function  : 모든 모터의 모션을 정지한다.
// Parameter : 없음
// Return    : 없음
void StopMotion(uint16_t mode)
{
    1fe6:	1f 93       	push	r17
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	18 2f       	mov	r17, r24
    // Motor1 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR0, LTRJ);
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	6f e1       	ldi	r22, 0x1F	; 31
    1ff2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR0, (1 << mode));
    1ff6:	c1 e0       	ldi	r28, 0x01	; 1
    1ff8:	d0 e0       	ldi	r29, 0x00	; 0
    1ffa:	02 c0       	rjmp	.+4      	; 0x2000 <StopMotion+0x1a>
    1ffc:	cc 0f       	add	r28, r28
    1ffe:	dd 1f       	adc	r29, r29
    2000:	1a 95       	dec	r17
    2002:	e2 f7       	brpl	.-8      	; 0x1ffc <StopMotion+0x16>
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	be 01       	movw	r22, r28
    2008:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <WriteDataTwoByte>

    // Motor2 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR1, LTRJ);
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	6f e1       	ldi	r22, 0x1F	; 31
    2010:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR1, (1 << mode));
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	be 01       	movw	r22, r28
    2018:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <WriteDataTwoByte>

    // Motor3 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR2, LTRJ);
    201c:	82 e0       	ldi	r24, 0x02	; 2
    201e:	6f e1       	ldi	r22, 0x1F	; 31
    2020:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR2, (1 << mode));
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	be 01       	movw	r22, r28
    2028:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <WriteDataTwoByte>

    // 모션 정지
    WriteCommand(MOTOR0, STT);
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	61 e0       	ldi	r22, 0x01	; 1
    2030:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <WriteCommand>
    WriteCommand(MOTOR1, STT);
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	61 e0       	ldi	r22, 0x01	; 1
    2038:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <WriteCommand>
    WriteCommand(MOTOR2, STT);
    203c:	82 e0       	ldi	r24, 0x02	; 2
    203e:	61 e0       	ldi	r22, 0x01	; 1
    2040:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <WriteCommand>
}
    2044:	df 91       	pop	r29
    2046:	cf 91       	pop	r28
    2048:	1f 91       	pop	r17
    204a:	08 95       	ret

0000204c <MOTOR_CTR>:

void MOTOR_CTR(long MT0,long MT1,long MT2){
    204c:	af 92       	push	r10
    204e:	bf 92       	push	r11
    2050:	cf 92       	push	r12
    2052:	df 92       	push	r13
    2054:	ef 92       	push	r14
    2056:	ff 92       	push	r15
    2058:	0f 93       	push	r16
    205a:	1f 93       	push	r17
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	2c 97       	sbiw	r28, 0x0c	; 12
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
    2070:	59 01       	movw	r10, r18
    2072:	6a 01       	movw	r12, r20
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};
    2074:	0e 94 a4 14 	call	0x2948	; 0x2948 <__floatsisf>
    2078:	69 83       	std	Y+1, r22	; 0x01
    207a:	7a 83       	std	Y+2, r23	; 0x02
    207c:	8b 83       	std	Y+3, r24	; 0x03
    207e:	9c 83       	std	Y+4, r25	; 0x04
    2080:	c6 01       	movw	r24, r12
    2082:	b5 01       	movw	r22, r10
    2084:	0e 94 a4 14 	call	0x2948	; 0x2948 <__floatsisf>
    2088:	6d 83       	std	Y+5, r22	; 0x05
    208a:	7e 83       	std	Y+6, r23	; 0x06
    208c:	8f 83       	std	Y+7, r24	; 0x07
    208e:	98 87       	std	Y+8, r25	; 0x08
    2090:	c8 01       	movw	r24, r16
    2092:	b7 01       	movw	r22, r14
    2094:	0e 94 a4 14 	call	0x2948	; 0x2948 <__floatsisf>
    2098:	69 87       	std	Y+9, r22	; 0x09
    209a:	7a 87       	std	Y+10, r23	; 0x0a
    209c:	8b 87       	std	Y+11, r24	; 0x0b
    209e:	9c 87       	std	Y+12, r25	; 0x0c
    20a0:	8e 01       	movw	r16, r28
    20a2:	0f 5f       	subi	r16, 0xFF	; 255
    20a4:	1f 4f       	sbci	r17, 0xFF	; 255

	for(i=0;i<3;++i){
    20a6:	ee 24       	eor	r14, r14
		
		V[i]=V[i]*0.2728;
    20a8:	f8 01       	movw	r30, r16
    20aa:	60 81       	ld	r22, Z
    20ac:	71 81       	ldd	r23, Z+1	; 0x01
    20ae:	82 81       	ldd	r24, Z+2	; 0x02
    20b0:	93 81       	ldd	r25, Z+3	; 0x03
    20b2:	21 e7       	ldi	r18, 0x71	; 113
    20b4:	3c ea       	ldi	r19, 0xAC	; 172
    20b6:	4b e8       	ldi	r20, 0x8B	; 139
    20b8:	5e e3       	ldi	r21, 0x3E	; 62
    20ba:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
    20be:	9b 01       	movw	r18, r22
    20c0:	ac 01       	movw	r20, r24
    20c2:	f8 01       	movw	r30, r16
    20c4:	21 93       	st	Z+, r18
    20c6:	31 93       	st	Z+, r19
    20c8:	41 93       	st	Z+, r20
    20ca:	51 93       	st	Z+, r21
    20cc:	8f 01       	movw	r16, r30

		SetVelocity(i, V[i]*65536);
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e8       	ldi	r20, 0x80	; 128
    20d4:	57 e4       	ldi	r21, 0x47	; 71
    20d6:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__mulsf3>
    20da:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__fixsfsi>
    20de:	ab 01       	movw	r20, r22
    20e0:	bc 01       	movw	r22, r24
    20e2:	8e 2d       	mov	r24, r14
    20e4:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <SetVelocity>
void MOTOR_CTR(long MT0,long MT1,long MT2){
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};

	for(i=0;i<3;++i){
    20e8:	e3 94       	inc	r14
    20ea:	fe 2d       	mov	r31, r14
    20ec:	f3 30       	cpi	r31, 0x03	; 3
    20ee:	e1 f6       	brne	.-72     	; 0x20a8 <MOTOR_CTR+0x5c>
		
		V[i]=V[i]*0.2728;

		SetVelocity(i, V[i]*65536);
	}
	StartMotion();	
    20f0:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <StartMotion>
}
    20f4:	2c 96       	adiw	r28, 0x0c	; 12
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	de bf       	out	0x3e, r29	; 62
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	cd bf       	out	0x3d, r28	; 61
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	1f 91       	pop	r17
    2106:	0f 91       	pop	r16
    2108:	ff 90       	pop	r15
    210a:	ef 90       	pop	r14
    210c:	df 90       	pop	r13
    210e:	cf 90       	pop	r12
    2110:	bf 90       	pop	r11
    2112:	af 90       	pop	r10
    2114:	08 95       	ret

00002116 <Camera_init>:


void Camera_init(void){
	unsigned char buff=0;
	while(1){	//우선순위 큰것부터
		putchar1(11);
    2116:	8b e0       	ldi	r24, 0x0B	; 11
    2118:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		while(!rx1_flg); 
    211c:	80 91 c0 02 	lds	r24, 0x02C0
    2120:	88 23       	and	r24, r24
    2122:	e1 f3       	breq	.-8      	; 0x211c <Camera_init+0x6>
		buff=getchar1();
    2124:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
		if(buff){
    2128:	88 23       	and	r24, r24
    212a:	a9 f3       	breq	.-22     	; 0x2116 <Camera_init>
			buff=0;
			break;
		}
	}
	while(1){	//추적 할 최소 픽셀수  255픽셀
		putchar1(17);
    212c:	81 e1       	ldi	r24, 0x11	; 17
    212e:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		putchar1(255);
    2132:	8f ef       	ldi	r24, 0xFF	; 255
    2134:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		while(!rx1_flg);
    2138:	80 91 c0 02 	lds	r24, 0x02C0
    213c:	88 23       	and	r24, r24
    213e:	e1 f3       	breq	.-8      	; 0x2138 <Camera_init+0x22>
		buff=getchar1();
    2140:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
		if(buff)break;
    2144:	88 23       	and	r24, r24
    2146:	91 f3       	breq	.-28     	; 0x212c <Camera_init+0x16>
	}
}
    2148:	08 95       	ret

0000214a <Camera_Cmd>:

unsigned char Camera_Cmd(unsigned char color, unsigned char cmd){
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	00 d0       	rcall	.+0      	; 0x2150 <Camera_Cmd+0x6>
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
	
	volatile unsigned char buff=0, data=0;
    2154:	19 82       	std	Y+1, r1	; 0x01
    2156:	1a 82       	std	Y+2, r1	; 0x02
	
	data=cmd+(color*10);
    2158:	88 0f       	add	r24, r24
    215a:	98 2f       	mov	r25, r24
    215c:	99 0f       	add	r25, r25
    215e:	99 0f       	add	r25, r25
    2160:	98 0f       	add	r25, r24
    2162:	69 0f       	add	r22, r25
    2164:	6a 83       	std	Y+2, r22	; 0x02

	putchar1(data);
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
	while(!rx1_flg);
    216c:	80 91 c0 02 	lds	r24, 0x02C0
    2170:	88 23       	and	r24, r24
    2172:	e1 f3       	breq	.-8      	; 0x216c <Camera_Cmd+0x22>
	buff=getchar1();
    2174:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
    2178:	89 83       	std	Y+1, r24	; 0x01
	
	return buff;
    217a:	89 81       	ldd	r24, Y+1	; 0x01
}
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <Sensor_init>:
// Function  : IR, PSD 센서를 초기화
// Parameter : 없음
// Return    : 없음
void Sensor_init(void)
{
    DDRE  &= ~0x1C;
    2186:	82 b1       	in	r24, 0x02	; 2
    2188:	83 7e       	andi	r24, 0xE3	; 227
    218a:	82 b9       	out	0x02, r24	; 2
    DDRG  &= ~0x18;
    218c:	e4 e6       	ldi	r30, 0x64	; 100
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	87 7e       	andi	r24, 0xE7	; 231
    2194:	80 83       	st	Z, r24

    UCSR0A = 0x00;
    2196:	1b b8       	out	0x0b, r1	; 11
    UCSR0B = 0x98;
    2198:	88 e9       	ldi	r24, 0x98	; 152
    219a:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = 0x06;
    219c:	86 e0       	ldi	r24, 0x06	; 6
    219e:	80 93 95 00 	sts	0x0095, r24
    UBRR0H = 0x00;
    21a2:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 0x0F;
    21a6:	8f e0       	ldi	r24, 0x0F	; 15
    21a8:	89 b9       	out	0x09, r24	; 9

    sei();
    21aa:	78 94       	sei
}
    21ac:	08 95       	ret

000021ae <__vector_18>:

// Function  : USART를 통해 전송되는 PSD 센서값을 전역변수에 저장하는 ISR
// Parameter : 없음
// Return    : 없음
ISR(USART0_RX_vect)
{
    21ae:	1f 92       	push	r1
    21b0:	0f 92       	push	r0
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	0f 92       	push	r0
    21b6:	0b b6       	in	r0, 0x3b	; 59
    21b8:	0f 92       	push	r0
    21ba:	11 24       	eor	r1, r1
    21bc:	2f 93       	push	r18
    21be:	3f 93       	push	r19
    21c0:	8f 93       	push	r24
    21c2:	9f 93       	push	r25
    21c4:	ef 93       	push	r30
    21c6:	ff 93       	push	r31
    volatile static unsigned char rx_cnt = 0;
    volatile static unsigned char chksum = 0;
    volatile static unsigned char buf[11] = {0, };
    uint8_t rxbuf = 0, i;

    rxbuf = UDR0;
    21c8:	9c b1       	in	r25, 0x0c	; 12
    //수신완료 및 에러 검출되지 않을시
    while(!(UCSR0A & 0xB8));
    21ca:	8b b1       	in	r24, 0x0b	; 11
    21cc:	88 7b       	andi	r24, 0xB8	; 184
    21ce:	e9 f3       	breq	.-6      	; 0x21ca <__vector_18+0x1c>

    if(rxbuf == 0xFF)
    21d0:	9f 3f       	cpi	r25, 0xFF	; 255
    21d2:	21 f4       	brne	.+8      	; 0x21dc <__vector_18+0x2e>
    {
        //시작 버퍼 수신
        rx_en = 1;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	80 93 fd 02 	sts	0x02FD, r24
    21da:	47 c0       	rjmp	.+142    	; 0x226a <__vector_18+0xbc>
    }
    else if(rx_en == 1)
    21dc:	80 91 fd 02 	lds	r24, 0x02FD
    21e0:	81 30       	cpi	r24, 0x01	; 1
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <__vector_18+0x38>
    21e4:	42 c0       	rjmp	.+132    	; 0x226a <__vector_18+0xbc>
    {
        //데이터 받기
        //0번지부터 PSD0 저장
        buf[rx_cnt++] = rxbuf;
    21e6:	80 91 fc 02 	lds	r24, 0x02FC
    21ea:	e8 2f       	mov	r30, r24
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	e0 51       	subi	r30, 0x10	; 16
    21f0:	fd 4f       	sbci	r31, 0xFD	; 253
    21f2:	90 83       	st	Z, r25
    21f4:	8f 5f       	subi	r24, 0xFF	; 255
    21f6:	80 93 fc 02 	sts	0x02FC, r24

        if(rx_cnt > 10)
    21fa:	80 91 fc 02 	lds	r24, 0x02FC
    21fe:	8b 30       	cpi	r24, 0x0B	; 11
    2200:	a0 f1       	brcs	.+104    	; 0x226a <__vector_18+0xbc>
        {
            // PSD 10개, 체크섬 1개 수신 완료되면
            //플래그 리셋
            rx_en = rx_cnt = 0;
    2202:	10 92 fc 02 	sts	0x02FC, r1
    2206:	80 91 fc 02 	lds	r24, 0x02FC
    220a:	80 93 fd 02 	sts	0x02FD, r24
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	90 e0       	ldi	r25, 0x00	; 0

            // 체크섬 계산
            for(i = 0 ; i < 10 ; i++)
                chksum += buf[i];
    2212:	30 91 fb 02 	lds	r19, 0x02FB
    2216:	fc 01       	movw	r30, r24
    2218:	e0 51       	subi	r30, 0x10	; 16
    221a:	fd 4f       	sbci	r31, 0xFD	; 253
    221c:	20 81       	ld	r18, Z
    221e:	23 0f       	add	r18, r19
    2220:	20 93 fb 02 	sts	0x02FB, r18
    2224:	01 96       	adiw	r24, 0x01	; 1
            // PSD 10개, 체크섬 1개 수신 완료되면
            //플래그 리셋
            rx_en = rx_cnt = 0;

            // 체크섬 계산
            for(i = 0 ; i < 10 ; i++)
    2226:	8a 30       	cpi	r24, 0x0A	; 10
    2228:	91 05       	cpc	r25, r1
    222a:	99 f7       	brne	.-26     	; 0x2212 <__vector_18+0x64>
                chksum += buf[i];

            //00~FE 이므로 FF나오면 +1 (오류방지)
            if(chksum == 0xFF)chksum++;
    222c:	80 91 fb 02 	lds	r24, 0x02FB
    2230:	8f 3f       	cpi	r24, 0xFF	; 255
    2232:	29 f4       	brne	.+10     	; 0x223e <__vector_18+0x90>
    2234:	80 91 fb 02 	lds	r24, 0x02FB
    2238:	8f 5f       	subi	r24, 0xFF	; 255
    223a:	80 93 fb 02 	sts	0x02FB, r24

            // 체크섬이 올바른지 체크 후 맞으면 전역변수로 이동
            if(chksum == buf[10])
    223e:	90 91 fb 02 	lds	r25, 0x02FB
    2242:	80 91 fa 02 	lds	r24, 0x02FA
    2246:	98 17       	cp	r25, r24
    2248:	71 f4       	brne	.+28     	; 0x2266 <__vector_18+0xb8>
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	90 e0       	ldi	r25, 0x00	; 0
                for(i = 0 ; i < 10 ; i++)
                    psd_value[i] = buf[i];
    224e:	fc 01       	movw	r30, r24
    2250:	e0 51       	subi	r30, 0x10	; 16
    2252:	fd 4f       	sbci	r31, 0xFD	; 253
    2254:	20 81       	ld	r18, Z
    2256:	fc 01       	movw	r30, r24
    2258:	ee 5f       	subi	r30, 0xFE	; 254
    225a:	fc 4f       	sbci	r31, 0xFC	; 252
    225c:	20 83       	st	Z, r18
    225e:	01 96       	adiw	r24, 0x01	; 1
            //00~FE 이므로 FF나오면 +1 (오류방지)
            if(chksum == 0xFF)chksum++;

            // 체크섬이 올바른지 체크 후 맞으면 전역변수로 이동
            if(chksum == buf[10])
                for(i = 0 ; i < 10 ; i++)
    2260:	8a 30       	cpi	r24, 0x0A	; 10
    2262:	91 05       	cpc	r25, r1
    2264:	a1 f7       	brne	.-24     	; 0x224e <__vector_18+0xa0>
                    psd_value[i] = buf[i];

            //체크섬 리셋
            chksum = 0;
    2266:	10 92 fb 02 	sts	0x02FB, r1
    	}
    }
}
    226a:	ff 91       	pop	r31
    226c:	ef 91       	pop	r30
    226e:	9f 91       	pop	r25
    2270:	8f 91       	pop	r24
    2272:	3f 91       	pop	r19
    2274:	2f 91       	pop	r18
    2276:	0f 90       	pop	r0
    2278:	0b be       	out	0x3b, r0	; 59
    227a:	0f 90       	pop	r0
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	0f 90       	pop	r0
    2280:	1f 90       	pop	r1
    2282:	18 95       	reti

00002284 <_fpadd_parts>:
    2284:	a0 e0       	ldi	r26, 0x00	; 0
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e8 e4       	ldi	r30, 0x48	; 72
    228a:	f1 e1       	ldi	r31, 0x11	; 17
    228c:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__prologue_saves__+0x8>
    2290:	fc 01       	movw	r30, r24
    2292:	ea 01       	movw	r28, r20
    2294:	80 81       	ld	r24, Z
    2296:	82 30       	cpi	r24, 0x02	; 2
    2298:	08 f4       	brcc	.+2      	; 0x229c <_fpadd_parts+0x18>
    229a:	38 c1       	rjmp	.+624    	; 0x250c <_fpadd_parts+0x288>
    229c:	db 01       	movw	r26, r22
    229e:	9c 91       	ld	r25, X
    22a0:	92 30       	cpi	r25, 0x02	; 2
    22a2:	08 f4       	brcc	.+2      	; 0x22a6 <_fpadd_parts+0x22>
    22a4:	30 c1       	rjmp	.+608    	; 0x2506 <_fpadd_parts+0x282>
    22a6:	84 30       	cpi	r24, 0x04	; 4
    22a8:	59 f4       	brne	.+22     	; 0x22c0 <_fpadd_parts+0x3c>
    22aa:	94 30       	cpi	r25, 0x04	; 4
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <_fpadd_parts+0x2c>
    22ae:	2e c1       	rjmp	.+604    	; 0x250c <_fpadd_parts+0x288>
    22b0:	91 81       	ldd	r25, Z+1	; 0x01
    22b2:	11 96       	adiw	r26, 0x01	; 1
    22b4:	8c 91       	ld	r24, X
    22b6:	11 97       	sbiw	r26, 0x01	; 1
    22b8:	98 17       	cp	r25, r24
    22ba:	09 f0       	breq	.+2      	; 0x22be <_fpadd_parts+0x3a>
    22bc:	21 c1       	rjmp	.+578    	; 0x2500 <_fpadd_parts+0x27c>
    22be:	26 c1       	rjmp	.+588    	; 0x250c <_fpadd_parts+0x288>
    22c0:	94 30       	cpi	r25, 0x04	; 4
    22c2:	09 f4       	brne	.+2      	; 0x22c6 <_fpadd_parts+0x42>
    22c4:	20 c1       	rjmp	.+576    	; 0x2506 <_fpadd_parts+0x282>
    22c6:	92 30       	cpi	r25, 0x02	; 2
    22c8:	b1 f4       	brne	.+44     	; 0x22f6 <_fpadd_parts+0x72>
    22ca:	82 30       	cpi	r24, 0x02	; 2
    22cc:	09 f0       	breq	.+2      	; 0x22d0 <_fpadd_parts+0x4c>
    22ce:	1e c1       	rjmp	.+572    	; 0x250c <_fpadd_parts+0x288>
    22d0:	ca 01       	movw	r24, r20
    22d2:	af 01       	movw	r20, r30
    22d4:	28 e0       	ldi	r18, 0x08	; 8
    22d6:	da 01       	movw	r26, r20
    22d8:	0d 90       	ld	r0, X+
    22da:	ad 01       	movw	r20, r26
    22dc:	dc 01       	movw	r26, r24
    22de:	0d 92       	st	X+, r0
    22e0:	cd 01       	movw	r24, r26
    22e2:	21 50       	subi	r18, 0x01	; 1
    22e4:	c1 f7       	brne	.-16     	; 0x22d6 <_fpadd_parts+0x52>
    22e6:	db 01       	movw	r26, r22
    22e8:	11 96       	adiw	r26, 0x01	; 1
    22ea:	8c 91       	ld	r24, X
    22ec:	11 97       	sbiw	r26, 0x01	; 1
    22ee:	91 81       	ldd	r25, Z+1	; 0x01
    22f0:	89 23       	and	r24, r25
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	0a c1       	rjmp	.+532    	; 0x250a <_fpadd_parts+0x286>
    22f6:	82 30       	cpi	r24, 0x02	; 2
    22f8:	09 f4       	brne	.+2      	; 0x22fc <_fpadd_parts+0x78>
    22fa:	05 c1       	rjmp	.+522    	; 0x2506 <_fpadd_parts+0x282>
    22fc:	c2 80       	ldd	r12, Z+2	; 0x02
    22fe:	d3 80       	ldd	r13, Z+3	; 0x03
    2300:	db 01       	movw	r26, r22
    2302:	12 96       	adiw	r26, 0x02	; 2
    2304:	6d 90       	ld	r6, X+
    2306:	7c 90       	ld	r7, X
    2308:	13 97       	sbiw	r26, 0x03	; 3
    230a:	24 81       	ldd	r18, Z+4	; 0x04
    230c:	35 81       	ldd	r19, Z+5	; 0x05
    230e:	46 81       	ldd	r20, Z+6	; 0x06
    2310:	57 81       	ldd	r21, Z+7	; 0x07
    2312:	14 96       	adiw	r26, 0x04	; 4
    2314:	ed 90       	ld	r14, X+
    2316:	fd 90       	ld	r15, X+
    2318:	0d 91       	ld	r16, X+
    231a:	1c 91       	ld	r17, X
    231c:	17 97       	sbiw	r26, 0x07	; 7
    231e:	c6 01       	movw	r24, r12
    2320:	86 19       	sub	r24, r6
    2322:	97 09       	sbc	r25, r7
    2324:	5c 01       	movw	r10, r24
    2326:	97 ff       	sbrs	r25, 7
    2328:	04 c0       	rjmp	.+8      	; 0x2332 <_fpadd_parts+0xae>
    232a:	aa 24       	eor	r10, r10
    232c:	bb 24       	eor	r11, r11
    232e:	a8 1a       	sub	r10, r24
    2330:	b9 0a       	sbc	r11, r25
    2332:	b0 e2       	ldi	r27, 0x20	; 32
    2334:	ab 16       	cp	r10, r27
    2336:	b1 04       	cpc	r11, r1
    2338:	0c f0       	brlt	.+2      	; 0x233c <_fpadd_parts+0xb8>
    233a:	61 c0       	rjmp	.+194    	; 0x23fe <_fpadd_parts+0x17a>
    233c:	18 16       	cp	r1, r24
    233e:	19 06       	cpc	r1, r25
    2340:	6c f5       	brge	.+90     	; 0x239c <_fpadd_parts+0x118>
    2342:	37 01       	movw	r6, r14
    2344:	48 01       	movw	r8, r16
    2346:	0a 2c       	mov	r0, r10
    2348:	04 c0       	rjmp	.+8      	; 0x2352 <_fpadd_parts+0xce>
    234a:	96 94       	lsr	r9
    234c:	87 94       	ror	r8
    234e:	77 94       	ror	r7
    2350:	67 94       	ror	r6
    2352:	0a 94       	dec	r0
    2354:	d2 f7       	brpl	.-12     	; 0x234a <_fpadd_parts+0xc6>
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	a0 e0       	ldi	r26, 0x00	; 0
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	0a 2c       	mov	r0, r10
    2360:	04 c0       	rjmp	.+8      	; 0x236a <_fpadd_parts+0xe6>
    2362:	88 0f       	add	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	aa 1f       	adc	r26, r26
    2368:	bb 1f       	adc	r27, r27
    236a:	0a 94       	dec	r0
    236c:	d2 f7       	brpl	.-12     	; 0x2362 <_fpadd_parts+0xde>
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	a1 09       	sbc	r26, r1
    2372:	b1 09       	sbc	r27, r1
    2374:	8e 21       	and	r24, r14
    2376:	9f 21       	and	r25, r15
    2378:	a0 23       	and	r26, r16
    237a:	b1 23       	and	r27, r17
    237c:	ee 24       	eor	r14, r14
    237e:	ff 24       	eor	r15, r15
    2380:	87 01       	movw	r16, r14
    2382:	e3 94       	inc	r14
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	a1 05       	cpc	r26, r1
    2388:	b1 05       	cpc	r27, r1
    238a:	19 f4       	brne	.+6      	; 0x2392 <_fpadd_parts+0x10e>
    238c:	ee 24       	eor	r14, r14
    238e:	ff 24       	eor	r15, r15
    2390:	87 01       	movw	r16, r14
    2392:	e6 28       	or	r14, r6
    2394:	f7 28       	or	r15, r7
    2396:	08 29       	or	r16, r8
    2398:	19 29       	or	r17, r9
    239a:	3c c0       	rjmp	.+120    	; 0x2414 <_fpadd_parts+0x190>
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	d1 f1       	breq	.+116    	; 0x2414 <_fpadd_parts+0x190>
    23a0:	ca 0c       	add	r12, r10
    23a2:	db 1c       	adc	r13, r11
    23a4:	39 01       	movw	r6, r18
    23a6:	4a 01       	movw	r8, r20
    23a8:	0a 2c       	mov	r0, r10
    23aa:	04 c0       	rjmp	.+8      	; 0x23b4 <_fpadd_parts+0x130>
    23ac:	96 94       	lsr	r9
    23ae:	87 94       	ror	r8
    23b0:	77 94       	ror	r7
    23b2:	67 94       	ror	r6
    23b4:	0a 94       	dec	r0
    23b6:	d2 f7       	brpl	.-12     	; 0x23ac <_fpadd_parts+0x128>
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	a0 e0       	ldi	r26, 0x00	; 0
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	0a 2c       	mov	r0, r10
    23c2:	04 c0       	rjmp	.+8      	; 0x23cc <_fpadd_parts+0x148>
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	aa 1f       	adc	r26, r26
    23ca:	bb 1f       	adc	r27, r27
    23cc:	0a 94       	dec	r0
    23ce:	d2 f7       	brpl	.-12     	; 0x23c4 <_fpadd_parts+0x140>
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	a1 09       	sbc	r26, r1
    23d4:	b1 09       	sbc	r27, r1
    23d6:	82 23       	and	r24, r18
    23d8:	93 23       	and	r25, r19
    23da:	a4 23       	and	r26, r20
    23dc:	b5 23       	and	r27, r21
    23de:	21 e0       	ldi	r18, 0x01	; 1
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e0       	ldi	r20, 0x00	; 0
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	a1 05       	cpc	r26, r1
    23ea:	b1 05       	cpc	r27, r1
    23ec:	19 f4       	brne	.+6      	; 0x23f4 <_fpadd_parts+0x170>
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	a9 01       	movw	r20, r18
    23f4:	26 29       	or	r18, r6
    23f6:	37 29       	or	r19, r7
    23f8:	48 29       	or	r20, r8
    23fa:	59 29       	or	r21, r9
    23fc:	0b c0       	rjmp	.+22     	; 0x2414 <_fpadd_parts+0x190>
    23fe:	6c 14       	cp	r6, r12
    2400:	7d 04       	cpc	r7, r13
    2402:	24 f4       	brge	.+8      	; 0x240c <_fpadd_parts+0x188>
    2404:	ee 24       	eor	r14, r14
    2406:	ff 24       	eor	r15, r15
    2408:	87 01       	movw	r16, r14
    240a:	04 c0       	rjmp	.+8      	; 0x2414 <_fpadd_parts+0x190>
    240c:	63 01       	movw	r12, r6
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	a9 01       	movw	r20, r18
    2414:	81 81       	ldd	r24, Z+1	; 0x01
    2416:	fb 01       	movw	r30, r22
    2418:	91 81       	ldd	r25, Z+1	; 0x01
    241a:	89 17       	cp	r24, r25
    241c:	09 f4       	brne	.+2      	; 0x2420 <_fpadd_parts+0x19c>
    241e:	45 c0       	rjmp	.+138    	; 0x24aa <_fpadd_parts+0x226>
    2420:	88 23       	and	r24, r24
    2422:	49 f0       	breq	.+18     	; 0x2436 <_fpadd_parts+0x1b2>
    2424:	d8 01       	movw	r26, r16
    2426:	c7 01       	movw	r24, r14
    2428:	82 1b       	sub	r24, r18
    242a:	93 0b       	sbc	r25, r19
    242c:	a4 0b       	sbc	r26, r20
    242e:	b5 0b       	sbc	r27, r21
    2430:	9c 01       	movw	r18, r24
    2432:	ad 01       	movw	r20, r26
    2434:	04 c0       	rjmp	.+8      	; 0x243e <_fpadd_parts+0x1ba>
    2436:	2e 19       	sub	r18, r14
    2438:	3f 09       	sbc	r19, r15
    243a:	40 0b       	sbc	r20, r16
    243c:	51 0b       	sbc	r21, r17
    243e:	57 fd       	sbrc	r21, 7
    2440:	04 c0       	rjmp	.+8      	; 0x244a <_fpadd_parts+0x1c6>
    2442:	19 82       	std	Y+1, r1	; 0x01
    2444:	db 82       	std	Y+3, r13	; 0x03
    2446:	ca 82       	std	Y+2, r12	; 0x02
    2448:	0b c0       	rjmp	.+22     	; 0x2460 <_fpadd_parts+0x1dc>
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	db 82       	std	Y+3, r13	; 0x03
    2450:	ca 82       	std	Y+2, r12	; 0x02
    2452:	50 95       	com	r21
    2454:	40 95       	com	r20
    2456:	30 95       	com	r19
    2458:	21 95       	neg	r18
    245a:	3f 4f       	sbci	r19, 0xFF	; 255
    245c:	4f 4f       	sbci	r20, 0xFF	; 255
    245e:	5f 4f       	sbci	r21, 0xFF	; 255
    2460:	2c 83       	std	Y+4, r18	; 0x04
    2462:	3d 83       	std	Y+5, r19	; 0x05
    2464:	4e 83       	std	Y+6, r20	; 0x06
    2466:	5f 83       	std	Y+7, r21	; 0x07
    2468:	0d c0       	rjmp	.+26     	; 0x2484 <_fpadd_parts+0x200>
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	aa 1f       	adc	r26, r26
    2470:	bb 1f       	adc	r27, r27
    2472:	8c 83       	std	Y+4, r24	; 0x04
    2474:	9d 83       	std	Y+5, r25	; 0x05
    2476:	ae 83       	std	Y+6, r26	; 0x06
    2478:	bf 83       	std	Y+7, r27	; 0x07
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	9b 81       	ldd	r25, Y+3	; 0x03
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	9b 83       	std	Y+3, r25	; 0x03
    2482:	8a 83       	std	Y+2, r24	; 0x02
    2484:	8c 81       	ldd	r24, Y+4	; 0x04
    2486:	9d 81       	ldd	r25, Y+5	; 0x05
    2488:	ae 81       	ldd	r26, Y+6	; 0x06
    248a:	bf 81       	ldd	r27, Y+7	; 0x07
    248c:	9c 01       	movw	r18, r24
    248e:	ad 01       	movw	r20, r26
    2490:	21 50       	subi	r18, 0x01	; 1
    2492:	30 40       	sbci	r19, 0x00	; 0
    2494:	40 40       	sbci	r20, 0x00	; 0
    2496:	50 40       	sbci	r21, 0x00	; 0
    2498:	2f 3f       	cpi	r18, 0xFF	; 255
    249a:	ef ef       	ldi	r30, 0xFF	; 255
    249c:	3e 07       	cpc	r19, r30
    249e:	ef ef       	ldi	r30, 0xFF	; 255
    24a0:	4e 07       	cpc	r20, r30
    24a2:	ef e3       	ldi	r30, 0x3F	; 63
    24a4:	5e 07       	cpc	r21, r30
    24a6:	08 f3       	brcs	.-62     	; 0x246a <_fpadd_parts+0x1e6>
    24a8:	0b c0       	rjmp	.+22     	; 0x24c0 <_fpadd_parts+0x23c>
    24aa:	89 83       	std	Y+1, r24	; 0x01
    24ac:	db 82       	std	Y+3, r13	; 0x03
    24ae:	ca 82       	std	Y+2, r12	; 0x02
    24b0:	2e 0d       	add	r18, r14
    24b2:	3f 1d       	adc	r19, r15
    24b4:	40 1f       	adc	r20, r16
    24b6:	51 1f       	adc	r21, r17
    24b8:	2c 83       	std	Y+4, r18	; 0x04
    24ba:	3d 83       	std	Y+5, r19	; 0x05
    24bc:	4e 83       	std	Y+6, r20	; 0x06
    24be:	5f 83       	std	Y+7, r21	; 0x07
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	88 83       	st	Y, r24
    24c4:	2c 81       	ldd	r18, Y+4	; 0x04
    24c6:	3d 81       	ldd	r19, Y+5	; 0x05
    24c8:	4e 81       	ldd	r20, Y+6	; 0x06
    24ca:	5f 81       	ldd	r21, Y+7	; 0x07
    24cc:	57 ff       	sbrs	r21, 7
    24ce:	1d c0       	rjmp	.+58     	; 0x250a <_fpadd_parts+0x286>
    24d0:	da 01       	movw	r26, r20
    24d2:	c9 01       	movw	r24, r18
    24d4:	81 70       	andi	r24, 0x01	; 1
    24d6:	90 70       	andi	r25, 0x00	; 0
    24d8:	a0 70       	andi	r26, 0x00	; 0
    24da:	b0 70       	andi	r27, 0x00	; 0
    24dc:	56 95       	lsr	r21
    24de:	47 95       	ror	r20
    24e0:	37 95       	ror	r19
    24e2:	27 95       	ror	r18
    24e4:	82 2b       	or	r24, r18
    24e6:	93 2b       	or	r25, r19
    24e8:	a4 2b       	or	r26, r20
    24ea:	b5 2b       	or	r27, r21
    24ec:	8c 83       	std	Y+4, r24	; 0x04
    24ee:	9d 83       	std	Y+5, r25	; 0x05
    24f0:	ae 83       	std	Y+6, r26	; 0x06
    24f2:	bf 83       	std	Y+7, r27	; 0x07
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	9b 81       	ldd	r25, Y+3	; 0x03
    24f8:	01 96       	adiw	r24, 0x01	; 1
    24fa:	9b 83       	std	Y+3, r25	; 0x03
    24fc:	8a 83       	std	Y+2, r24	; 0x02
    24fe:	05 c0       	rjmp	.+10     	; 0x250a <_fpadd_parts+0x286>
    2500:	e8 eb       	ldi	r30, 0xB8	; 184
    2502:	f1 e0       	ldi	r31, 0x01	; 1
    2504:	03 c0       	rjmp	.+6      	; 0x250c <_fpadd_parts+0x288>
    2506:	fb 01       	movw	r30, r22
    2508:	01 c0       	rjmp	.+2      	; 0x250c <_fpadd_parts+0x288>
    250a:	fe 01       	movw	r30, r28
    250c:	cf 01       	movw	r24, r30
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	ee e0       	ldi	r30, 0x0E	; 14
    2514:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__epilogue_restores__+0x8>

00002518 <__addsf3>:
    2518:	a0 e2       	ldi	r26, 0x20	; 32
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	e2 e9       	ldi	r30, 0x92	; 146
    251e:	f2 e1       	ldi	r31, 0x12	; 18
    2520:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__prologue_saves__+0x18>
    2524:	69 83       	std	Y+1, r22	; 0x01
    2526:	7a 83       	std	Y+2, r23	; 0x02
    2528:	8b 83       	std	Y+3, r24	; 0x03
    252a:	9c 83       	std	Y+4, r25	; 0x04
    252c:	2d 83       	std	Y+5, r18	; 0x05
    252e:	3e 83       	std	Y+6, r19	; 0x06
    2530:	4f 83       	std	Y+7, r20	; 0x07
    2532:	58 87       	std	Y+8, r21	; 0x08
    2534:	89 e0       	ldi	r24, 0x09	; 9
    2536:	e8 2e       	mov	r14, r24
    2538:	f1 2c       	mov	r15, r1
    253a:	ec 0e       	add	r14, r28
    253c:	fd 1e       	adc	r15, r29
    253e:	ce 01       	movw	r24, r28
    2540:	01 96       	adiw	r24, 0x01	; 1
    2542:	b7 01       	movw	r22, r14
    2544:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__unpack_f>
    2548:	8e 01       	movw	r16, r28
    254a:	0f 5e       	subi	r16, 0xEF	; 239
    254c:	1f 4f       	sbci	r17, 0xFF	; 255
    254e:	ce 01       	movw	r24, r28
    2550:	05 96       	adiw	r24, 0x05	; 5
    2552:	b8 01       	movw	r22, r16
    2554:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__unpack_f>
    2558:	c7 01       	movw	r24, r14
    255a:	b8 01       	movw	r22, r16
    255c:	ae 01       	movw	r20, r28
    255e:	47 5e       	subi	r20, 0xE7	; 231
    2560:	5f 4f       	sbci	r21, 0xFF	; 255
    2562:	0e 94 42 11 	call	0x2284	; 0x2284 <_fpadd_parts>
    2566:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__pack_f>
    256a:	a0 96       	adiw	r28, 0x20	; 32
    256c:	e6 e0       	ldi	r30, 0x06	; 6
    256e:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__epilogue_restores__+0x18>

00002572 <__subsf3>:
    2572:	a0 e2       	ldi	r26, 0x20	; 32
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	ef eb       	ldi	r30, 0xBF	; 191
    2578:	f2 e1       	ldi	r31, 0x12	; 18
    257a:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__prologue_saves__+0x18>
    257e:	69 83       	std	Y+1, r22	; 0x01
    2580:	7a 83       	std	Y+2, r23	; 0x02
    2582:	8b 83       	std	Y+3, r24	; 0x03
    2584:	9c 83       	std	Y+4, r25	; 0x04
    2586:	2d 83       	std	Y+5, r18	; 0x05
    2588:	3e 83       	std	Y+6, r19	; 0x06
    258a:	4f 83       	std	Y+7, r20	; 0x07
    258c:	58 87       	std	Y+8, r21	; 0x08
    258e:	8e 01       	movw	r16, r28
    2590:	07 5f       	subi	r16, 0xF7	; 247
    2592:	1f 4f       	sbci	r17, 0xFF	; 255
    2594:	ce 01       	movw	r24, r28
    2596:	01 96       	adiw	r24, 0x01	; 1
    2598:	b8 01       	movw	r22, r16
    259a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__unpack_f>
    259e:	91 e1       	ldi	r25, 0x11	; 17
    25a0:	e9 2e       	mov	r14, r25
    25a2:	f1 2c       	mov	r15, r1
    25a4:	ec 0e       	add	r14, r28
    25a6:	fd 1e       	adc	r15, r29
    25a8:	ce 01       	movw	r24, r28
    25aa:	05 96       	adiw	r24, 0x05	; 5
    25ac:	b7 01       	movw	r22, r14
    25ae:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__unpack_f>
    25b2:	8a 89       	ldd	r24, Y+18	; 0x12
    25b4:	91 e0       	ldi	r25, 0x01	; 1
    25b6:	89 27       	eor	r24, r25
    25b8:	8a 8b       	std	Y+18, r24	; 0x12
    25ba:	c8 01       	movw	r24, r16
    25bc:	b7 01       	movw	r22, r14
    25be:	ae 01       	movw	r20, r28
    25c0:	47 5e       	subi	r20, 0xE7	; 231
    25c2:	5f 4f       	sbci	r21, 0xFF	; 255
    25c4:	0e 94 42 11 	call	0x2284	; 0x2284 <_fpadd_parts>
    25c8:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__pack_f>
    25cc:	a0 96       	adiw	r28, 0x20	; 32
    25ce:	e6 e0       	ldi	r30, 0x06	; 6
    25d0:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__epilogue_restores__+0x18>

000025d4 <__mulsf3>:
    25d4:	a0 e2       	ldi	r26, 0x20	; 32
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	e0 ef       	ldi	r30, 0xF0	; 240
    25da:	f2 e1       	ldi	r31, 0x12	; 18
    25dc:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <__prologue_saves__>
    25e0:	69 83       	std	Y+1, r22	; 0x01
    25e2:	7a 83       	std	Y+2, r23	; 0x02
    25e4:	8b 83       	std	Y+3, r24	; 0x03
    25e6:	9c 83       	std	Y+4, r25	; 0x04
    25e8:	2d 83       	std	Y+5, r18	; 0x05
    25ea:	3e 83       	std	Y+6, r19	; 0x06
    25ec:	4f 83       	std	Y+7, r20	; 0x07
    25ee:	58 87       	std	Y+8, r21	; 0x08
    25f0:	ce 01       	movw	r24, r28
    25f2:	01 96       	adiw	r24, 0x01	; 1
    25f4:	be 01       	movw	r22, r28
    25f6:	67 5f       	subi	r22, 0xF7	; 247
    25f8:	7f 4f       	sbci	r23, 0xFF	; 255
    25fa:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__unpack_f>
    25fe:	ce 01       	movw	r24, r28
    2600:	05 96       	adiw	r24, 0x05	; 5
    2602:	be 01       	movw	r22, r28
    2604:	6f 5e       	subi	r22, 0xEF	; 239
    2606:	7f 4f       	sbci	r23, 0xFF	; 255
    2608:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__unpack_f>
    260c:	99 85       	ldd	r25, Y+9	; 0x09
    260e:	92 30       	cpi	r25, 0x02	; 2
    2610:	78 f0       	brcs	.+30     	; 0x2630 <__mulsf3+0x5c>
    2612:	89 89       	ldd	r24, Y+17	; 0x11
    2614:	82 30       	cpi	r24, 0x02	; 2
    2616:	c0 f0       	brcs	.+48     	; 0x2648 <__mulsf3+0x74>
    2618:	94 30       	cpi	r25, 0x04	; 4
    261a:	19 f4       	brne	.+6      	; 0x2622 <__mulsf3+0x4e>
    261c:	82 30       	cpi	r24, 0x02	; 2
    261e:	41 f4       	brne	.+16     	; 0x2630 <__mulsf3+0x5c>
    2620:	cb c0       	rjmp	.+406    	; 0x27b8 <__mulsf3+0x1e4>
    2622:	84 30       	cpi	r24, 0x04	; 4
    2624:	19 f4       	brne	.+6      	; 0x262c <__mulsf3+0x58>
    2626:	92 30       	cpi	r25, 0x02	; 2
    2628:	79 f4       	brne	.+30     	; 0x2648 <__mulsf3+0x74>
    262a:	c6 c0       	rjmp	.+396    	; 0x27b8 <__mulsf3+0x1e4>
    262c:	92 30       	cpi	r25, 0x02	; 2
    262e:	51 f4       	brne	.+20     	; 0x2644 <__mulsf3+0x70>
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	2a 85       	ldd	r18, Y+10	; 0x0a
    2634:	9a 89       	ldd	r25, Y+18	; 0x12
    2636:	29 17       	cp	r18, r25
    2638:	09 f4       	brne	.+2      	; 0x263c <__mulsf3+0x68>
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	8a 87       	std	Y+10, r24	; 0x0a
    263e:	ce 01       	movw	r24, r28
    2640:	09 96       	adiw	r24, 0x09	; 9
    2642:	bc c0       	rjmp	.+376    	; 0x27bc <__mulsf3+0x1e8>
    2644:	82 30       	cpi	r24, 0x02	; 2
    2646:	51 f4       	brne	.+20     	; 0x265c <__mulsf3+0x88>
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	2a 85       	ldd	r18, Y+10	; 0x0a
    264c:	9a 89       	ldd	r25, Y+18	; 0x12
    264e:	29 17       	cp	r18, r25
    2650:	09 f4       	brne	.+2      	; 0x2654 <__mulsf3+0x80>
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	8a 8b       	std	Y+18, r24	; 0x12
    2656:	ce 01       	movw	r24, r28
    2658:	41 96       	adiw	r24, 0x11	; 17
    265a:	b0 c0       	rjmp	.+352    	; 0x27bc <__mulsf3+0x1e8>
    265c:	6d 84       	ldd	r6, Y+13	; 0x0d
    265e:	7e 84       	ldd	r7, Y+14	; 0x0e
    2660:	8f 84       	ldd	r8, Y+15	; 0x0f
    2662:	98 88       	ldd	r9, Y+16	; 0x10
    2664:	ed 88       	ldd	r14, Y+21	; 0x15
    2666:	fe 88       	ldd	r15, Y+22	; 0x16
    2668:	0f 89       	ldd	r16, Y+23	; 0x17
    266a:	18 8d       	ldd	r17, Y+24	; 0x18
    266c:	e0 e2       	ldi	r30, 0x20	; 32
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	dc 01       	movw	r26, r24
    2676:	aa 24       	eor	r10, r10
    2678:	bb 24       	eor	r11, r11
    267a:	65 01       	movw	r12, r10
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	a9 01       	movw	r20, r18
    2682:	b3 01       	movw	r22, r6
    2684:	61 70       	andi	r22, 0x01	; 1
    2686:	70 70       	andi	r23, 0x00	; 0
    2688:	61 15       	cp	r22, r1
    268a:	71 05       	cpc	r23, r1
    268c:	d1 f0       	breq	.+52     	; 0x26c2 <__mulsf3+0xee>
    268e:	2e 0d       	add	r18, r14
    2690:	3f 1d       	adc	r19, r15
    2692:	40 1f       	adc	r20, r16
    2694:	51 1f       	adc	r21, r17
    2696:	15 01       	movw	r2, r10
    2698:	26 01       	movw	r4, r12
    269a:	28 0e       	add	r2, r24
    269c:	39 1e       	adc	r3, r25
    269e:	4a 1e       	adc	r4, r26
    26a0:	5b 1e       	adc	r5, r27
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	a0 e0       	ldi	r26, 0x00	; 0
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	2e 15       	cp	r18, r14
    26ac:	3f 05       	cpc	r19, r15
    26ae:	40 07       	cpc	r20, r16
    26b0:	51 07       	cpc	r21, r17
    26b2:	18 f0       	brcs	.+6      	; 0x26ba <__mulsf3+0xe6>
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	dc 01       	movw	r26, r24
    26ba:	82 0d       	add	r24, r2
    26bc:	93 1d       	adc	r25, r3
    26be:	a4 1d       	adc	r26, r4
    26c0:	b5 1d       	adc	r27, r5
    26c2:	aa 0c       	add	r10, r10
    26c4:	bb 1c       	adc	r11, r11
    26c6:	cc 1c       	adc	r12, r12
    26c8:	dd 1c       	adc	r13, r13
    26ca:	17 ff       	sbrs	r17, 7
    26cc:	09 c0       	rjmp	.+18     	; 0x26e0 <__mulsf3+0x10c>
    26ce:	61 e0       	ldi	r22, 0x01	; 1
    26d0:	26 2e       	mov	r2, r22
    26d2:	31 2c       	mov	r3, r1
    26d4:	41 2c       	mov	r4, r1
    26d6:	51 2c       	mov	r5, r1
    26d8:	a2 28       	or	r10, r2
    26da:	b3 28       	or	r11, r3
    26dc:	c4 28       	or	r12, r4
    26de:	d5 28       	or	r13, r5
    26e0:	31 97       	sbiw	r30, 0x01	; 1
    26e2:	49 f0       	breq	.+18     	; 0x26f6 <__mulsf3+0x122>
    26e4:	ee 0c       	add	r14, r14
    26e6:	ff 1c       	adc	r15, r15
    26e8:	00 1f       	adc	r16, r16
    26ea:	11 1f       	adc	r17, r17
    26ec:	96 94       	lsr	r9
    26ee:	87 94       	ror	r8
    26f0:	77 94       	ror	r7
    26f2:	67 94       	ror	r6
    26f4:	c6 cf       	rjmp	.-116    	; 0x2682 <__mulsf3+0xae>
    26f6:	6b 89       	ldd	r22, Y+19	; 0x13
    26f8:	7c 89       	ldd	r23, Y+20	; 0x14
    26fa:	eb 85       	ldd	r30, Y+11	; 0x0b
    26fc:	fc 85       	ldd	r31, Y+12	; 0x0c
    26fe:	6e 0f       	add	r22, r30
    2700:	7f 1f       	adc	r23, r31
    2702:	6e 5f       	subi	r22, 0xFE	; 254
    2704:	7f 4f       	sbci	r23, 0xFF	; 255
    2706:	7c 8f       	std	Y+28, r23	; 0x1c
    2708:	6b 8f       	std	Y+27, r22	; 0x1b
    270a:	61 e0       	ldi	r22, 0x01	; 1
    270c:	ea 85       	ldd	r30, Y+10	; 0x0a
    270e:	7a 89       	ldd	r23, Y+18	; 0x12
    2710:	e7 17       	cp	r30, r23
    2712:	09 f4       	brne	.+2      	; 0x2716 <__mulsf3+0x142>
    2714:	60 e0       	ldi	r22, 0x00	; 0
    2716:	6a 8f       	std	Y+26, r22	; 0x1a
    2718:	6b 8d       	ldd	r22, Y+27	; 0x1b
    271a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    271c:	10 c0       	rjmp	.+32     	; 0x273e <__mulsf3+0x16a>
    271e:	fc 01       	movw	r30, r24
    2720:	e1 70       	andi	r30, 0x01	; 1
    2722:	f0 70       	andi	r31, 0x00	; 0
    2724:	30 97       	sbiw	r30, 0x00	; 0
    2726:	29 f0       	breq	.+10     	; 0x2732 <__mulsf3+0x15e>
    2728:	56 95       	lsr	r21
    272a:	47 95       	ror	r20
    272c:	37 95       	ror	r19
    272e:	27 95       	ror	r18
    2730:	50 68       	ori	r21, 0x80	; 128
    2732:	b6 95       	lsr	r27
    2734:	a7 95       	ror	r26
    2736:	97 95       	ror	r25
    2738:	87 95       	ror	r24
    273a:	6f 5f       	subi	r22, 0xFF	; 255
    273c:	7f 4f       	sbci	r23, 0xFF	; 255
    273e:	b7 fd       	sbrc	r27, 7
    2740:	ee cf       	rjmp	.-36     	; 0x271e <__mulsf3+0x14a>
    2742:	0c c0       	rjmp	.+24     	; 0x275c <__mulsf3+0x188>
    2744:	88 0f       	add	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	aa 1f       	adc	r26, r26
    274a:	bb 1f       	adc	r27, r27
    274c:	57 fd       	sbrc	r21, 7
    274e:	81 60       	ori	r24, 0x01	; 1
    2750:	22 0f       	add	r18, r18
    2752:	33 1f       	adc	r19, r19
    2754:	44 1f       	adc	r20, r20
    2756:	55 1f       	adc	r21, r21
    2758:	61 50       	subi	r22, 0x01	; 1
    275a:	70 40       	sbci	r23, 0x00	; 0
    275c:	80 30       	cpi	r24, 0x00	; 0
    275e:	e0 e0       	ldi	r30, 0x00	; 0
    2760:	9e 07       	cpc	r25, r30
    2762:	e0 e0       	ldi	r30, 0x00	; 0
    2764:	ae 07       	cpc	r26, r30
    2766:	e0 e4       	ldi	r30, 0x40	; 64
    2768:	be 07       	cpc	r27, r30
    276a:	60 f3       	brcs	.-40     	; 0x2744 <__mulsf3+0x170>
    276c:	6b 8f       	std	Y+27, r22	; 0x1b
    276e:	7c 8f       	std	Y+28, r23	; 0x1c
    2770:	6f e7       	ldi	r22, 0x7F	; 127
    2772:	e6 2e       	mov	r14, r22
    2774:	f1 2c       	mov	r15, r1
    2776:	01 2d       	mov	r16, r1
    2778:	11 2d       	mov	r17, r1
    277a:	e8 22       	and	r14, r24
    277c:	f9 22       	and	r15, r25
    277e:	0a 23       	and	r16, r26
    2780:	1b 23       	and	r17, r27
    2782:	60 e4       	ldi	r22, 0x40	; 64
    2784:	e6 16       	cp	r14, r22
    2786:	f1 04       	cpc	r15, r1
    2788:	01 05       	cpc	r16, r1
    278a:	11 05       	cpc	r17, r1
    278c:	61 f4       	brne	.+24     	; 0x27a6 <__mulsf3+0x1d2>
    278e:	87 fd       	sbrc	r24, 7
    2790:	0a c0       	rjmp	.+20     	; 0x27a6 <__mulsf3+0x1d2>
    2792:	21 15       	cp	r18, r1
    2794:	31 05       	cpc	r19, r1
    2796:	41 05       	cpc	r20, r1
    2798:	51 05       	cpc	r21, r1
    279a:	29 f0       	breq	.+10     	; 0x27a6 <__mulsf3+0x1d2>
    279c:	80 5c       	subi	r24, 0xC0	; 192
    279e:	9f 4f       	sbci	r25, 0xFF	; 255
    27a0:	af 4f       	sbci	r26, 0xFF	; 255
    27a2:	bf 4f       	sbci	r27, 0xFF	; 255
    27a4:	80 78       	andi	r24, 0x80	; 128
    27a6:	8d 8f       	std	Y+29, r24	; 0x1d
    27a8:	9e 8f       	std	Y+30, r25	; 0x1e
    27aa:	af 8f       	std	Y+31, r26	; 0x1f
    27ac:	b8 a3       	std	Y+32, r27	; 0x20
    27ae:	83 e0       	ldi	r24, 0x03	; 3
    27b0:	89 8f       	std	Y+25, r24	; 0x19
    27b2:	ce 01       	movw	r24, r28
    27b4:	49 96       	adiw	r24, 0x19	; 25
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <__mulsf3+0x1e8>
    27b8:	88 eb       	ldi	r24, 0xB8	; 184
    27ba:	91 e0       	ldi	r25, 0x01	; 1
    27bc:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__pack_f>
    27c0:	a0 96       	adiw	r28, 0x20	; 32
    27c2:	e2 e1       	ldi	r30, 0x12	; 18
    27c4:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__epilogue_restores__>

000027c8 <__gtsf2>:
    27c8:	a8 e1       	ldi	r26, 0x18	; 24
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	ea ee       	ldi	r30, 0xEA	; 234
    27ce:	f3 e1       	ldi	r31, 0x13	; 19
    27d0:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__prologue_saves__+0x18>
    27d4:	69 83       	std	Y+1, r22	; 0x01
    27d6:	7a 83       	std	Y+2, r23	; 0x02
    27d8:	8b 83       	std	Y+3, r24	; 0x03
    27da:	9c 83       	std	Y+4, r25	; 0x04
    27dc:	2d 83       	std	Y+5, r18	; 0x05
    27de:	3e 83       	std	Y+6, r19	; 0x06
    27e0:	4f 83       	std	Y+7, r20	; 0x07
    27e2:	58 87       	std	Y+8, r21	; 0x08
    27e4:	8e 01       	movw	r16, r28
    27e6:	07 5f       	subi	r16, 0xF7	; 247
    27e8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ea:	ce 01       	movw	r24, r28
    27ec:	01 96       	adiw	r24, 0x01	; 1
    27ee:	b8 01       	movw	r22, r16
    27f0:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__unpack_f>
    27f4:	81 e1       	ldi	r24, 0x11	; 17
    27f6:	e8 2e       	mov	r14, r24
    27f8:	f1 2c       	mov	r15, r1
    27fa:	ec 0e       	add	r14, r28
    27fc:	fd 1e       	adc	r15, r29
    27fe:	ce 01       	movw	r24, r28
    2800:	05 96       	adiw	r24, 0x05	; 5
    2802:	b7 01       	movw	r22, r14
    2804:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__unpack_f>
    2808:	89 85       	ldd	r24, Y+9	; 0x09
    280a:	82 30       	cpi	r24, 0x02	; 2
    280c:	40 f0       	brcs	.+16     	; 0x281e <__gtsf2+0x56>
    280e:	89 89       	ldd	r24, Y+17	; 0x11
    2810:	82 30       	cpi	r24, 0x02	; 2
    2812:	28 f0       	brcs	.+10     	; 0x281e <__gtsf2+0x56>
    2814:	c8 01       	movw	r24, r16
    2816:	b7 01       	movw	r22, r14
    2818:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <__fpcmp_parts_f>
    281c:	01 c0       	rjmp	.+2      	; 0x2820 <__gtsf2+0x58>
    281e:	8f ef       	ldi	r24, 0xFF	; 255
    2820:	68 96       	adiw	r28, 0x18	; 24
    2822:	e6 e0       	ldi	r30, 0x06	; 6
    2824:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__epilogue_restores__+0x18>

00002828 <__gesf2>:
    2828:	a8 e1       	ldi	r26, 0x18	; 24
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	ea e1       	ldi	r30, 0x1A	; 26
    282e:	f4 e1       	ldi	r31, 0x14	; 20
    2830:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__prologue_saves__+0x18>
    2834:	69 83       	std	Y+1, r22	; 0x01
    2836:	7a 83       	std	Y+2, r23	; 0x02
    2838:	8b 83       	std	Y+3, r24	; 0x03
    283a:	9c 83       	std	Y+4, r25	; 0x04
    283c:	2d 83       	std	Y+5, r18	; 0x05
    283e:	3e 83       	std	Y+6, r19	; 0x06
    2840:	4f 83       	std	Y+7, r20	; 0x07
    2842:	58 87       	std	Y+8, r21	; 0x08
    2844:	8e 01       	movw	r16, r28
    2846:	07 5f       	subi	r16, 0xF7	; 247
    2848:	1f 4f       	sbci	r17, 0xFF	; 255
    284a:	ce 01       	movw	r24, r28
    284c:	01 96       	adiw	r24, 0x01	; 1
    284e:	b8 01       	movw	r22, r16
    2850:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__unpack_f>
    2854:	81 e1       	ldi	r24, 0x11	; 17
    2856:	e8 2e       	mov	r14, r24
    2858:	f1 2c       	mov	r15, r1
    285a:	ec 0e       	add	r14, r28
    285c:	fd 1e       	adc	r15, r29
    285e:	ce 01       	movw	r24, r28
    2860:	05 96       	adiw	r24, 0x05	; 5
    2862:	b7 01       	movw	r22, r14
    2864:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__unpack_f>
    2868:	89 85       	ldd	r24, Y+9	; 0x09
    286a:	82 30       	cpi	r24, 0x02	; 2
    286c:	40 f0       	brcs	.+16     	; 0x287e <__gesf2+0x56>
    286e:	89 89       	ldd	r24, Y+17	; 0x11
    2870:	82 30       	cpi	r24, 0x02	; 2
    2872:	28 f0       	brcs	.+10     	; 0x287e <__gesf2+0x56>
    2874:	c8 01       	movw	r24, r16
    2876:	b7 01       	movw	r22, r14
    2878:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <__fpcmp_parts_f>
    287c:	01 c0       	rjmp	.+2      	; 0x2880 <__gesf2+0x58>
    287e:	8f ef       	ldi	r24, 0xFF	; 255
    2880:	68 96       	adiw	r28, 0x18	; 24
    2882:	e6 e0       	ldi	r30, 0x06	; 6
    2884:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__epilogue_restores__+0x18>

00002888 <__ltsf2>:
    2888:	a8 e1       	ldi	r26, 0x18	; 24
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	ea e4       	ldi	r30, 0x4A	; 74
    288e:	f4 e1       	ldi	r31, 0x14	; 20
    2890:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__prologue_saves__+0x18>
    2894:	69 83       	std	Y+1, r22	; 0x01
    2896:	7a 83       	std	Y+2, r23	; 0x02
    2898:	8b 83       	std	Y+3, r24	; 0x03
    289a:	9c 83       	std	Y+4, r25	; 0x04
    289c:	2d 83       	std	Y+5, r18	; 0x05
    289e:	3e 83       	std	Y+6, r19	; 0x06
    28a0:	4f 83       	std	Y+7, r20	; 0x07
    28a2:	58 87       	std	Y+8, r21	; 0x08
    28a4:	8e 01       	movw	r16, r28
    28a6:	07 5f       	subi	r16, 0xF7	; 247
    28a8:	1f 4f       	sbci	r17, 0xFF	; 255
    28aa:	ce 01       	movw	r24, r28
    28ac:	01 96       	adiw	r24, 0x01	; 1
    28ae:	b8 01       	movw	r22, r16
    28b0:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__unpack_f>
    28b4:	81 e1       	ldi	r24, 0x11	; 17
    28b6:	e8 2e       	mov	r14, r24
    28b8:	f1 2c       	mov	r15, r1
    28ba:	ec 0e       	add	r14, r28
    28bc:	fd 1e       	adc	r15, r29
    28be:	ce 01       	movw	r24, r28
    28c0:	05 96       	adiw	r24, 0x05	; 5
    28c2:	b7 01       	movw	r22, r14
    28c4:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__unpack_f>
    28c8:	89 85       	ldd	r24, Y+9	; 0x09
    28ca:	82 30       	cpi	r24, 0x02	; 2
    28cc:	40 f0       	brcs	.+16     	; 0x28de <__ltsf2+0x56>
    28ce:	89 89       	ldd	r24, Y+17	; 0x11
    28d0:	82 30       	cpi	r24, 0x02	; 2
    28d2:	28 f0       	brcs	.+10     	; 0x28de <__ltsf2+0x56>
    28d4:	c8 01       	movw	r24, r16
    28d6:	b7 01       	movw	r22, r14
    28d8:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <__fpcmp_parts_f>
    28dc:	01 c0       	rjmp	.+2      	; 0x28e0 <__ltsf2+0x58>
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	68 96       	adiw	r28, 0x18	; 24
    28e2:	e6 e0       	ldi	r30, 0x06	; 6
    28e4:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__epilogue_restores__+0x18>

000028e8 <__lesf2>:
    28e8:	a8 e1       	ldi	r26, 0x18	; 24
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	ea e7       	ldi	r30, 0x7A	; 122
    28ee:	f4 e1       	ldi	r31, 0x14	; 20
    28f0:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__prologue_saves__+0x18>
    28f4:	69 83       	std	Y+1, r22	; 0x01
    28f6:	7a 83       	std	Y+2, r23	; 0x02
    28f8:	8b 83       	std	Y+3, r24	; 0x03
    28fa:	9c 83       	std	Y+4, r25	; 0x04
    28fc:	2d 83       	std	Y+5, r18	; 0x05
    28fe:	3e 83       	std	Y+6, r19	; 0x06
    2900:	4f 83       	std	Y+7, r20	; 0x07
    2902:	58 87       	std	Y+8, r21	; 0x08
    2904:	8e 01       	movw	r16, r28
    2906:	07 5f       	subi	r16, 0xF7	; 247
    2908:	1f 4f       	sbci	r17, 0xFF	; 255
    290a:	ce 01       	movw	r24, r28
    290c:	01 96       	adiw	r24, 0x01	; 1
    290e:	b8 01       	movw	r22, r16
    2910:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__unpack_f>
    2914:	81 e1       	ldi	r24, 0x11	; 17
    2916:	e8 2e       	mov	r14, r24
    2918:	f1 2c       	mov	r15, r1
    291a:	ec 0e       	add	r14, r28
    291c:	fd 1e       	adc	r15, r29
    291e:	ce 01       	movw	r24, r28
    2920:	05 96       	adiw	r24, 0x05	; 5
    2922:	b7 01       	movw	r22, r14
    2924:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__unpack_f>
    2928:	89 85       	ldd	r24, Y+9	; 0x09
    292a:	82 30       	cpi	r24, 0x02	; 2
    292c:	40 f0       	brcs	.+16     	; 0x293e <__lesf2+0x56>
    292e:	89 89       	ldd	r24, Y+17	; 0x11
    2930:	82 30       	cpi	r24, 0x02	; 2
    2932:	28 f0       	brcs	.+10     	; 0x293e <__lesf2+0x56>
    2934:	c8 01       	movw	r24, r16
    2936:	b7 01       	movw	r22, r14
    2938:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <__fpcmp_parts_f>
    293c:	01 c0       	rjmp	.+2      	; 0x2940 <__lesf2+0x58>
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	68 96       	adiw	r28, 0x18	; 24
    2942:	e6 e0       	ldi	r30, 0x06	; 6
    2944:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__epilogue_restores__+0x18>

00002948 <__floatsisf>:
    2948:	a8 e0       	ldi	r26, 0x08	; 8
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	ea ea       	ldi	r30, 0xAA	; 170
    294e:	f4 e1       	ldi	r31, 0x14	; 20
    2950:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__prologue_saves__+0x18>
    2954:	7b 01       	movw	r14, r22
    2956:	8c 01       	movw	r16, r24
    2958:	83 e0       	ldi	r24, 0x03	; 3
    295a:	89 83       	std	Y+1, r24	; 0x01
    295c:	d8 01       	movw	r26, r16
    295e:	c7 01       	movw	r24, r14
    2960:	88 27       	eor	r24, r24
    2962:	b7 fd       	sbrc	r27, 7
    2964:	83 95       	inc	r24
    2966:	99 27       	eor	r25, r25
    2968:	aa 27       	eor	r26, r26
    296a:	bb 27       	eor	r27, r27
    296c:	28 2f       	mov	r18, r24
    296e:	8a 83       	std	Y+2, r24	; 0x02
    2970:	e1 14       	cp	r14, r1
    2972:	f1 04       	cpc	r15, r1
    2974:	01 05       	cpc	r16, r1
    2976:	11 05       	cpc	r17, r1
    2978:	19 f4       	brne	.+6      	; 0x2980 <__floatsisf+0x38>
    297a:	82 e0       	ldi	r24, 0x02	; 2
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	37 c0       	rjmp	.+110    	; 0x29ee <__floatsisf+0xa6>
    2980:	8e e1       	ldi	r24, 0x1E	; 30
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	9c 83       	std	Y+4, r25	; 0x04
    2986:	8b 83       	std	Y+3, r24	; 0x03
    2988:	22 23       	and	r18, r18
    298a:	89 f0       	breq	.+34     	; 0x29ae <__floatsisf+0x66>
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	e8 16       	cp	r14, r24
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	f8 06       	cpc	r15, r24
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	08 07       	cpc	r16, r24
    2998:	80 e8       	ldi	r24, 0x80	; 128
    299a:	18 07       	cpc	r17, r24
    299c:	69 f1       	breq	.+90     	; 0x29f8 <__floatsisf+0xb0>
    299e:	10 95       	com	r17
    29a0:	00 95       	com	r16
    29a2:	f0 94       	com	r15
    29a4:	e0 94       	com	r14
    29a6:	e1 1c       	adc	r14, r1
    29a8:	f1 1c       	adc	r15, r1
    29aa:	01 1d       	adc	r16, r1
    29ac:	11 1d       	adc	r17, r1
    29ae:	ed 82       	std	Y+5, r14	; 0x05
    29b0:	fe 82       	std	Y+6, r15	; 0x06
    29b2:	0f 83       	std	Y+7, r16	; 0x07
    29b4:	18 87       	std	Y+8, r17	; 0x08
    29b6:	c8 01       	movw	r24, r16
    29b8:	b7 01       	movw	r22, r14
    29ba:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <__clzsi2>
    29be:	9c 01       	movw	r18, r24
    29c0:	21 50       	subi	r18, 0x01	; 1
    29c2:	30 40       	sbci	r19, 0x00	; 0
    29c4:	12 16       	cp	r1, r18
    29c6:	13 06       	cpc	r1, r19
    29c8:	94 f4       	brge	.+36     	; 0x29ee <__floatsisf+0xa6>
    29ca:	02 2e       	mov	r0, r18
    29cc:	04 c0       	rjmp	.+8      	; 0x29d6 <__floatsisf+0x8e>
    29ce:	ee 0c       	add	r14, r14
    29d0:	ff 1c       	adc	r15, r15
    29d2:	00 1f       	adc	r16, r16
    29d4:	11 1f       	adc	r17, r17
    29d6:	0a 94       	dec	r0
    29d8:	d2 f7       	brpl	.-12     	; 0x29ce <__floatsisf+0x86>
    29da:	ed 82       	std	Y+5, r14	; 0x05
    29dc:	fe 82       	std	Y+6, r15	; 0x06
    29de:	0f 83       	std	Y+7, r16	; 0x07
    29e0:	18 87       	std	Y+8, r17	; 0x08
    29e2:	8e e1       	ldi	r24, 0x1E	; 30
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	82 1b       	sub	r24, r18
    29e8:	93 0b       	sbc	r25, r19
    29ea:	9c 83       	std	Y+4, r25	; 0x04
    29ec:	8b 83       	std	Y+3, r24	; 0x03
    29ee:	ce 01       	movw	r24, r28
    29f0:	01 96       	adiw	r24, 0x01	; 1
    29f2:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__pack_f>
    29f6:	04 c0       	rjmp	.+8      	; 0x2a00 <__floatsisf+0xb8>
    29f8:	60 e0       	ldi	r22, 0x00	; 0
    29fa:	70 e0       	ldi	r23, 0x00	; 0
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	9f ec       	ldi	r25, 0xCF	; 207
    2a00:	28 96       	adiw	r28, 0x08	; 8
    2a02:	e6 e0       	ldi	r30, 0x06	; 6
    2a04:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__epilogue_restores__+0x18>

00002a08 <__fixsfsi>:
    2a08:	ac e0       	ldi	r26, 0x0C	; 12
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	ea e0       	ldi	r30, 0x0A	; 10
    2a0e:	f5 e1       	ldi	r31, 0x15	; 21
    2a10:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__prologue_saves__+0x20>
    2a14:	69 83       	std	Y+1, r22	; 0x01
    2a16:	7a 83       	std	Y+2, r23	; 0x02
    2a18:	8b 83       	std	Y+3, r24	; 0x03
    2a1a:	9c 83       	std	Y+4, r25	; 0x04
    2a1c:	ce 01       	movw	r24, r28
    2a1e:	01 96       	adiw	r24, 0x01	; 1
    2a20:	be 01       	movw	r22, r28
    2a22:	6b 5f       	subi	r22, 0xFB	; 251
    2a24:	7f 4f       	sbci	r23, 0xFF	; 255
    2a26:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__unpack_f>
    2a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2c:	82 30       	cpi	r24, 0x02	; 2
    2a2e:	81 f1       	breq	.+96     	; 0x2a90 <__fixsfsi+0x88>
    2a30:	82 30       	cpi	r24, 0x02	; 2
    2a32:	70 f1       	brcs	.+92     	; 0x2a90 <__fixsfsi+0x88>
    2a34:	84 30       	cpi	r24, 0x04	; 4
    2a36:	21 f4       	brne	.+8      	; 0x2a40 <__fixsfsi+0x38>
    2a38:	8e 81       	ldd	r24, Y+6	; 0x06
    2a3a:	88 23       	and	r24, r24
    2a3c:	69 f1       	breq	.+90     	; 0x2a98 <__fixsfsi+0x90>
    2a3e:	0a c0       	rjmp	.+20     	; 0x2a54 <__fixsfsi+0x4c>
    2a40:	2f 81       	ldd	r18, Y+7	; 0x07
    2a42:	38 85       	ldd	r19, Y+8	; 0x08
    2a44:	37 fd       	sbrc	r19, 7
    2a46:	24 c0       	rjmp	.+72     	; 0x2a90 <__fixsfsi+0x88>
    2a48:	6e 81       	ldd	r22, Y+6	; 0x06
    2a4a:	2f 31       	cpi	r18, 0x1F	; 31
    2a4c:	31 05       	cpc	r19, r1
    2a4e:	3c f0       	brlt	.+14     	; 0x2a5e <__fixsfsi+0x56>
    2a50:	66 23       	and	r22, r22
    2a52:	11 f1       	breq	.+68     	; 0x2a98 <__fixsfsi+0x90>
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e0       	ldi	r20, 0x00	; 0
    2a5a:	50 e8       	ldi	r21, 0x80	; 128
    2a5c:	21 c0       	rjmp	.+66     	; 0x2aa0 <__fixsfsi+0x98>
    2a5e:	8e e1       	ldi	r24, 0x1E	; 30
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	82 1b       	sub	r24, r18
    2a64:	93 0b       	sbc	r25, r19
    2a66:	29 85       	ldd	r18, Y+9	; 0x09
    2a68:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a6a:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a6c:	5c 85       	ldd	r21, Y+12	; 0x0c
    2a6e:	04 c0       	rjmp	.+8      	; 0x2a78 <__fixsfsi+0x70>
    2a70:	56 95       	lsr	r21
    2a72:	47 95       	ror	r20
    2a74:	37 95       	ror	r19
    2a76:	27 95       	ror	r18
    2a78:	8a 95       	dec	r24
    2a7a:	d2 f7       	brpl	.-12     	; 0x2a70 <__fixsfsi+0x68>
    2a7c:	66 23       	and	r22, r22
    2a7e:	81 f0       	breq	.+32     	; 0x2aa0 <__fixsfsi+0x98>
    2a80:	50 95       	com	r21
    2a82:	40 95       	com	r20
    2a84:	30 95       	com	r19
    2a86:	21 95       	neg	r18
    2a88:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8a:	4f 4f       	sbci	r20, 0xFF	; 255
    2a8c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a8e:	08 c0       	rjmp	.+16     	; 0x2aa0 <__fixsfsi+0x98>
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	a9 01       	movw	r20, r18
    2a96:	04 c0       	rjmp	.+8      	; 0x2aa0 <__fixsfsi+0x98>
    2a98:	2f ef       	ldi	r18, 0xFF	; 255
    2a9a:	3f ef       	ldi	r19, 0xFF	; 255
    2a9c:	4f ef       	ldi	r20, 0xFF	; 255
    2a9e:	5f e7       	ldi	r21, 0x7F	; 127
    2aa0:	b9 01       	movw	r22, r18
    2aa2:	ca 01       	movw	r24, r20
    2aa4:	2c 96       	adiw	r28, 0x0c	; 12
    2aa6:	e2 e0       	ldi	r30, 0x02	; 2
    2aa8:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__epilogue_restores__+0x20>

00002aac <__floatunsisf>:
    2aac:	a8 e0       	ldi	r26, 0x08	; 8
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	ec e5       	ldi	r30, 0x5C	; 92
    2ab2:	f5 e1       	ldi	r31, 0x15	; 21
    2ab4:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__+0x14>
    2ab8:	7b 01       	movw	r14, r22
    2aba:	8c 01       	movw	r16, r24
    2abc:	1a 82       	std	Y+2, r1	; 0x02
    2abe:	61 15       	cp	r22, r1
    2ac0:	71 05       	cpc	r23, r1
    2ac2:	81 05       	cpc	r24, r1
    2ac4:	91 05       	cpc	r25, r1
    2ac6:	19 f4       	brne	.+6      	; 0x2ace <__floatunsisf+0x22>
    2ac8:	82 e0       	ldi	r24, 0x02	; 2
    2aca:	89 83       	std	Y+1, r24	; 0x01
    2acc:	5f c0       	rjmp	.+190    	; 0x2b8c <__floatunsisf+0xe0>
    2ace:	83 e0       	ldi	r24, 0x03	; 3
    2ad0:	89 83       	std	Y+1, r24	; 0x01
    2ad2:	8e e1       	ldi	r24, 0x1E	; 30
    2ad4:	c8 2e       	mov	r12, r24
    2ad6:	d1 2c       	mov	r13, r1
    2ad8:	dc 82       	std	Y+4, r13	; 0x04
    2ada:	cb 82       	std	Y+3, r12	; 0x03
    2adc:	ed 82       	std	Y+5, r14	; 0x05
    2ade:	fe 82       	std	Y+6, r15	; 0x06
    2ae0:	0f 83       	std	Y+7, r16	; 0x07
    2ae2:	18 87       	std	Y+8, r17	; 0x08
    2ae4:	c8 01       	movw	r24, r16
    2ae6:	b7 01       	movw	r22, r14
    2ae8:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <__clzsi2>
    2aec:	fc 01       	movw	r30, r24
    2aee:	31 97       	sbiw	r30, 0x01	; 1
    2af0:	f7 ff       	sbrs	r31, 7
    2af2:	3a c0       	rjmp	.+116    	; 0x2b68 <__floatunsisf+0xbc>
    2af4:	aa 27       	eor	r26, r26
    2af6:	bb 27       	eor	r27, r27
    2af8:	ae 1b       	sub	r26, r30
    2afa:	bf 0b       	sbc	r27, r31
    2afc:	21 e0       	ldi	r18, 0x01	; 1
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e0       	ldi	r20, 0x00	; 0
    2b02:	50 e0       	ldi	r21, 0x00	; 0
    2b04:	0a 2e       	mov	r0, r26
    2b06:	04 c0       	rjmp	.+8      	; 0x2b10 <__floatunsisf+0x64>
    2b08:	22 0f       	add	r18, r18
    2b0a:	33 1f       	adc	r19, r19
    2b0c:	44 1f       	adc	r20, r20
    2b0e:	55 1f       	adc	r21, r21
    2b10:	0a 94       	dec	r0
    2b12:	d2 f7       	brpl	.-12     	; 0x2b08 <__floatunsisf+0x5c>
    2b14:	21 50       	subi	r18, 0x01	; 1
    2b16:	30 40       	sbci	r19, 0x00	; 0
    2b18:	40 40       	sbci	r20, 0x00	; 0
    2b1a:	50 40       	sbci	r21, 0x00	; 0
    2b1c:	2e 21       	and	r18, r14
    2b1e:	3f 21       	and	r19, r15
    2b20:	40 23       	and	r20, r16
    2b22:	51 23       	and	r21, r17
    2b24:	61 e0       	ldi	r22, 0x01	; 1
    2b26:	70 e0       	ldi	r23, 0x00	; 0
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	21 15       	cp	r18, r1
    2b2e:	31 05       	cpc	r19, r1
    2b30:	41 05       	cpc	r20, r1
    2b32:	51 05       	cpc	r21, r1
    2b34:	19 f4       	brne	.+6      	; 0x2b3c <__floatunsisf+0x90>
    2b36:	60 e0       	ldi	r22, 0x00	; 0
    2b38:	70 e0       	ldi	r23, 0x00	; 0
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	04 c0       	rjmp	.+8      	; 0x2b46 <__floatunsisf+0x9a>
    2b3e:	16 95       	lsr	r17
    2b40:	07 95       	ror	r16
    2b42:	f7 94       	ror	r15
    2b44:	e7 94       	ror	r14
    2b46:	aa 95       	dec	r26
    2b48:	d2 f7       	brpl	.-12     	; 0x2b3e <__floatunsisf+0x92>
    2b4a:	e6 2a       	or	r14, r22
    2b4c:	f7 2a       	or	r15, r23
    2b4e:	08 2b       	or	r16, r24
    2b50:	19 2b       	or	r17, r25
    2b52:	ed 82       	std	Y+5, r14	; 0x05
    2b54:	fe 82       	std	Y+6, r15	; 0x06
    2b56:	0f 83       	std	Y+7, r16	; 0x07
    2b58:	18 87       	std	Y+8, r17	; 0x08
    2b5a:	8e e1       	ldi	r24, 0x1E	; 30
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	8e 1b       	sub	r24, r30
    2b60:	9f 0b       	sbc	r25, r31
    2b62:	9c 83       	std	Y+4, r25	; 0x04
    2b64:	8b 83       	std	Y+3, r24	; 0x03
    2b66:	12 c0       	rjmp	.+36     	; 0x2b8c <__floatunsisf+0xe0>
    2b68:	30 97       	sbiw	r30, 0x00	; 0
    2b6a:	81 f0       	breq	.+32     	; 0x2b8c <__floatunsisf+0xe0>
    2b6c:	0e 2e       	mov	r0, r30
    2b6e:	04 c0       	rjmp	.+8      	; 0x2b78 <__floatunsisf+0xcc>
    2b70:	ee 0c       	add	r14, r14
    2b72:	ff 1c       	adc	r15, r15
    2b74:	00 1f       	adc	r16, r16
    2b76:	11 1f       	adc	r17, r17
    2b78:	0a 94       	dec	r0
    2b7a:	d2 f7       	brpl	.-12     	; 0x2b70 <__floatunsisf+0xc4>
    2b7c:	ed 82       	std	Y+5, r14	; 0x05
    2b7e:	fe 82       	std	Y+6, r15	; 0x06
    2b80:	0f 83       	std	Y+7, r16	; 0x07
    2b82:	18 87       	std	Y+8, r17	; 0x08
    2b84:	ce 1a       	sub	r12, r30
    2b86:	df 0a       	sbc	r13, r31
    2b88:	dc 82       	std	Y+4, r13	; 0x04
    2b8a:	cb 82       	std	Y+3, r12	; 0x03
    2b8c:	ce 01       	movw	r24, r28
    2b8e:	01 96       	adiw	r24, 0x01	; 1
    2b90:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__pack_f>
    2b94:	28 96       	adiw	r28, 0x08	; 8
    2b96:	e8 e0       	ldi	r30, 0x08	; 8
    2b98:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__+0x14>

00002b9c <__clzsi2>:
    2b9c:	af 92       	push	r10
    2b9e:	bf 92       	push	r11
    2ba0:	cf 92       	push	r12
    2ba2:	df 92       	push	r13
    2ba4:	ef 92       	push	r14
    2ba6:	ff 92       	push	r15
    2ba8:	0f 93       	push	r16
    2baa:	1f 93       	push	r17
    2bac:	7b 01       	movw	r14, r22
    2bae:	8c 01       	movw	r16, r24
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	e8 16       	cp	r14, r24
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	f8 06       	cpc	r15, r24
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	08 07       	cpc	r16, r24
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	18 07       	cpc	r17, r24
    2bc0:	58 f4       	brcc	.+22     	; 0x2bd8 <__clzsi2+0x3c>
    2bc2:	ef ef       	ldi	r30, 0xFF	; 255
    2bc4:	ee 16       	cp	r14, r30
    2bc6:	f1 04       	cpc	r15, r1
    2bc8:	01 05       	cpc	r16, r1
    2bca:	11 05       	cpc	r17, r1
    2bcc:	09 f0       	breq	.+2      	; 0x2bd0 <__clzsi2+0x34>
    2bce:	90 f4       	brcc	.+36     	; 0x2bf4 <__clzsi2+0x58>
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	17 c0       	rjmp	.+46     	; 0x2c06 <__clzsi2+0x6a>
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	ef 16       	cp	r14, r31
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	ff 06       	cpc	r15, r31
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	0f 07       	cpc	r16, r31
    2be4:	f1 e0       	ldi	r31, 0x01	; 1
    2be6:	1f 07       	cpc	r17, r31
    2be8:	50 f4       	brcc	.+20     	; 0x2bfe <__clzsi2+0x62>
    2bea:	80 e1       	ldi	r24, 0x10	; 16
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	a0 e0       	ldi	r26, 0x00	; 0
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	09 c0       	rjmp	.+18     	; 0x2c06 <__clzsi2+0x6a>
    2bf4:	88 e0       	ldi	r24, 0x08	; 8
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	a0 e0       	ldi	r26, 0x00	; 0
    2bfa:	b0 e0       	ldi	r27, 0x00	; 0
    2bfc:	04 c0       	rjmp	.+8      	; 0x2c06 <__clzsi2+0x6a>
    2bfe:	88 e1       	ldi	r24, 0x18	; 24
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	a0 e0       	ldi	r26, 0x00	; 0
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	20 e2       	ldi	r18, 0x20	; 32
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e0       	ldi	r20, 0x00	; 0
    2c0c:	50 e0       	ldi	r21, 0x00	; 0
    2c0e:	28 1b       	sub	r18, r24
    2c10:	39 0b       	sbc	r19, r25
    2c12:	4a 0b       	sbc	r20, r26
    2c14:	5b 0b       	sbc	r21, r27
    2c16:	57 01       	movw	r10, r14
    2c18:	68 01       	movw	r12, r16
    2c1a:	04 c0       	rjmp	.+8      	; 0x2c24 <__clzsi2+0x88>
    2c1c:	d6 94       	lsr	r13
    2c1e:	c7 94       	ror	r12
    2c20:	b7 94       	ror	r11
    2c22:	a7 94       	ror	r10
    2c24:	8a 95       	dec	r24
    2c26:	d2 f7       	brpl	.-12     	; 0x2c1c <__clzsi2+0x80>
    2c28:	d6 01       	movw	r26, r12
    2c2a:	c5 01       	movw	r24, r10
    2c2c:	80 54       	subi	r24, 0x40	; 64
    2c2e:	9e 4f       	sbci	r25, 0xFE	; 254
    2c30:	fc 01       	movw	r30, r24
    2c32:	80 81       	ld	r24, Z
    2c34:	28 1b       	sub	r18, r24
    2c36:	31 09       	sbc	r19, r1
    2c38:	41 09       	sbc	r20, r1
    2c3a:	51 09       	sbc	r21, r1
    2c3c:	c9 01       	movw	r24, r18
    2c3e:	1f 91       	pop	r17
    2c40:	0f 91       	pop	r16
    2c42:	ff 90       	pop	r15
    2c44:	ef 90       	pop	r14
    2c46:	df 90       	pop	r13
    2c48:	cf 90       	pop	r12
    2c4a:	bf 90       	pop	r11
    2c4c:	af 90       	pop	r10
    2c4e:	08 95       	ret

00002c50 <__pack_f>:
    2c50:	ef 92       	push	r14
    2c52:	ff 92       	push	r15
    2c54:	0f 93       	push	r16
    2c56:	1f 93       	push	r17
    2c58:	cf 93       	push	r28
    2c5a:	df 93       	push	r29
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	24 81       	ldd	r18, Z+4	; 0x04
    2c60:	35 81       	ldd	r19, Z+5	; 0x05
    2c62:	46 81       	ldd	r20, Z+6	; 0x06
    2c64:	57 81       	ldd	r21, Z+7	; 0x07
    2c66:	61 81       	ldd	r22, Z+1	; 0x01
    2c68:	80 81       	ld	r24, Z
    2c6a:	82 30       	cpi	r24, 0x02	; 2
    2c6c:	20 f4       	brcc	.+8      	; 0x2c76 <__pack_f+0x26>
    2c6e:	40 61       	ori	r20, 0x10	; 16
    2c70:	ef ef       	ldi	r30, 0xFF	; 255
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	a3 c0       	rjmp	.+326    	; 0x2dbc <__pack_f+0x16c>
    2c76:	84 30       	cpi	r24, 0x04	; 4
    2c78:	09 f4       	brne	.+2      	; 0x2c7c <__pack_f+0x2c>
    2c7a:	9b c0       	rjmp	.+310    	; 0x2db2 <__pack_f+0x162>
    2c7c:	82 30       	cpi	r24, 0x02	; 2
    2c7e:	09 f4       	brne	.+2      	; 0x2c82 <__pack_f+0x32>
    2c80:	92 c0       	rjmp	.+292    	; 0x2da6 <__pack_f+0x156>
    2c82:	21 15       	cp	r18, r1
    2c84:	31 05       	cpc	r19, r1
    2c86:	41 05       	cpc	r20, r1
    2c88:	51 05       	cpc	r21, r1
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <__pack_f+0x3e>
    2c8c:	8f c0       	rjmp	.+286    	; 0x2dac <__pack_f+0x15c>
    2c8e:	02 80       	ldd	r0, Z+2	; 0x02
    2c90:	f3 81       	ldd	r31, Z+3	; 0x03
    2c92:	e0 2d       	mov	r30, r0
    2c94:	8f ef       	ldi	r24, 0xFF	; 255
    2c96:	e2 38       	cpi	r30, 0x82	; 130
    2c98:	f8 07       	cpc	r31, r24
    2c9a:	0c f0       	brlt	.+2      	; 0x2c9e <__pack_f+0x4e>
    2c9c:	5a c0       	rjmp	.+180    	; 0x2d52 <__pack_f+0x102>
    2c9e:	c2 e8       	ldi	r28, 0x82	; 130
    2ca0:	df ef       	ldi	r29, 0xFF	; 255
    2ca2:	ce 1b       	sub	r28, r30
    2ca4:	df 0b       	sbc	r29, r31
    2ca6:	ca 31       	cpi	r28, 0x1A	; 26
    2ca8:	d1 05       	cpc	r29, r1
    2caa:	6c f5       	brge	.+90     	; 0x2d06 <__pack_f+0xb6>
    2cac:	79 01       	movw	r14, r18
    2cae:	8a 01       	movw	r16, r20
    2cb0:	0c 2e       	mov	r0, r28
    2cb2:	04 c0       	rjmp	.+8      	; 0x2cbc <__pack_f+0x6c>
    2cb4:	16 95       	lsr	r17
    2cb6:	07 95       	ror	r16
    2cb8:	f7 94       	ror	r15
    2cba:	e7 94       	ror	r14
    2cbc:	0a 94       	dec	r0
    2cbe:	d2 f7       	brpl	.-12     	; 0x2cb4 <__pack_f+0x64>
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	a0 e0       	ldi	r26, 0x00	; 0
    2cc6:	b0 e0       	ldi	r27, 0x00	; 0
    2cc8:	0c 2e       	mov	r0, r28
    2cca:	04 c0       	rjmp	.+8      	; 0x2cd4 <__pack_f+0x84>
    2ccc:	88 0f       	add	r24, r24
    2cce:	99 1f       	adc	r25, r25
    2cd0:	aa 1f       	adc	r26, r26
    2cd2:	bb 1f       	adc	r27, r27
    2cd4:	0a 94       	dec	r0
    2cd6:	d2 f7       	brpl	.-12     	; 0x2ccc <__pack_f+0x7c>
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	a1 09       	sbc	r26, r1
    2cdc:	b1 09       	sbc	r27, r1
    2cde:	82 23       	and	r24, r18
    2ce0:	93 23       	and	r25, r19
    2ce2:	a4 23       	and	r26, r20
    2ce4:	b5 23       	and	r27, r21
    2ce6:	21 e0       	ldi	r18, 0x01	; 1
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	40 e0       	ldi	r20, 0x00	; 0
    2cec:	50 e0       	ldi	r21, 0x00	; 0
    2cee:	00 97       	sbiw	r24, 0x00	; 0
    2cf0:	a1 05       	cpc	r26, r1
    2cf2:	b1 05       	cpc	r27, r1
    2cf4:	19 f4       	brne	.+6      	; 0x2cfc <__pack_f+0xac>
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	a9 01       	movw	r20, r18
    2cfc:	2e 29       	or	r18, r14
    2cfe:	3f 29       	or	r19, r15
    2d00:	40 2b       	or	r20, r16
    2d02:	51 2b       	or	r21, r17
    2d04:	03 c0       	rjmp	.+6      	; 0x2d0c <__pack_f+0xbc>
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	a9 01       	movw	r20, r18
    2d0c:	da 01       	movw	r26, r20
    2d0e:	c9 01       	movw	r24, r18
    2d10:	8f 77       	andi	r24, 0x7F	; 127
    2d12:	90 70       	andi	r25, 0x00	; 0
    2d14:	a0 70       	andi	r26, 0x00	; 0
    2d16:	b0 70       	andi	r27, 0x00	; 0
    2d18:	80 34       	cpi	r24, 0x40	; 64
    2d1a:	91 05       	cpc	r25, r1
    2d1c:	a1 05       	cpc	r26, r1
    2d1e:	b1 05       	cpc	r27, r1
    2d20:	39 f4       	brne	.+14     	; 0x2d30 <__pack_f+0xe0>
    2d22:	27 ff       	sbrs	r18, 7
    2d24:	09 c0       	rjmp	.+18     	; 0x2d38 <__pack_f+0xe8>
    2d26:	20 5c       	subi	r18, 0xC0	; 192
    2d28:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2a:	4f 4f       	sbci	r20, 0xFF	; 255
    2d2c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d2e:	04 c0       	rjmp	.+8      	; 0x2d38 <__pack_f+0xe8>
    2d30:	21 5c       	subi	r18, 0xC1	; 193
    2d32:	3f 4f       	sbci	r19, 0xFF	; 255
    2d34:	4f 4f       	sbci	r20, 0xFF	; 255
    2d36:	5f 4f       	sbci	r21, 0xFF	; 255
    2d38:	e1 e0       	ldi	r30, 0x01	; 1
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	20 30       	cpi	r18, 0x00	; 0
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	38 07       	cpc	r19, r24
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	48 07       	cpc	r20, r24
    2d46:	80 e4       	ldi	r24, 0x40	; 64
    2d48:	58 07       	cpc	r21, r24
    2d4a:	28 f5       	brcc	.+74     	; 0x2d96 <__pack_f+0x146>
    2d4c:	e0 e0       	ldi	r30, 0x00	; 0
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	22 c0       	rjmp	.+68     	; 0x2d96 <__pack_f+0x146>
    2d52:	e0 38       	cpi	r30, 0x80	; 128
    2d54:	f1 05       	cpc	r31, r1
    2d56:	6c f5       	brge	.+90     	; 0x2db2 <__pack_f+0x162>
    2d58:	e1 58       	subi	r30, 0x81	; 129
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	da 01       	movw	r26, r20
    2d5e:	c9 01       	movw	r24, r18
    2d60:	8f 77       	andi	r24, 0x7F	; 127
    2d62:	90 70       	andi	r25, 0x00	; 0
    2d64:	a0 70       	andi	r26, 0x00	; 0
    2d66:	b0 70       	andi	r27, 0x00	; 0
    2d68:	80 34       	cpi	r24, 0x40	; 64
    2d6a:	91 05       	cpc	r25, r1
    2d6c:	a1 05       	cpc	r26, r1
    2d6e:	b1 05       	cpc	r27, r1
    2d70:	39 f4       	brne	.+14     	; 0x2d80 <__pack_f+0x130>
    2d72:	27 ff       	sbrs	r18, 7
    2d74:	09 c0       	rjmp	.+18     	; 0x2d88 <__pack_f+0x138>
    2d76:	20 5c       	subi	r18, 0xC0	; 192
    2d78:	3f 4f       	sbci	r19, 0xFF	; 255
    2d7a:	4f 4f       	sbci	r20, 0xFF	; 255
    2d7c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d7e:	04 c0       	rjmp	.+8      	; 0x2d88 <__pack_f+0x138>
    2d80:	21 5c       	subi	r18, 0xC1	; 193
    2d82:	3f 4f       	sbci	r19, 0xFF	; 255
    2d84:	4f 4f       	sbci	r20, 0xFF	; 255
    2d86:	5f 4f       	sbci	r21, 0xFF	; 255
    2d88:	57 ff       	sbrs	r21, 7
    2d8a:	05 c0       	rjmp	.+10     	; 0x2d96 <__pack_f+0x146>
    2d8c:	56 95       	lsr	r21
    2d8e:	47 95       	ror	r20
    2d90:	37 95       	ror	r19
    2d92:	27 95       	ror	r18
    2d94:	31 96       	adiw	r30, 0x01	; 1
    2d96:	87 e0       	ldi	r24, 0x07	; 7
    2d98:	56 95       	lsr	r21
    2d9a:	47 95       	ror	r20
    2d9c:	37 95       	ror	r19
    2d9e:	27 95       	ror	r18
    2da0:	8a 95       	dec	r24
    2da2:	d1 f7       	brne	.-12     	; 0x2d98 <__pack_f+0x148>
    2da4:	0b c0       	rjmp	.+22     	; 0x2dbc <__pack_f+0x16c>
    2da6:	e0 e0       	ldi	r30, 0x00	; 0
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	05 c0       	rjmp	.+10     	; 0x2db6 <__pack_f+0x166>
    2dac:	e0 e0       	ldi	r30, 0x00	; 0
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	05 c0       	rjmp	.+10     	; 0x2dbc <__pack_f+0x16c>
    2db2:	ef ef       	ldi	r30, 0xFF	; 255
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	a9 01       	movw	r20, r18
    2dbc:	8e 2f       	mov	r24, r30
    2dbe:	87 95       	ror	r24
    2dc0:	88 27       	eor	r24, r24
    2dc2:	87 95       	ror	r24
    2dc4:	94 2f       	mov	r25, r20
    2dc6:	9f 77       	andi	r25, 0x7F	; 127
    2dc8:	67 95       	ror	r22
    2dca:	66 27       	eor	r22, r22
    2dcc:	67 95       	ror	r22
    2dce:	e6 95       	lsr	r30
    2dd0:	e2 2e       	mov	r14, r18
    2dd2:	a9 2f       	mov	r26, r25
    2dd4:	a8 2b       	or	r26, r24
    2dd6:	fe 2f       	mov	r31, r30
    2dd8:	f6 2b       	or	r31, r22
    2dda:	62 2f       	mov	r22, r18
    2ddc:	73 2f       	mov	r23, r19
    2dde:	8a 2f       	mov	r24, r26
    2de0:	9f 2f       	mov	r25, r31
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
    2de6:	e6 e0       	ldi	r30, 0x06	; 6
    2de8:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__epilogue_restores__+0x18>

00002dec <__unpack_f>:
    2dec:	dc 01       	movw	r26, r24
    2dee:	fb 01       	movw	r30, r22
    2df0:	2c 91       	ld	r18, X
    2df2:	11 96       	adiw	r26, 0x01	; 1
    2df4:	3c 91       	ld	r19, X
    2df6:	11 97       	sbiw	r26, 0x01	; 1
    2df8:	12 96       	adiw	r26, 0x02	; 2
    2dfa:	8c 91       	ld	r24, X
    2dfc:	12 97       	sbiw	r26, 0x02	; 2
    2dfe:	48 2f       	mov	r20, r24
    2e00:	4f 77       	andi	r20, 0x7F	; 127
    2e02:	50 e0       	ldi	r21, 0x00	; 0
    2e04:	98 2f       	mov	r25, r24
    2e06:	99 1f       	adc	r25, r25
    2e08:	99 27       	eor	r25, r25
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	13 96       	adiw	r26, 0x03	; 3
    2e0e:	6c 91       	ld	r22, X
    2e10:	13 97       	sbiw	r26, 0x03	; 3
    2e12:	86 2f       	mov	r24, r22
    2e14:	88 0f       	add	r24, r24
    2e16:	89 2b       	or	r24, r25
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	66 1f       	adc	r22, r22
    2e1c:	66 27       	eor	r22, r22
    2e1e:	66 1f       	adc	r22, r22
    2e20:	61 83       	std	Z+1, r22	; 0x01
    2e22:	00 97       	sbiw	r24, 0x00	; 0
    2e24:	39 f5       	brne	.+78     	; 0x2e74 <__unpack_f+0x88>
    2e26:	21 15       	cp	r18, r1
    2e28:	31 05       	cpc	r19, r1
    2e2a:	41 05       	cpc	r20, r1
    2e2c:	51 05       	cpc	r21, r1
    2e2e:	11 f4       	brne	.+4      	; 0x2e34 <__unpack_f+0x48>
    2e30:	82 e0       	ldi	r24, 0x02	; 2
    2e32:	29 c0       	rjmp	.+82     	; 0x2e86 <__unpack_f+0x9a>
    2e34:	82 e8       	ldi	r24, 0x82	; 130
    2e36:	9f ef       	ldi	r25, 0xFF	; 255
    2e38:	93 83       	std	Z+3, r25	; 0x03
    2e3a:	82 83       	std	Z+2, r24	; 0x02
    2e3c:	67 e0       	ldi	r22, 0x07	; 7
    2e3e:	22 0f       	add	r18, r18
    2e40:	33 1f       	adc	r19, r19
    2e42:	44 1f       	adc	r20, r20
    2e44:	55 1f       	adc	r21, r21
    2e46:	6a 95       	dec	r22
    2e48:	d1 f7       	brne	.-12     	; 0x2e3e <__unpack_f+0x52>
    2e4a:	83 e0       	ldi	r24, 0x03	; 3
    2e4c:	80 83       	st	Z, r24
    2e4e:	09 c0       	rjmp	.+18     	; 0x2e62 <__unpack_f+0x76>
    2e50:	22 0f       	add	r18, r18
    2e52:	33 1f       	adc	r19, r19
    2e54:	44 1f       	adc	r20, r20
    2e56:	55 1f       	adc	r21, r21
    2e58:	82 81       	ldd	r24, Z+2	; 0x02
    2e5a:	93 81       	ldd	r25, Z+3	; 0x03
    2e5c:	01 97       	sbiw	r24, 0x01	; 1
    2e5e:	93 83       	std	Z+3, r25	; 0x03
    2e60:	82 83       	std	Z+2, r24	; 0x02
    2e62:	20 30       	cpi	r18, 0x00	; 0
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	38 07       	cpc	r19, r24
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	48 07       	cpc	r20, r24
    2e6c:	80 e4       	ldi	r24, 0x40	; 64
    2e6e:	58 07       	cpc	r21, r24
    2e70:	78 f3       	brcs	.-34     	; 0x2e50 <__unpack_f+0x64>
    2e72:	20 c0       	rjmp	.+64     	; 0x2eb4 <__unpack_f+0xc8>
    2e74:	8f 3f       	cpi	r24, 0xFF	; 255
    2e76:	91 05       	cpc	r25, r1
    2e78:	79 f4       	brne	.+30     	; 0x2e98 <__unpack_f+0xac>
    2e7a:	21 15       	cp	r18, r1
    2e7c:	31 05       	cpc	r19, r1
    2e7e:	41 05       	cpc	r20, r1
    2e80:	51 05       	cpc	r21, r1
    2e82:	19 f4       	brne	.+6      	; 0x2e8a <__unpack_f+0x9e>
    2e84:	84 e0       	ldi	r24, 0x04	; 4
    2e86:	80 83       	st	Z, r24
    2e88:	08 95       	ret
    2e8a:	44 ff       	sbrs	r20, 4
    2e8c:	03 c0       	rjmp	.+6      	; 0x2e94 <__unpack_f+0xa8>
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	80 83       	st	Z, r24
    2e92:	10 c0       	rjmp	.+32     	; 0x2eb4 <__unpack_f+0xc8>
    2e94:	10 82       	st	Z, r1
    2e96:	0e c0       	rjmp	.+28     	; 0x2eb4 <__unpack_f+0xc8>
    2e98:	8f 57       	subi	r24, 0x7F	; 127
    2e9a:	90 40       	sbci	r25, 0x00	; 0
    2e9c:	93 83       	std	Z+3, r25	; 0x03
    2e9e:	82 83       	std	Z+2, r24	; 0x02
    2ea0:	83 e0       	ldi	r24, 0x03	; 3
    2ea2:	80 83       	st	Z, r24
    2ea4:	87 e0       	ldi	r24, 0x07	; 7
    2ea6:	22 0f       	add	r18, r18
    2ea8:	33 1f       	adc	r19, r19
    2eaa:	44 1f       	adc	r20, r20
    2eac:	55 1f       	adc	r21, r21
    2eae:	8a 95       	dec	r24
    2eb0:	d1 f7       	brne	.-12     	; 0x2ea6 <__unpack_f+0xba>
    2eb2:	50 64       	ori	r21, 0x40	; 64
    2eb4:	24 83       	std	Z+4, r18	; 0x04
    2eb6:	35 83       	std	Z+5, r19	; 0x05
    2eb8:	46 83       	std	Z+6, r20	; 0x06
    2eba:	57 83       	std	Z+7, r21	; 0x07
    2ebc:	08 95       	ret

00002ebe <__fpcmp_parts_f>:
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	db 01       	movw	r26, r22
    2ec2:	90 81       	ld	r25, Z
    2ec4:	92 30       	cpi	r25, 0x02	; 2
    2ec6:	08 f4       	brcc	.+2      	; 0x2eca <__fpcmp_parts_f+0xc>
    2ec8:	49 c0       	rjmp	.+146    	; 0x2f5c <__fpcmp_parts_f+0x9e>
    2eca:	8c 91       	ld	r24, X
    2ecc:	82 30       	cpi	r24, 0x02	; 2
    2ece:	08 f4       	brcc	.+2      	; 0x2ed2 <__fpcmp_parts_f+0x14>
    2ed0:	45 c0       	rjmp	.+138    	; 0x2f5c <__fpcmp_parts_f+0x9e>
    2ed2:	94 30       	cpi	r25, 0x04	; 4
    2ed4:	51 f4       	brne	.+20     	; 0x2eea <__fpcmp_parts_f+0x2c>
    2ed6:	61 81       	ldd	r22, Z+1	; 0x01
    2ed8:	84 30       	cpi	r24, 0x04	; 4
    2eda:	b1 f5       	brne	.+108    	; 0x2f48 <__fpcmp_parts_f+0x8a>
    2edc:	11 96       	adiw	r26, 0x01	; 1
    2ede:	2c 91       	ld	r18, X
    2ee0:	11 97       	sbiw	r26, 0x01	; 1
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	26 1b       	sub	r18, r22
    2ee6:	31 09       	sbc	r19, r1
    2ee8:	41 c0       	rjmp	.+130    	; 0x2f6c <__fpcmp_parts_f+0xae>
    2eea:	84 30       	cpi	r24, 0x04	; 4
    2eec:	21 f0       	breq	.+8      	; 0x2ef6 <__fpcmp_parts_f+0x38>
    2eee:	92 30       	cpi	r25, 0x02	; 2
    2ef0:	41 f4       	brne	.+16     	; 0x2f02 <__fpcmp_parts_f+0x44>
    2ef2:	82 30       	cpi	r24, 0x02	; 2
    2ef4:	b1 f1       	breq	.+108    	; 0x2f62 <__fpcmp_parts_f+0xa4>
    2ef6:	11 96       	adiw	r26, 0x01	; 1
    2ef8:	8c 91       	ld	r24, X
    2efa:	11 97       	sbiw	r26, 0x01	; 1
    2efc:	88 23       	and	r24, r24
    2efe:	a1 f1       	breq	.+104    	; 0x2f68 <__fpcmp_parts_f+0xaa>
    2f00:	2d c0       	rjmp	.+90     	; 0x2f5c <__fpcmp_parts_f+0x9e>
    2f02:	61 81       	ldd	r22, Z+1	; 0x01
    2f04:	82 30       	cpi	r24, 0x02	; 2
    2f06:	01 f1       	breq	.+64     	; 0x2f48 <__fpcmp_parts_f+0x8a>
    2f08:	11 96       	adiw	r26, 0x01	; 1
    2f0a:	8c 91       	ld	r24, X
    2f0c:	11 97       	sbiw	r26, 0x01	; 1
    2f0e:	68 17       	cp	r22, r24
    2f10:	d9 f4       	brne	.+54     	; 0x2f48 <__fpcmp_parts_f+0x8a>
    2f12:	22 81       	ldd	r18, Z+2	; 0x02
    2f14:	33 81       	ldd	r19, Z+3	; 0x03
    2f16:	12 96       	adiw	r26, 0x02	; 2
    2f18:	8d 91       	ld	r24, X+
    2f1a:	9c 91       	ld	r25, X
    2f1c:	13 97       	sbiw	r26, 0x03	; 3
    2f1e:	82 17       	cp	r24, r18
    2f20:	93 07       	cpc	r25, r19
    2f22:	94 f0       	brlt	.+36     	; 0x2f48 <__fpcmp_parts_f+0x8a>
    2f24:	28 17       	cp	r18, r24
    2f26:	39 07       	cpc	r19, r25
    2f28:	bc f0       	brlt	.+46     	; 0x2f58 <__fpcmp_parts_f+0x9a>
    2f2a:	24 81       	ldd	r18, Z+4	; 0x04
    2f2c:	35 81       	ldd	r19, Z+5	; 0x05
    2f2e:	46 81       	ldd	r20, Z+6	; 0x06
    2f30:	57 81       	ldd	r21, Z+7	; 0x07
    2f32:	14 96       	adiw	r26, 0x04	; 4
    2f34:	8d 91       	ld	r24, X+
    2f36:	9d 91       	ld	r25, X+
    2f38:	0d 90       	ld	r0, X+
    2f3a:	bc 91       	ld	r27, X
    2f3c:	a0 2d       	mov	r26, r0
    2f3e:	82 17       	cp	r24, r18
    2f40:	93 07       	cpc	r25, r19
    2f42:	a4 07       	cpc	r26, r20
    2f44:	b5 07       	cpc	r27, r21
    2f46:	18 f4       	brcc	.+6      	; 0x2f4e <__fpcmp_parts_f+0x90>
    2f48:	66 23       	and	r22, r22
    2f4a:	41 f0       	breq	.+16     	; 0x2f5c <__fpcmp_parts_f+0x9e>
    2f4c:	0d c0       	rjmp	.+26     	; 0x2f68 <__fpcmp_parts_f+0xaa>
    2f4e:	28 17       	cp	r18, r24
    2f50:	39 07       	cpc	r19, r25
    2f52:	4a 07       	cpc	r20, r26
    2f54:	5b 07       	cpc	r21, r27
    2f56:	28 f4       	brcc	.+10     	; 0x2f62 <__fpcmp_parts_f+0xa4>
    2f58:	66 23       	and	r22, r22
    2f5a:	31 f0       	breq	.+12     	; 0x2f68 <__fpcmp_parts_f+0xaa>
    2f5c:	21 e0       	ldi	r18, 0x01	; 1
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	05 c0       	rjmp	.+10     	; 0x2f6c <__fpcmp_parts_f+0xae>
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <__fpcmp_parts_f+0xae>
    2f68:	2f ef       	ldi	r18, 0xFF	; 255
    2f6a:	3f ef       	ldi	r19, 0xFF	; 255
    2f6c:	c9 01       	movw	r24, r18
    2f6e:	08 95       	ret

00002f70 <__udivmodqi4>:
    2f70:	99 1b       	sub	r25, r25
    2f72:	79 e0       	ldi	r23, 0x09	; 9
    2f74:	04 c0       	rjmp	.+8      	; 0x2f7e <__udivmodqi4_ep>

00002f76 <__udivmodqi4_loop>:
    2f76:	99 1f       	adc	r25, r25
    2f78:	96 17       	cp	r25, r22
    2f7a:	08 f0       	brcs	.+2      	; 0x2f7e <__udivmodqi4_ep>
    2f7c:	96 1b       	sub	r25, r22

00002f7e <__udivmodqi4_ep>:
    2f7e:	88 1f       	adc	r24, r24
    2f80:	7a 95       	dec	r23
    2f82:	c9 f7       	brne	.-14     	; 0x2f76 <__udivmodqi4_loop>
    2f84:	80 95       	com	r24
    2f86:	08 95       	ret

00002f88 <__prologue_saves__>:
    2f88:	2f 92       	push	r2
    2f8a:	3f 92       	push	r3
    2f8c:	4f 92       	push	r4
    2f8e:	5f 92       	push	r5
    2f90:	6f 92       	push	r6
    2f92:	7f 92       	push	r7
    2f94:	8f 92       	push	r8
    2f96:	9f 92       	push	r9
    2f98:	af 92       	push	r10
    2f9a:	bf 92       	push	r11
    2f9c:	cf 92       	push	r12
    2f9e:	df 92       	push	r13
    2fa0:	ef 92       	push	r14
    2fa2:	ff 92       	push	r15
    2fa4:	0f 93       	push	r16
    2fa6:	1f 93       	push	r17
    2fa8:	cf 93       	push	r28
    2faa:	df 93       	push	r29
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
    2fb0:	ca 1b       	sub	r28, r26
    2fb2:	db 0b       	sbc	r29, r27
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	f8 94       	cli
    2fb8:	de bf       	out	0x3e, r29	; 62
    2fba:	0f be       	out	0x3f, r0	; 63
    2fbc:	cd bf       	out	0x3d, r28	; 61
    2fbe:	09 94       	ijmp

00002fc0 <__epilogue_restores__>:
    2fc0:	2a 88       	ldd	r2, Y+18	; 0x12
    2fc2:	39 88       	ldd	r3, Y+17	; 0x11
    2fc4:	48 88       	ldd	r4, Y+16	; 0x10
    2fc6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fc8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fca:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fcc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fce:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fd0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fd2:	b9 84       	ldd	r11, Y+9	; 0x09
    2fd4:	c8 84       	ldd	r12, Y+8	; 0x08
    2fd6:	df 80       	ldd	r13, Y+7	; 0x07
    2fd8:	ee 80       	ldd	r14, Y+6	; 0x06
    2fda:	fd 80       	ldd	r15, Y+5	; 0x05
    2fdc:	0c 81       	ldd	r16, Y+4	; 0x04
    2fde:	1b 81       	ldd	r17, Y+3	; 0x03
    2fe0:	aa 81       	ldd	r26, Y+2	; 0x02
    2fe2:	b9 81       	ldd	r27, Y+1	; 0x01
    2fe4:	ce 0f       	add	r28, r30
    2fe6:	d1 1d       	adc	r29, r1
    2fe8:	0f b6       	in	r0, 0x3f	; 63
    2fea:	f8 94       	cli
    2fec:	de bf       	out	0x3e, r29	; 62
    2fee:	0f be       	out	0x3f, r0	; 63
    2ff0:	cd bf       	out	0x3d, r28	; 61
    2ff2:	ed 01       	movw	r28, r26
    2ff4:	08 95       	ret

00002ff6 <strcpy>:
    2ff6:	fb 01       	movw	r30, r22
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	01 90       	ld	r0, Z+
    2ffc:	0d 92       	st	X+, r0
    2ffe:	00 20       	and	r0, r0
    3000:	e1 f7       	brne	.-8      	; 0x2ffa <strcpy+0x4>
    3002:	08 95       	ret

00003004 <cos>:
    3004:	03 d0       	rcall	.+6      	; 0x300c <__fp_rempio2>
    3006:	e3 95       	inc	r30
    3008:	28 c0       	rjmp	.+80     	; 0x305a <__fp_sinus>
    300a:	ce c0       	rjmp	.+412    	; 0x31a8 <__fp_nan>

0000300c <__fp_rempio2>:
    300c:	3f d0       	rcall	.+126    	; 0x308c <__fp_splitA>
    300e:	e8 f3       	brcs	.-6      	; 0x300a <cos+0x6>
    3010:	e8 94       	clt
    3012:	e0 e0       	ldi	r30, 0x00	; 0
    3014:	bb 27       	eor	r27, r27
    3016:	9f 57       	subi	r25, 0x7F	; 127
    3018:	f0 f0       	brcs	.+60     	; 0x3056 <__fp_rempio2+0x4a>
    301a:	2a ed       	ldi	r18, 0xDA	; 218
    301c:	3f e0       	ldi	r19, 0x0F	; 15
    301e:	49 ec       	ldi	r20, 0xC9	; 201
    3020:	06 c0       	rjmp	.+12     	; 0x302e <__fp_rempio2+0x22>
    3022:	ee 0f       	add	r30, r30
    3024:	bb 0f       	add	r27, r27
    3026:	66 1f       	adc	r22, r22
    3028:	77 1f       	adc	r23, r23
    302a:	88 1f       	adc	r24, r24
    302c:	28 f0       	brcs	.+10     	; 0x3038 <__fp_rempio2+0x2c>
    302e:	b2 3a       	cpi	r27, 0xA2	; 162
    3030:	62 07       	cpc	r22, r18
    3032:	73 07       	cpc	r23, r19
    3034:	84 07       	cpc	r24, r20
    3036:	28 f0       	brcs	.+10     	; 0x3042 <__fp_rempio2+0x36>
    3038:	b2 5a       	subi	r27, 0xA2	; 162
    303a:	62 0b       	sbc	r22, r18
    303c:	73 0b       	sbc	r23, r19
    303e:	84 0b       	sbc	r24, r20
    3040:	e3 95       	inc	r30
    3042:	9a 95       	dec	r25
    3044:	72 f7       	brpl	.-36     	; 0x3022 <__fp_rempio2+0x16>
    3046:	80 38       	cpi	r24, 0x80	; 128
    3048:	30 f4       	brcc	.+12     	; 0x3056 <__fp_rempio2+0x4a>
    304a:	9a 95       	dec	r25
    304c:	bb 0f       	add	r27, r27
    304e:	66 1f       	adc	r22, r22
    3050:	77 1f       	adc	r23, r23
    3052:	88 1f       	adc	r24, r24
    3054:	d2 f7       	brpl	.-12     	; 0x304a <__fp_rempio2+0x3e>
    3056:	90 48       	sbci	r25, 0x80	; 128
    3058:	9b c0       	rjmp	.+310    	; 0x3190 <__fp_mpack_finite>

0000305a <__fp_sinus>:
    305a:	ef 93       	push	r30
    305c:	e0 ff       	sbrs	r30, 0
    305e:	06 c0       	rjmp	.+12     	; 0x306c <__fp_sinus+0x12>
    3060:	a2 ea       	ldi	r26, 0xA2	; 162
    3062:	2a ed       	ldi	r18, 0xDA	; 218
    3064:	3f e0       	ldi	r19, 0x0F	; 15
    3066:	49 ec       	ldi	r20, 0xC9	; 201
    3068:	5f eb       	ldi	r21, 0xBF	; 191
    306a:	37 d0       	rcall	.+110    	; 0x30da <__addsf3x>
    306c:	bf d0       	rcall	.+382    	; 0x31ec <__fp_round>
    306e:	0f 90       	pop	r0
    3070:	03 94       	inc	r0
    3072:	01 fc       	sbrc	r0, 1
    3074:	90 58       	subi	r25, 0x80	; 128
    3076:	ec e8       	ldi	r30, 0x8C	; 140
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	99 c0       	rjmp	.+306    	; 0x31ae <__fp_powsodd>

0000307c <__fp_split3>:
    307c:	57 fd       	sbrc	r21, 7
    307e:	90 58       	subi	r25, 0x80	; 128
    3080:	44 0f       	add	r20, r20
    3082:	55 1f       	adc	r21, r21
    3084:	59 f0       	breq	.+22     	; 0x309c <__fp_splitA+0x10>
    3086:	5f 3f       	cpi	r21, 0xFF	; 255
    3088:	71 f0       	breq	.+28     	; 0x30a6 <__fp_splitA+0x1a>
    308a:	47 95       	ror	r20

0000308c <__fp_splitA>:
    308c:	88 0f       	add	r24, r24
    308e:	97 fb       	bst	r25, 7
    3090:	99 1f       	adc	r25, r25
    3092:	61 f0       	breq	.+24     	; 0x30ac <__fp_splitA+0x20>
    3094:	9f 3f       	cpi	r25, 0xFF	; 255
    3096:	79 f0       	breq	.+30     	; 0x30b6 <__fp_splitA+0x2a>
    3098:	87 95       	ror	r24
    309a:	08 95       	ret
    309c:	12 16       	cp	r1, r18
    309e:	13 06       	cpc	r1, r19
    30a0:	14 06       	cpc	r1, r20
    30a2:	55 1f       	adc	r21, r21
    30a4:	f2 cf       	rjmp	.-28     	; 0x308a <__fp_split3+0xe>
    30a6:	46 95       	lsr	r20
    30a8:	f1 df       	rcall	.-30     	; 0x308c <__fp_splitA>
    30aa:	08 c0       	rjmp	.+16     	; 0x30bc <__fp_splitA+0x30>
    30ac:	16 16       	cp	r1, r22
    30ae:	17 06       	cpc	r1, r23
    30b0:	18 06       	cpc	r1, r24
    30b2:	99 1f       	adc	r25, r25
    30b4:	f1 cf       	rjmp	.-30     	; 0x3098 <__fp_splitA+0xc>
    30b6:	86 95       	lsr	r24
    30b8:	71 05       	cpc	r23, r1
    30ba:	61 05       	cpc	r22, r1
    30bc:	08 94       	sec
    30be:	08 95       	ret
    30c0:	87 d0       	rcall	.+270    	; 0x31d0 <__fp_pscA>
    30c2:	30 f0       	brcs	.+12     	; 0x30d0 <__fp_splitA+0x44>
    30c4:	8c d0       	rcall	.+280    	; 0x31de <__fp_pscB>
    30c6:	20 f0       	brcs	.+8      	; 0x30d0 <__fp_splitA+0x44>
    30c8:	31 f4       	brne	.+12     	; 0x30d6 <__fp_splitA+0x4a>
    30ca:	9f 3f       	cpi	r25, 0xFF	; 255
    30cc:	11 f4       	brne	.+4      	; 0x30d2 <__fp_splitA+0x46>
    30ce:	1e f4       	brtc	.+6      	; 0x30d6 <__fp_splitA+0x4a>
    30d0:	6b c0       	rjmp	.+214    	; 0x31a8 <__fp_nan>
    30d2:	0e f4       	brtc	.+2      	; 0x30d6 <__fp_splitA+0x4a>
    30d4:	e0 95       	com	r30
    30d6:	e7 fb       	bst	r30, 7
    30d8:	53 c0       	rjmp	.+166    	; 0x3180 <__fp_inf>

000030da <__addsf3x>:
    30da:	e9 2f       	mov	r30, r25
    30dc:	cf df       	rcall	.-98     	; 0x307c <__fp_split3>
    30de:	80 f3       	brcs	.-32     	; 0x30c0 <__fp_splitA+0x34>
    30e0:	ba 17       	cp	r27, r26
    30e2:	62 07       	cpc	r22, r18
    30e4:	73 07       	cpc	r23, r19
    30e6:	84 07       	cpc	r24, r20
    30e8:	95 07       	cpc	r25, r21
    30ea:	18 f0       	brcs	.+6      	; 0x30f2 <__addsf3x+0x18>
    30ec:	71 f4       	brne	.+28     	; 0x310a <__addsf3x+0x30>
    30ee:	9e f5       	brtc	.+102    	; 0x3156 <__addsf3x+0x7c>
    30f0:	8e c0       	rjmp	.+284    	; 0x320e <__fp_zero>
    30f2:	0e f4       	brtc	.+2      	; 0x30f6 <__addsf3x+0x1c>
    30f4:	e0 95       	com	r30
    30f6:	0b 2e       	mov	r0, r27
    30f8:	ba 2f       	mov	r27, r26
    30fa:	a0 2d       	mov	r26, r0
    30fc:	0b 01       	movw	r0, r22
    30fe:	b9 01       	movw	r22, r18
    3100:	90 01       	movw	r18, r0
    3102:	0c 01       	movw	r0, r24
    3104:	ca 01       	movw	r24, r20
    3106:	a0 01       	movw	r20, r0
    3108:	11 24       	eor	r1, r1
    310a:	ff 27       	eor	r31, r31
    310c:	59 1b       	sub	r21, r25
    310e:	99 f0       	breq	.+38     	; 0x3136 <__addsf3x+0x5c>
    3110:	59 3f       	cpi	r21, 0xF9	; 249
    3112:	50 f4       	brcc	.+20     	; 0x3128 <__addsf3x+0x4e>
    3114:	50 3e       	cpi	r21, 0xE0	; 224
    3116:	68 f1       	brcs	.+90     	; 0x3172 <__addsf3x+0x98>
    3118:	1a 16       	cp	r1, r26
    311a:	f0 40       	sbci	r31, 0x00	; 0
    311c:	a2 2f       	mov	r26, r18
    311e:	23 2f       	mov	r18, r19
    3120:	34 2f       	mov	r19, r20
    3122:	44 27       	eor	r20, r20
    3124:	58 5f       	subi	r21, 0xF8	; 248
    3126:	f3 cf       	rjmp	.-26     	; 0x310e <__addsf3x+0x34>
    3128:	46 95       	lsr	r20
    312a:	37 95       	ror	r19
    312c:	27 95       	ror	r18
    312e:	a7 95       	ror	r26
    3130:	f0 40       	sbci	r31, 0x00	; 0
    3132:	53 95       	inc	r21
    3134:	c9 f7       	brne	.-14     	; 0x3128 <__addsf3x+0x4e>
    3136:	7e f4       	brtc	.+30     	; 0x3156 <__addsf3x+0x7c>
    3138:	1f 16       	cp	r1, r31
    313a:	ba 0b       	sbc	r27, r26
    313c:	62 0b       	sbc	r22, r18
    313e:	73 0b       	sbc	r23, r19
    3140:	84 0b       	sbc	r24, r20
    3142:	ba f0       	brmi	.+46     	; 0x3172 <__addsf3x+0x98>
    3144:	91 50       	subi	r25, 0x01	; 1
    3146:	a1 f0       	breq	.+40     	; 0x3170 <__addsf3x+0x96>
    3148:	ff 0f       	add	r31, r31
    314a:	bb 1f       	adc	r27, r27
    314c:	66 1f       	adc	r22, r22
    314e:	77 1f       	adc	r23, r23
    3150:	88 1f       	adc	r24, r24
    3152:	c2 f7       	brpl	.-16     	; 0x3144 <__addsf3x+0x6a>
    3154:	0e c0       	rjmp	.+28     	; 0x3172 <__addsf3x+0x98>
    3156:	ba 0f       	add	r27, r26
    3158:	62 1f       	adc	r22, r18
    315a:	73 1f       	adc	r23, r19
    315c:	84 1f       	adc	r24, r20
    315e:	48 f4       	brcc	.+18     	; 0x3172 <__addsf3x+0x98>
    3160:	87 95       	ror	r24
    3162:	77 95       	ror	r23
    3164:	67 95       	ror	r22
    3166:	b7 95       	ror	r27
    3168:	f7 95       	ror	r31
    316a:	9e 3f       	cpi	r25, 0xFE	; 254
    316c:	08 f0       	brcs	.+2      	; 0x3170 <__addsf3x+0x96>
    316e:	b3 cf       	rjmp	.-154    	; 0x30d6 <__fp_splitA+0x4a>
    3170:	93 95       	inc	r25
    3172:	88 0f       	add	r24, r24
    3174:	08 f0       	brcs	.+2      	; 0x3178 <__addsf3x+0x9e>
    3176:	99 27       	eor	r25, r25
    3178:	ee 0f       	add	r30, r30
    317a:	97 95       	ror	r25
    317c:	87 95       	ror	r24
    317e:	08 95       	ret

00003180 <__fp_inf>:
    3180:	97 f9       	bld	r25, 7
    3182:	9f 67       	ori	r25, 0x7F	; 127
    3184:	80 e8       	ldi	r24, 0x80	; 128
    3186:	70 e0       	ldi	r23, 0x00	; 0
    3188:	60 e0       	ldi	r22, 0x00	; 0
    318a:	08 95       	ret

0000318c <__fp_mpack>:
    318c:	9f 3f       	cpi	r25, 0xFF	; 255
    318e:	31 f0       	breq	.+12     	; 0x319c <__fp_mpack_finite+0xc>

00003190 <__fp_mpack_finite>:
    3190:	91 50       	subi	r25, 0x01	; 1
    3192:	20 f4       	brcc	.+8      	; 0x319c <__fp_mpack_finite+0xc>
    3194:	87 95       	ror	r24
    3196:	77 95       	ror	r23
    3198:	67 95       	ror	r22
    319a:	b7 95       	ror	r27
    319c:	88 0f       	add	r24, r24
    319e:	91 1d       	adc	r25, r1
    31a0:	96 95       	lsr	r25
    31a2:	87 95       	ror	r24
    31a4:	97 f9       	bld	r25, 7
    31a6:	08 95       	ret

000031a8 <__fp_nan>:
    31a8:	9f ef       	ldi	r25, 0xFF	; 255
    31aa:	80 ec       	ldi	r24, 0xC0	; 192
    31ac:	08 95       	ret

000031ae <__fp_powsodd>:
    31ae:	9f 93       	push	r25
    31b0:	8f 93       	push	r24
    31b2:	7f 93       	push	r23
    31b4:	6f 93       	push	r22
    31b6:	ff 93       	push	r31
    31b8:	ef 93       	push	r30
    31ba:	9b 01       	movw	r18, r22
    31bc:	ac 01       	movw	r20, r24
    31be:	0a da       	rcall	.-3052   	; 0x25d4 <__mulsf3>
    31c0:	ef 91       	pop	r30
    31c2:	ff 91       	pop	r31
    31c4:	2b d0       	rcall	.+86     	; 0x321c <__fp_powser>
    31c6:	2f 91       	pop	r18
    31c8:	3f 91       	pop	r19
    31ca:	4f 91       	pop	r20
    31cc:	5f 91       	pop	r21
    31ce:	02 ca       	rjmp	.-3068   	; 0x25d4 <__mulsf3>

000031d0 <__fp_pscA>:
    31d0:	00 24       	eor	r0, r0
    31d2:	0a 94       	dec	r0
    31d4:	16 16       	cp	r1, r22
    31d6:	17 06       	cpc	r1, r23
    31d8:	18 06       	cpc	r1, r24
    31da:	09 06       	cpc	r0, r25
    31dc:	08 95       	ret

000031de <__fp_pscB>:
    31de:	00 24       	eor	r0, r0
    31e0:	0a 94       	dec	r0
    31e2:	12 16       	cp	r1, r18
    31e4:	13 06       	cpc	r1, r19
    31e6:	14 06       	cpc	r1, r20
    31e8:	05 06       	cpc	r0, r21
    31ea:	08 95       	ret

000031ec <__fp_round>:
    31ec:	09 2e       	mov	r0, r25
    31ee:	03 94       	inc	r0
    31f0:	00 0c       	add	r0, r0
    31f2:	11 f4       	brne	.+4      	; 0x31f8 <__fp_round+0xc>
    31f4:	88 23       	and	r24, r24
    31f6:	52 f0       	brmi	.+20     	; 0x320c <__fp_round+0x20>
    31f8:	bb 0f       	add	r27, r27
    31fa:	40 f4       	brcc	.+16     	; 0x320c <__fp_round+0x20>
    31fc:	bf 2b       	or	r27, r31
    31fe:	11 f4       	brne	.+4      	; 0x3204 <__fp_round+0x18>
    3200:	60 ff       	sbrs	r22, 0
    3202:	04 c0       	rjmp	.+8      	; 0x320c <__fp_round+0x20>
    3204:	6f 5f       	subi	r22, 0xFF	; 255
    3206:	7f 4f       	sbci	r23, 0xFF	; 255
    3208:	8f 4f       	sbci	r24, 0xFF	; 255
    320a:	9f 4f       	sbci	r25, 0xFF	; 255
    320c:	08 95       	ret

0000320e <__fp_zero>:
    320e:	e8 94       	clt

00003210 <__fp_szero>:
    3210:	bb 27       	eor	r27, r27
    3212:	66 27       	eor	r22, r22
    3214:	77 27       	eor	r23, r23
    3216:	cb 01       	movw	r24, r22
    3218:	97 f9       	bld	r25, 7
    321a:	08 95       	ret

0000321c <__fp_powser>:
    321c:	df 93       	push	r29
    321e:	cf 93       	push	r28
    3220:	1f 93       	push	r17
    3222:	0f 93       	push	r16
    3224:	ff 92       	push	r15
    3226:	ef 92       	push	r14
    3228:	df 92       	push	r13
    322a:	7b 01       	movw	r14, r22
    322c:	8c 01       	movw	r16, r24
    322e:	68 94       	set
    3230:	05 c0       	rjmp	.+10     	; 0x323c <__fp_powser+0x20>
    3232:	da 2e       	mov	r13, r26
    3234:	ef 01       	movw	r28, r30
    3236:	21 d0       	rcall	.+66     	; 0x327a <__mulsf3x>
    3238:	fe 01       	movw	r30, r28
    323a:	e8 94       	clt
    323c:	a5 91       	lpm	r26, Z+
    323e:	25 91       	lpm	r18, Z+
    3240:	35 91       	lpm	r19, Z+
    3242:	45 91       	lpm	r20, Z+
    3244:	55 91       	lpm	r21, Z+
    3246:	ae f3       	brts	.-22     	; 0x3232 <__fp_powser+0x16>
    3248:	ef 01       	movw	r28, r30
    324a:	47 df       	rcall	.-370    	; 0x30da <__addsf3x>
    324c:	fe 01       	movw	r30, r28
    324e:	97 01       	movw	r18, r14
    3250:	a8 01       	movw	r20, r16
    3252:	da 94       	dec	r13
    3254:	79 f7       	brne	.-34     	; 0x3234 <__fp_powser+0x18>
    3256:	df 90       	pop	r13
    3258:	ef 90       	pop	r14
    325a:	ff 90       	pop	r15
    325c:	0f 91       	pop	r16
    325e:	1f 91       	pop	r17
    3260:	cf 91       	pop	r28
    3262:	df 91       	pop	r29
    3264:	08 95       	ret
    3266:	b4 df       	rcall	.-152    	; 0x31d0 <__fp_pscA>
    3268:	28 f0       	brcs	.+10     	; 0x3274 <__fp_powser+0x58>
    326a:	b9 df       	rcall	.-142    	; 0x31de <__fp_pscB>
    326c:	18 f0       	brcs	.+6      	; 0x3274 <__fp_powser+0x58>
    326e:	95 23       	and	r25, r21
    3270:	09 f0       	breq	.+2      	; 0x3274 <__fp_powser+0x58>
    3272:	86 cf       	rjmp	.-244    	; 0x3180 <__fp_inf>
    3274:	99 cf       	rjmp	.-206    	; 0x31a8 <__fp_nan>
    3276:	11 24       	eor	r1, r1
    3278:	cb cf       	rjmp	.-106    	; 0x3210 <__fp_szero>

0000327a <__mulsf3x>:
    327a:	00 df       	rcall	.-512    	; 0x307c <__fp_split3>
    327c:	a0 f3       	brcs	.-24     	; 0x3266 <__fp_powser+0x4a>

0000327e <__mulsf3_pse>:
    327e:	95 9f       	mul	r25, r21
    3280:	d1 f3       	breq	.-12     	; 0x3276 <__fp_powser+0x5a>
    3282:	95 0f       	add	r25, r21
    3284:	50 e0       	ldi	r21, 0x00	; 0
    3286:	55 1f       	adc	r21, r21
    3288:	62 9f       	mul	r22, r18
    328a:	f0 01       	movw	r30, r0
    328c:	72 9f       	mul	r23, r18
    328e:	bb 27       	eor	r27, r27
    3290:	f0 0d       	add	r31, r0
    3292:	b1 1d       	adc	r27, r1
    3294:	63 9f       	mul	r22, r19
    3296:	aa 27       	eor	r26, r26
    3298:	f0 0d       	add	r31, r0
    329a:	b1 1d       	adc	r27, r1
    329c:	aa 1f       	adc	r26, r26
    329e:	64 9f       	mul	r22, r20
    32a0:	66 27       	eor	r22, r22
    32a2:	b0 0d       	add	r27, r0
    32a4:	a1 1d       	adc	r26, r1
    32a6:	66 1f       	adc	r22, r22
    32a8:	82 9f       	mul	r24, r18
    32aa:	22 27       	eor	r18, r18
    32ac:	b0 0d       	add	r27, r0
    32ae:	a1 1d       	adc	r26, r1
    32b0:	62 1f       	adc	r22, r18
    32b2:	73 9f       	mul	r23, r19
    32b4:	b0 0d       	add	r27, r0
    32b6:	a1 1d       	adc	r26, r1
    32b8:	62 1f       	adc	r22, r18
    32ba:	83 9f       	mul	r24, r19
    32bc:	a0 0d       	add	r26, r0
    32be:	61 1d       	adc	r22, r1
    32c0:	22 1f       	adc	r18, r18
    32c2:	74 9f       	mul	r23, r20
    32c4:	33 27       	eor	r19, r19
    32c6:	a0 0d       	add	r26, r0
    32c8:	61 1d       	adc	r22, r1
    32ca:	23 1f       	adc	r18, r19
    32cc:	84 9f       	mul	r24, r20
    32ce:	60 0d       	add	r22, r0
    32d0:	21 1d       	adc	r18, r1
    32d2:	82 2f       	mov	r24, r18
    32d4:	76 2f       	mov	r23, r22
    32d6:	6a 2f       	mov	r22, r26
    32d8:	11 24       	eor	r1, r1
    32da:	9f 57       	subi	r25, 0x7F	; 127
    32dc:	50 40       	sbci	r21, 0x00	; 0
    32de:	8a f0       	brmi	.+34     	; 0x3302 <__mulsf3_pse+0x84>
    32e0:	e1 f0       	breq	.+56     	; 0x331a <__mulsf3_pse+0x9c>
    32e2:	88 23       	and	r24, r24
    32e4:	4a f0       	brmi	.+18     	; 0x32f8 <__mulsf3_pse+0x7a>
    32e6:	ee 0f       	add	r30, r30
    32e8:	ff 1f       	adc	r31, r31
    32ea:	bb 1f       	adc	r27, r27
    32ec:	66 1f       	adc	r22, r22
    32ee:	77 1f       	adc	r23, r23
    32f0:	88 1f       	adc	r24, r24
    32f2:	91 50       	subi	r25, 0x01	; 1
    32f4:	50 40       	sbci	r21, 0x00	; 0
    32f6:	a9 f7       	brne	.-22     	; 0x32e2 <__mulsf3_pse+0x64>
    32f8:	9e 3f       	cpi	r25, 0xFE	; 254
    32fa:	51 05       	cpc	r21, r1
    32fc:	70 f0       	brcs	.+28     	; 0x331a <__mulsf3_pse+0x9c>
    32fe:	40 cf       	rjmp	.-384    	; 0x3180 <__fp_inf>
    3300:	87 cf       	rjmp	.-242    	; 0x3210 <__fp_szero>
    3302:	5f 3f       	cpi	r21, 0xFF	; 255
    3304:	ec f3       	brlt	.-6      	; 0x3300 <__mulsf3_pse+0x82>
    3306:	98 3e       	cpi	r25, 0xE8	; 232
    3308:	dc f3       	brlt	.-10     	; 0x3300 <__mulsf3_pse+0x82>
    330a:	86 95       	lsr	r24
    330c:	77 95       	ror	r23
    330e:	67 95       	ror	r22
    3310:	b7 95       	ror	r27
    3312:	f7 95       	ror	r31
    3314:	e7 95       	ror	r30
    3316:	9f 5f       	subi	r25, 0xFF	; 255
    3318:	c1 f7       	brne	.-16     	; 0x330a <__mulsf3_pse+0x8c>
    331a:	fe 2b       	or	r31, r30
    331c:	88 0f       	add	r24, r24
    331e:	91 1d       	adc	r25, r1
    3320:	96 95       	lsr	r25
    3322:	87 95       	ror	r24
    3324:	97 f9       	bld	r25, 7
    3326:	08 95       	ret

00003328 <_exit>:
    3328:	f8 94       	cli

0000332a <__stop_program>:
    332a:	ff cf       	rjmp	.-2      	; 0x332a <__stop_program>
