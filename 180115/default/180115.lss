
180115.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800100  00002e70  00002f04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  00800234  00800234  00003038  2**0
                  ALLOC
  3 .stab         00001cc8  00000000  00000000  00003038  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000064a  00000000  00000000  00004d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  0000534a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000005ac  00000000  00000000  0000558a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003887  00000000  00000000  00005b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ad3  00000000  00000000  000093bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002b2b  00000000  00000000  0000ae90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000480  00000000  00000000  0000d9bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000735  00000000  00000000  0000de3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001bff  00000000  00000000  0000e571  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000007fb  00000000  00000000  00010170  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  0001096b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__vector_14>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__vector_18>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_30>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <READ_barcode+0x90>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d0 e1       	ldi	r29, 0x10	; 16
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	12 e0       	ldi	r17, 0x02	; 2
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	e0 e7       	ldi	r30, 0x70	; 112
      be:	fe e2       	ldi	r31, 0x2E	; 46
      c0:	00 e0       	ldi	r16, 0x00	; 0
      c2:	0b bf       	out	0x3b, r16	; 59
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
      c6:	07 90       	elpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a4 33       	cpi	r26, 0x34	; 52
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
      d0:	12 e0       	ldi	r17, 0x02	; 2
      d2:	a4 e3       	ldi	r26, 0x34	; 52
      d4:	b2 e0       	ldi	r27, 0x02	; 2
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	a0 38       	cpi	r26, 0x80	; 128
      dc:	b1 07       	cpc	r27, r17
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	0e 94 e5 07 	call	0xfca	; 0xfca <main>
      e4:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <MCU_init>:
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART1 Receiver: On
	// USART1 Transmitter: On
	// USART1 Mode: Asynchronous
	// USART1 Baud Rate: 9600
	UCSR1A=0x00;
      ec:	10 92 9b 00 	sts	0x009B, r1
	UCSR1B=0x98;
      f0:	88 e9       	ldi	r24, 0x98	; 152
      f2:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C=0x06;
      f6:	86 e0       	ldi	r24, 0x06	; 6
      f8:	80 93 9d 00 	sts	0x009D, r24
	UBRR1H=0x00;
      fc:	10 92 98 00 	sts	0x0098, r1
	UBRR1L=0x5F;
     100:	8f e5       	ldi	r24, 0x5F	; 95
     102:	80 93 99 00 	sts	0x0099, r24

	sei();
     106:	78 94       	sei
}
     108:	08 95       	ret

0000010a <__vector_30>:

ISR(USART1_RX_vect)
{
     10a:	1f 92       	push	r1
     10c:	0f 92       	push	r0
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	0f 92       	push	r0
     112:	11 24       	eor	r1, r1
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
	char data;
	
	data=UDR1;
     118:	90 91 9c 00 	lds	r25, 0x009C
	while(!(UCSR1A&0xB8)); //수신완료 및 에러 검출되지 않을시
     11c:	80 91 9b 00 	lds	r24, 0x009B
     120:	88 7b       	andi	r24, 0xB8	; 184
     122:	e1 f3       	breq	.-8      	; 0x11c <__vector_30+0x12>
	rx1_flg=1;              //수신완료 플레그 set
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	80 93 34 02 	sts	0x0234, r24
	rx1_buff=data;	
     12a:	90 93 35 02 	sts	0x0235, r25
}
     12e:	9f 91       	pop	r25
     130:	8f 91       	pop	r24
     132:	0f 90       	pop	r0
     134:	0f be       	out	0x3f, r0	; 63
     136:	0f 90       	pop	r0
     138:	1f 90       	pop	r1
     13a:	18 95       	reti

0000013c <getchar1>:

char getchar1(void)  //uart 수신하기
{
	char data;
	
	data=rx1_buff;
     13c:	80 91 35 02 	lds	r24, 0x0235
	rx1_buff=0;
     140:	10 92 35 02 	sts	0x0235, r1
	cli();           //글로벌 인터럽트 disable
     144:	f8 94       	cli
	rx1_flg=0;       //수신완료 플레그 reset
     146:	10 92 34 02 	sts	0x0234, r1
	sei();           //글로벌 인터럽트 enable          
     14a:	78 94       	sei
	return data;     //수신데이터 반환
}
     14c:	08 95       	ret

0000014e <putchar1>:

void putchar1(char data) //uart 송신화기
{
	while(!(UCSR1A&0x20));  //송신 준비 완료시
     14e:	90 91 9b 00 	lds	r25, 0x009B
     152:	95 ff       	sbrs	r25, 5
     154:	fc cf       	rjmp	.-8      	; 0x14e <putchar1>
	UDR1=data;              //송신 버퍼에 데이터 쓰기
     156:	80 93 9c 00 	sts	0x009C, r24
}
     15a:	08 95       	ret

0000015c <Interface_init>:
// Parameter : 없음
// Return    : 없음
void Interface_init(void)
{
    // LCD / EX I/O Expander
	TWDR = 0xFF;
     15c:	8f ef       	ldi	r24, 0xFF	; 255
     15e:	80 93 73 00 	sts	0x0073, r24
	TWBR = 0x48;
     162:	88 e4       	ldi	r24, 0x48	; 72
     164:	80 93 70 00 	sts	0x0070, r24
}
     168:	08 95       	ret

0000016a <lcd_write_data>:
//          data - 전송할 한바이트 데이터
// Return    : 없음
void lcd_write_data(unsigned char data)
{
	// 시작
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     16a:	94 ea       	ldi	r25, 0xA4	; 164
     16c:	90 93 74 00 	sts	0x0074, r25
	// 준비상태 체크
    while(!(TWCR & (1 << TWINT)));
     170:	90 91 74 00 	lds	r25, 0x0074
     174:	97 ff       	sbrs	r25, 7
     176:	fc cf       	rjmp	.-8      	; 0x170 <lcd_write_data+0x6>
	
	// 주소 전송
    TWDR = SLA << 1;
     178:	9e e0       	ldi	r25, 0x0E	; 14
     17a:	90 93 73 00 	sts	0x0073, r25
	
	TWCR = (1 << TWINT) | (1 << TWEN);
     17e:	94 e8       	ldi	r25, 0x84	; 132
     180:	90 93 74 00 	sts	0x0074, r25
	while(!(TWCR & (1 << TWINT)));
     184:	90 91 74 00 	lds	r25, 0x0074
     188:	97 ff       	sbrs	r25, 7
     18a:	fc cf       	rjmp	.-8      	; 0x184 <lcd_write_data+0x1a>
	
	TWDR = data;
     18c:	80 93 73 00 	sts	0x0073, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
     190:	84 e8       	ldi	r24, 0x84	; 132
     192:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1 << TWINT)));
     196:	80 91 74 00 	lds	r24, 0x0074
     19a:	87 ff       	sbrs	r24, 7
     19c:	fc cf       	rjmp	.-8      	; 0x196 <lcd_write_data+0x2c>
	
    // 정지
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     19e:	84 e9       	ldi	r24, 0x94	; 148
     1a0:	80 93 74 00 	sts	0x0074, r24
}
     1a4:	08 95       	ret

000001a6 <lcd_display_str>:
// Parameter :
//          line   - 출력할 라인번호(0~3)
//          string - 출력할 문자열(최대 20자)
// Return    : 없음
void lcd_display_str(unsigned char Y_line, unsigned char X_line,char *string) //lcd 스트링데이터 쓰기
{
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <lcd_display_str+0xe>
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	08 2f       	mov	r16, r24
     1ba:	16 2f       	mov	r17, r22
    int i=X_line;

	if((Y_line<4) && (X_line<20)){
     1bc:	84 30       	cpi	r24, 0x04	; 4
     1be:	70 f5       	brcc	.+92     	; 0x21c <lcd_display_str+0x76>
     1c0:	64 31       	cpi	r22, 0x14	; 20
     1c2:	60 f5       	brcc	.+88     	; 0x21c <lcd_display_str+0x76>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     1c4:	8b e1       	ldi	r24, 0x1B	; 27
     1c6:	49 83       	std	Y+1, r20	; 0x01
     1c8:	5a 83       	std	Y+2, r21	; 0x02
     1ca:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1ce:	8c e4       	ldi	r24, 0x4C	; 76
     1d0:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     1d4:	81 2f       	mov	r24, r17
     1d6:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1da:	80 2f       	mov	r24, r16
     1dc:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e0:	80 e7       	ldi	r24, 0x70	; 112
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	01 97       	sbiw	r24, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_display_str+0x3e>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_display_str+0x44>
     1ea:	e1 2e       	mov	r14, r17
     1ec:	ff 24       	eor	r15, r15
     1ee:	49 81       	ldd	r20, Y+1	; 0x01
     1f0:	5a 81       	ldd	r21, Y+2	; 0x02
     1f2:	04 2f       	mov	r16, r20
     1f4:	15 2f       	mov	r17, r21
     1f6:	06 c0       	rjmp	.+12     	; 0x204 <lcd_display_str+0x5e>
		_delay_us(100);
    	while(((i++)<20)&&*string){
        	lcd_write_data(*string++);
     1f8:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1fc:	94 ec       	ldi	r25, 0xC4	; 196
     1fe:	9a 95       	dec	r25
     200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_display_str+0x58>
     202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_display_str+0x5e>

	if((Y_line<4) && (X_line<20)){
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
		lcd_write_data(X_line); lcd_write_data(Y_line);
		_delay_us(100);
    	while(((i++)<20)&&*string){
     204:	e4 e1       	ldi	r30, 0x14	; 20
     206:	ee 16       	cp	r14, r30
     208:	f1 04       	cpc	r15, r1
     20a:	44 f4       	brge	.+16     	; 0x21c <lcd_display_str+0x76>
     20c:	f8 01       	movw	r30, r16
     20e:	81 91       	ld	r24, Z+
     210:	8f 01       	movw	r16, r30
     212:	08 94       	sec
     214:	e1 1c       	adc	r14, r1
     216:	f1 1c       	adc	r15, r1
     218:	88 23       	and	r24, r24
     21a:	71 f7       	brne	.-36     	; 0x1f8 <lcd_display_str+0x52>
        	lcd_write_data(*string++);
			_delay_us(40);
		}
    }
}
     21c:	0f 90       	pop	r0
     21e:	0f 90       	pop	r0
     220:	cf 91       	pop	r28
     222:	df 91       	pop	r29
     224:	1f 91       	pop	r17
     226:	0f 91       	pop	r16
     228:	ff 90       	pop	r15
     22a:	ef 90       	pop	r14
     22c:	08 95       	ret

0000022e <write_lcd_data>:

void write_lcd_data(unsigned char Y_line, unsigned char X_line, long data) //lcd데이터 쓰기
{
     22e:	1f 93       	push	r17
     230:	df 93       	push	r29
     232:	cf 93       	push	r28
     234:	00 d0       	rcall	.+0      	; 0x236 <write_lcd_data+0x8>
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	18 2f       	mov	r17, r24
    if(Y_line<4 && X_line<20){
     23c:	84 30       	cpi	r24, 0x04	; 4
     23e:	f0 f4       	brcc	.+60     	; 0x27c <write_lcd_data+0x4e>
     240:	64 31       	cpi	r22, 0x14	; 20
     242:	e0 f4       	brcc	.+56     	; 0x27c <write_lcd_data+0x4e>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     244:	8b e1       	ldi	r24, 0x1B	; 27
     246:	2a 83       	std	Y+2, r18	; 0x02
     248:	69 83       	std	Y+1, r22	; 0x01
     24a:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     24e:	8c e4       	ldi	r24, 0x4C	; 76
     250:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     254:	69 81       	ldd	r22, Y+1	; 0x01
     256:	86 2f       	mov	r24, r22
     258:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     25c:	81 2f       	mov	r24, r17
     25e:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     262:	80 e7       	ldi	r24, 0x70	; 112
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <write_lcd_data+0x38>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <write_lcd_data+0x3e>
		_delay_us(100);
		lcd_write_data(data);
     26c:	2a 81       	ldd	r18, Y+2	; 0x02
     26e:	82 2f       	mov	r24, r18
     270:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     274:	94 ec       	ldi	r25, 0xC4	; 196
     276:	9a 95       	dec	r25
     278:	f1 f7       	brne	.-4      	; 0x276 <write_lcd_data+0x48>
     27a:	00 c0       	rjmp	.+0      	; 0x27c <write_lcd_data+0x4e>
		_delay_us(40);
    }
}
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	cf 91       	pop	r28
     282:	df 91       	pop	r29
     284:	1f 91       	pop	r17
     286:	08 95       	ret

00000288 <lcd_clear_screen>:

void lcd_clear_screen(void){ lcd_write_data(0x1B); lcd_write_data(0x43); _delay_ms(20); } //lcd전체화면 클리어
     288:	8b e1       	ldi	r24, 0x1B	; 27
     28a:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     28e:	83 e4       	ldi	r24, 0x43	; 67
     290:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     294:	86 e6       	ldi	r24, 0x66	; 102
     296:	96 ee       	ldi	r25, 0xE6	; 230
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	81 50       	subi	r24, 0x01	; 1
     29c:	90 40       	sbci	r25, 0x00	; 0
     29e:	a0 40       	sbci	r26, 0x00	; 0
     2a0:	e1 f7       	brne	.-8      	; 0x29a <lcd_clear_screen+0x12>
     2a2:	08 95       	ret

000002a4 <display_char>:
void display_char(unsigned char line, unsigned char col, unsigned char data) ////lcd char 데이터 표시
{
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	18 2f       	mov	r17, r24
     2ae:	f6 2e       	mov	r15, r22
     2b0:	e4 2e       	mov	r14, r20
    unsigned char val=0, val_buff=0;

	val=data;   

	val_buff=val/100;             
     2b2:	84 2f       	mov	r24, r20
     2b4:	64 e6       	ldi	r22, 0x64	; 100
     2b6:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__udivmodqi4>
     2ba:	08 2f       	mov	r16, r24
	write_lcd_data(line, col, val_buff+'0' );
     2bc:	28 2f       	mov	r18, r24
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	20 5d       	subi	r18, 0xD0	; 208
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
     2c4:	44 27       	eor	r20, r20
     2c6:	37 fd       	sbrc	r19, 7
     2c8:	40 95       	com	r20
     2ca:	54 2f       	mov	r21, r20
     2cc:	81 2f       	mov	r24, r17
     2ce:	6f 2d       	mov	r22, r15
     2d0:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
	val=val-(100*val_buff);
     2d4:	8c e9       	ldi	r24, 0x9C	; 156
     2d6:	08 9f       	mul	r16, r24
     2d8:	00 2d       	mov	r16, r0
     2da:	11 24       	eor	r1, r1
     2dc:	0e 0d       	add	r16, r14

	val_buff=val/10;
     2de:	80 2f       	mov	r24, r16
     2e0:	6a e0       	ldi	r22, 0x0A	; 10
     2e2:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__udivmodqi4>
     2e6:	e8 2e       	mov	r14, r24
	write_lcd_data(line, 1+col, val_buff+'0' );
     2e8:	6f 2d       	mov	r22, r15
     2ea:	6f 5f       	subi	r22, 0xFF	; 255
     2ec:	28 2f       	mov	r18, r24
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	20 5d       	subi	r18, 0xD0	; 208
     2f2:	3f 4f       	sbci	r19, 0xFF	; 255
     2f4:	44 27       	eor	r20, r20
     2f6:	37 fd       	sbrc	r19, 7
     2f8:	40 95       	com	r20
     2fa:	54 2f       	mov	r21, r20
     2fc:	81 2f       	mov	r24, r17
     2fe:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
	val=val-(10*val_buff);

	write_lcd_data(line, 2+col, val+'0');
     302:	6f 2d       	mov	r22, r15
     304:	6e 5f       	subi	r22, 0xFE	; 254
	write_lcd_data(line, col, val_buff+'0' );
	val=val-(100*val_buff);

	val_buff=val/10;
	write_lcd_data(line, 1+col, val_buff+'0' );
	val=val-(10*val_buff);
     306:	26 ef       	ldi	r18, 0xF6	; 246
     308:	e2 9e       	mul	r14, r18
     30a:	20 2d       	mov	r18, r0
     30c:	11 24       	eor	r1, r1
     30e:	20 0f       	add	r18, r16

	write_lcd_data(line, 2+col, val+'0');
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	20 5d       	subi	r18, 0xD0	; 208
     314:	3f 4f       	sbci	r19, 0xFF	; 255
     316:	44 27       	eor	r20, r20
     318:	37 fd       	sbrc	r19, 7
     31a:	40 95       	com	r20
     31c:	54 2f       	mov	r21, r20
     31e:	81 2f       	mov	r24, r17
     320:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
}
     324:	1f 91       	pop	r17
     326:	0f 91       	pop	r16
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	08 95       	ret

0000032e <HolonomicW>:
				
}



void HolonomicW(int f_agl, int f_speed, int fw_speed){
     32e:	2f 92       	push	r2
     330:	3f 92       	push	r3
     332:	4f 92       	push	r4
     334:	5f 92       	push	r5
     336:	6f 92       	push	r6
     338:	7f 92       	push	r7
     33a:	8f 92       	push	r8
     33c:	9f 92       	push	r9
     33e:	af 92       	push	r10
     340:	bf 92       	push	r11
     342:	cf 92       	push	r12
     344:	df 92       	push	r13
     346:	ef 92       	push	r14
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	df 93       	push	r29
     350:	cf 93       	push	r28
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	60 97       	sbiw	r28, 0x10	; 16
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	8c 01       	movw	r16, r24
     364:	7b 01       	movw	r14, r22
     366:	1a 01       	movw	r2, r20
	double V[3]={0,0,0};

	unsigned char i=0;

	// 좌표계 변환
	if(f_agl <= 180) DesiredDirection = 180 - f_agl;
     368:	85 3b       	cpi	r24, 0xB5	; 181
     36a:	91 05       	cpc	r25, r1
     36c:	1c f4       	brge	.+6      	; 0x374 <HolonomicW+0x46>
     36e:	64 eb       	ldi	r22, 0xB4	; 180
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	02 c0       	rjmp	.+4      	; 0x378 <HolonomicW+0x4a>
	else if(f_agl > 180) DesiredDirection = 540 - f_agl;
     374:	6c e1       	ldi	r22, 0x1C	; 28
     376:	72 e0       	ldi	r23, 0x02	; 2
     378:	60 1b       	sub	r22, r16
     37a:	71 0b       	sbc	r23, r17
	
	// 라디안 변환
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
     37c:	88 27       	eor	r24, r24
     37e:	77 fd       	sbrc	r23, 7
     380:	80 95       	com	r24
     382:	98 2f       	mov	r25, r24
     384:	0e 94 4d 12 	call	0x249a	; 0x249a <__floatsisf>
     388:	5b 01       	movw	r10, r22
     38a:	6c 01       	movw	r12, r24
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	84 e3       	ldi	r24, 0x34	; 52
     392:	93 e4       	ldi	r25, 0x43	; 67
     394:	a6 01       	movw	r20, r12
     396:	95 01       	movw	r18, r10
     398:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__subsf3>
     39c:	28 e9       	ldi	r18, 0x98	; 152
     39e:	39 ef       	ldi	r19, 0xF9	; 249
     3a0:	4e e8       	ldi	r20, 0x8E	; 142
     3a2:	5c e3       	ldi	r21, 0x3C	; 60
     3a4:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
	radianB = (90-(double)DesiredDirection) * 0.017453;

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
     3a8:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <cos>
     3ac:	3b 01       	movw	r6, r22
     3ae:	4c 01       	movw	r8, r24
	if(f_agl <= 180) DesiredDirection = 180 - f_agl;
	else if(f_agl > 180) DesiredDirection = 540 - f_agl;
	
	// 라디안 변환
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
	radianB = (90-(double)DesiredDirection) * 0.017453;
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	84 eb       	ldi	r24, 0xB4	; 180
     3b6:	92 e4       	ldi	r25, 0x42	; 66
     3b8:	a6 01       	movw	r20, r12
     3ba:	95 01       	movw	r18, r10
     3bc:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__subsf3>
     3c0:	28 e9       	ldi	r18, 0x98	; 152
     3c2:	39 ef       	ldi	r19, 0xF9	; 249
     3c4:	4e e8       	ldi	r20, 0x8E	; 142
     3c6:	5c e3       	ldi	r21, 0x3C	; 60
     3c8:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
	Fy = f_speed * cos(radianB);
     3cc:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <cos>
     3d0:	5b 01       	movw	r10, r22
     3d2:	6c 01       	movw	r12, r24
	Fw=fw_speed;

	if(f_agl<0 || f_agl>=360){
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	08 36       	cpi	r16, 0x68	; 104
     3d8:	18 07       	cpc	r17, r24
     3da:	28 f5       	brcc	.+74     	; 0x426 <HolonomicW+0xf8>
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
	radianB = (90-(double)DesiredDirection) * 0.017453;

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
     3dc:	b7 01       	movw	r22, r14
     3de:	88 27       	eor	r24, r24
     3e0:	77 fd       	sbrc	r23, 7
     3e2:	80 95       	com	r24
     3e4:	98 2f       	mov	r25, r24
     3e6:	0e 94 4d 12 	call	0x249a	; 0x249a <__floatsisf>
     3ea:	7b 01       	movw	r14, r22
     3ec:	8c 01       	movw	r16, r24
     3ee:	a4 01       	movw	r20, r8
     3f0:	93 01       	movw	r18, r6
     3f2:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
     3f6:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
     3fa:	66 2e       	mov	r6, r22
     3fc:	77 2e       	mov	r7, r23
     3fe:	88 2e       	mov	r8, r24
     400:	99 2e       	mov	r9, r25
	Fy = f_speed * cos(radianB);
     402:	c8 01       	movw	r24, r16
     404:	b7 01       	movw	r22, r14
     406:	a6 01       	movw	r20, r12
     408:	95 01       	movw	r18, r10
     40a:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
     40e:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
     412:	e6 2e       	mov	r14, r22
     414:	f7 2e       	mov	r15, r23
     416:	08 2f       	mov	r16, r24
     418:	19 2f       	mov	r17, r25
	Fw=fw_speed;
     41a:	51 01       	movw	r10, r2
     41c:	cc 24       	eor	r12, r12
     41e:	b7 fc       	sbrc	r11, 7
     420:	c0 94       	com	r12
     422:	dc 2c       	mov	r13, r12
     424:	11 c0       	rjmp	.+34     	; 0x448 <HolonomicW+0x11a>

	if(f_agl<0 || f_agl>=360){
		if(f_agl<0)Fw = -f_speed;
     426:	17 ff       	sbrs	r17, 7
     428:	04 c0       	rjmp	.+8      	; 0x432 <HolonomicW+0x104>
     42a:	f0 94       	com	r15
     42c:	e1 94       	neg	r14
     42e:	f1 08       	sbc	r15, r1
     430:	f3 94       	inc	r15
		else if(f_agl>=360)Fw = f_speed;
     432:	57 01       	movw	r10, r14
     434:	cc 24       	eor	r12, r12
     436:	b7 fc       	sbrc	r11, 7
     438:	c0 94       	com	r12
     43a:	dc 2c       	mov	r13, r12
		Fx=0;
		Fy=0;
     43c:	ee 24       	eor	r14, r14
     43e:	ff 24       	eor	r15, r15
     440:	87 01       	movw	r16, r14
	Fw=fw_speed;

	if(f_agl<0 || f_agl>=360){
		if(f_agl<0)Fw = -f_speed;
		else if(f_agl>=360)Fw = f_speed;
		Fx=0;
     442:	66 24       	eor	r6, r6
     444:	77 24       	eor	r7, r7
     446:	43 01       	movw	r8, r6
		Fy=0;
	}
		
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
     448:	c4 01       	movw	r24, r8
     44a:	b3 01       	movw	r22, r6
     44c:	0e 94 4d 12 	call	0x249a	; 0x249a <__floatsisf>
     450:	6d 87       	std	Y+13, r22	; 0x0d
     452:	7e 87       	std	Y+14, r23	; 0x0e
     454:	8f 87       	std	Y+15, r24	; 0x0f
     456:	98 8b       	std	Y+16, r25	; 0x10
     458:	c8 01       	movw	r24, r16
     45a:	b7 01       	movw	r22, r14
     45c:	0e 94 4d 12 	call	0x249a	; 0x249a <__floatsisf>
     460:	1b 01       	movw	r2, r22
     462:	2c 01       	movw	r4, r24
     464:	22 e0       	ldi	r18, 0x02	; 2
     466:	3b e2       	ldi	r19, 0x2B	; 43
     468:	47 e0       	ldi	r20, 0x07	; 7
     46a:	5d e3       	ldi	r21, 0x3D	; 61
     46c:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
     470:	16 2f       	mov	r17, r22
     472:	f7 2e       	mov	r15, r23
     474:	98 2e       	mov	r9, r24
     476:	89 2e       	mov	r8, r25
     478:	c6 01       	movw	r24, r12
     47a:	b5 01       	movw	r22, r10
     47c:	0e 94 4d 12 	call	0x249a	; 0x249a <__floatsisf>
     480:	2e e4       	ldi	r18, 0x4E	; 78
     482:	32 e6       	ldi	r19, 0x62	; 98
     484:	40 e1       	ldi	r20, 0x10	; 16
     486:	5e e3       	ldi	r21, 0x3E	; 62
     488:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
     48c:	a6 2e       	mov	r10, r22
     48e:	e7 2e       	mov	r14, r23
     490:	08 2f       	mov	r16, r24
     492:	69 2e       	mov	r6, r25
     494:	6d 85       	ldd	r22, Y+13	; 0x0d
     496:	7e 85       	ldd	r23, Y+14	; 0x0e
     498:	8f 85       	ldd	r24, Y+15	; 0x0f
     49a:	98 89       	ldd	r25, Y+16	; 0x10
     49c:	25 ed       	ldi	r18, 0xD5	; 213
     49e:	38 e7       	ldi	r19, 0x78	; 120
     4a0:	49 e6       	ldi	r20, 0x69	; 105
     4a2:	5d e3       	ldi	r21, 0x3D	; 61
     4a4:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
     4a8:	f4 01       	movw	r30, r8
     4aa:	21 2f       	mov	r18, r17
     4ac:	3f 2d       	mov	r19, r15
     4ae:	4f 2f       	mov	r20, r31
     4b0:	5e 2f       	mov	r21, r30
     4b2:	0e 94 35 10 	call	0x206a	; 0x206a <__addsf3>
     4b6:	2a 2d       	mov	r18, r10
     4b8:	3e 2d       	mov	r19, r14
     4ba:	40 2f       	mov	r20, r16
     4bc:	56 2d       	mov	r21, r6
     4be:	0e 94 35 10 	call	0x206a	; 0x206a <__addsf3>
     4c2:	69 83       	std	Y+1, r22	; 0x01
     4c4:	7a 83       	std	Y+2, r23	; 0x02
     4c6:	8b 83       	std	Y+3, r24	; 0x03
     4c8:	9c 83       	std	Y+4, r25	; 0x04
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
     4ca:	c2 01       	movw	r24, r4
     4cc:	b1 01       	movw	r22, r2
     4ce:	28 eb       	ldi	r18, 0xB8	; 184
     4d0:	3e e1       	ldi	r19, 0x1E	; 30
     4d2:	45 e8       	ldi	r20, 0x85	; 133
     4d4:	5d eb       	ldi	r21, 0xBD	; 189
     4d6:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
     4da:	2a 2d       	mov	r18, r10
     4dc:	3e 2d       	mov	r19, r14
     4de:	40 2f       	mov	r20, r16
     4e0:	56 2d       	mov	r21, r6
     4e2:	0e 94 35 10 	call	0x206a	; 0x206a <__addsf3>
     4e6:	6d 83       	std	Y+5, r22	; 0x05
     4e8:	7e 83       	std	Y+6, r23	; 0x06
     4ea:	8f 83       	std	Y+7, r24	; 0x07
     4ec:	98 87       	std	Y+8, r25	; 0x08
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
     4ee:	6d 85       	ldd	r22, Y+13	; 0x0d
     4f0:	7e 85       	ldd	r23, Y+14	; 0x0e
     4f2:	8f 85       	ldd	r24, Y+15	; 0x0f
     4f4:	98 89       	ldd	r25, Y+16	; 0x10
     4f6:	25 ed       	ldi	r18, 0xD5	; 213
     4f8:	38 e7       	ldi	r19, 0x78	; 120
     4fa:	49 e6       	ldi	r20, 0x69	; 105
     4fc:	5d eb       	ldi	r21, 0xBD	; 189
     4fe:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
     502:	f4 01       	movw	r30, r8
     504:	21 2f       	mov	r18, r17
     506:	3f 2d       	mov	r19, r15
     508:	4f 2f       	mov	r20, r31
     50a:	5e 2f       	mov	r21, r30
     50c:	0e 94 35 10 	call	0x206a	; 0x206a <__addsf3>
     510:	2a 2d       	mov	r18, r10
     512:	3e 2d       	mov	r19, r14
     514:	40 2f       	mov	r20, r16
     516:	56 2d       	mov	r21, r6
     518:	0e 94 35 10 	call	0x206a	; 0x206a <__addsf3>
     51c:	69 87       	std	Y+9, r22	; 0x09
     51e:	7a 87       	std	Y+10, r23	; 0x0a
     520:	8b 87       	std	Y+11, r24	; 0x0b
     522:	9c 87       	std	Y+12, r25	; 0x0c
     524:	8e 01       	movw	r16, r28
     526:	0f 5f       	subi	r16, 0xFF	; 255
     528:	1f 4f       	sbci	r17, 0xFF	; 255
	
    for(i=0;i<3;++i){
     52a:	ee 24       	eor	r14, r14
				
}



void HolonomicW(int f_agl, int f_speed, int fw_speed){
     52c:	58 01       	movw	r10, r16
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
	
    for(i=0;i<3;++i){
		if(V[i]>=40)V[i]=40;
     52e:	f8 01       	movw	r30, r16
     530:	60 81       	ld	r22, Z
     532:	71 81       	ldd	r23, Z+1	; 0x01
     534:	82 81       	ldd	r24, Z+2	; 0x02
     536:	93 81       	ldd	r25, Z+3	; 0x03
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	40 e2       	ldi	r20, 0x20	; 32
     53e:	52 e4       	ldi	r21, 0x42	; 66
     540:	0e 94 bd 11 	call	0x237a	; 0x237a <__gesf2>
     544:	87 fd       	sbrc	r24, 7
     546:	09 c0       	rjmp	.+18     	; 0x55a <HolonomicW+0x22c>
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	a0 e2       	ldi	r26, 0x20	; 32
     54e:	b2 e4       	ldi	r27, 0x42	; 66
     550:	f8 01       	movw	r30, r16
     552:	80 83       	st	Z, r24
     554:	91 83       	std	Z+1, r25	; 0x01
     556:	a2 83       	std	Z+2, r26	; 0x02
     558:	b3 83       	std	Z+3, r27	; 0x03
		if(V[i]<=(-40))V[i]=-40;
     55a:	f8 01       	movw	r30, r16
     55c:	60 81       	ld	r22, Z
     55e:	71 81       	ldd	r23, Z+1	; 0x01
     560:	82 81       	ldd	r24, Z+2	; 0x02
     562:	93 81       	ldd	r25, Z+3	; 0x03
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e2       	ldi	r20, 0x20	; 32
     56a:	52 ec       	ldi	r21, 0xC2	; 194
     56c:	0e 94 1d 12 	call	0x243a	; 0x243a <__lesf2>
     570:	18 16       	cp	r1, r24
     572:	4c f0       	brlt	.+18     	; 0x586 <HolonomicW+0x258>
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	a0 e2       	ldi	r26, 0x20	; 32
     57a:	b2 ec       	ldi	r27, 0xC2	; 194
     57c:	f8 01       	movw	r30, r16
     57e:	80 83       	st	Z, r24
     580:	91 83       	std	Z+1, r25	; 0x01
     582:	a2 83       	std	Z+2, r26	; 0x02
     584:	b3 83       	std	Z+3, r27	; 0x03
     586:	0c 5f       	subi	r16, 0xFC	; 252
     588:	1f 4f       	sbci	r17, 0xFF	; 255
		SetVelocity(i, V[i]*65536);
     58a:	f5 01       	movw	r30, r10
     58c:	60 81       	ld	r22, Z
     58e:	71 81       	ldd	r23, Z+1	; 0x01
     590:	82 81       	ldd	r24, Z+2	; 0x02
     592:	93 81       	ldd	r25, Z+3	; 0x03
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	40 e8       	ldi	r20, 0x80	; 128
     59a:	57 e4       	ldi	r21, 0x47	; 71
     59c:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
     5a0:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
     5a4:	ab 01       	movw	r20, r22
     5a6:	bc 01       	movw	r22, r24
     5a8:	8e 2d       	mov	r24, r14
     5aa:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <SetVelocity>
		
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
	
    for(i=0;i<3;++i){
     5ae:	e3 94       	inc	r14
     5b0:	fe 2d       	mov	r31, r14
     5b2:	f3 30       	cpi	r31, 0x03	; 3
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <HolonomicW+0x28a>
     5b6:	ba cf       	rjmp	.-140    	; 0x52c <HolonomicW+0x1fe>
		if(V[i]>=40)V[i]=40;
		if(V[i]<=(-40))V[i]=-40;
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
     5b8:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <StartMotion>
}
     5bc:	60 96       	adiw	r28, 0x10	; 16
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	cf 91       	pop	r28
     5ca:	df 91       	pop	r29
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	df 90       	pop	r13
     5d6:	cf 90       	pop	r12
     5d8:	bf 90       	pop	r11
     5da:	af 90       	pop	r10
     5dc:	9f 90       	pop	r9
     5de:	8f 90       	pop	r8
     5e0:	7f 90       	pop	r7
     5e2:	6f 90       	pop	r6
     5e4:	5f 90       	pop	r5
     5e6:	4f 90       	pop	r4
     5e8:	3f 90       	pop	r3
     5ea:	2f 90       	pop	r2
     5ec:	08 95       	ret

000005ee <Holonomic_distance>:


////////////////////////함수/////////////////////////


void Holonomic_distance(int f_agl,int f_speed,unsigned int distance,unsigned stop){
     5ee:	2f 92       	push	r2
     5f0:	3f 92       	push	r3
     5f2:	4f 92       	push	r4
     5f4:	5f 92       	push	r5
     5f6:	6f 92       	push	r6
     5f8:	7f 92       	push	r7
     5fa:	8f 92       	push	r8
     5fc:	9f 92       	push	r9
     5fe:	af 92       	push	r10
     600:	bf 92       	push	r11
     602:	cf 92       	push	r12
     604:	df 92       	push	r13
     606:	ef 92       	push	r14
     608:	ff 92       	push	r15
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	df 93       	push	r29
     610:	cf 93       	push	r28
     612:	00 d0       	rcall	.+0      	; 0x614 <Holonomic_distance+0x26>
     614:	cd b7       	in	r28, 0x3d	; 61
     616:	de b7       	in	r29, 0x3e	; 62
     618:	9a 83       	std	Y+2, r25	; 0x02
     61a:	89 83       	std	Y+1, r24	; 0x01
     61c:	1a 01       	movw	r2, r20
     61e:	79 01       	movw	r14, r18
//1.각도	2.속도	3.거리	4.감속지점	
	next_speed=f_speed;
     620:	88 27       	eor	r24, r24
     622:	77 fd       	sbrc	r23, 7
     624:	80 95       	com	r24
     626:	98 2f       	mov	r25, r24
     628:	0e 94 4d 12 	call	0x249a	; 0x249a <__floatsisf>
     62c:	60 93 3c 02 	sts	0x023C, r22
     630:	70 93 3d 02 	sts	0x023D, r23
     634:	80 93 3e 02 	sts	0x023E, r24
     638:	90 93 3f 02 	sts	0x023F, r25
	acc=5;
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	a0 ea       	ldi	r26, 0xA0	; 160
     642:	b0 e4       	ldi	r27, 0x40	; 64
     644:	80 93 00 01 	sts	0x0100, r24
     648:	90 93 01 01 	sts	0x0101, r25
     64c:	a0 93 02 01 	sts	0x0102, r26
     650:	b0 93 03 01 	sts	0x0103, r27
	TCNT1H=0xFF; TCNT1L=0x70;	//0.01초
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	8d bd       	out	0x2d, r24	; 45
     658:	80 e7       	ldi	r24, 0x70	; 112
     65a:	8c bd       	out	0x2c, r24	; 44
	sec=0;
     65c:	10 92 37 02 	sts	0x0237, r1
     660:	10 92 36 02 	sts	0x0236, r1
	disMD=0;	//거리 초기화
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	dc 01       	movw	r26, r24
     66a:	80 93 54 02 	sts	0x0254, r24
     66e:	90 93 55 02 	sts	0x0255, r25
     672:	a0 93 56 02 	sts	0x0256, r26
     676:	b0 93 57 02 	sts	0x0257, r27
	
	while(1){
	
		HolonomicW(f_agl,speed,0);
	
		if(disMD>=distance) break;
     67a:	44 24       	eor	r4, r4
     67c:	55 24       	eor	r5, r5
		else if(disMD>=stop) next_speed=50;
     67e:	57 01       	movw	r10, r14
     680:	cc 24       	eor	r12, r12
     682:	dd 24       	eor	r13, r13
     684:	0f 2e       	mov	r0, r31
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	6f 2e       	mov	r6, r31
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	7f 2e       	mov	r7, r31
     68e:	f8 e4       	ldi	r31, 0x48	; 72
     690:	8f 2e       	mov	r8, r31
     692:	f2 e4       	ldi	r31, 0x42	; 66
     694:	9f 2e       	mov	r9, r31
     696:	f0 2d       	mov	r31, r0
	sec=0;
	disMD=0;	//거리 초기화
	
	while(1){
	
		HolonomicW(f_agl,speed,0);
     698:	60 91 38 02 	lds	r22, 0x0238
     69c:	70 91 39 02 	lds	r23, 0x0239
     6a0:	80 91 3a 02 	lds	r24, 0x023A
     6a4:	90 91 3b 02 	lds	r25, 0x023B
     6a8:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
     6ac:	9b 01       	movw	r18, r22
     6ae:	ac 01       	movw	r20, r24
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	9a 81       	ldd	r25, Y+2	; 0x02
     6b4:	b9 01       	movw	r22, r18
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	0e 94 97 01 	call	0x32e	; 0x32e <HolonomicW>
	
		if(disMD>=distance) break;
     6be:	e0 90 54 02 	lds	r14, 0x0254
     6c2:	f0 90 55 02 	lds	r15, 0x0255
     6c6:	00 91 56 02 	lds	r16, 0x0256
     6ca:	10 91 57 02 	lds	r17, 0x0257
     6ce:	c2 01       	movw	r24, r4
     6d0:	b1 01       	movw	r22, r2
     6d2:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__floatunsisf>
     6d6:	9b 01       	movw	r18, r22
     6d8:	ac 01       	movw	r20, r24
     6da:	c8 01       	movw	r24, r16
     6dc:	b7 01       	movw	r22, r14
     6de:	0e 94 bd 11 	call	0x237a	; 0x237a <__gesf2>
     6e2:	87 ff       	sbrs	r24, 7
     6e4:	1d c0       	rjmp	.+58     	; 0x720 <Holonomic_distance+0x132>
		else if(disMD>=stop) next_speed=50;
     6e6:	e0 90 54 02 	lds	r14, 0x0254
     6ea:	f0 90 55 02 	lds	r15, 0x0255
     6ee:	00 91 56 02 	lds	r16, 0x0256
     6f2:	10 91 57 02 	lds	r17, 0x0257
     6f6:	c6 01       	movw	r24, r12
     6f8:	b5 01       	movw	r22, r10
     6fa:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__floatunsisf>
     6fe:	9b 01       	movw	r18, r22
     700:	ac 01       	movw	r20, r24
     702:	c8 01       	movw	r24, r16
     704:	b7 01       	movw	r22, r14
     706:	0e 94 bd 11 	call	0x237a	; 0x237a <__gesf2>
     70a:	87 fd       	sbrc	r24, 7
     70c:	c5 cf       	rjmp	.-118    	; 0x698 <Holonomic_distance+0xaa>
     70e:	60 92 3c 02 	sts	0x023C, r6
     712:	70 92 3d 02 	sts	0x023D, r7
     716:	80 92 3e 02 	sts	0x023E, r8
     71a:	90 92 3f 02 	sts	0x023F, r9
     71e:	bc cf       	rjmp	.-136    	; 0x698 <Holonomic_distance+0xaa>
	}
}
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	cf 91       	pop	r28
     726:	df 91       	pop	r29
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	df 90       	pop	r13
     732:	cf 90       	pop	r12
     734:	bf 90       	pop	r11
     736:	af 90       	pop	r10
     738:	9f 90       	pop	r9
     73a:	8f 90       	pop	r8
     73c:	7f 90       	pop	r7
     73e:	6f 90       	pop	r6
     740:	5f 90       	pop	r5
     742:	4f 90       	pop	r4
     744:	3f 90       	pop	r3
     746:	2f 90       	pop	r2
     748:	08 95       	ret

0000074a <non_Holonomic>:
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
}

void non_Holonomic(long Fx, long Fy, long Fw){
     74a:	2f 92       	push	r2
     74c:	3f 92       	push	r3
     74e:	4f 92       	push	r4
     750:	5f 92       	push	r5
     752:	6f 92       	push	r6
     754:	7f 92       	push	r7
     756:	8f 92       	push	r8
     758:	9f 92       	push	r9
     75a:	af 92       	push	r10
     75c:	bf 92       	push	r11
     75e:	cf 92       	push	r12
     760:	df 92       	push	r13
     762:	ef 92       	push	r14
     764:	ff 92       	push	r15
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	df 93       	push	r29
     76c:	cf 93       	push	r28
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	2d 97       	sbiw	r28, 0x0d	; 13
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	f8 94       	cli
     778:	de bf       	out	0x3e, r29	; 62
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	cd bf       	out	0x3d, r28	; 61
     77e:	3b 01       	movw	r6, r22
     780:	4c 01       	movw	r8, r24
     782:	59 01       	movw	r10, r18
     784:	6a 01       	movw	r12, r20

	unsigned char i=0;
	double V[3]={0,0,0};
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	dc 01       	movw	r26, r24
     78c:	89 83       	std	Y+1, r24	; 0x01
     78e:	9a 83       	std	Y+2, r25	; 0x02
     790:	ab 83       	std	Y+3, r26	; 0x03
     792:	bc 83       	std	Y+4, r27	; 0x04
     794:	8d 83       	std	Y+5, r24	; 0x05
     796:	9e 83       	std	Y+6, r25	; 0x06
     798:	af 83       	std	Y+7, r26	; 0x07
     79a:	b8 87       	std	Y+8, r27	; 0x08
     79c:	89 87       	std	Y+9, r24	; 0x09
     79e:	9a 87       	std	Y+10, r25	; 0x0a
     7a0:	ab 87       	std	Y+11, r26	; 0x0b
     7a2:	bc 87       	std	Y+12, r27	; 0x0c

	if(Fx==0 && Fy==0 && Fw==0)StopMotion(STOP_ABRUPTLY);
     7a4:	61 14       	cp	r6, r1
     7a6:	71 04       	cpc	r7, r1
     7a8:	81 04       	cpc	r8, r1
     7aa:	91 04       	cpc	r9, r1
     7ac:	71 f4       	brne	.+28     	; 0x7ca <non_Holonomic+0x80>
     7ae:	21 15       	cp	r18, r1
     7b0:	31 05       	cpc	r19, r1
     7b2:	41 05       	cpc	r20, r1
     7b4:	51 05       	cpc	r21, r1
     7b6:	49 f4       	brne	.+18     	; 0x7ca <non_Holonomic+0x80>
     7b8:	e1 14       	cp	r14, r1
     7ba:	f1 04       	cpc	r15, r1
     7bc:	01 05       	cpc	r16, r1
     7be:	11 05       	cpc	r17, r1
     7c0:	21 f4       	brne	.+8      	; 0x7ca <non_Holonomic+0x80>
     7c2:	89 e0       	ldi	r24, 0x09	; 9
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <StopMotion>

	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
     7ca:	c4 01       	movw	r24, r8
     7cc:	b3 01       	movw	r22, r6
     7ce:	0e 94 4d 12 	call	0x249a	; 0x249a <__floatsisf>
     7d2:	1b 01       	movw	r2, r22
     7d4:	2c 01       	movw	r4, r24
     7d6:	c6 01       	movw	r24, r12
     7d8:	b5 01       	movw	r22, r10
     7da:	0e 94 4d 12 	call	0x249a	; 0x249a <__floatsisf>
     7de:	3b 01       	movw	r6, r22
     7e0:	4c 01       	movw	r8, r24
     7e2:	22 e0       	ldi	r18, 0x02	; 2
     7e4:	3b e2       	ldi	r19, 0x2B	; 43
     7e6:	47 e0       	ldi	r20, 0x07	; 7
     7e8:	5d e3       	ldi	r21, 0x3D	; 61
     7ea:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
     7ee:	d6 2e       	mov	r13, r22
     7f0:	c7 2e       	mov	r12, r23
     7f2:	b8 2e       	mov	r11, r24
     7f4:	9d 87       	std	Y+13, r25	; 0x0d
     7f6:	c8 01       	movw	r24, r16
     7f8:	b7 01       	movw	r22, r14
     7fa:	0e 94 4d 12 	call	0x249a	; 0x249a <__floatsisf>
     7fe:	29 e2       	ldi	r18, 0x29	; 41
     800:	3c e5       	ldi	r19, 0x5C	; 92
     802:	4f e0       	ldi	r20, 0x0F	; 15
     804:	5e e3       	ldi	r21, 0x3E	; 62
     806:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
     80a:	a6 2e       	mov	r10, r22
     80c:	e7 2e       	mov	r14, r23
     80e:	8c 01       	movw	r16, r24
     810:	c2 01       	movw	r24, r4
     812:	b1 01       	movw	r22, r2
     814:	22 e4       	ldi	r18, 0x42	; 66
     816:	30 e6       	ldi	r19, 0x60	; 96
     818:	45 e6       	ldi	r20, 0x65	; 101
     81a:	5d e3       	ldi	r21, 0x3D	; 61
     81c:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
     820:	d6 01       	movw	r26, r12
     822:	ed 85       	ldd	r30, Y+13	; 0x0d
     824:	2b 2f       	mov	r18, r27
     826:	3a 2f       	mov	r19, r26
     828:	4b 2d       	mov	r20, r11
     82a:	5e 2f       	mov	r21, r30
     82c:	0e 94 35 10 	call	0x206a	; 0x206a <__addsf3>
     830:	2a 2d       	mov	r18, r10
     832:	3e 2d       	mov	r19, r14
     834:	40 2f       	mov	r20, r16
     836:	51 2f       	mov	r21, r17
     838:	0e 94 35 10 	call	0x206a	; 0x206a <__addsf3>
     83c:	69 83       	std	Y+1, r22	; 0x01
     83e:	7a 83       	std	Y+2, r23	; 0x02
     840:	8b 83       	std	Y+3, r24	; 0x03
     842:	9c 83       	std	Y+4, r25	; 0x04
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
     844:	c4 01       	movw	r24, r8
     846:	b3 01       	movw	r22, r6
     848:	28 eb       	ldi	r18, 0xB8	; 184
     84a:	3e e1       	ldi	r19, 0x1E	; 30
     84c:	45 e8       	ldi	r20, 0x85	; 133
     84e:	5d eb       	ldi	r21, 0xBD	; 189
     850:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
     854:	2a 2d       	mov	r18, r10
     856:	3e 2d       	mov	r19, r14
     858:	40 2f       	mov	r20, r16
     85a:	51 2f       	mov	r21, r17
     85c:	0e 94 35 10 	call	0x206a	; 0x206a <__addsf3>
     860:	6d 83       	std	Y+5, r22	; 0x05
     862:	7e 83       	std	Y+6, r23	; 0x06
     864:	8f 83       	std	Y+7, r24	; 0x07
     866:	98 87       	std	Y+8, r25	; 0x08
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
     868:	c2 01       	movw	r24, r4
     86a:	b1 01       	movw	r22, r2
     86c:	22 e4       	ldi	r18, 0x42	; 66
     86e:	30 e6       	ldi	r19, 0x60	; 96
     870:	45 e6       	ldi	r20, 0x65	; 101
     872:	5d eb       	ldi	r21, 0xBD	; 189
     874:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
     878:	d6 01       	movw	r26, r12
     87a:	ed 85       	ldd	r30, Y+13	; 0x0d
     87c:	2b 2f       	mov	r18, r27
     87e:	3a 2f       	mov	r19, r26
     880:	4b 2d       	mov	r20, r11
     882:	5e 2f       	mov	r21, r30
     884:	0e 94 35 10 	call	0x206a	; 0x206a <__addsf3>
     888:	2a 2d       	mov	r18, r10
     88a:	3e 2d       	mov	r19, r14
     88c:	40 2f       	mov	r20, r16
     88e:	51 2f       	mov	r21, r17
     890:	0e 94 35 10 	call	0x206a	; 0x206a <__addsf3>
     894:	69 87       	std	Y+9, r22	; 0x09
     896:	7a 87       	std	Y+10, r23	; 0x0a
     898:	8b 87       	std	Y+11, r24	; 0x0b
     89a:	9c 87       	std	Y+12, r25	; 0x0c
     89c:	8e 01       	movw	r16, r28
     89e:	0f 5f       	subi	r16, 0xFF	; 255
     8a0:	1f 4f       	sbci	r17, 0xFF	; 255

	for(i=0;i<3;++i){
     8a2:	ee 24       	eor	r14, r14
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
}

void non_Holonomic(long Fx, long Fy, long Fw){
     8a4:	58 01       	movw	r10, r16
	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));

	for(i=0;i<3;++i){
		if(V[i]>=40)V[i]=40;
     8a6:	f8 01       	movw	r30, r16
     8a8:	60 81       	ld	r22, Z
     8aa:	71 81       	ldd	r23, Z+1	; 0x01
     8ac:	82 81       	ldd	r24, Z+2	; 0x02
     8ae:	93 81       	ldd	r25, Z+3	; 0x03
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	40 e2       	ldi	r20, 0x20	; 32
     8b6:	52 e4       	ldi	r21, 0x42	; 66
     8b8:	0e 94 bd 11 	call	0x237a	; 0x237a <__gesf2>
     8bc:	87 fd       	sbrc	r24, 7
     8be:	09 c0       	rjmp	.+18     	; 0x8d2 <non_Holonomic+0x188>
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	a0 e2       	ldi	r26, 0x20	; 32
     8c6:	b2 e4       	ldi	r27, 0x42	; 66
     8c8:	f8 01       	movw	r30, r16
     8ca:	80 83       	st	Z, r24
     8cc:	91 83       	std	Z+1, r25	; 0x01
     8ce:	a2 83       	std	Z+2, r26	; 0x02
     8d0:	b3 83       	std	Z+3, r27	; 0x03
		if(V[i]<=(-40))V[i]=-40;
     8d2:	f8 01       	movw	r30, r16
     8d4:	60 81       	ld	r22, Z
     8d6:	71 81       	ldd	r23, Z+1	; 0x01
     8d8:	82 81       	ldd	r24, Z+2	; 0x02
     8da:	93 81       	ldd	r25, Z+3	; 0x03
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	40 e2       	ldi	r20, 0x20	; 32
     8e2:	52 ec       	ldi	r21, 0xC2	; 194
     8e4:	0e 94 1d 12 	call	0x243a	; 0x243a <__lesf2>
     8e8:	18 16       	cp	r1, r24
     8ea:	4c f0       	brlt	.+18     	; 0x8fe <non_Holonomic+0x1b4>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e2       	ldi	r26, 0x20	; 32
     8f2:	b2 ec       	ldi	r27, 0xC2	; 194
     8f4:	f8 01       	movw	r30, r16
     8f6:	80 83       	st	Z, r24
     8f8:	91 83       	std	Z+1, r25	; 0x01
     8fa:	a2 83       	std	Z+2, r26	; 0x02
     8fc:	b3 83       	std	Z+3, r27	; 0x03
     8fe:	0c 5f       	subi	r16, 0xFC	; 252
     900:	1f 4f       	sbci	r17, 0xFF	; 255
		SetVelocity(i, V[i]*65536);
     902:	f5 01       	movw	r30, r10
     904:	60 81       	ld	r22, Z
     906:	71 81       	ldd	r23, Z+1	; 0x01
     908:	82 81       	ldd	r24, Z+2	; 0x02
     90a:	93 81       	ldd	r25, Z+3	; 0x03
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e8       	ldi	r20, 0x80	; 128
     912:	57 e4       	ldi	r21, 0x47	; 71
     914:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
     918:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
     91c:	ab 01       	movw	r20, r22
     91e:	bc 01       	movw	r22, r24
     920:	8e 2d       	mov	r24, r14
     922:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <SetVelocity>

	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));

	for(i=0;i<3;++i){
     926:	e3 94       	inc	r14
     928:	fe 2d       	mov	r31, r14
     92a:	f3 30       	cpi	r31, 0x03	; 3
     92c:	09 f0       	breq	.+2      	; 0x930 <non_Holonomic+0x1e6>
     92e:	ba cf       	rjmp	.-140    	; 0x8a4 <non_Holonomic+0x15a>
		if(V[i]>=40)V[i]=40;
		if(V[i]<=(-40))V[i]=-40;
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
     930:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <StartMotion>
}
     934:	2d 96       	adiw	r28, 0x0d	; 13
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	cf 91       	pop	r28
     942:	df 91       	pop	r29
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	df 90       	pop	r13
     94e:	cf 90       	pop	r12
     950:	bf 90       	pop	r11
     952:	af 90       	pop	r10
     954:	9f 90       	pop	r9
     956:	8f 90       	pop	r8
     958:	7f 90       	pop	r7
     95a:	6f 90       	pop	r6
     95c:	5f 90       	pop	r5
     95e:	4f 90       	pop	r4
     960:	3f 90       	pop	r3
     962:	2f 90       	pop	r2
     964:	08 95       	ret

00000966 <READ_barcode>:
	non_Holonomic(0,0,0);
	return 0;

}

unsigned char READ_barcode(unsigned int distance,int f_speed){
     966:	8f 92       	push	r8
     968:	9f 92       	push	r9
     96a:	af 92       	push	r10
     96c:	bf 92       	push	r11
     96e:	df 92       	push	r13
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	4c 01       	movw	r8, r24
	unsigned char count = 0;
	next_speed=f_speed;
     97a:	88 27       	eor	r24, r24
     97c:	77 fd       	sbrc	r23, 7
     97e:	80 95       	com	r24
     980:	98 2f       	mov	r25, r24
     982:	0e 94 4d 12 	call	0x249a	; 0x249a <__floatsisf>
     986:	60 93 3c 02 	sts	0x023C, r22
     98a:	70 93 3d 02 	sts	0x023D, r23
     98e:	80 93 3e 02 	sts	0x023E, r24
     992:	90 93 3f 02 	sts	0x023F, r25
	acc=5;
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 ea       	ldi	r26, 0xA0	; 160
     99c:	b0 e4       	ldi	r27, 0x40	; 64
     99e:	80 93 00 01 	sts	0x0100, r24
     9a2:	90 93 01 01 	sts	0x0101, r25
     9a6:	a0 93 02 01 	sts	0x0102, r26
     9aa:	b0 93 03 01 	sts	0x0103, r27
	TCNT1H=0xFF; TCNT1L=0x70;	//0.01초
     9ae:	8f ef       	ldi	r24, 0xFF	; 255
     9b0:	8d bd       	out	0x2d, r24	; 45
     9b2:	80 e7       	ldi	r24, 0x70	; 112
     9b4:	8c bd       	out	0x2c, r24	; 44
	sec=0;
     9b6:	10 92 37 02 	sts	0x0237, r1
     9ba:	10 92 36 02 	sts	0x0236, r1
	disMD=0;	//거리 초기화
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	dc 01       	movw	r26, r24
     9c4:	80 93 54 02 	sts	0x0254, r24
     9c8:	90 93 55 02 	sts	0x0255, r25
     9cc:	a0 93 56 02 	sts	0x0256, r26
     9d0:	b0 93 57 02 	sts	0x0257, r27
	return 0;

}

unsigned char READ_barcode(unsigned int distance,int f_speed){
	unsigned char count = 0;
     9d4:	dd 24       	eor	r13, r13
	next_speed=f_speed;
	acc=5;
	TCNT1H=0xFF; TCNT1L=0x70;	//0.01초
	sec=0;
	disMD=0;	//거리 초기화
	while(!(disMD>=distance)){
     9d6:	aa 24       	eor	r10, r10
     9d8:	bb 24       	eor	r11, r11
     9da:	24 c0       	rjmp	.+72     	; 0xa24 <READ_barcode+0xbe>
		HolonomicW(0,speed,0);
     9dc:	60 91 38 02 	lds	r22, 0x0238
     9e0:	70 91 39 02 	lds	r23, 0x0239
     9e4:	80 91 3a 02 	lds	r24, 0x023A
     9e8:	90 91 3b 02 	lds	r25, 0x023B
     9ec:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
     9f0:	9b 01       	movw	r18, r22
     9f2:	ac 01       	movw	r20, r24
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	b9 01       	movw	r22, r18
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	0e 94 97 01 	call	0x32e	; 0x32e <HolonomicW>
		if(READ_SENSOR()&0x08) {
     a02:	80 91 63 00 	lds	r24, 0x0063
     a06:	81 b1       	in	r24, 0x01	; 1
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	80 95       	com	r24
     a0c:	90 95       	com	r25
     a0e:	83 ff       	sbrs	r24, 3
     a10:	09 c0       	rjmp	.+18     	; 0xa24 <READ_barcode+0xbe>
			count++;
     a12:	d3 94       	inc	r13
			while(READ_SENSOR()&0x08);	
     a14:	80 91 63 00 	lds	r24, 0x0063
     a18:	81 b1       	in	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	80 95       	com	r24
     a1e:	90 95       	com	r25
     a20:	83 fd       	sbrc	r24, 3
     a22:	f8 cf       	rjmp	.-16     	; 0xa14 <READ_barcode+0xae>
	next_speed=f_speed;
	acc=5;
	TCNT1H=0xFF; TCNT1L=0x70;	//0.01초
	sec=0;
	disMD=0;	//거리 초기화
	while(!(disMD>=distance)){
     a24:	e0 90 54 02 	lds	r14, 0x0254
     a28:	f0 90 55 02 	lds	r15, 0x0255
     a2c:	00 91 56 02 	lds	r16, 0x0256
     a30:	10 91 57 02 	lds	r17, 0x0257
     a34:	c5 01       	movw	r24, r10
     a36:	b4 01       	movw	r22, r8
     a38:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__floatunsisf>
     a3c:	9b 01       	movw	r18, r22
     a3e:	ac 01       	movw	r20, r24
     a40:	c8 01       	movw	r24, r16
     a42:	b7 01       	movw	r22, r14
     a44:	0e 94 bd 11 	call	0x237a	; 0x237a <__gesf2>
     a48:	87 fd       	sbrc	r24, 7
     a4a:	c8 cf       	rjmp	.-112    	; 0x9dc <READ_barcode+0x76>
		if(READ_SENSOR()&0x08) {
			count++;
			while(READ_SENSOR()&0x08);	
		}
	}
	non_Holonomic(0,0,0);
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	cb 01       	movw	r24, r22
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	a9 01       	movw	r20, r18
     a58:	ee 24       	eor	r14, r14
     a5a:	ff 24       	eor	r15, r15
     a5c:	87 01       	movw	r16, r14
     a5e:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
	return count;
}
     a62:	8d 2d       	mov	r24, r13
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	bf 90       	pop	r11
     a70:	af 90       	pop	r10
     a72:	9f 90       	pop	r9
     a74:	8f 90       	pop	r8
     a76:	08 95       	ret

00000a78 <irontracer>:
	non_Holonomic(0,0,0);
	return 0;
}

void irontracer() 
{
     a78:	ef 92       	push	r14
     a7a:	ff 92       	push	r15
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
	unsigned char SENSOR=0;
//	int err=0;
	while(1){
		SENSOR=READ_SENSOR();
     a80:	80 91 63 00 	lds	r24, 0x0063
     a84:	91 b1       	in	r25, 0x01	; 1
     a86:	86 95       	lsr	r24
     a88:	86 95       	lsr	r24
     a8a:	86 95       	lsr	r24
     a8c:	80 95       	com	r24
     a8e:	83 70       	andi	r24, 0x03	; 3
     a90:	90 95       	com	r25
     a92:	9c 71       	andi	r25, 0x1C	; 28
     a94:	89 2b       	or	r24, r25
		if(	(SENSOR&0x1C)==0x1C )	break;
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	9c 01       	movw	r18, r24
     a9a:	2c 71       	andi	r18, 0x1C	; 28
     a9c:	30 70       	andi	r19, 0x00	; 0
     a9e:	2c 31       	cpi	r18, 0x1C	; 28
     aa0:	31 05       	cpc	r19, r1
     aa2:	91 f0       	breq	.+36     	; 0xac8 <irontracer+0x50>
		if( SENSOR&0x01 )	HolonomicW(0,150,5);
     aa4:	80 ff       	sbrs	r24, 0
     aa6:	07 c0       	rjmp	.+14     	; 0xab6 <irontracer+0x3e>
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	66 e9       	ldi	r22, 0x96	; 150
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	45 e0       	ldi	r20, 0x05	; 5
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	06 c0       	rjmp	.+12     	; 0xac2 <irontracer+0x4a>
		else 				HolonomicW(0,150,-5);
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	66 e9       	ldi	r22, 0x96	; 150
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	4b ef       	ldi	r20, 0xFB	; 251
     ac0:	5f ef       	ldi	r21, 0xFF	; 255
     ac2:	0e 94 97 01 	call	0x32e	; 0x32e <HolonomicW>
     ac6:	dc cf       	rjmp	.-72     	; 0xa80 <irontracer+0x8>
	}
	non_Holonomic(0,0,0);
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	cb 01       	movw	r24, r22
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	a9 01       	movw	r20, r18
     ad4:	ee 24       	eor	r14, r14
     ad6:	ff 24       	eor	r15, r15
     ad8:	87 01       	movw	r16, r14
     ada:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
}
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	08 95       	ret

00000ae8 <LINE_iron>:



///제작///

unsigned char LINE_iron(){ //센서 가운데로 모아야함 
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
	unsigned char SENSOR=0;
	int err = 0;
     af4:	c0 e0       	ldi	r28, 0x00	; 0
     af6:	d0 e0       	ldi	r29, 0x00	; 0
	while(1){
		SENSOR=READ_SENSOR();
     af8:	80 91 63 00 	lds	r24, 0x0063
     afc:	91 b1       	in	r25, 0x01	; 1
     afe:	86 95       	lsr	r24
     b00:	86 95       	lsr	r24
     b02:	86 95       	lsr	r24
     b04:	80 95       	com	r24
     b06:	83 70       	andi	r24, 0x03	; 3
     b08:	90 95       	com	r25
     b0a:	9c 71       	andi	r25, 0x1C	; 28
     b0c:	89 2b       	or	r24, r25
		if(SENSOR&0x01)	   break;
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	80 fd       	sbrc	r24, 0
     b12:	42 c0       	rjmp	.+132    	; 0xb98 <LINE_iron+0xb0>
		if((READ_SENSOR()&0x1C)==0x1C)	break;
     b14:	20 91 63 00 	lds	r18, 0x0063
     b18:	21 b1       	in	r18, 0x01	; 1
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	20 95       	com	r18
     b1e:	30 95       	com	r19
     b20:	2c 71       	andi	r18, 0x1C	; 28
     b22:	30 70       	andi	r19, 0x00	; 0
     b24:	2c 31       	cpi	r18, 0x1C	; 28
     b26:	31 05       	cpc	r19, r1
     b28:	b9 f1       	breq	.+110    	; 0xb98 <LINE_iron+0xb0>
     b2a:	9c 01       	movw	r18, r24
     b2c:	28 70       	andi	r18, 0x08	; 8
     b2e:	30 70       	andi	r19, 0x00	; 0
		

		if		(!(SENSOR&0x04) && (SENSOR&0x08) && !(SENSOR&0x10)) err = 0;
     b30:	82 fd       	sbrc	r24, 2
     b32:	06 c0       	rjmp	.+12     	; 0xb40 <LINE_iron+0x58>
     b34:	21 15       	cp	r18, r1
     b36:	31 05       	cpc	r19, r1
     b38:	71 f0       	breq	.+28     	; 0xb56 <LINE_iron+0x6e>
     b3a:	84 ff       	sbrs	r24, 4
     b3c:	1a c0       	rjmp	.+52     	; 0xb72 <LINE_iron+0x8a>
     b3e:	0b c0       	rjmp	.+22     	; 0xb56 <LINE_iron+0x6e>
     b40:	80 71       	andi	r24, 0x10	; 16
     b42:	90 70       	andi	r25, 0x00	; 0
		else if	( (SENSOR&0x04) && (SENSOR&0x08) && !(SENSOR&0x10)) err = -5;
     b44:	21 15       	cp	r18, r1
     b46:	31 05       	cpc	r19, r1
     b48:	19 f0       	breq	.+6      	; 0xb50 <LINE_iron+0x68>
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	a9 f0       	breq	.+42     	; 0xb78 <LINE_iron+0x90>
     b4e:	1c c0       	rjmp	.+56     	; 0xb88 <LINE_iron+0xa0>
		else if	( (SENSOR&0x04) &&!(SENSOR&0x08) && !(SENSOR&0x10)) err = -10;
     b50:	00 97       	sbiw	r24, 0x00	; 0
     b52:	a9 f0       	breq	.+42     	; 0xb7e <LINE_iron+0x96>
     b54:	19 c0       	rjmp	.+50     	; 0xb88 <LINE_iron+0xa0>



///제작///

unsigned char LINE_iron(){ //센서 가운데로 모아야함 
     b56:	ac 01       	movw	r20, r24
     b58:	48 71       	andi	r20, 0x18	; 24
     b5a:	50 70       	andi	r21, 0x00	; 0
		

		if		(!(SENSOR&0x04) && (SENSOR&0x08) && !(SENSOR&0x10)) err = 0;
		else if	( (SENSOR&0x04) && (SENSOR&0x08) && !(SENSOR&0x10)) err = -5;
		else if	( (SENSOR&0x04) &&!(SENSOR&0x08) && !(SENSOR&0x10)) err = -10;
		else if	(!(SENSOR&0x04) && (SENSOR&0x08) &&  (SENSOR&0x10)) err = 5;
     b5c:	48 31       	cpi	r20, 0x18	; 24
     b5e:	51 05       	cpc	r21, r1
     b60:	89 f0       	breq	.+34     	; 0xb84 <LINE_iron+0x9c>
		else if	(!(SENSOR&0x04) &&!(SENSOR&0x08) &&  (SENSOR&0x10)) err = 10;
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	81 f4       	brne	.+32     	; 0xb88 <LINE_iron+0xa0>
     b68:	84 ff       	sbrs	r24, 4
     b6a:	0e c0       	rjmp	.+28     	; 0xb88 <LINE_iron+0xa0>
     b6c:	ca e0       	ldi	r28, 0x0A	; 10
     b6e:	d0 e0       	ldi	r29, 0x00	; 0
     b70:	0b c0       	rjmp	.+22     	; 0xb88 <LINE_iron+0xa0>
		SENSOR=READ_SENSOR();
		if(SENSOR&0x01)	   break;
		if((READ_SENSOR()&0x1C)==0x1C)	break;
		

		if		(!(SENSOR&0x04) && (SENSOR&0x08) && !(SENSOR&0x10)) err = 0;
     b72:	c0 e0       	ldi	r28, 0x00	; 0
     b74:	d0 e0       	ldi	r29, 0x00	; 0
     b76:	08 c0       	rjmp	.+16     	; 0xb88 <LINE_iron+0xa0>
		else if	( (SENSOR&0x04) && (SENSOR&0x08) && !(SENSOR&0x10)) err = -5;
     b78:	cb ef       	ldi	r28, 0xFB	; 251
     b7a:	df ef       	ldi	r29, 0xFF	; 255
     b7c:	05 c0       	rjmp	.+10     	; 0xb88 <LINE_iron+0xa0>
		else if	( (SENSOR&0x04) &&!(SENSOR&0x08) && !(SENSOR&0x10)) err = -10;
     b7e:	c6 ef       	ldi	r28, 0xF6	; 246
     b80:	df ef       	ldi	r29, 0xFF	; 255
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <LINE_iron+0xa0>
		else if	(!(SENSOR&0x04) && (SENSOR&0x08) &&  (SENSOR&0x10)) err = 5;
     b84:	c5 e0       	ldi	r28, 0x05	; 5
     b86:	d0 e0       	ldi	r29, 0x00	; 0
		else if	(!(SENSOR&0x04) &&!(SENSOR&0x08) &&  (SENSOR&0x10)) err = 10;

		HolonomicW(0,200,err);
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	68 ec       	ldi	r22, 0xC8	; 200
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	ae 01       	movw	r20, r28
     b92:	0e 94 97 01 	call	0x32e	; 0x32e <HolonomicW>
	}
     b96:	b0 cf       	rjmp	.-160    	; 0xaf8 <LINE_iron+0x10>
	non_Holonomic(0,0,0);
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	cb 01       	movw	r24, r22
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	a9 01       	movw	r20, r18
     ba4:	ee 24       	eor	r14, r14
     ba6:	ff 24       	eor	r15, r15
     ba8:	87 01       	movw	r16, r14
     baa:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
	return 0;
}
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	ff 90       	pop	r15
     bba:	ef 90       	pop	r14
     bbc:	08 95       	ret

00000bbe <ladder_iron>:
	non_Holonomic(0,0,0);
}


//direction = 1.왼쪽 / 2.오른쪽
void ladder_iron(int direction){ //센서 가운데로 모아야함 
     bbe:	ef 92       	push	r14
     bc0:	ff 92       	push	r15
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	ec 01       	movw	r28, r24

	while(1){
		LINE_iron();
     bcc:	0e 94 74 05 	call	0xae8	; 0xae8 <LINE_iron>

		Holonomic_distance(0,250,150,100);
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	6a ef       	ldi	r22, 0xFA	; 250
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	46 e9       	ldi	r20, 0x96	; 150
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	24 e6       	ldi	r18, 0x64	; 100
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Holonomic_distance>
		if(direction == 1){
     be4:	c1 30       	cpi	r28, 0x01	; 1
     be6:	d1 05       	cpc	r29, r1
     be8:	99 f5       	brne	.+102    	; 0xc50 <ladder_iron+0x92>
     bea:	0d c0       	rjmp	.+26     	; 0xc06 <ladder_iron+0x48>
			while(!(READ_SENSOR()&0x01))	non_Holonomic(0,0,65);
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	cb 01       	movw	r24, r22
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	a9 01       	movw	r20, r18
     bf8:	f1 e4       	ldi	r31, 0x41	; 65
     bfa:	ef 2e       	mov	r14, r31
     bfc:	f1 2c       	mov	r15, r1
     bfe:	01 2d       	mov	r16, r1
     c00:	11 2d       	mov	r17, r1
     c02:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
     c06:	80 91 63 00 	lds	r24, 0x0063
     c0a:	91 b1       	in	r25, 0x01	; 1
     c0c:	86 95       	lsr	r24
     c0e:	86 95       	lsr	r24
     c10:	86 95       	lsr	r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	80 95       	com	r24
     c16:	90 95       	com	r25
     c18:	80 ff       	sbrs	r24, 0
     c1a:	e8 cf       	rjmp	.-48     	; 0xbec <ladder_iron+0x2e>
     c1c:	0d c0       	rjmp	.+26     	; 0xc38 <ladder_iron+0x7a>
			while( (READ_SENSOR()&0x01))	non_Holonomic(0,0,65);
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	cb 01       	movw	r24, r22
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	a9 01       	movw	r20, r18
     c2a:	e1 e4       	ldi	r30, 0x41	; 65
     c2c:	ee 2e       	mov	r14, r30
     c2e:	f1 2c       	mov	r15, r1
     c30:	01 2d       	mov	r16, r1
     c32:	11 2d       	mov	r17, r1
     c34:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
     c38:	80 91 63 00 	lds	r24, 0x0063
     c3c:	91 b1       	in	r25, 0x01	; 1
     c3e:	86 95       	lsr	r24
     c40:	86 95       	lsr	r24
     c42:	86 95       	lsr	r24
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	80 95       	com	r24
     c48:	90 95       	com	r25
     c4a:	80 fd       	sbrc	r24, 0
     c4c:	e8 cf       	rjmp	.-48     	; 0xc1e <ladder_iron+0x60>
     c4e:	1f c0       	rjmp	.+62     	; 0xc8e <ladder_iron+0xd0>
				//irontracer가 센서의 왼쪽으로 금속선을 타기 때문에 더 회전해서 왼쪽에 걸쳐줘야 한다
		} else if(direction == 2){
     c50:	c2 30       	cpi	r28, 0x02	; 2
     c52:	d1 05       	cpc	r29, r1
     c54:	e1 f4       	brne	.+56     	; 0xc8e <ladder_iron+0xd0>
     c56:	10 c0       	rjmp	.+32     	; 0xc78 <ladder_iron+0xba>
			while(!(READ_SENSOR()&0x01))	non_Holonomic(0,0,-65);
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	cb 01       	movw	r24, r22
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	a9 01       	movw	r20, r18
     c64:	bf eb       	ldi	r27, 0xBF	; 191
     c66:	eb 2e       	mov	r14, r27
     c68:	bf ef       	ldi	r27, 0xFF	; 255
     c6a:	fb 2e       	mov	r15, r27
     c6c:	bf ef       	ldi	r27, 0xFF	; 255
     c6e:	0b 2f       	mov	r16, r27
     c70:	bf ef       	ldi	r27, 0xFF	; 255
     c72:	1b 2f       	mov	r17, r27
     c74:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
     c78:	80 91 63 00 	lds	r24, 0x0063
     c7c:	91 b1       	in	r25, 0x01	; 1
     c7e:	86 95       	lsr	r24
     c80:	86 95       	lsr	r24
     c82:	86 95       	lsr	r24
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	80 95       	com	r24
     c88:	90 95       	com	r25
     c8a:	80 ff       	sbrs	r24, 0
     c8c:	e5 cf       	rjmp	.-54     	; 0xc58 <ladder_iron+0x9a>
		} 
		irontracer();
     c8e:	0e 94 3c 05 	call	0xa78	; 0xa78 <irontracer>
		Holonomic_distance(0,250,150,100);
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	6a ef       	ldi	r22, 0xFA	; 250
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	46 e9       	ldi	r20, 0x96	; 150
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	24 e6       	ldi	r18, 0x64	; 100
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Holonomic_distance>
		if(direction == 1){
     ca6:	c1 30       	cpi	r28, 0x01	; 1
     ca8:	d1 05       	cpc	r29, r1
     caa:	a9 f5       	brne	.+106    	; 0xd16 <ladder_iron+0x158>
     cac:	10 c0       	rjmp	.+32     	; 0xcce <ladder_iron+0x110>
			while(!(READ_SENSOR()&0x08))	non_Holonomic(0,0,-65);
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	cb 01       	movw	r24, r22
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	a9 01       	movw	r20, r18
     cba:	af eb       	ldi	r26, 0xBF	; 191
     cbc:	ea 2e       	mov	r14, r26
     cbe:	af ef       	ldi	r26, 0xFF	; 255
     cc0:	fa 2e       	mov	r15, r26
     cc2:	af ef       	ldi	r26, 0xFF	; 255
     cc4:	0a 2f       	mov	r16, r26
     cc6:	af ef       	ldi	r26, 0xFF	; 255
     cc8:	1a 2f       	mov	r17, r26
     cca:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
     cce:	80 91 63 00 	lds	r24, 0x0063
     cd2:	81 b1       	in	r24, 0x01	; 1
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	80 95       	com	r24
     cd8:	90 95       	com	r25
     cda:	83 ff       	sbrs	r24, 3
     cdc:	e8 cf       	rjmp	.-48     	; 0xcae <ladder_iron+0xf0>
			non_Holonomic(0,0,-65);
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	cb 01       	movw	r24, r22
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	a9 01       	movw	r20, r18
     cea:	ff eb       	ldi	r31, 0xBF	; 191
     cec:	ef 2e       	mov	r14, r31
     cee:	ff ef       	ldi	r31, 0xFF	; 255
     cf0:	ff 2e       	mov	r15, r31
     cf2:	ff ef       	ldi	r31, 0xFF	; 255
     cf4:	0f 2f       	mov	r16, r31
     cf6:	ff ef       	ldi	r31, 0xFF	; 255
     cf8:	1f 2f       	mov	r17, r31
     cfa:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	9f e3       	ldi	r25, 0x3F	; 63
     d02:	a2 e0       	ldi	r26, 0x02	; 2
     d04:	81 50       	subi	r24, 0x01	; 1
     d06:	90 40       	sbci	r25, 0x00	; 0
     d08:	a0 40       	sbci	r26, 0x00	; 0
     d0a:	e1 f7       	brne	.-8      	; 0xd04 <ladder_iron+0x146>
     d0c:	00 c0       	rjmp	.+0      	; 0xd0e <ladder_iron+0x150>
     d0e:	00 00       	nop
			_delay_ms(50);
			direction = 2;
     d10:	c2 e0       	ldi	r28, 0x02	; 2
     d12:	d0 e0       	ldi	r29, 0x00	; 0
     d14:	5b cf       	rjmp	.-330    	; 0xbcc <ladder_iron+0xe>
		} else if (direction == 2){
     d16:	c2 30       	cpi	r28, 0x02	; 2
     d18:	d1 05       	cpc	r29, r1
     d1a:	09 f0       	breq	.+2      	; 0xd1e <ladder_iron+0x160>
     d1c:	57 cf       	rjmp	.-338    	; 0xbcc <ladder_iron+0xe>
     d1e:	0d c0       	rjmp	.+26     	; 0xd3a <ladder_iron+0x17c>
			while(!(READ_SENSOR()&0x08))	non_Holonomic(0,0,65);
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	cb 01       	movw	r24, r22
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	a9 01       	movw	r20, r18
     d2c:	e1 e4       	ldi	r30, 0x41	; 65
     d2e:	ee 2e       	mov	r14, r30
     d30:	f1 2c       	mov	r15, r1
     d32:	01 2d       	mov	r16, r1
     d34:	11 2d       	mov	r17, r1
     d36:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
     d3a:	80 91 63 00 	lds	r24, 0x0063
     d3e:	81 b1       	in	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	80 95       	com	r24
     d44:	90 95       	com	r25
     d46:	83 ff       	sbrs	r24, 3
     d48:	eb cf       	rjmp	.-42     	; 0xd20 <ladder_iron+0x162>
			direction = 1;
     d4a:	c1 e0       	ldi	r28, 0x01	; 1
     d4c:	d0 e0       	ldi	r29, 0x00	; 0
     d4e:	3e cf       	rjmp	.-388    	; 0xbcc <ladder_iron+0xe>

00000d50 <LINE>:
	}
}


int LINE(void)
{
     d50:	df 92       	push	r13
     d52:	ef 92       	push	r14
     d54:	ff 92       	push	r15
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
	unsigned char SENSOR=0;
	int err=0;
	unsigned char dir;
	sec=0;
     d5a:	10 92 37 02 	sts	0x0237, r1
     d5e:	10 92 36 02 	sts	0x0236, r1
	while(1)
	{
		SENSOR=READ_SENSOR();	
     d62:	80 91 63 00 	lds	r24, 0x0063
     d66:	91 b1       	in	r25, 0x01	; 1
     d68:	86 95       	lsr	r24
     d6a:	86 95       	lsr	r24
     d6c:	86 95       	lsr	r24
     d6e:	80 95       	com	r24
     d70:	83 70       	andi	r24, 0x03	; 3
     d72:	90 95       	com	r25
     d74:	9c 71       	andi	r25, 0x1C	; 28
     d76:	89 2b       	or	r24, r25
		if( SENSOR&0x08 )
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	83 ff       	sbrs	r24, 3
     d7c:	07 c0       	rjmp	.+14     	; 0xd8c <LINE+0x3c>
		{
			sec=0;
     d7e:	10 92 37 02 	sts	0x0237, r1
     d82:	10 92 36 02 	sts	0x0236, r1
			err=3;
     d86:	43 e0       	ldi	r20, 0x03	; 3
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <LINE+0x40>
		}
		else if (!(SENSOR&0x08) )err=-3;
     d8c:	4d ef       	ldi	r20, 0xFD	; 253
     d8e:	5f ef       	ldi	r21, 0xFF	; 255

		if(sec>50||(SENSOR&0x1C)==0x1C)
     d90:	20 91 36 02 	lds	r18, 0x0236
     d94:	30 91 37 02 	lds	r19, 0x0237
     d98:	23 33       	cpi	r18, 0x33	; 51
     d9a:	31 05       	cpc	r19, r1
     d9c:	98 f4       	brcc	.+38     	; 0xdc4 <LINE+0x74>
     d9e:	9c 01       	movw	r18, r24
     da0:	2c 71       	andi	r18, 0x1C	; 28
     da2:	30 70       	andi	r19, 0x00	; 0
     da4:	2c 31       	cpi	r18, 0x1C	; 28
     da6:	31 05       	cpc	r19, r1
     da8:	69 f0       	breq	.+26     	; 0xdc4 <LINE+0x74>
		{
			dir=0;
			break;
			
		}		
		if((SENSOR&0x04))
     daa:	82 fd       	sbrc	r24, 2
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <LINE+0x78>
		{	
			dir=2;
			break;
		}
		else if((SENSOR&0x10))
     dae:	84 fd       	sbrc	r24, 4
     db0:	0e c0       	rjmp	.+28     	; 0xdce <LINE+0x7e>
		{
			dir=3;
			break;
		}
		if(SENSOR&0x01){
     db2:	80 fd       	sbrc	r24, 0
     db4:	0f c0       	rjmp	.+30     	; 0xdd4 <LINE+0x84>
			dir=4;
			break;
		}
		HolonomicW(0,250,err);
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	6a ef       	ldi	r22, 0xFA	; 250
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	0e 94 97 01 	call	0x32e	; 0x32e <HolonomicW>
	}
     dc2:	cf cf       	rjmp	.-98     	; 0xd62 <LINE+0x12>
		}
		else if (!(SENSOR&0x08) )err=-3;

		if(sec>50||(SENSOR&0x1C)==0x1C)
		{
			dir=0;
     dc4:	dd 24       	eor	r13, r13
     dc6:	08 c0       	rjmp	.+16     	; 0xdd8 <LINE+0x88>
			break;
			
		}		
		if((SENSOR&0x04))
		{	
			dir=2;
     dc8:	12 e0       	ldi	r17, 0x02	; 2
     dca:	d1 2e       	mov	r13, r17
     dcc:	05 c0       	rjmp	.+10     	; 0xdd8 <LINE+0x88>
			break;
		}
		else if((SENSOR&0x10))
		{
			dir=3;
     dce:	b3 e0       	ldi	r27, 0x03	; 3
     dd0:	db 2e       	mov	r13, r27
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <LINE+0x88>
			break;
		}
		if(SENSOR&0x01){
			dir=4;
     dd4:	a4 e0       	ldi	r26, 0x04	; 4
     dd6:	da 2e       	mov	r13, r26
			break;
		}
		HolonomicW(0,250,err);
	}
	non_Holonomic(0,0,0);
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	cb 01       	movw	r24, r22
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	a9 01       	movw	r20, r18
     de4:	ee 24       	eor	r14, r14
     de6:	ff 24       	eor	r15, r15
     de8:	87 01       	movw	r16, r14
     dea:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
	return dir;
}
     dee:	8d 2d       	mov	r24, r13
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	df 90       	pop	r13
     dfc:	08 95       	ret

00000dfe <ladder_down>:
		}
	}

}

unsigned char ladder_down(){ //미완성  
     dfe:	2f 92       	push	r2
     e00:	3f 92       	push	r3
     e02:	4f 92       	push	r4
     e04:	5f 92       	push	r5
     e06:	6f 92       	push	r6
     e08:	7f 92       	push	r7
     e0a:	8f 92       	push	r8
     e0c:	9f 92       	push	r9
     e0e:	af 92       	push	r10
     e10:	bf 92       	push	r11
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	0f 92       	push	r0
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62

	unsigned char SENSOR=0;	
	unsigned char direction=0;	//1=왼쪽 2=가운데 3=오른쪽 
     e26:	19 82       	std	Y+1, r1	; 0x01

}

unsigned char ladder_down(){ //미완성  

	unsigned char SENSOR=0;	
     e28:	dd 24       	eor	r13, r13
	unsigned char direction=0;	//1=왼쪽 2=가운데 3=오른쪽 
	while(!(SENSOR&0x01)){
		SENSOR = READ_SENSOR();
		LINE();
		speed=250;
     e2a:	0f 2e       	mov	r0, r31
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	8f 2e       	mov	r8, r31
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	9f 2e       	mov	r9, r31
     e34:	fa e7       	ldi	r31, 0x7A	; 122
     e36:	af 2e       	mov	r10, r31
     e38:	f3 e4       	ldi	r31, 0x43	; 67
     e3a:	bf 2e       	mov	r11, r31
     e3c:	f0 2d       	mov	r31, r0
		if(direction == 3)	{
			while(!(SENSOR&0x08))	non_Holonomic(0,0, 65);	
		}
		
		LINE();
		speed=200;
     e3e:	0f 2e       	mov	r0, r31
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	4f 2e       	mov	r4, r31
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	5f 2e       	mov	r5, r31
     e48:	f8 e4       	ldi	r31, 0x48	; 72
     e4a:	6f 2e       	mov	r6, r31
     e4c:	f3 e4       	ldi	r31, 0x43	; 67
     e4e:	7f 2e       	mov	r7, r31
     e50:	f0 2d       	mov	r31, r0

unsigned char ladder_down(){ //미완성  

	unsigned char SENSOR=0;	
	unsigned char direction=0;	//1=왼쪽 2=가운데 3=오른쪽 
	while(!(SENSOR&0x01)){
     e52:	9a c0       	rjmp	.+308    	; 0xf88 <ladder_down+0x18a>
		SENSOR = READ_SENSOR();
     e54:	d0 90 63 00 	lds	r13, 0x0063
     e58:	81 b1       	in	r24, 0x01	; 1
     e5a:	d6 94       	lsr	r13
     e5c:	d6 94       	lsr	r13
     e5e:	d6 94       	lsr	r13
     e60:	d0 94       	com	r13
     e62:	93 e0       	ldi	r25, 0x03	; 3
     e64:	d9 22       	and	r13, r25
     e66:	80 95       	com	r24
     e68:	8c 71       	andi	r24, 0x1C	; 28
     e6a:	d8 2a       	or	r13, r24
		LINE();
     e6c:	0e 94 a8 06 	call	0xd50	; 0xd50 <LINE>
		speed=250;
     e70:	80 92 38 02 	sts	0x0238, r8
     e74:	90 92 39 02 	sts	0x0239, r9
     e78:	a0 92 3a 02 	sts	0x023A, r10
     e7c:	b0 92 3b 02 	sts	0x023B, r11
		Holonomic_distance(0,250,150,100);
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	6a ef       	ldi	r22, 0xFA	; 250
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	46 e9       	ldi	r20, 0x96	; 150
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	24 e6       	ldi	r18, 0x64	; 100
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Holonomic_distance>
		if(psd_value[0]>165){
     e94:	80 91 76 02 	lds	r24, 0x0276
     e98:	86 3a       	cpi	r24, 0xA6	; 166
     e9a:	08 f4       	brcc	.+2      	; 0xe9e <ladder_down+0xa0>
     e9c:	45 c0       	rjmp	.+138    	; 0xf28 <ladder_down+0x12a>
			if(psd_value[2]>90)		direction = 3;
     e9e:	80 91 78 02 	lds	r24, 0x0278
     ea2:	8b 35       	cpi	r24, 0x5B	; 91
     ea4:	10 f0       	brcs	.+4      	; 0xeaa <ladder_down+0xac>
     ea6:	e3 e0       	ldi	r30, 0x03	; 3
     ea8:	e9 83       	std	Y+1, r30	; 0x01
			if(psd_value[7]>90)		direction = 1;
     eaa:	80 91 7d 02 	lds	r24, 0x027D
     eae:	8b 35       	cpi	r24, 0x5B	; 91
     eb0:	a8 f4       	brcc	.+42     	; 0xedc <ladder_down+0xde>
		} else direction = 2;

		if(direction == 1)	{
     eb2:	f9 81       	ldd	r31, Y+1	; 0x01
     eb4:	f1 30       	cpi	r31, 0x01	; 1
     eb6:	e9 f4       	brne	.+58     	; 0xef2 <ladder_down+0xf4>
     eb8:	11 c0       	rjmp	.+34     	; 0xedc <ladder_down+0xde>
			while(!(SENSOR&0x08))	non_Holonomic(0,0,-65);
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	cb 01       	movw	r24, r22
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	a9 01       	movw	r20, r18
     ec6:	af eb       	ldi	r26, 0xBF	; 191
     ec8:	ea 2e       	mov	r14, r26
     eca:	af ef       	ldi	r26, 0xFF	; 255
     ecc:	fa 2e       	mov	r15, r26
     ece:	af ef       	ldi	r26, 0xFF	; 255
     ed0:	0a 2f       	mov	r16, r26
     ed2:	af ef       	ldi	r26, 0xFF	; 255
     ed4:	1a 2f       	mov	r17, r26
     ed6:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
     eda:	05 c0       	rjmp	.+10     	; 0xee6 <ladder_down+0xe8>
     edc:	2d 2c       	mov	r2, r13
     ede:	33 24       	eor	r3, r3
     ee0:	88 e0       	ldi	r24, 0x08	; 8
     ee2:	28 22       	and	r2, r24
     ee4:	33 24       	eor	r3, r3
     ee6:	21 14       	cp	r2, r1
     ee8:	31 04       	cpc	r3, r1
     eea:	39 f3       	breq	.-50     	; 0xeba <ladder_down+0xbc>
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	99 83       	std	Y+1, r25	; 0x01
     ef0:	1d c0       	rjmp	.+58     	; 0xf2c <ladder_down+0x12e>
		}
		
		if(direction == 3)	{
     ef2:	e9 81       	ldd	r30, Y+1	; 0x01
     ef4:	e3 30       	cpi	r30, 0x03	; 3
     ef6:	79 f0       	breq	.+30     	; 0xf16 <ladder_down+0x118>
     ef8:	19 c0       	rjmp	.+50     	; 0xf2c <ladder_down+0x12e>
			while(!(SENSOR&0x08))	non_Holonomic(0,0, 65);	
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	cb 01       	movw	r24, r22
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	a9 01       	movw	r20, r18
     f06:	f1 e4       	ldi	r31, 0x41	; 65
     f08:	ef 2e       	mov	r14, r31
     f0a:	f1 2c       	mov	r15, r1
     f0c:	01 2d       	mov	r16, r1
     f0e:	11 2d       	mov	r17, r1
     f10:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
     f14:	05 c0       	rjmp	.+10     	; 0xf20 <ladder_down+0x122>
     f16:	2d 2c       	mov	r2, r13
     f18:	33 24       	eor	r3, r3
     f1a:	f8 e0       	ldi	r31, 0x08	; 8
     f1c:	2f 22       	and	r2, r31
     f1e:	33 24       	eor	r3, r3
     f20:	21 14       	cp	r2, r1
     f22:	31 04       	cpc	r3, r1
     f24:	51 f3       	breq	.-44     	; 0xefa <ladder_down+0xfc>
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <ladder_down+0x12e>
		speed=250;
		Holonomic_distance(0,250,150,100);
		if(psd_value[0]>165){
			if(psd_value[2]>90)		direction = 3;
			if(psd_value[7]>90)		direction = 1;
		} else direction = 2;
     f28:	82 e0       	ldi	r24, 0x02	; 2
     f2a:	89 83       	std	Y+1, r24	; 0x01
		
		if(direction == 3)	{
			while(!(SENSOR&0x08))	non_Holonomic(0,0, 65);	
		}
		
		LINE();
     f2c:	0e 94 a8 06 	call	0xd50	; 0xd50 <LINE>
		speed=200;
     f30:	40 92 38 02 	sts	0x0238, r4
     f34:	50 92 39 02 	sts	0x0239, r5
     f38:	60 92 3a 02 	sts	0x023A, r6
     f3c:	70 92 3b 02 	sts	0x023B, r7
		Holonomic_distance(0,200,150,100);
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	68 ec       	ldi	r22, 0xC8	; 200
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	46 e9       	ldi	r20, 0x96	; 150
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	24 e6       	ldi	r18, 0x64	; 100
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Holonomic_distance>
		if(direction == 1) 	while(!(SENSOR&0x08))	non_Holonomic(0,0, 65);		
     f54:	99 81       	ldd	r25, Y+1	; 0x01
     f56:	91 30       	cpi	r25, 0x01	; 1
     f58:	b9 f4       	brne	.+46     	; 0xf88 <ladder_down+0x18a>
     f5a:	0e c0       	rjmp	.+28     	; 0xf78 <ladder_down+0x17a>
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	cb 01       	movw	r24, r22
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	a9 01       	movw	r20, r18
     f68:	e1 e4       	ldi	r30, 0x41	; 65
     f6a:	ee 2e       	mov	r14, r30
     f6c:	f1 2c       	mov	r15, r1
     f6e:	01 2d       	mov	r16, r1
     f70:	11 2d       	mov	r17, r1
     f72:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
     f76:	05 c0       	rjmp	.+10     	; 0xf82 <ladder_down+0x184>
     f78:	2d 2c       	mov	r2, r13
     f7a:	33 24       	eor	r3, r3
     f7c:	e8 e0       	ldi	r30, 0x08	; 8
     f7e:	2e 22       	and	r2, r30
     f80:	33 24       	eor	r3, r3
     f82:	21 14       	cp	r2, r1
     f84:	31 04       	cpc	r3, r1
     f86:	51 f3       	breq	.-44     	; 0xf5c <ladder_down+0x15e>

unsigned char ladder_down(){ //미완성  

	unsigned char SENSOR=0;	
	unsigned char direction=0;	//1=왼쪽 2=가운데 3=오른쪽 
	while(!(SENSOR&0x01)){
     f88:	d0 fe       	sbrs	r13, 0
     f8a:	64 cf       	rjmp	.-312    	; 0xe54 <ladder_down+0x56>
		Holonomic_distance(0,200,150,100);
		if(direction == 1) 	while(!(SENSOR&0x08))	non_Holonomic(0,0, 65);		
		if(direction == 1)	while(!(SENSOR&0x08))	non_Holonomic(0,0,-65);
	}

	non_Holonomic(0,0,0);
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	cb 01       	movw	r24, r22
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	a9 01       	movw	r20, r18
     f98:	ee 24       	eor	r14, r14
     f9a:	ff 24       	eor	r15, r15
     f9c:	87 01       	movw	r16, r14
     f9e:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
	return 0;

}
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	0f 90       	pop	r0
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	df 90       	pop	r13
     fb4:	bf 90       	pop	r11
     fb6:	af 90       	pop	r10
     fb8:	9f 90       	pop	r9
     fba:	8f 90       	pop	r8
     fbc:	7f 90       	pop	r7
     fbe:	6f 90       	pop	r6
     fc0:	5f 90       	pop	r5
     fc2:	4f 90       	pop	r4
     fc4:	3f 90       	pop	r3
     fc6:	2f 90       	pop	r2
     fc8:	08 95       	ret

00000fca <main>:
	return count;
}


int main(void)
{    
     fca:	af 92       	push	r10
     fcc:	bf 92       	push	r11
     fce:	cf 92       	push	r12
     fd0:	df 92       	push	r13
     fd2:	ef 92       	push	r14
     fd4:	ff 92       	push	r15
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29

    Interface_init(); //인터페이스 초기화
     fde:	0e 94 ae 00 	call	0x15c	; 0x15c <Interface_init>

	LM629_HW_Reset();
     fe2:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <LM629_HW_Reset>
	MCU_init();	   // MCU 초기화
     fe6:	0e 94 76 00 	call	0xec	; 0xec <MCU_init>
	Motor_init();  // Motor 드라이버 초기화
     fea:	0e 94 30 0c 	call	0x1860	; 0x1860 <Motor_init>

	Sensor_init();
     fee:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <Sensor_init>

	DDRB=0x0F;		//LED, BZ, SW
     ff2:	8f e0       	ldi	r24, 0x0F	; 15
     ff4:	87 bb       	out	0x17, r24	; 23
	TCCR1A=0x00;	// Clock value: 14.400 kHz
     ff6:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x05;
     ff8:	85 e0       	ldi	r24, 0x05	; 5
     ffa:	8e bd       	out	0x2e, r24	; 46

	TCNT1H=0xFF;	//0.01초
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	8d bd       	out	0x2d, r24	; 45
	TCNT1L=0x70;
    1000:	80 e7       	ldi	r24, 0x70	; 112
    1002:	8c bd       	out	0x2c, r24	; 44
	TIMSK=0x04;
    1004:	84 e0       	ldi	r24, 0x04	; 4
    1006:	87 bf       	out	0x37, r24	; 55

	sei();
    1008:	78 94       	sei
		{
			int ladderdirection = 0;
			//ladder_iron(1);
			non_Holonomic(150,0,0);
			_delay_ms(500);	 
			speed = 150;//홀로노믹 distance 사이에 끝김이 없게 하기 위해 넣어야함
    100a:	0f 2e       	mov	r0, r31
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	af 2e       	mov	r10, r31
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	bf 2e       	mov	r11, r31
    1014:	f6 e1       	ldi	r31, 0x16	; 22
    1016:	cf 2e       	mov	r12, r31
    1018:	f3 e4       	ldi	r31, 0x43	; 67
    101a:	df 2e       	mov	r13, r31
    101c:	f0 2d       	mov	r31, r0
	sei();
	while(1){
			
//		int left,right;

		if(SW1)
    101e:	b4 99       	sbic	0x16, 4	; 22
    1020:	f1 c0       	rjmp	.+482    	; 0x1204 <__stack+0x105>
		{
			int ladderdirection = 0;
			//ladder_iron(1);
			non_Holonomic(150,0,0);
    1022:	66 e9       	ldi	r22, 0x96	; 150
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	a9 01       	movw	r20, r18
    1030:	ee 24       	eor	r14, r14
    1032:	ff 24       	eor	r15, r15
    1034:	87 01       	movw	r16, r14
    1036:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
    103a:	8f ef       	ldi	r24, 0xFF	; 255
    103c:	9f e7       	ldi	r25, 0x7F	; 127
    103e:	a6 e1       	ldi	r26, 0x16	; 22
    1040:	81 50       	subi	r24, 0x01	; 1
    1042:	90 40       	sbci	r25, 0x00	; 0
    1044:	a0 40       	sbci	r26, 0x00	; 0
    1046:	e1 f7       	brne	.-8      	; 0x1040 <main+0x76>
    1048:	00 c0       	rjmp	.+0      	; 0x104a <main+0x80>
    104a:	00 00       	nop
			_delay_ms(500);	 
			speed = 150;//홀로노믹 distance 사이에 끝김이 없게 하기 위해 넣어야함
    104c:	a0 92 38 02 	sts	0x0238, r10
    1050:	b0 92 39 02 	sts	0x0239, r11
    1054:	c0 92 3a 02 	sts	0x023A, r12
    1058:	d0 92 3b 02 	sts	0x023B, r13
			int barcode = READ_barcode(300,150);			
    105c:	8c e2       	ldi	r24, 0x2C	; 44
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	66 e9       	ldi	r22, 0x96	; 150
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	0e 94 b3 04 	call	0x966	; 0x966 <READ_barcode>
    1068:	48 2f       	mov	r20, r24
    106a:	c8 2f       	mov	r28, r24
    106c:	d0 e0       	ldi	r29, 0x00	; 0
			display_char(0,7,barcode);	
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	67 e0       	ldi	r22, 0x07	; 7
    1072:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
			
			non_Holonomic(150,0,0);
    1076:	66 e9       	ldi	r22, 0x96	; 150
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	a9 01       	movw	r20, r18
    1084:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
    1088:	8f ef       	ldi	r24, 0xFF	; 255
    108a:	9f e7       	ldi	r25, 0x7F	; 127
    108c:	a6 e1       	ldi	r26, 0x16	; 22
    108e:	81 50       	subi	r24, 0x01	; 1
    1090:	90 40       	sbci	r25, 0x00	; 0
    1092:	a0 40       	sbci	r26, 0x00	; 0
    1094:	e1 f7       	brne	.-8      	; 0x108e <main+0xc4>
    1096:	00 c0       	rjmp	.+0      	; 0x1098 <main+0xce>
    1098:	00 00       	nop
			_delay_ms(500);

			non_Holonomic(0,0,100);
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	cb 01       	movw	r24, r22
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	a9 01       	movw	r20, r18
    10a6:	b4 e6       	ldi	r27, 0x64	; 100
    10a8:	eb 2e       	mov	r14, r27
    10aa:	f1 2c       	mov	r15, r1
    10ac:	01 2d       	mov	r16, r1
    10ae:	11 2d       	mov	r17, r1
    10b0:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	9f e7       	ldi	r25, 0x7F	; 127
    10b8:	a8 e2       	ldi	r26, 0x28	; 40
    10ba:	81 50       	subi	r24, 0x01	; 1
    10bc:	90 40       	sbci	r25, 0x00	; 0
    10be:	a0 40       	sbci	r26, 0x00	; 0
    10c0:	e1 f7       	brne	.-8      	; 0x10ba <main+0xf0>
    10c2:	00 c0       	rjmp	.+0      	; 0x10c4 <main+0xfa>
    10c4:	00 00       	nop
    10c6:	0c c0       	rjmp	.+24     	; 0x10e0 <main+0x116>
			_delay_ms(900);
			
			while(!((READ_SENSOR()&0x1C)==0x1C))	non_Holonomic(150,0,0);	//센서 전체가 모두 온 되었을때는 ==0x1C를 붙여야 한다. 
    10c8:	66 e9       	ldi	r22, 0x96	; 150
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	a9 01       	movw	r20, r18
    10d6:	ee 24       	eor	r14, r14
    10d8:	ff 24       	eor	r15, r15
    10da:	87 01       	movw	r16, r14
    10dc:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
    10e0:	80 91 63 00 	lds	r24, 0x0063
    10e4:	81 b1       	in	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	80 95       	com	r24
    10ea:	90 95       	com	r25
    10ec:	8c 71       	andi	r24, 0x1C	; 28
    10ee:	90 70       	andi	r25, 0x00	; 0
    10f0:	8c 31       	cpi	r24, 0x1C	; 28
    10f2:	91 05       	cpc	r25, r1
    10f4:	49 f7       	brne	.-46     	; 0x10c8 <main+0xfe>
    10f6:	0c c0       	rjmp	.+24     	; 0x1110 <__stack+0x11>
			while((READ_SENSOR()&0x1C))		non_Holonomic(150,0,0);
    10f8:	66 e9       	ldi	r22, 0x96	; 150
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	a9 01       	movw	r20, r18
    1106:	ee 24       	eor	r14, r14
    1108:	ff 24       	eor	r15, r15
    110a:	87 01       	movw	r16, r14
    110c:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
    1110:	80 91 63 00 	lds	r24, 0x0063
    1114:	81 b1       	in	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	80 95       	com	r24
    111a:	90 95       	com	r25
    111c:	8c 71       	andi	r24, 0x1C	; 28
    111e:	90 70       	andi	r25, 0x00	; 0
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	51 f7       	brne	.-44     	; 0x10f8 <main+0x12e>
			
			//3개 오른쪽 2개 왼쪽 
			non_Holonomic(0,0,0);
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	cb 01       	movw	r24, r22
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	a9 01       	movw	r20, r18
    1130:	ee 24       	eor	r14, r14
    1132:	ff 24       	eor	r15, r15
    1134:	87 01       	movw	r16, r14
    1136:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
			if(barcode == 2){
    113a:	c2 30       	cpi	r28, 0x02	; 2
    113c:	d1 05       	cpc	r29, r1
    113e:	c1 f4       	brne	.+48     	; 0x1170 <__stack+0x71>
    1140:	0c c0       	rjmp	.+24     	; 0x115a <__stack+0x5b>
				ladderdirection = 1;
				while(!(READ_SENSOR()&0x08)){
					non_Holonomic(0,200,0);
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	cb 01       	movw	r24, r22
    1148:	28 ec       	ldi	r18, 0xC8	; 200
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	ee 24       	eor	r14, r14
    1152:	ff 24       	eor	r15, r15
    1154:	87 01       	movw	r16, r14
    1156:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
			
			//3개 오른쪽 2개 왼쪽 
			non_Holonomic(0,0,0);
			if(barcode == 2){
				ladderdirection = 1;
				while(!(READ_SENSOR()&0x08)){
    115a:	80 91 63 00 	lds	r24, 0x0063
    115e:	81 b1       	in	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	80 95       	com	r24
    1164:	90 95       	com	r25
    1166:	83 ff       	sbrs	r24, 3
    1168:	ec cf       	rjmp	.-40     	; 0x1142 <__stack+0x43>
			while((READ_SENSOR()&0x1C))		non_Holonomic(150,0,0);
			
			//3개 오른쪽 2개 왼쪽 
			non_Holonomic(0,0,0);
			if(barcode == 2){
				ladderdirection = 1;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	3d c0       	rjmp	.+122    	; 0x11ea <__stack+0xeb>
				while(!(READ_SENSOR()&0x08)){
					non_Holonomic(0,200,0);
				}
			} else if (barcode == 3){
    1170:	c3 30       	cpi	r28, 0x03	; 3
    1172:	d1 05       	cpc	r29, r1
    1174:	69 f5       	brne	.+90     	; 0x11d0 <__stack+0xd1>
    1176:	0c c0       	rjmp	.+24     	; 0x1190 <__stack+0x91>
				ladderdirection = 2;
				while(!(READ_SENSOR()&0x08)){
					non_Holonomic(0,200,0);
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	cb 01       	movw	r24, r22
    117e:	28 ec       	ldi	r18, 0xC8	; 200
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e0       	ldi	r20, 0x00	; 0
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	ee 24       	eor	r14, r14
    1188:	ff 24       	eor	r15, r15
    118a:	87 01       	movw	r16, r14
    118c:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
				while(!(READ_SENSOR()&0x08)){
					non_Holonomic(0,200,0);
				}
			} else if (barcode == 3){
				ladderdirection = 2;
				while(!(READ_SENSOR()&0x08)){
    1190:	80 91 63 00 	lds	r24, 0x0063
    1194:	81 b1       	in	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	80 95       	com	r24
    119a:	90 95       	com	r25
    119c:	83 ff       	sbrs	r24, 3
    119e:	ec cf       	rjmp	.-40     	; 0x1178 <__stack+0x79>
    11a0:	0c c0       	rjmp	.+24     	; 0x11ba <__stack+0xbb>
					non_Holonomic(0,200,0);
				}
				while((READ_SENSOR()&0x08))	non_Holonomic(0,200,0);
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	cb 01       	movw	r24, r22
    11a8:	28 ec       	ldi	r18, 0xC8	; 200
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e0       	ldi	r20, 0x00	; 0
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	ee 24       	eor	r14, r14
    11b2:	ff 24       	eor	r15, r15
    11b4:	87 01       	movw	r16, r14
    11b6:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
    11ba:	80 91 63 00 	lds	r24, 0x0063
    11be:	81 b1       	in	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	80 95       	com	r24
    11c4:	90 95       	com	r25
    11c6:	83 fd       	sbrc	r24, 3
    11c8:	ec cf       	rjmp	.-40     	; 0x11a2 <__stack+0xa3>
				ladderdirection = 1;
				while(!(READ_SENSOR()&0x08)){
					non_Holonomic(0,200,0);
				}
			} else if (barcode == 3){
				ladderdirection = 2;
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0d c0       	rjmp	.+26     	; 0x11ea <__stack+0xeb>
				while(!(READ_SENSOR()&0x08)){
					non_Holonomic(0,200,0);
				}
				while((READ_SENSOR()&0x08))	non_Holonomic(0,200,0);
			} else {
				BZ_ON();
    11d0:	c3 9a       	sbi	0x18, 3	; 24
    11d2:	8f ef       	ldi	r24, 0xFF	; 255
    11d4:	9f ef       	ldi	r25, 0xFF	; 255
    11d6:	a8 e0       	ldi	r26, 0x08	; 8
    11d8:	81 50       	subi	r24, 0x01	; 1
    11da:	90 40       	sbci	r25, 0x00	; 0
    11dc:	a0 40       	sbci	r26, 0x00	; 0
    11de:	e1 f7       	brne	.-8      	; 0x11d8 <__stack+0xd9>
    11e0:	00 c0       	rjmp	.+0      	; 0x11e2 <__stack+0xe3>
    11e2:	00 00       	nop
				_delay_ms(200);
				BZ_OFF();
    11e4:	c3 98       	cbi	0x18, 3	; 24
			
//		int left,right;

		if(SW1)
		{
			int ladderdirection = 0;
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
				BZ_ON();
				_delay_ms(200);
				BZ_OFF();
			}

			ladder_iron(ladderdirection);
    11ea:	0e 94 df 05 	call	0xbbe	; 0xbbe <ladder_iron>
			
			non_Holonomic(0,0,0);
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	cb 01       	movw	r24, r22
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	a9 01       	movw	r20, r18
    11fa:	ee 24       	eor	r14, r14
    11fc:	ff 24       	eor	r15, r15
    11fe:	87 01       	movw	r16, r14
    1200:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>

		}

		if(SW2)
    1204:	b5 99       	sbic	0x16, 5	; 22
    1206:	36 c0       	rjmp	.+108    	; 0x1274 <__stack+0x175>
		{
			LINE();
    1208:	0e 94 a8 06 	call	0xd50	; 0xd50 <LINE>
			speed=200;
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	a8 e4       	ldi	r26, 0x48	; 72
    1212:	b3 e4       	ldi	r27, 0x43	; 67
    1214:	80 93 38 02 	sts	0x0238, r24
    1218:	90 93 39 02 	sts	0x0239, r25
    121c:	a0 93 3a 02 	sts	0x023A, r26
    1220:	b0 93 3b 02 	sts	0x023B, r27
			Holonomic_distance(0,200,150,100);
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	68 ec       	ldi	r22, 0xC8	; 200
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	46 e9       	ldi	r20, 0x96	; 150
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	24 e6       	ldi	r18, 0x64	; 100
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Holonomic_distance>
			non_Holonomic(0,0,0);
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	cb 01       	movw	r24, r22
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	a9 01       	movw	r20, r18
    1244:	ee 24       	eor	r14, r14
    1246:	ff 24       	eor	r15, r15
    1248:	87 01       	movw	r16, r14
    124a:	0e 94 a5 03 	call	0x74a	; 0x74a <non_Holonomic>
			while(1){
				display_char(0,5,psd_value[0]);
    124e:	40 91 76 02 	lds	r20, 0x0276
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	65 e0       	ldi	r22, 0x05	; 5
    1256:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
				display_char(1,2,psd_value[2]);
    125a:	40 91 78 02 	lds	r20, 0x0278
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	62 e0       	ldi	r22, 0x02	; 2
    1262:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
				display_char(1,8,psd_value[7]);
    1266:	40 91 7d 02 	lds	r20, 0x027D
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	68 e0       	ldi	r22, 0x08	; 8
    126e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
    1272:	ed cf       	rjmp	.-38     	; 0x124e <__stack+0x14f>
			}	

		}

		if(SW3)
    1274:	b6 99       	sbic	0x16, 6	; 22
    1276:	d3 ce       	rjmp	.-602    	; 0x101e <main+0x54>
		{	
			ladder_down();
    1278:	0e 94 ff 06 	call	0xdfe	; 0xdfe <ladder_down>
    127c:	d0 ce       	rjmp	.-608    	; 0x101e <main+0x54>

0000127e <__vector_14>:
	StartMotion();
}


ISR (TIMER1_OVF_vect)
{
    127e:	1f 92       	push	r1
    1280:	0f 92       	push	r0
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	0f 92       	push	r0
    1286:	0b b6       	in	r0, 0x3b	; 59
    1288:	0f 92       	push	r0
    128a:	11 24       	eor	r1, r1
    128c:	ef 92       	push	r14
    128e:	ff 92       	push	r15
    1290:	0f 93       	push	r16
    1292:	1f 93       	push	r17
    1294:	2f 93       	push	r18
    1296:	3f 93       	push	r19
    1298:	4f 93       	push	r20
    129a:	5f 93       	push	r21
    129c:	6f 93       	push	r22
    129e:	7f 93       	push	r23
    12a0:	8f 93       	push	r24
    12a2:	9f 93       	push	r25
    12a4:	af 93       	push	r26
    12a6:	bf 93       	push	r27
    12a8:	ef 93       	push	r30
    12aa:	ff 93       	push	r31
	TCNT1H=0xFF; TCNT1L=0x70; //0.01초
    12ac:	8f ef       	ldi	r24, 0xFF	; 255
    12ae:	8d bd       	out	0x2d, r24	; 45
    12b0:	80 e7       	ldi	r24, 0x70	; 112
    12b2:	8c bd       	out	0x2c, r24	; 44
	++sec;
    12b4:	80 91 36 02 	lds	r24, 0x0236
    12b8:	90 91 37 02 	lds	r25, 0x0237
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	90 93 37 02 	sts	0x0237, r25
    12c2:	80 93 36 02 	sts	0x0236, r24
	
	disMD+=speed*0.01;
    12c6:	e0 90 54 02 	lds	r14, 0x0254
    12ca:	f0 90 55 02 	lds	r15, 0x0255
    12ce:	00 91 56 02 	lds	r16, 0x0256
    12d2:	10 91 57 02 	lds	r17, 0x0257
    12d6:	60 91 38 02 	lds	r22, 0x0238
    12da:	70 91 39 02 	lds	r23, 0x0239
    12de:	80 91 3a 02 	lds	r24, 0x023A
    12e2:	90 91 3b 02 	lds	r25, 0x023B
    12e6:	2a e0       	ldi	r18, 0x0A	; 10
    12e8:	37 ed       	ldi	r19, 0xD7	; 215
    12ea:	43 e2       	ldi	r20, 0x23	; 35
    12ec:	5c e3       	ldi	r21, 0x3C	; 60
    12ee:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    12f2:	9b 01       	movw	r18, r22
    12f4:	ac 01       	movw	r20, r24
    12f6:	c8 01       	movw	r24, r16
    12f8:	b7 01       	movw	r22, r14
    12fa:	0e 94 35 10 	call	0x206a	; 0x206a <__addsf3>
    12fe:	9b 01       	movw	r18, r22
    1300:	ac 01       	movw	r20, r24
    1302:	20 93 54 02 	sts	0x0254, r18
    1306:	30 93 55 02 	sts	0x0255, r19
    130a:	40 93 56 02 	sts	0x0256, r20
    130e:	50 93 57 02 	sts	0x0257, r21
	disW+=speedW*0.01;
    1312:	e0 90 50 02 	lds	r14, 0x0250
    1316:	f0 90 51 02 	lds	r15, 0x0251
    131a:	00 91 52 02 	lds	r16, 0x0252
    131e:	10 91 53 02 	lds	r17, 0x0253
    1322:	60 91 60 02 	lds	r22, 0x0260
    1326:	70 91 61 02 	lds	r23, 0x0261
    132a:	80 91 62 02 	lds	r24, 0x0262
    132e:	90 91 63 02 	lds	r25, 0x0263
    1332:	2a e0       	ldi	r18, 0x0A	; 10
    1334:	37 ed       	ldi	r19, 0xD7	; 215
    1336:	43 e2       	ldi	r20, 0x23	; 35
    1338:	5c e3       	ldi	r21, 0x3C	; 60
    133a:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    133e:	9b 01       	movw	r18, r22
    1340:	ac 01       	movw	r20, r24
    1342:	c8 01       	movw	r24, r16
    1344:	b7 01       	movw	r22, r14
    1346:	0e 94 35 10 	call	0x206a	; 0x206a <__addsf3>
    134a:	9b 01       	movw	r18, r22
    134c:	ac 01       	movw	r20, r24
    134e:	20 93 50 02 	sts	0x0250, r18
    1352:	30 93 51 02 	sts	0x0251, r19
    1356:	40 93 52 02 	sts	0x0252, r20
    135a:	50 93 53 02 	sts	0x0253, r21
	disX+=(speedX*0.01);
    135e:	e0 90 48 02 	lds	r14, 0x0248
    1362:	f0 90 49 02 	lds	r15, 0x0249
    1366:	00 91 4a 02 	lds	r16, 0x024A
    136a:	10 91 4b 02 	lds	r17, 0x024B
    136e:	60 91 58 02 	lds	r22, 0x0258
    1372:	70 91 59 02 	lds	r23, 0x0259
    1376:	80 91 5a 02 	lds	r24, 0x025A
    137a:	90 91 5b 02 	lds	r25, 0x025B
    137e:	2a e0       	ldi	r18, 0x0A	; 10
    1380:	37 ed       	ldi	r19, 0xD7	; 215
    1382:	43 e2       	ldi	r20, 0x23	; 35
    1384:	5c e3       	ldi	r21, 0x3C	; 60
    1386:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    138a:	9b 01       	movw	r18, r22
    138c:	ac 01       	movw	r20, r24
    138e:	c8 01       	movw	r24, r16
    1390:	b7 01       	movw	r22, r14
    1392:	0e 94 35 10 	call	0x206a	; 0x206a <__addsf3>
    1396:	9b 01       	movw	r18, r22
    1398:	ac 01       	movw	r20, r24
    139a:	20 93 48 02 	sts	0x0248, r18
    139e:	30 93 49 02 	sts	0x0249, r19
    13a2:	40 93 4a 02 	sts	0x024A, r20
    13a6:	50 93 4b 02 	sts	0x024B, r21
	disY+=(speedY*0.01);
    13aa:	e0 90 4c 02 	lds	r14, 0x024C
    13ae:	f0 90 4d 02 	lds	r15, 0x024D
    13b2:	00 91 4e 02 	lds	r16, 0x024E
    13b6:	10 91 4f 02 	lds	r17, 0x024F
    13ba:	60 91 5c 02 	lds	r22, 0x025C
    13be:	70 91 5d 02 	lds	r23, 0x025D
    13c2:	80 91 5e 02 	lds	r24, 0x025E
    13c6:	90 91 5f 02 	lds	r25, 0x025F
    13ca:	2a e0       	ldi	r18, 0x0A	; 10
    13cc:	37 ed       	ldi	r19, 0xD7	; 215
    13ce:	43 e2       	ldi	r20, 0x23	; 35
    13d0:	5c e3       	ldi	r21, 0x3C	; 60
    13d2:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    13d6:	9b 01       	movw	r18, r22
    13d8:	ac 01       	movw	r20, r24
    13da:	c8 01       	movw	r24, r16
    13dc:	b7 01       	movw	r22, r14
    13de:	0e 94 35 10 	call	0x206a	; 0x206a <__addsf3>
    13e2:	9b 01       	movw	r18, r22
    13e4:	ac 01       	movw	r20, r24
    13e6:	20 93 4c 02 	sts	0x024C, r18
    13ea:	30 93 4d 02 	sts	0x024D, r19
    13ee:	40 93 4e 02 	sts	0x024E, r20
    13f2:	50 93 4f 02 	sts	0x024F, r21

	if(next_speed>speed){
    13f6:	60 91 3c 02 	lds	r22, 0x023C
    13fa:	70 91 3d 02 	lds	r23, 0x023D
    13fe:	80 91 3e 02 	lds	r24, 0x023E
    1402:	90 91 3f 02 	lds	r25, 0x023F
    1406:	20 91 38 02 	lds	r18, 0x0238
    140a:	30 91 39 02 	lds	r19, 0x0239
    140e:	40 91 3a 02 	lds	r20, 0x023A
    1412:	50 91 3b 02 	lds	r21, 0x023B
    1416:	0e 94 8d 11 	call	0x231a	; 0x231a <__gtsf2>
    141a:	18 16       	cp	r1, r24
    141c:	94 f5       	brge	.+100    	; 0x1482 <__vector_14+0x204>
		speed+=acc;
    141e:	60 91 38 02 	lds	r22, 0x0238
    1422:	70 91 39 02 	lds	r23, 0x0239
    1426:	80 91 3a 02 	lds	r24, 0x023A
    142a:	90 91 3b 02 	lds	r25, 0x023B
    142e:	20 91 00 01 	lds	r18, 0x0100
    1432:	30 91 01 01 	lds	r19, 0x0101
    1436:	40 91 02 01 	lds	r20, 0x0102
    143a:	50 91 03 01 	lds	r21, 0x0103
    143e:	0e 94 35 10 	call	0x206a	; 0x206a <__addsf3>
    1442:	9b 01       	movw	r18, r22
    1444:	ac 01       	movw	r20, r24
    1446:	20 93 38 02 	sts	0x0238, r18
    144a:	30 93 39 02 	sts	0x0239, r19
    144e:	40 93 3a 02 	sts	0x023A, r20
    1452:	50 93 3b 02 	sts	0x023B, r21
		if(next_speed<=speed)speed=next_speed;
    1456:	60 91 3c 02 	lds	r22, 0x023C
    145a:	70 91 3d 02 	lds	r23, 0x023D
    145e:	80 91 3e 02 	lds	r24, 0x023E
    1462:	90 91 3f 02 	lds	r25, 0x023F
    1466:	20 91 38 02 	lds	r18, 0x0238
    146a:	30 91 39 02 	lds	r19, 0x0239
    146e:	40 91 3a 02 	lds	r20, 0x023A
    1472:	50 91 3b 02 	lds	r21, 0x023B
    1476:	0e 94 1d 12 	call	0x243a	; 0x243a <__lesf2>
    147a:	18 16       	cp	r1, r24
    147c:	0c f4       	brge	.+2      	; 0x1480 <__vector_14+0x202>
    147e:	55 c0       	rjmp	.+170    	; 0x152a <__vector_14+0x2ac>
    1480:	44 c0       	rjmp	.+136    	; 0x150a <__vector_14+0x28c>
	}
	else if(next_speed<speed){
    1482:	60 91 3c 02 	lds	r22, 0x023C
    1486:	70 91 3d 02 	lds	r23, 0x023D
    148a:	80 91 3e 02 	lds	r24, 0x023E
    148e:	90 91 3f 02 	lds	r25, 0x023F
    1492:	20 91 38 02 	lds	r18, 0x0238
    1496:	30 91 39 02 	lds	r19, 0x0239
    149a:	40 91 3a 02 	lds	r20, 0x023A
    149e:	50 91 3b 02 	lds	r21, 0x023B
    14a2:	0e 94 ed 11 	call	0x23da	; 0x23da <__ltsf2>
    14a6:	87 ff       	sbrs	r24, 7
    14a8:	40 c0       	rjmp	.+128    	; 0x152a <__vector_14+0x2ac>
		speed-=acc;
    14aa:	60 91 38 02 	lds	r22, 0x0238
    14ae:	70 91 39 02 	lds	r23, 0x0239
    14b2:	80 91 3a 02 	lds	r24, 0x023A
    14b6:	90 91 3b 02 	lds	r25, 0x023B
    14ba:	20 91 00 01 	lds	r18, 0x0100
    14be:	30 91 01 01 	lds	r19, 0x0101
    14c2:	40 91 02 01 	lds	r20, 0x0102
    14c6:	50 91 03 01 	lds	r21, 0x0103
    14ca:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__subsf3>
    14ce:	9b 01       	movw	r18, r22
    14d0:	ac 01       	movw	r20, r24
    14d2:	20 93 38 02 	sts	0x0238, r18
    14d6:	30 93 39 02 	sts	0x0239, r19
    14da:	40 93 3a 02 	sts	0x023A, r20
    14de:	50 93 3b 02 	sts	0x023B, r21
		if(next_speed>=speed)speed=next_speed;
    14e2:	60 91 3c 02 	lds	r22, 0x023C
    14e6:	70 91 3d 02 	lds	r23, 0x023D
    14ea:	80 91 3e 02 	lds	r24, 0x023E
    14ee:	90 91 3f 02 	lds	r25, 0x023F
    14f2:	20 91 38 02 	lds	r18, 0x0238
    14f6:	30 91 39 02 	lds	r19, 0x0239
    14fa:	40 91 3a 02 	lds	r20, 0x023A
    14fe:	50 91 3b 02 	lds	r21, 0x023B
    1502:	0e 94 bd 11 	call	0x237a	; 0x237a <__gesf2>
    1506:	87 fd       	sbrc	r24, 7
    1508:	10 c0       	rjmp	.+32     	; 0x152a <__vector_14+0x2ac>
    150a:	80 91 3c 02 	lds	r24, 0x023C
    150e:	90 91 3d 02 	lds	r25, 0x023D
    1512:	a0 91 3e 02 	lds	r26, 0x023E
    1516:	b0 91 3f 02 	lds	r27, 0x023F
    151a:	80 93 38 02 	sts	0x0238, r24
    151e:	90 93 39 02 	sts	0x0239, r25
    1522:	a0 93 3a 02 	sts	0x023A, r26
    1526:	b0 93 3b 02 	sts	0x023B, r27
	}
	if(next_wspeed>wspeed){
    152a:	60 91 44 02 	lds	r22, 0x0244
    152e:	70 91 45 02 	lds	r23, 0x0245
    1532:	80 91 46 02 	lds	r24, 0x0246
    1536:	90 91 47 02 	lds	r25, 0x0247
    153a:	20 91 40 02 	lds	r18, 0x0240
    153e:	30 91 41 02 	lds	r19, 0x0241
    1542:	40 91 42 02 	lds	r20, 0x0242
    1546:	50 91 43 02 	lds	r21, 0x0243
    154a:	0e 94 8d 11 	call	0x231a	; 0x231a <__gtsf2>
    154e:	18 16       	cp	r1, r24
    1550:	94 f5       	brge	.+100    	; 0x15b6 <__vector_14+0x338>
		wspeed+=accW;
    1552:	60 91 40 02 	lds	r22, 0x0240
    1556:	70 91 41 02 	lds	r23, 0x0241
    155a:	80 91 42 02 	lds	r24, 0x0242
    155e:	90 91 43 02 	lds	r25, 0x0243
    1562:	20 91 04 01 	lds	r18, 0x0104
    1566:	30 91 05 01 	lds	r19, 0x0105
    156a:	40 91 06 01 	lds	r20, 0x0106
    156e:	50 91 07 01 	lds	r21, 0x0107
    1572:	0e 94 35 10 	call	0x206a	; 0x206a <__addsf3>
    1576:	9b 01       	movw	r18, r22
    1578:	ac 01       	movw	r20, r24
    157a:	20 93 40 02 	sts	0x0240, r18
    157e:	30 93 41 02 	sts	0x0241, r19
    1582:	40 93 42 02 	sts	0x0242, r20
    1586:	50 93 43 02 	sts	0x0243, r21
		if(next_wspeed<=wspeed)wspeed=next_wspeed;
    158a:	60 91 44 02 	lds	r22, 0x0244
    158e:	70 91 45 02 	lds	r23, 0x0245
    1592:	80 91 46 02 	lds	r24, 0x0246
    1596:	90 91 47 02 	lds	r25, 0x0247
    159a:	20 91 40 02 	lds	r18, 0x0240
    159e:	30 91 41 02 	lds	r19, 0x0241
    15a2:	40 91 42 02 	lds	r20, 0x0242
    15a6:	50 91 43 02 	lds	r21, 0x0243
    15aa:	0e 94 1d 12 	call	0x243a	; 0x243a <__lesf2>
    15ae:	18 16       	cp	r1, r24
    15b0:	0c f4       	brge	.+2      	; 0x15b4 <__vector_14+0x336>
    15b2:	55 c0       	rjmp	.+170    	; 0x165e <__vector_14+0x3e0>
    15b4:	44 c0       	rjmp	.+136    	; 0x163e <__vector_14+0x3c0>
	}
	else if(next_wspeed<wspeed){
    15b6:	60 91 44 02 	lds	r22, 0x0244
    15ba:	70 91 45 02 	lds	r23, 0x0245
    15be:	80 91 46 02 	lds	r24, 0x0246
    15c2:	90 91 47 02 	lds	r25, 0x0247
    15c6:	20 91 40 02 	lds	r18, 0x0240
    15ca:	30 91 41 02 	lds	r19, 0x0241
    15ce:	40 91 42 02 	lds	r20, 0x0242
    15d2:	50 91 43 02 	lds	r21, 0x0243
    15d6:	0e 94 ed 11 	call	0x23da	; 0x23da <__ltsf2>
    15da:	87 ff       	sbrs	r24, 7
    15dc:	40 c0       	rjmp	.+128    	; 0x165e <__vector_14+0x3e0>
		wspeed-=accW;
    15de:	60 91 40 02 	lds	r22, 0x0240
    15e2:	70 91 41 02 	lds	r23, 0x0241
    15e6:	80 91 42 02 	lds	r24, 0x0242
    15ea:	90 91 43 02 	lds	r25, 0x0243
    15ee:	20 91 04 01 	lds	r18, 0x0104
    15f2:	30 91 05 01 	lds	r19, 0x0105
    15f6:	40 91 06 01 	lds	r20, 0x0106
    15fa:	50 91 07 01 	lds	r21, 0x0107
    15fe:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__subsf3>
    1602:	9b 01       	movw	r18, r22
    1604:	ac 01       	movw	r20, r24
    1606:	20 93 40 02 	sts	0x0240, r18
    160a:	30 93 41 02 	sts	0x0241, r19
    160e:	40 93 42 02 	sts	0x0242, r20
    1612:	50 93 43 02 	sts	0x0243, r21
		if(next_wspeed>=wspeed)wspeed=next_wspeed;
    1616:	60 91 44 02 	lds	r22, 0x0244
    161a:	70 91 45 02 	lds	r23, 0x0245
    161e:	80 91 46 02 	lds	r24, 0x0246
    1622:	90 91 47 02 	lds	r25, 0x0247
    1626:	20 91 40 02 	lds	r18, 0x0240
    162a:	30 91 41 02 	lds	r19, 0x0241
    162e:	40 91 42 02 	lds	r20, 0x0242
    1632:	50 91 43 02 	lds	r21, 0x0243
    1636:	0e 94 bd 11 	call	0x237a	; 0x237a <__gesf2>
    163a:	87 fd       	sbrc	r24, 7
    163c:	10 c0       	rjmp	.+32     	; 0x165e <__vector_14+0x3e0>
    163e:	80 91 44 02 	lds	r24, 0x0244
    1642:	90 91 45 02 	lds	r25, 0x0245
    1646:	a0 91 46 02 	lds	r26, 0x0246
    164a:	b0 91 47 02 	lds	r27, 0x0247
    164e:	80 93 40 02 	sts	0x0240, r24
    1652:	90 93 41 02 	sts	0x0241, r25
    1656:	a0 93 42 02 	sts	0x0242, r26
    165a:	b0 93 43 02 	sts	0x0243, r27
	}
}
    165e:	ff 91       	pop	r31
    1660:	ef 91       	pop	r30
    1662:	bf 91       	pop	r27
    1664:	af 91       	pop	r26
    1666:	9f 91       	pop	r25
    1668:	8f 91       	pop	r24
    166a:	7f 91       	pop	r23
    166c:	6f 91       	pop	r22
    166e:	5f 91       	pop	r21
    1670:	4f 91       	pop	r20
    1672:	3f 91       	pop	r19
    1674:	2f 91       	pop	r18
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	ef 90       	pop	r14
    167e:	0f 90       	pop	r0
    1680:	0b be       	out	0x3b, r0	; 59
    1682:	0f 90       	pop	r0
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	0f 90       	pop	r0
    1688:	1f 90       	pop	r1
    168a:	18 95       	reti

0000168c <ReadData>:
unsigned char ReadData(unsigned char motor)
{
    unsigned char data;

    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	fc 01       	movw	r30, r24
    1690:	b0 96       	adiw	r30, 0x20	; 32
    1692:	fe 2f       	mov	r31, r30
    1694:	ee 27       	eor	r30, r30
    1696:	20 81       	ld	r18, Z
    1698:	20 93 72 02 	sts	0x0272, r18
    169c:	20 fd       	sbrc	r18, 0
    169e:	fb cf       	rjmp	.-10     	; 0x1696 <ReadData+0xa>
    // 데이터 입력
    data = MOTOR_DATA(motor);
    16a0:	88 96       	adiw	r24, 0x28	; 40
    16a2:	b8 2f       	mov	r27, r24
    16a4:	aa 27       	eor	r26, r26
    16a6:	8c 91       	ld	r24, X

	CHECK_BUSY(motor, status);
    16a8:	90 81       	ld	r25, Z
    16aa:	90 93 72 02 	sts	0x0272, r25
    16ae:	90 fd       	sbrc	r25, 0
    16b0:	fb cf       	rjmp	.-10     	; 0x16a8 <ReadData+0x1c>
    // 입력된 데이터 리턴
    return data;
}    
    16b2:	08 95       	ret

000016b4 <WriteCommand>:
// Return    : 없음

void WriteCommand(unsigned char motor, unsigned char cmd)
{
    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	80 96       	adiw	r24, 0x20	; 32
    16b8:	f8 2f       	mov	r31, r24
    16ba:	ee 27       	eor	r30, r30
    16bc:	80 81       	ld	r24, Z
    16be:	80 93 72 02 	sts	0x0272, r24
    16c2:	80 fd       	sbrc	r24, 0
    16c4:	fb cf       	rjmp	.-10     	; 0x16bc <WriteCommand+0x8>
    // 커맨드 출력
    MOTOR_CMD(motor) = cmd;
    16c6:	60 83       	st	Z, r22

	CHECK_BUSY(motor, status);
    16c8:	80 81       	ld	r24, Z
    16ca:	80 93 72 02 	sts	0x0272, r24
    16ce:	80 fd       	sbrc	r24, 0
    16d0:	fb cf       	rjmp	.-10     	; 0x16c8 <WriteCommand+0x14>
}
    16d2:	08 95       	ret

000016d4 <WriteDataTwoByte>:
//      data  - 쓸 데이터
// Return    : 없음
void WriteDataTwoByte(unsigned char motor, int data)
{
    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
    16d4:	a8 2f       	mov	r26, r24
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	fd 01       	movw	r30, r26
    16da:	b0 96       	adiw	r30, 0x20	; 32
    16dc:	fe 2f       	mov	r31, r30
    16de:	ee 27       	eor	r30, r30
    16e0:	80 81       	ld	r24, Z
    16e2:	80 93 72 02 	sts	0x0272, r24
    16e6:	80 fd       	sbrc	r24, 0
    16e8:	fb cf       	rjmp	.-10     	; 0x16e0 <WriteDataTwoByte+0xc>
    // 2 바이트 데이터 출력
    MOTOR_DATA(motor) = (uint8_t)((data >> 8)&0xFF);
    16ea:	98 96       	adiw	r26, 0x28	; 40
    16ec:	ba 2f       	mov	r27, r26
    16ee:	aa 27       	eor	r26, r26
    16f0:	87 2f       	mov	r24, r23
    16f2:	99 27       	eor	r25, r25
    16f4:	87 fd       	sbrc	r24, 7
    16f6:	9a 95       	dec	r25
    16f8:	8c 93       	st	X, r24
	CHECK_BUSY(motor, status);
    16fa:	80 81       	ld	r24, Z
    16fc:	80 93 72 02 	sts	0x0272, r24
    1700:	80 fd       	sbrc	r24, 0
    1702:	fb cf       	rjmp	.-10     	; 0x16fa <WriteDataTwoByte+0x26>
    MOTOR_DATA(motor) = (uint8_t)(data&0xFF);
    1704:	6c 93       	st	X, r22
	CHECK_BUSY(motor, status);
    1706:	80 81       	ld	r24, Z
    1708:	80 93 72 02 	sts	0x0272, r24
    170c:	80 fd       	sbrc	r24, 0
    170e:	fb cf       	rjmp	.-10     	; 0x1706 <WriteDataTwoByte+0x32>
}
    1710:	08 95       	ret

00001712 <WriteDataFourByte>:
// Parameter :
//      motor - 선택할 모터
//      data  - 쓸 데이터
// Return    : 없음
void WriteDataFourByte(unsigned char motor, long data)
{
    1712:	df 92       	push	r13
    1714:	ef 92       	push	r14
    1716:	ff 92       	push	r15
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	d8 2e       	mov	r13, r24
    171e:	7a 01       	movw	r14, r20
    1720:	8b 01       	movw	r16, r22
    // 4 바이트의 데이터를 둘로 나누어서 WriteDataTwoByte함수를 두번 호출
    WriteDataTwoByte(motor, (int16_t)(data >> 16));
    1722:	9b 01       	movw	r18, r22
    1724:	55 27       	eor	r21, r21
    1726:	37 fd       	sbrc	r19, 7
    1728:	50 95       	com	r21
    172a:	45 2f       	mov	r20, r21
    172c:	b9 01       	movw	r22, r18
    172e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <WriteDataTwoByte>
    WriteDataTwoByte(motor, (int16_t)(data));
    1732:	8d 2d       	mov	r24, r13
    1734:	b7 01       	movw	r22, r14
    1736:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <WriteDataTwoByte>
}
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	ef 90       	pop	r14
    1742:	df 90       	pop	r13
    1744:	08 95       	ret

00001746 <Motor_Reset>:
// Function  : LM629를 리셋한다.
// Parameter :
//      motor - 선택할 모터
// Return    : 없음
void Motor_Reset(uint8_t motor)
{
    1746:	1f 93       	push	r17
    1748:	18 2f       	mov	r17, r24
    // RESET 커맨드 출력
    WriteCommand(motor, RESET);
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <WriteCommand>
    1750:	8c ec       	ldi	r24, 0xCC	; 204
    1752:	9c e1       	ldi	r25, 0x1C	; 28
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <Motor_Reset+0xe>
    1758:	00 c0       	rjmp	.+0      	; 0x175a <Motor_Reset+0x14>
    175a:	00 00       	nop
    // 리셋이 완료될 때까지 최소 1.5ms이상 대기
    _delay_ms(2);
	// Morot1 인터럽트 마스크 리셋
    WriteCommand(motor, RSTI);
    175c:	81 2f       	mov	r24, r17
    175e:	6d e1       	ldi	r22, 0x1D	; 29
    1760:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <WriteCommand>
    WriteDataTwoByte(motor, 0x0000);
    1764:	81 2f       	mov	r24, r17
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <WriteDataTwoByte>
}
    176e:	1f 91       	pop	r17
    1770:	08 95       	ret

00001772 <SetGain>:
//      kp    - P값
//      ki    - I값
//      kd    - D값
// Return    : 없음
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
{
    1772:	af 92       	push	r10
    1774:	bf 92       	push	r11
    1776:	cf 92       	push	r12
    1778:	df 92       	push	r13
    177a:	ef 92       	push	r14
    177c:	ff 92       	push	r15
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	f8 2e       	mov	r15, r24
    1788:	6b 01       	movw	r12, r22
    178a:	ea 01       	movw	r28, r20
    178c:	89 01       	movw	r16, r18
//      motor - 선택할 모터
//      kp    - P값
//      ki    - I값
//      kd    - D값
// Return    : 없음
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
    178e:	aa 24       	eor	r10, r10
    1790:	a3 94       	inc	r10
    1792:	61 15       	cp	r22, r1
    1794:	71 05       	cpc	r23, r1
    1796:	09 f4       	brne	.+2      	; 0x179a <SetGain+0x28>
    1798:	aa 24       	eor	r10, r10
    179a:	bb 24       	eor	r11, r11
    179c:	b3 94       	inc	r11
    179e:	20 97       	sbiw	r28, 0x00	; 0
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <SetGain+0x32>
    17a2:	bb 24       	eor	r11, r11
    17a4:	ee 24       	eor	r14, r14
    17a6:	e3 94       	inc	r14
    17a8:	01 15       	cp	r16, r1
    17aa:	11 05       	cpc	r17, r1
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <SetGain+0x3e>
    17ae:	ee 24       	eor	r14, r14
	if(ki)LD_ki=1;
	else LD_ki=0;
	if(kd)LD_kd=1;
	else LD_kd=0;
	// LFIL 커맨드 출력
    WriteCommand(motor, LFIL);
    17b0:	8f 2d       	mov	r24, r15
    17b2:	6e e1       	ldi	r22, 0x1E	; 30
    17b4:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <WriteCommand>
    // 컨트롤 워드 출력, sampling interval은 341us 고정
    WriteDataTwoByte(motor, (0x0000) | (LD_kp << 3) | (LD_ki << 2) | (LD_kd << 1)  );
    17b8:	6b 2d       	mov	r22, r11
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	66 0f       	add	r22, r22
    17be:	77 1f       	adc	r23, r23
    17c0:	66 0f       	add	r22, r22
    17c2:	77 1f       	adc	r23, r23
    17c4:	8a 2d       	mov	r24, r10
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	43 e0       	ldi	r20, 0x03	; 3
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	4a 95       	dec	r20
    17d0:	e1 f7       	brne	.-8      	; 0x17ca <SetGain+0x58>
    17d2:	68 2b       	or	r22, r24
    17d4:	79 2b       	or	r23, r25
    17d6:	8e 2d       	mov	r24, r14
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	68 2b       	or	r22, r24
    17e0:	79 2b       	or	r23, r25
    17e2:	8f 2d       	mov	r24, r15
    17e4:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <WriteDataTwoByte>
    ////////////////////////////
	// P값 출력
	if(kp)WriteDataTwoByte(motor, kp);
    17e8:	aa 20       	and	r10, r10
    17ea:	21 f0       	breq	.+8      	; 0x17f4 <SetGain+0x82>
    17ec:	8f 2d       	mov	r24, r15
    17ee:	b6 01       	movw	r22, r12
    17f0:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <WriteDataTwoByte>
    // I값 출력
    if(ki)WriteDataTwoByte(motor, ki);
    17f4:	bb 20       	and	r11, r11
    17f6:	21 f0       	breq	.+8      	; 0x1800 <SetGain+0x8e>
    17f8:	8f 2d       	mov	r24, r15
    17fa:	be 01       	movw	r22, r28
    17fc:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <WriteDataTwoByte>
    // D값 출력
    if(kd)WriteDataTwoByte(motor, kd);
    1800:	ee 20       	and	r14, r14
    1802:	21 f0       	breq	.+8      	; 0x180c <SetGain+0x9a>
    1804:	8f 2d       	mov	r24, r15
    1806:	b8 01       	movw	r22, r16
    1808:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <WriteDataTwoByte>
    // 필터 업데이트
    WriteCommand(motor, UDF);
    180c:	8f 2d       	mov	r24, r15
    180e:	64 e0       	ldi	r22, 0x04	; 4
    1810:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <WriteCommand>
}
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	df 90       	pop	r13
    1822:	cf 90       	pop	r12
    1824:	bf 90       	pop	r11
    1826:	af 90       	pop	r10
    1828:	08 95       	ret

0000182a <SetAcceleration>:
// Parameter :
//      motor - 선택할 모터
//      acc   - 가속도값
// Return    : 없음
void SetAcceleration(uint8_t motor, int32_t acc)
{
    182a:	df 92       	push	r13
    182c:	ef 92       	push	r14
    182e:	ff 92       	push	r15
    1830:	0f 93       	push	r16
    1832:	1f 93       	push	r17
    1834:	d8 2e       	mov	r13, r24
    1836:	7a 01       	movw	r14, r20
    1838:	8b 01       	movw	r16, r22
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);
    183a:	6f e1       	ldi	r22, 0x1F	; 31
    183c:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(motor, (1 << ACC_LOAD));
    1840:	8d 2d       	mov	r24, r13
    1842:	60 e2       	ldi	r22, 0x20	; 32
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <WriteDataTwoByte>
    // 가속도값 출력
    WriteDataFourByte(motor, acc);
    184a:	8d 2d       	mov	r24, r13
    184c:	b8 01       	movw	r22, r16
    184e:	a7 01       	movw	r20, r14
    1850:	0e 94 89 0b 	call	0x1712	; 0x1712 <WriteDataFourByte>
}
    1854:	1f 91       	pop	r17
    1856:	0f 91       	pop	r16
    1858:	ff 90       	pop	r15
    185a:	ef 90       	pop	r14
    185c:	df 90       	pop	r13
    185e:	08 95       	ret

00001860 <Motor_init>:
// Parameter : 없음
// Return    : 없음
void Motor_init(void)
{	
    // Motor1 게인 설정
    SetGain(MOTOR0, 7, 3, 1);
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	67 e0       	ldi	r22, 0x07	; 7
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	43 e0       	ldi	r20, 0x03	; 3
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	21 e0       	ldi	r18, 0x01	; 1
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <SetGain>
    // Motor2 게인 설정
    SetGain(MOTOR1, 7, 3, 1);
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	67 e0       	ldi	r22, 0x07	; 7
    1876:	70 e0       	ldi	r23, 0x00	; 0
    1878:	43 e0       	ldi	r20, 0x03	; 3
    187a:	50 e0       	ldi	r21, 0x00	; 0
    187c:	21 e0       	ldi	r18, 0x01	; 1
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	0e 94 b9 0b 	call	0x1772	; 0x1772 <SetGain>
    // Motor3 게인 설정
    SetGain(MOTOR2, 7, 3, 1);
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	67 e0       	ldi	r22, 0x07	; 7
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	43 e0       	ldi	r20, 0x03	; 3
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	21 e0       	ldi	r18, 0x01	; 1
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	0e 94 b9 0b 	call	0x1772	; 0x1772 <SetGain>

    SetAcceleration(MOTOR0, 0x3FFFFFFF);
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	4f ef       	ldi	r20, 0xFF	; 255
    189a:	5f ef       	ldi	r21, 0xFF	; 255
    189c:	6f ef       	ldi	r22, 0xFF	; 255
    189e:	7f e3       	ldi	r23, 0x3F	; 63
    18a0:	0e 94 15 0c 	call	0x182a	; 0x182a <SetAcceleration>
    SetAcceleration(MOTOR1, 0x3FFFFFFF);
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	4f ef       	ldi	r20, 0xFF	; 255
    18a8:	5f ef       	ldi	r21, 0xFF	; 255
    18aa:	6f ef       	ldi	r22, 0xFF	; 255
    18ac:	7f e3       	ldi	r23, 0x3F	; 63
    18ae:	0e 94 15 0c 	call	0x182a	; 0x182a <SetAcceleration>
    SetAcceleration(MOTOR2, 0x3FFFFFFF);
    18b2:	82 e0       	ldi	r24, 0x02	; 2
    18b4:	4f ef       	ldi	r20, 0xFF	; 255
    18b6:	5f ef       	ldi	r21, 0xFF	; 255
    18b8:	6f ef       	ldi	r22, 0xFF	; 255
    18ba:	7f e3       	ldi	r23, 0x3F	; 63
    18bc:	0e 94 15 0c 	call	0x182a	; 0x182a <SetAcceleration>
}
    18c0:	08 95       	ret

000018c2 <SetVelocity>:
// Parameter :
//      motor    - 선택할 모터
//      velocity - 속도 설정  (0 ~ 1,073,741,823) 음수 입력시 역방향으로 회전
// Return    : 없음
void SetVelocity(uint8_t motor, int32_t velocity)
{
    18c2:	df 92       	push	r13
    18c4:	ef 92       	push	r14
    18c6:	ff 92       	push	r15
    18c8:	0f 93       	push	r16
    18ca:	1f 93       	push	r17
    18cc:	df 93       	push	r29
    18ce:	cf 93       	push	r28
    18d0:	0f 92       	push	r0
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	d8 2e       	mov	r13, r24
    18d8:	7a 01       	movw	r14, r20
    18da:	8b 01       	movw	r16, r22
	unsigned char dir=1;

	if(velocity<0){
    18dc:	77 ff       	sbrs	r23, 7
    18de:	0a c0       	rjmp	.+20     	; 0x18f4 <SetVelocity+0x32>
		velocity*=(-1);
    18e0:	10 95       	com	r17
    18e2:	00 95       	com	r16
    18e4:	f0 94       	com	r15
    18e6:	e0 94       	com	r14
    18e8:	e1 1c       	adc	r14, r1
    18ea:	f1 1c       	adc	r15, r1
    18ec:	01 1d       	adc	r16, r1
    18ee:	11 1d       	adc	r17, r1
		dir=0;
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	01 c0       	rjmp	.+2      	; 0x18f6 <SetVelocity+0x34>
//      motor    - 선택할 모터
//      velocity - 속도 설정  (0 ~ 1,073,741,823) 음수 입력시 역방향으로 회전
// Return    : 없음
void SetVelocity(uint8_t motor, int32_t velocity)
{
	unsigned char dir=1;
    18f4:	91 e0       	ldi	r25, 0x01	; 1
	if(velocity<0){
		velocity*=(-1);
		dir=0;
	}
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);        
    18f6:	8d 2d       	mov	r24, r13
    18f8:	6f e1       	ldi	r22, 0x1F	; 31
    18fa:	99 83       	std	Y+1, r25	; 0x01
    18fc:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <WriteCommand>
    // 컨트롤 워드 출력        
    WriteDataTwoByte(motor,  (dir << FORWARD_DIR) | (1 << VELOCITY_MODE) | (1 << VELOCITY_LOAD));
    1900:	99 81       	ldd	r25, Y+1	; 0x01
    1902:	79 2f       	mov	r23, r25
    1904:	72 95       	swap	r23
    1906:	70 7f       	andi	r23, 0xF0	; 240
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	68 60       	ori	r22, 0x08	; 8
    190c:	78 60       	ori	r23, 0x08	; 8
    190e:	8d 2d       	mov	r24, r13
    1910:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <WriteDataTwoByte>
    // 속도값 출력
    WriteDataFourByte(motor, velocity);
    1914:	8d 2d       	mov	r24, r13
    1916:	b8 01       	movw	r22, r16
    1918:	a7 01       	movw	r20, r14
    191a:	0e 94 89 0b 	call	0x1712	; 0x1712 <WriteDataFourByte>
}
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	ff 90       	pop	r15
    192a:	ef 90       	pop	r14
    192c:	df 90       	pop	r13
    192e:	08 95       	ret

00001930 <SetPosition>:
//		acc   - 가속도 설정  (0 ~ 1,073,741,823)
//   velocity - 속도 설정    (0 ~ 1,073,741,823)
//   position - 모터위치설정 (-1,073,741,824 ~ 1,073,741,823)counts
// Return    : 없음
void SetPosition(uint8_t motor, uint8_t mode, int32_t acc,int32_t velocity,int32_t position)
{
    1930:	4f 92       	push	r4
    1932:	5f 92       	push	r5
    1934:	6f 92       	push	r6
    1936:	7f 92       	push	r7
    1938:	8f 92       	push	r8
    193a:	9f 92       	push	r9
    193c:	af 92       	push	r10
    193e:	bf 92       	push	r11
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	98 2e       	mov	r9, r24
    194e:	86 2e       	mov	r8, r22
    1950:	29 01       	movw	r4, r18
    1952:	3a 01       	movw	r6, r20
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);
    1954:	6f e1       	ldi	r22, 0x1F	; 31
    1956:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <WriteCommand>
    // 컨트롤 워드 출력
    // mode : 0 - Absolute Position, 1 - Relative Position
    // Position Mode로 설정
    
	WriteDataTwoByte(motor, (1 << ACC_LOAD) | (1 << VELOCITY_LOAD) | (1 << POSITION_LOAD) | (mode << POSITION_RELATIVE) );//WriteDataTwoByte(motor, 0x2A|mode);
    195a:	68 2d       	mov	r22, r8
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	6a 62       	ori	r22, 0x2A	; 42
    1960:	89 2d       	mov	r24, r9
    1962:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <WriteDataTwoByte>
    // 위치값 출력
	WriteDataFourByte(motor, acc);    
    1966:	89 2d       	mov	r24, r9
    1968:	b3 01       	movw	r22, r6
    196a:	a2 01       	movw	r20, r4
    196c:	0e 94 89 0b 	call	0x1712	; 0x1712 <WriteDataFourByte>
	WriteDataFourByte(motor, velocity);
    1970:	89 2d       	mov	r24, r9
    1972:	b8 01       	movw	r22, r16
    1974:	a7 01       	movw	r20, r14
    1976:	0e 94 89 0b 	call	0x1712	; 0x1712 <WriteDataFourByte>
    WriteDataFourByte(motor, position);
    197a:	89 2d       	mov	r24, r9
    197c:	b6 01       	movw	r22, r12
    197e:	a5 01       	movw	r20, r10
    1980:	0e 94 89 0b 	call	0x1712	; 0x1712 <WriteDataFourByte>
}
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	ff 90       	pop	r15
    198a:	ef 90       	pop	r14
    198c:	df 90       	pop	r13
    198e:	cf 90       	pop	r12
    1990:	bf 90       	pop	r11
    1992:	af 90       	pop	r10
    1994:	9f 90       	pop	r9
    1996:	8f 90       	pop	r8
    1998:	7f 90       	pop	r7
    199a:	6f 90       	pop	r6
    199c:	5f 90       	pop	r5
    199e:	4f 90       	pop	r4
    19a0:	08 95       	ret

000019a2 <LM629_HW_Reset>:

// Function  : LM629 H/W Reset. 최초 전원 인가시 반드시 실행해야한다.
// Parameter : 없음
// Return    : 없음
void LM629_HW_Reset(void){
    19a2:	8f 92       	push	r8
    19a4:	9f 92       	push	r9
    19a6:	af 92       	push	r10
    19a8:	bf 92       	push	r11
    19aa:	cf 92       	push	r12
    19ac:	df 92       	push	r13
    19ae:	ef 92       	push	r14
    19b0:	ff 92       	push	r15
    19b2:	0f 93       	push	r16
    19b4:	1f 93       	push	r17
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <LM629_HW_Reset+0x1a>
    19bc:	0f 92       	push	r0
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
	unsigned char status[3]={0, }, i=0, step=0;
	
	DDRA=0x00;
    19c2:	1a ba       	out	0x1a, r1	; 26

	PORTC=0x00;
    19c4:	15 ba       	out	0x15, r1	; 21
	DDRC=0xFF;
    19c6:	8f ef       	ldi	r24, 0xFF	; 255
    19c8:	84 bb       	out	0x14, r24	; 20

	PORTG=0x00;
    19ca:	10 92 65 00 	sts	0x0065, r1
	DDRG=0x03;
    19ce:	83 e0       	ldi	r24, 0x03	; 3
    19d0:	80 93 64 00 	sts	0x0064, r24
			}
		}
		
		if(step==1){
			// SRE : 외부 데이터 메모리 영역 활성화
			MCUCR = (1 << SRE) | (0 << SRW10);
    19d4:	e0 e8       	ldi	r30, 0x80	; 128
    19d6:	9e 2e       	mov	r9, r30
		    // SRL(0) : Upper Sector로만 사용 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
    19d8:	72 e0       	ldi	r23, 0x02	; 2
    19da:	a7 2e       	mov	r10, r23
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
    19dc:	64 e8       	ldi	r22, 0x84	; 132
    19de:	b6 2e       	mov	r11, r22
    19e0:	6e 01       	movw	r12, r28
    19e2:	08 94       	sec
    19e4:	c1 1c       	adc	r12, r1
    19e6:	d1 1c       	adc	r13, r1
	DDRG=0x03;

	while(1){
		if(step==0){
			while(1){
				PORTC |= 0x05; //Hw Rst Hi(decoder = Low)
    19e8:	85 b3       	in	r24, 0x15	; 21
    19ea:	85 60       	ori	r24, 0x05	; 5
    19ec:	85 bb       	out	0x15, r24	; 21
    19ee:	83 e3       	ldi	r24, 0x33	; 51
    19f0:	9b e2       	ldi	r25, 0x2B	; 43
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <LM629_HW_Reset+0x50>
				_delay_ms(3);
				PORTC &= ~0x05; //Hw Rst Low(decoder = Hi)
    19f6:	85 b3       	in	r24, 0x15	; 21
    19f8:	8a 7f       	andi	r24, 0xFA	; 250
    19fa:	85 bb       	out	0x15, r24	; 21
    19fc:	ec ec       	ldi	r30, 0xCC	; 204
    19fe:	fc e1       	ldi	r31, 0x1C	; 28
    1a00:	31 97       	sbiw	r30, 0x01	; 1
    1a02:	f1 f7       	brne	.-4      	; 0x1a00 <LM629_HW_Reset+0x5e>
    1a04:	00 c0       	rjmp	.+0      	; 0x1a06 <LM629_HW_Reset+0x64>
    1a06:	00 00       	nop
				_delay_ms(2);

				PORTG &= ~0x02; //RD low
    1a08:	80 91 65 00 	lds	r24, 0x0065
    1a0c:	8d 7f       	andi	r24, 0xFD	; 253
    1a0e:	80 93 65 00 	sts	0x0065, r24
				PORTC &= ~0x08; //PS low
    1a12:	ab 98       	cbi	0x15, 3	; 21
		
				PORTC &=~0x07;	//cs motor0
    1a14:	85 b3       	in	r24, 0x15	; 21
    1a16:	88 7f       	andi	r24, 0xF8	; 248
    1a18:	85 bb       	out	0x15, r24	; 21
				status[0]=PINA; //Read status motor0
    1a1a:	29 b3       	in	r18, 0x19	; 25
    1a1c:	29 83       	std	Y+1, r18	; 0x01
				
				PORTC |=0x01;	//cs motor1
    1a1e:	a8 9a       	sbi	0x15, 0	; 21
				status[1]=PINA; //Read status motor0
    1a20:	99 b3       	in	r25, 0x19	; 25
    1a22:	9a 83       	std	Y+2, r25	; 0x02
				
				PORTC = (PORTC&0xF8)|0x02; 	//cs motor2
    1a24:	85 b3       	in	r24, 0x15	; 21
    1a26:	88 7f       	andi	r24, 0xF8	; 248
    1a28:	82 60       	ori	r24, 0x02	; 2
    1a2a:	85 bb       	out	0x15, r24	; 21
				status[2]=PINA;  //Read status motor0
    1a2c:	89 b3       	in	r24, 0x19	; 25
    1a2e:	8b 83       	std	Y+3, r24	; 0x03

				if( (status[0]==0xC4||status[0]==0x84) && 
    1a30:	24 3c       	cpi	r18, 0xC4	; 196
    1a32:	11 f0       	breq	.+4      	; 0x1a38 <LM629_HW_Reset+0x96>
    1a34:	24 38       	cpi	r18, 0x84	; 132
    1a36:	c1 f5       	brne	.+112    	; 0x1aa8 <LM629_HW_Reset+0x106>
    1a38:	94 3c       	cpi	r25, 0xC4	; 196
    1a3a:	11 f0       	breq	.+4      	; 0x1a40 <LM629_HW_Reset+0x9e>
					(status[1]==0xC4||status[1]==0x84) && 
    1a3c:	94 38       	cpi	r25, 0x84	; 132
    1a3e:	a1 f5       	brne	.+104    	; 0x1aa8 <LM629_HW_Reset+0x106>
    1a40:	84 3c       	cpi	r24, 0xC4	; 196
    1a42:	11 f0       	breq	.+4      	; 0x1a48 <LM629_HW_Reset+0xa6>
					(status[2]==0xC4||status[2]==0x84) ){
    1a44:	84 38       	cpi	r24, 0x84	; 132
    1a46:	81 f5       	brne	.+96     	; 0x1aa8 <LM629_HW_Reset+0x106>
			}
		}
		
		if(step==1){
			// SRE : 외부 데이터 메모리 영역 활성화
			MCUCR = (1 << SRE) | (0 << SRW10);
    1a48:	95 be       	out	0x35, r9	; 53
		    // SRL(0) : Upper Sector로만 사용 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
    1a4a:	a0 92 6d 00 	sts	0x006D, r10
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
    1a4e:	b0 92 6c 00 	sts	0x006C, r11
    1a52:	76 01       	movw	r14, r12
    1a54:	00 e0       	ldi	r16, 0x00	; 0
    1a56:	10 e2       	ldi	r17, 0x20	; 32
    1a58:	8e 2c       	mov	r8, r14
    1a5a:	8c 18       	sub	r8, r12
			while(1){
				for(i=0;i<3;++i){
		        	WriteCommand(i, RSTI);
    1a5c:	88 2d       	mov	r24, r8
    1a5e:	6d e1       	ldi	r22, 0x1D	; 29
    1a60:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <WriteCommand>
					WriteDataTwoByte(i, 0x0000);
    1a64:	88 2d       	mov	r24, r8
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <WriteDataTwoByte>
					READ_STATUS(i, status[i]);
    1a6e:	f8 01       	movw	r30, r16
    1a70:	80 81       	ld	r24, Z
    1a72:	f7 01       	movw	r30, r14
    1a74:	81 93       	st	Z+, r24
    1a76:	7f 01       	movw	r14, r30
    1a78:	00 50       	subi	r16, 0x00	; 0
    1a7a:	1f 4f       	sbci	r17, 0xFF	; 255
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
			while(1){
				for(i=0;i<3;++i){
    1a7c:	f3 e2       	ldi	r31, 0x23	; 35
    1a7e:	00 30       	cpi	r16, 0x00	; 0
    1a80:	1f 07       	cpc	r17, r31
    1a82:	51 f7       	brne	.-44     	; 0x1a58 <LM629_HW_Reset+0xb6>
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	80 3c       	cpi	r24, 0xC0	; 192
    1a88:	11 f0       	breq	.+4      	; 0x1a8e <LM629_HW_Reset+0xec>
    1a8a:	80 38       	cpi	r24, 0x80	; 128
    1a8c:	51 f4       	brne	.+20     	; 0x1aa2 <LM629_HW_Reset+0x100>
					(status[1]==0xC0||status[1]==0x80) && 
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
				for(i=0;i<3;++i){
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
    1a90:	80 3c       	cpi	r24, 0xC0	; 192
    1a92:	11 f0       	breq	.+4      	; 0x1a98 <LM629_HW_Reset+0xf6>
					(status[1]==0xC0||status[1]==0x80) && 
    1a94:	80 38       	cpi	r24, 0x80	; 128
    1a96:	29 f4       	brne	.+10     	; 0x1aa2 <LM629_HW_Reset+0x100>
					(status[2]==0xC0||status[2]==0x80) ){
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
					(status[1]==0xC0||status[1]==0x80) && 
    1a9a:	80 3c       	cpi	r24, 0xC0	; 192
    1a9c:	69 f0       	breq	.+26     	; 0x1ab8 <LM629_HW_Reset+0x116>
					(status[2]==0xC0||status[2]==0x80) ){
    1a9e:	80 38       	cpi	r24, 0x80	; 128
    1aa0:	59 f0       	breq	.+22     	; 0x1ab8 <LM629_HW_Reset+0x116>
					break;
				}
				else{	//다시 처음부터 LM629초기화
					step=0;	
					// SRE : 외부 데이터 메모리 영역 비활성화
					MCUCR &= ~(1 << SRE) & ~(1 << SRW10);
    1aa2:	85 b7       	in	r24, 0x35	; 53
    1aa4:	8f 73       	andi	r24, 0x3F	; 63
    1aa6:	85 bf       	out	0x35, r24	; 53
					PORTC=0x00;
    1aa8:	15 ba       	out	0x15, r1	; 21
					lcd_display_str(0,0,"Error. Restart");
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	48 e0       	ldi	r20, 0x08	; 8
    1ab0:	51 e0       	ldi	r21, 0x01	; 1
    1ab2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_display_str>
    1ab6:	98 cf       	rjmp	.-208    	; 0x19e8 <LM629_HW_Reset+0x46>
					break;
				}
			}
		}
		if(step==2){
			lcd_display_str(0,0,"Initialize success.");
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	47 e1       	ldi	r20, 0x17	; 23
    1abe:	51 e0       	ldi	r21, 0x01	; 1
    1ac0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_display_str>
    1ac4:	83 e0       	ldi	r24, 0x03	; 3
			for(i=0;i<3;++i){
				PORTB|=0x07;
    1ac6:	98 b3       	in	r25, 0x18	; 24
    1ac8:	97 60       	ori	r25, 0x07	; 7
    1aca:	98 bb       	out	0x18, r25	; 24
    1acc:	2f ef       	ldi	r18, 0xFF	; 255
    1ace:	3f eb       	ldi	r19, 0xBF	; 191
    1ad0:	46 e0       	ldi	r20, 0x06	; 6
    1ad2:	21 50       	subi	r18, 0x01	; 1
    1ad4:	30 40       	sbci	r19, 0x00	; 0
    1ad6:	40 40       	sbci	r20, 0x00	; 0
    1ad8:	e1 f7       	brne	.-8      	; 0x1ad2 <LM629_HW_Reset+0x130>
    1ada:	00 c0       	rjmp	.+0      	; 0x1adc <LM629_HW_Reset+0x13a>
    1adc:	00 00       	nop
				_delay_ms(150);
				PORTB&=~0x07;
    1ade:	98 b3       	in	r25, 0x18	; 24
    1ae0:	98 7f       	andi	r25, 0xF8	; 248
    1ae2:	98 bb       	out	0x18, r25	; 24
    1ae4:	2f ef       	ldi	r18, 0xFF	; 255
    1ae6:	3f eb       	ldi	r19, 0xBF	; 191
    1ae8:	46 e0       	ldi	r20, 0x06	; 6
    1aea:	21 50       	subi	r18, 0x01	; 1
    1aec:	30 40       	sbci	r19, 0x00	; 0
    1aee:	40 40       	sbci	r20, 0x00	; 0
    1af0:	e1 f7       	brne	.-8      	; 0x1aea <LM629_HW_Reset+0x148>
    1af2:	00 c0       	rjmp	.+0      	; 0x1af4 <LM629_HW_Reset+0x152>
    1af4:	00 00       	nop
    1af6:	81 50       	subi	r24, 0x01	; 1
				}
			}
		}
		if(step==2){
			lcd_display_str(0,0,"Initialize success.");
			for(i=0;i<3;++i){
    1af8:	31 f7       	brne	.-52     	; 0x1ac6 <LM629_HW_Reset+0x124>
				PORTB|=0x07;
				_delay_ms(150);
				PORTB&=~0x07;
				_delay_ms(150);
			}
			lcd_clear_screen();
    1afa:	0e 94 44 01 	call	0x288	; 0x288 <lcd_clear_screen>
			break;
		}
	}
}
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	1f 91       	pop	r17
    1b0a:	0f 91       	pop	r16
    1b0c:	ff 90       	pop	r15
    1b0e:	ef 90       	pop	r14
    1b10:	df 90       	pop	r13
    1b12:	cf 90       	pop	r12
    1b14:	bf 90       	pop	r11
    1b16:	af 90       	pop	r10
    1b18:	9f 90       	pop	r9
    1b1a:	8f 90       	pop	r8
    1b1c:	08 95       	ret

00001b1e <StartMotion>:
// Function  : 모든 모터의 모션을 시작한다.
// Parameter : 없음
// Return    : 없음
void StartMotion(void)
{
    WriteCommand(MOTOR0, STT);
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	61 e0       	ldi	r22, 0x01	; 1
    1b22:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <WriteCommand>
    WriteCommand(MOTOR1, STT);
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	61 e0       	ldi	r22, 0x01	; 1
    1b2a:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <WriteCommand>
    WriteCommand(MOTOR2, STT);
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	61 e0       	ldi	r22, 0x01	; 1
    1b32:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <WriteCommand>
}
    1b36:	08 95       	ret

00001b38 <StopMotion>:

// Function  : 모든 모터의 모션을 정지한다.
// Parameter : 없음
// Return    : 없음
void StopMotion(uint16_t mode)
{
    1b38:	1f 93       	push	r17
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	18 2f       	mov	r17, r24
    // Motor1 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR0, LTRJ);
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	6f e1       	ldi	r22, 0x1F	; 31
    1b44:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR0, (1 << mode));
    1b48:	c1 e0       	ldi	r28, 0x01	; 1
    1b4a:	d0 e0       	ldi	r29, 0x00	; 0
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <StopMotion+0x1a>
    1b4e:	cc 0f       	add	r28, r28
    1b50:	dd 1f       	adc	r29, r29
    1b52:	1a 95       	dec	r17
    1b54:	e2 f7       	brpl	.-8      	; 0x1b4e <StopMotion+0x16>
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	be 01       	movw	r22, r28
    1b5a:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <WriteDataTwoByte>

    // Motor2 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR1, LTRJ);
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	6f e1       	ldi	r22, 0x1F	; 31
    1b62:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR1, (1 << mode));
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	be 01       	movw	r22, r28
    1b6a:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <WriteDataTwoByte>

    // Motor3 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR2, LTRJ);
    1b6e:	82 e0       	ldi	r24, 0x02	; 2
    1b70:	6f e1       	ldi	r22, 0x1F	; 31
    1b72:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR2, (1 << mode));
    1b76:	82 e0       	ldi	r24, 0x02	; 2
    1b78:	be 01       	movw	r22, r28
    1b7a:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <WriteDataTwoByte>

    // 모션 정지
    WriteCommand(MOTOR0, STT);
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	61 e0       	ldi	r22, 0x01	; 1
    1b82:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <WriteCommand>
    WriteCommand(MOTOR1, STT);
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	61 e0       	ldi	r22, 0x01	; 1
    1b8a:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <WriteCommand>
    WriteCommand(MOTOR2, STT);
    1b8e:	82 e0       	ldi	r24, 0x02	; 2
    1b90:	61 e0       	ldi	r22, 0x01	; 1
    1b92:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <WriteCommand>
}
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	08 95       	ret

00001b9e <MOTOR_CTR>:

void MOTOR_CTR(long MT0,long MT1,long MT2){
    1b9e:	af 92       	push	r10
    1ba0:	bf 92       	push	r11
    1ba2:	cf 92       	push	r12
    1ba4:	df 92       	push	r13
    1ba6:	ef 92       	push	r14
    1ba8:	ff 92       	push	r15
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	2c 97       	sbiw	r28, 0x0c	; 12
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	cd bf       	out	0x3d, r28	; 61
    1bc2:	59 01       	movw	r10, r18
    1bc4:	6a 01       	movw	r12, r20
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};
    1bc6:	0e 94 4d 12 	call	0x249a	; 0x249a <__floatsisf>
    1bca:	69 83       	std	Y+1, r22	; 0x01
    1bcc:	7a 83       	std	Y+2, r23	; 0x02
    1bce:	8b 83       	std	Y+3, r24	; 0x03
    1bd0:	9c 83       	std	Y+4, r25	; 0x04
    1bd2:	c6 01       	movw	r24, r12
    1bd4:	b5 01       	movw	r22, r10
    1bd6:	0e 94 4d 12 	call	0x249a	; 0x249a <__floatsisf>
    1bda:	6d 83       	std	Y+5, r22	; 0x05
    1bdc:	7e 83       	std	Y+6, r23	; 0x06
    1bde:	8f 83       	std	Y+7, r24	; 0x07
    1be0:	98 87       	std	Y+8, r25	; 0x08
    1be2:	c8 01       	movw	r24, r16
    1be4:	b7 01       	movw	r22, r14
    1be6:	0e 94 4d 12 	call	0x249a	; 0x249a <__floatsisf>
    1bea:	69 87       	std	Y+9, r22	; 0x09
    1bec:	7a 87       	std	Y+10, r23	; 0x0a
    1bee:	8b 87       	std	Y+11, r24	; 0x0b
    1bf0:	9c 87       	std	Y+12, r25	; 0x0c
    1bf2:	8e 01       	movw	r16, r28
    1bf4:	0f 5f       	subi	r16, 0xFF	; 255
    1bf6:	1f 4f       	sbci	r17, 0xFF	; 255

	for(i=0;i<3;++i){
    1bf8:	ee 24       	eor	r14, r14
		
		V[i]=V[i]*0.2728;
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	60 81       	ld	r22, Z
    1bfe:	71 81       	ldd	r23, Z+1	; 0x01
    1c00:	82 81       	ldd	r24, Z+2	; 0x02
    1c02:	93 81       	ldd	r25, Z+3	; 0x03
    1c04:	21 e7       	ldi	r18, 0x71	; 113
    1c06:	3c ea       	ldi	r19, 0xAC	; 172
    1c08:	4b e8       	ldi	r20, 0x8B	; 139
    1c0a:	5e e3       	ldi	r21, 0x3E	; 62
    1c0c:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    1c10:	9b 01       	movw	r18, r22
    1c12:	ac 01       	movw	r20, r24
    1c14:	f8 01       	movw	r30, r16
    1c16:	21 93       	st	Z+, r18
    1c18:	31 93       	st	Z+, r19
    1c1a:	41 93       	st	Z+, r20
    1c1c:	51 93       	st	Z+, r21
    1c1e:	8f 01       	movw	r16, r30

		SetVelocity(i, V[i]*65536);
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e8       	ldi	r20, 0x80	; 128
    1c26:	57 e4       	ldi	r21, 0x47	; 71
    1c28:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    1c2c:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
    1c30:	ab 01       	movw	r20, r22
    1c32:	bc 01       	movw	r22, r24
    1c34:	8e 2d       	mov	r24, r14
    1c36:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <SetVelocity>
void MOTOR_CTR(long MT0,long MT1,long MT2){
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};

	for(i=0;i<3;++i){
    1c3a:	e3 94       	inc	r14
    1c3c:	fe 2d       	mov	r31, r14
    1c3e:	f3 30       	cpi	r31, 0x03	; 3
    1c40:	e1 f6       	brne	.-72     	; 0x1bfa <MOTOR_CTR+0x5c>
		
		V[i]=V[i]*0.2728;

		SetVelocity(i, V[i]*65536);
	}
	StartMotion();	
    1c42:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <StartMotion>
}
    1c46:	2c 96       	adiw	r28, 0x0c	; 12
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	ff 90       	pop	r15
    1c5c:	ef 90       	pop	r14
    1c5e:	df 90       	pop	r13
    1c60:	cf 90       	pop	r12
    1c62:	bf 90       	pop	r11
    1c64:	af 90       	pop	r10
    1c66:	08 95       	ret

00001c68 <Camera_init>:


void Camera_init(void){
	unsigned char buff=0;
	while(1){	//우선순위 큰것부터
		putchar1(11);
    1c68:	8b e0       	ldi	r24, 0x0B	; 11
    1c6a:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		while(!rx1_flg); 
    1c6e:	80 91 34 02 	lds	r24, 0x0234
    1c72:	88 23       	and	r24, r24
    1c74:	e1 f3       	breq	.-8      	; 0x1c6e <Camera_init+0x6>
		buff=getchar1();
    1c76:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
		if(buff){
    1c7a:	88 23       	and	r24, r24
    1c7c:	a9 f3       	breq	.-22     	; 0x1c68 <Camera_init>
			buff=0;
			break;
		}
	}
	while(1){	//추적 할 최소 픽셀수  255픽셀
		putchar1(17);
    1c7e:	81 e1       	ldi	r24, 0x11	; 17
    1c80:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		putchar1(255);
    1c84:	8f ef       	ldi	r24, 0xFF	; 255
    1c86:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		while(!rx1_flg);
    1c8a:	80 91 34 02 	lds	r24, 0x0234
    1c8e:	88 23       	and	r24, r24
    1c90:	e1 f3       	breq	.-8      	; 0x1c8a <Camera_init+0x22>
		buff=getchar1();
    1c92:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
		if(buff)break;
    1c96:	88 23       	and	r24, r24
    1c98:	91 f3       	breq	.-28     	; 0x1c7e <Camera_init+0x16>
	}
}
    1c9a:	08 95       	ret

00001c9c <Camera_Cmd>:

unsigned char Camera_Cmd(unsigned char color, unsigned char cmd){
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <Camera_Cmd+0x6>
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
	
	volatile unsigned char buff=0, data=0;
    1ca6:	19 82       	std	Y+1, r1	; 0x01
    1ca8:	1a 82       	std	Y+2, r1	; 0x02
	
	data=cmd+(color*10);
    1caa:	88 0f       	add	r24, r24
    1cac:	98 2f       	mov	r25, r24
    1cae:	99 0f       	add	r25, r25
    1cb0:	99 0f       	add	r25, r25
    1cb2:	98 0f       	add	r25, r24
    1cb4:	69 0f       	add	r22, r25
    1cb6:	6a 83       	std	Y+2, r22	; 0x02

	putchar1(data);
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
	while(!rx1_flg);
    1cbe:	80 91 34 02 	lds	r24, 0x0234
    1cc2:	88 23       	and	r24, r24
    1cc4:	e1 f3       	breq	.-8      	; 0x1cbe <Camera_Cmd+0x22>
	buff=getchar1();
    1cc6:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
    1cca:	89 83       	std	Y+1, r24	; 0x01
	
	return buff;
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	08 95       	ret

00001cd8 <Sensor_init>:
// Function  : IR, PSD 센서를 초기화
// Parameter : 없음
// Return    : 없음
void Sensor_init(void)
{
    DDRE  &= ~0x1C;
    1cd8:	82 b1       	in	r24, 0x02	; 2
    1cda:	83 7e       	andi	r24, 0xE3	; 227
    1cdc:	82 b9       	out	0x02, r24	; 2
    DDRG  &= ~0x18;
    1cde:	e4 e6       	ldi	r30, 0x64	; 100
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	87 7e       	andi	r24, 0xE7	; 231
    1ce6:	80 83       	st	Z, r24

    UCSR0A = 0x00;
    1ce8:	1b b8       	out	0x0b, r1	; 11
    UCSR0B = 0x98;
    1cea:	88 e9       	ldi	r24, 0x98	; 152
    1cec:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = 0x06;
    1cee:	86 e0       	ldi	r24, 0x06	; 6
    1cf0:	80 93 95 00 	sts	0x0095, r24
    UBRR0H = 0x00;
    1cf4:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 0x0F;
    1cf8:	8f e0       	ldi	r24, 0x0F	; 15
    1cfa:	89 b9       	out	0x09, r24	; 9

    sei();
    1cfc:	78 94       	sei
}
    1cfe:	08 95       	ret

00001d00 <__vector_18>:

// Function  : USART를 통해 전송되는 PSD 센서값을 전역변수에 저장하는 ISR
// Parameter : 없음
// Return    : 없음
ISR(USART0_RX_vect)
{
    1d00:	1f 92       	push	r1
    1d02:	0f 92       	push	r0
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	0f 92       	push	r0
    1d08:	0b b6       	in	r0, 0x3b	; 59
    1d0a:	0f 92       	push	r0
    1d0c:	11 24       	eor	r1, r1
    1d0e:	2f 93       	push	r18
    1d10:	3f 93       	push	r19
    1d12:	8f 93       	push	r24
    1d14:	9f 93       	push	r25
    1d16:	ef 93       	push	r30
    1d18:	ff 93       	push	r31
    volatile static unsigned char rx_cnt = 0;
    volatile static unsigned char chksum = 0;
    volatile static unsigned char buf[11] = {0, };
    uint8_t rxbuf = 0, i;

    rxbuf = UDR0;
    1d1a:	9c b1       	in	r25, 0x0c	; 12
    //수신완료 및 에러 검출되지 않을시
    while(!(UCSR0A & 0xB8));
    1d1c:	8b b1       	in	r24, 0x0b	; 11
    1d1e:	88 7b       	andi	r24, 0xB8	; 184
    1d20:	e9 f3       	breq	.-6      	; 0x1d1c <__vector_18+0x1c>

    if(rxbuf == 0xFF)
    1d22:	9f 3f       	cpi	r25, 0xFF	; 255
    1d24:	21 f4       	brne	.+8      	; 0x1d2e <__vector_18+0x2e>
    {
        //시작 버퍼 수신
        rx_en = 1;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	80 93 71 02 	sts	0x0271, r24
    1d2c:	47 c0       	rjmp	.+142    	; 0x1dbc <__vector_18+0xbc>
    }
    else if(rx_en == 1)
    1d2e:	80 91 71 02 	lds	r24, 0x0271
    1d32:	81 30       	cpi	r24, 0x01	; 1
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <__vector_18+0x38>
    1d36:	42 c0       	rjmp	.+132    	; 0x1dbc <__vector_18+0xbc>
    {
        //데이터 받기
        //0번지부터 PSD0 저장
        buf[rx_cnt++] = rxbuf;
    1d38:	80 91 70 02 	lds	r24, 0x0270
    1d3c:	e8 2f       	mov	r30, r24
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	ec 59       	subi	r30, 0x9C	; 156
    1d42:	fd 4f       	sbci	r31, 0xFD	; 253
    1d44:	90 83       	st	Z, r25
    1d46:	8f 5f       	subi	r24, 0xFF	; 255
    1d48:	80 93 70 02 	sts	0x0270, r24

        if(rx_cnt > 10)
    1d4c:	80 91 70 02 	lds	r24, 0x0270
    1d50:	8b 30       	cpi	r24, 0x0B	; 11
    1d52:	a0 f1       	brcs	.+104    	; 0x1dbc <__vector_18+0xbc>
        {
            // PSD 10개, 체크섬 1개 수신 완료되면
            //플래그 리셋
            rx_en = rx_cnt = 0;
    1d54:	10 92 70 02 	sts	0x0270, r1
    1d58:	80 91 70 02 	lds	r24, 0x0270
    1d5c:	80 93 71 02 	sts	0x0271, r24
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0

            // 체크섬 계산
            for(i = 0 ; i < 10 ; i++)
                chksum += buf[i];
    1d64:	30 91 6f 02 	lds	r19, 0x026F
    1d68:	fc 01       	movw	r30, r24
    1d6a:	ec 59       	subi	r30, 0x9C	; 156
    1d6c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d6e:	20 81       	ld	r18, Z
    1d70:	23 0f       	add	r18, r19
    1d72:	20 93 6f 02 	sts	0x026F, r18
    1d76:	01 96       	adiw	r24, 0x01	; 1
            // PSD 10개, 체크섬 1개 수신 완료되면
            //플래그 리셋
            rx_en = rx_cnt = 0;

            // 체크섬 계산
            for(i = 0 ; i < 10 ; i++)
    1d78:	8a 30       	cpi	r24, 0x0A	; 10
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	99 f7       	brne	.-26     	; 0x1d64 <__vector_18+0x64>
                chksum += buf[i];

            //00~FE 이므로 FF나오면 +1 (오류방지)
            if(chksum == 0xFF)chksum++;
    1d7e:	80 91 6f 02 	lds	r24, 0x026F
    1d82:	8f 3f       	cpi	r24, 0xFF	; 255
    1d84:	29 f4       	brne	.+10     	; 0x1d90 <__vector_18+0x90>
    1d86:	80 91 6f 02 	lds	r24, 0x026F
    1d8a:	8f 5f       	subi	r24, 0xFF	; 255
    1d8c:	80 93 6f 02 	sts	0x026F, r24

            // 체크섬이 올바른지 체크 후 맞으면 전역변수로 이동
            if(chksum == buf[10])
    1d90:	90 91 6f 02 	lds	r25, 0x026F
    1d94:	80 91 6e 02 	lds	r24, 0x026E
    1d98:	98 17       	cp	r25, r24
    1d9a:	71 f4       	brne	.+28     	; 0x1db8 <__vector_18+0xb8>
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
                for(i = 0 ; i < 10 ; i++)
                    psd_value[i] = buf[i];
    1da0:	fc 01       	movw	r30, r24
    1da2:	ec 59       	subi	r30, 0x9C	; 156
    1da4:	fd 4f       	sbci	r31, 0xFD	; 253
    1da6:	20 81       	ld	r18, Z
    1da8:	fc 01       	movw	r30, r24
    1daa:	ea 58       	subi	r30, 0x8A	; 138
    1dac:	fd 4f       	sbci	r31, 0xFD	; 253
    1dae:	20 83       	st	Z, r18
    1db0:	01 96       	adiw	r24, 0x01	; 1
            //00~FE 이므로 FF나오면 +1 (오류방지)
            if(chksum == 0xFF)chksum++;

            // 체크섬이 올바른지 체크 후 맞으면 전역변수로 이동
            if(chksum == buf[10])
                for(i = 0 ; i < 10 ; i++)
    1db2:	8a 30       	cpi	r24, 0x0A	; 10
    1db4:	91 05       	cpc	r25, r1
    1db6:	a1 f7       	brne	.-24     	; 0x1da0 <__vector_18+0xa0>
                    psd_value[i] = buf[i];

            //체크섬 리셋
            chksum = 0;
    1db8:	10 92 6f 02 	sts	0x026F, r1
    	}
    }
}
    1dbc:	ff 91       	pop	r31
    1dbe:	ef 91       	pop	r30
    1dc0:	9f 91       	pop	r25
    1dc2:	8f 91       	pop	r24
    1dc4:	3f 91       	pop	r19
    1dc6:	2f 91       	pop	r18
    1dc8:	0f 90       	pop	r0
    1dca:	0b be       	out	0x3b, r0	; 59
    1dcc:	0f 90       	pop	r0
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	0f 90       	pop	r0
    1dd2:	1f 90       	pop	r1
    1dd4:	18 95       	reti

00001dd6 <_fpadd_parts>:
    1dd6:	a0 e0       	ldi	r26, 0x00	; 0
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e1 ef       	ldi	r30, 0xF1	; 241
    1ddc:	fe e0       	ldi	r31, 0x0E	; 14
    1dde:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__prologue_saves__+0x8>
    1de2:	fc 01       	movw	r30, r24
    1de4:	ea 01       	movw	r28, r20
    1de6:	80 81       	ld	r24, Z
    1de8:	82 30       	cpi	r24, 0x02	; 2
    1dea:	08 f4       	brcc	.+2      	; 0x1dee <_fpadd_parts+0x18>
    1dec:	38 c1       	rjmp	.+624    	; 0x205e <_fpadd_parts+0x288>
    1dee:	db 01       	movw	r26, r22
    1df0:	9c 91       	ld	r25, X
    1df2:	92 30       	cpi	r25, 0x02	; 2
    1df4:	08 f4       	brcc	.+2      	; 0x1df8 <_fpadd_parts+0x22>
    1df6:	30 c1       	rjmp	.+608    	; 0x2058 <_fpadd_parts+0x282>
    1df8:	84 30       	cpi	r24, 0x04	; 4
    1dfa:	59 f4       	brne	.+22     	; 0x1e12 <_fpadd_parts+0x3c>
    1dfc:	94 30       	cpi	r25, 0x04	; 4
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <_fpadd_parts+0x2c>
    1e00:	2e c1       	rjmp	.+604    	; 0x205e <_fpadd_parts+0x288>
    1e02:	91 81       	ldd	r25, Z+1	; 0x01
    1e04:	11 96       	adiw	r26, 0x01	; 1
    1e06:	8c 91       	ld	r24, X
    1e08:	11 97       	sbiw	r26, 0x01	; 1
    1e0a:	98 17       	cp	r25, r24
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <_fpadd_parts+0x3a>
    1e0e:	21 c1       	rjmp	.+578    	; 0x2052 <_fpadd_parts+0x27c>
    1e10:	26 c1       	rjmp	.+588    	; 0x205e <_fpadd_parts+0x288>
    1e12:	94 30       	cpi	r25, 0x04	; 4
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <_fpadd_parts+0x42>
    1e16:	20 c1       	rjmp	.+576    	; 0x2058 <_fpadd_parts+0x282>
    1e18:	92 30       	cpi	r25, 0x02	; 2
    1e1a:	b1 f4       	brne	.+44     	; 0x1e48 <_fpadd_parts+0x72>
    1e1c:	82 30       	cpi	r24, 0x02	; 2
    1e1e:	09 f0       	breq	.+2      	; 0x1e22 <_fpadd_parts+0x4c>
    1e20:	1e c1       	rjmp	.+572    	; 0x205e <_fpadd_parts+0x288>
    1e22:	ca 01       	movw	r24, r20
    1e24:	af 01       	movw	r20, r30
    1e26:	28 e0       	ldi	r18, 0x08	; 8
    1e28:	da 01       	movw	r26, r20
    1e2a:	0d 90       	ld	r0, X+
    1e2c:	ad 01       	movw	r20, r26
    1e2e:	dc 01       	movw	r26, r24
    1e30:	0d 92       	st	X+, r0
    1e32:	cd 01       	movw	r24, r26
    1e34:	21 50       	subi	r18, 0x01	; 1
    1e36:	c1 f7       	brne	.-16     	; 0x1e28 <_fpadd_parts+0x52>
    1e38:	db 01       	movw	r26, r22
    1e3a:	11 96       	adiw	r26, 0x01	; 1
    1e3c:	8c 91       	ld	r24, X
    1e3e:	11 97       	sbiw	r26, 0x01	; 1
    1e40:	91 81       	ldd	r25, Z+1	; 0x01
    1e42:	89 23       	and	r24, r25
    1e44:	89 83       	std	Y+1, r24	; 0x01
    1e46:	0a c1       	rjmp	.+532    	; 0x205c <_fpadd_parts+0x286>
    1e48:	82 30       	cpi	r24, 0x02	; 2
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <_fpadd_parts+0x78>
    1e4c:	05 c1       	rjmp	.+522    	; 0x2058 <_fpadd_parts+0x282>
    1e4e:	c2 80       	ldd	r12, Z+2	; 0x02
    1e50:	d3 80       	ldd	r13, Z+3	; 0x03
    1e52:	db 01       	movw	r26, r22
    1e54:	12 96       	adiw	r26, 0x02	; 2
    1e56:	6d 90       	ld	r6, X+
    1e58:	7c 90       	ld	r7, X
    1e5a:	13 97       	sbiw	r26, 0x03	; 3
    1e5c:	24 81       	ldd	r18, Z+4	; 0x04
    1e5e:	35 81       	ldd	r19, Z+5	; 0x05
    1e60:	46 81       	ldd	r20, Z+6	; 0x06
    1e62:	57 81       	ldd	r21, Z+7	; 0x07
    1e64:	14 96       	adiw	r26, 0x04	; 4
    1e66:	ed 90       	ld	r14, X+
    1e68:	fd 90       	ld	r15, X+
    1e6a:	0d 91       	ld	r16, X+
    1e6c:	1c 91       	ld	r17, X
    1e6e:	17 97       	sbiw	r26, 0x07	; 7
    1e70:	c6 01       	movw	r24, r12
    1e72:	86 19       	sub	r24, r6
    1e74:	97 09       	sbc	r25, r7
    1e76:	5c 01       	movw	r10, r24
    1e78:	97 ff       	sbrs	r25, 7
    1e7a:	04 c0       	rjmp	.+8      	; 0x1e84 <_fpadd_parts+0xae>
    1e7c:	aa 24       	eor	r10, r10
    1e7e:	bb 24       	eor	r11, r11
    1e80:	a8 1a       	sub	r10, r24
    1e82:	b9 0a       	sbc	r11, r25
    1e84:	b0 e2       	ldi	r27, 0x20	; 32
    1e86:	ab 16       	cp	r10, r27
    1e88:	b1 04       	cpc	r11, r1
    1e8a:	0c f0       	brlt	.+2      	; 0x1e8e <_fpadd_parts+0xb8>
    1e8c:	61 c0       	rjmp	.+194    	; 0x1f50 <_fpadd_parts+0x17a>
    1e8e:	18 16       	cp	r1, r24
    1e90:	19 06       	cpc	r1, r25
    1e92:	6c f5       	brge	.+90     	; 0x1eee <_fpadd_parts+0x118>
    1e94:	37 01       	movw	r6, r14
    1e96:	48 01       	movw	r8, r16
    1e98:	0a 2c       	mov	r0, r10
    1e9a:	04 c0       	rjmp	.+8      	; 0x1ea4 <_fpadd_parts+0xce>
    1e9c:	96 94       	lsr	r9
    1e9e:	87 94       	ror	r8
    1ea0:	77 94       	ror	r7
    1ea2:	67 94       	ror	r6
    1ea4:	0a 94       	dec	r0
    1ea6:	d2 f7       	brpl	.-12     	; 0x1e9c <_fpadd_parts+0xc6>
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	a0 e0       	ldi	r26, 0x00	; 0
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	0a 2c       	mov	r0, r10
    1eb2:	04 c0       	rjmp	.+8      	; 0x1ebc <_fpadd_parts+0xe6>
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	aa 1f       	adc	r26, r26
    1eba:	bb 1f       	adc	r27, r27
    1ebc:	0a 94       	dec	r0
    1ebe:	d2 f7       	brpl	.-12     	; 0x1eb4 <_fpadd_parts+0xde>
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	a1 09       	sbc	r26, r1
    1ec4:	b1 09       	sbc	r27, r1
    1ec6:	8e 21       	and	r24, r14
    1ec8:	9f 21       	and	r25, r15
    1eca:	a0 23       	and	r26, r16
    1ecc:	b1 23       	and	r27, r17
    1ece:	ee 24       	eor	r14, r14
    1ed0:	ff 24       	eor	r15, r15
    1ed2:	87 01       	movw	r16, r14
    1ed4:	e3 94       	inc	r14
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	a1 05       	cpc	r26, r1
    1eda:	b1 05       	cpc	r27, r1
    1edc:	19 f4       	brne	.+6      	; 0x1ee4 <_fpadd_parts+0x10e>
    1ede:	ee 24       	eor	r14, r14
    1ee0:	ff 24       	eor	r15, r15
    1ee2:	87 01       	movw	r16, r14
    1ee4:	e6 28       	or	r14, r6
    1ee6:	f7 28       	or	r15, r7
    1ee8:	08 29       	or	r16, r8
    1eea:	19 29       	or	r17, r9
    1eec:	3c c0       	rjmp	.+120    	; 0x1f66 <_fpadd_parts+0x190>
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	d1 f1       	breq	.+116    	; 0x1f66 <_fpadd_parts+0x190>
    1ef2:	ca 0c       	add	r12, r10
    1ef4:	db 1c       	adc	r13, r11
    1ef6:	39 01       	movw	r6, r18
    1ef8:	4a 01       	movw	r8, r20
    1efa:	0a 2c       	mov	r0, r10
    1efc:	04 c0       	rjmp	.+8      	; 0x1f06 <_fpadd_parts+0x130>
    1efe:	96 94       	lsr	r9
    1f00:	87 94       	ror	r8
    1f02:	77 94       	ror	r7
    1f04:	67 94       	ror	r6
    1f06:	0a 94       	dec	r0
    1f08:	d2 f7       	brpl	.-12     	; 0x1efe <_fpadd_parts+0x128>
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	a0 e0       	ldi	r26, 0x00	; 0
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	0a 2c       	mov	r0, r10
    1f14:	04 c0       	rjmp	.+8      	; 0x1f1e <_fpadd_parts+0x148>
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	aa 1f       	adc	r26, r26
    1f1c:	bb 1f       	adc	r27, r27
    1f1e:	0a 94       	dec	r0
    1f20:	d2 f7       	brpl	.-12     	; 0x1f16 <_fpadd_parts+0x140>
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	a1 09       	sbc	r26, r1
    1f26:	b1 09       	sbc	r27, r1
    1f28:	82 23       	and	r24, r18
    1f2a:	93 23       	and	r25, r19
    1f2c:	a4 23       	and	r26, r20
    1f2e:	b5 23       	and	r27, r21
    1f30:	21 e0       	ldi	r18, 0x01	; 1
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	a1 05       	cpc	r26, r1
    1f3c:	b1 05       	cpc	r27, r1
    1f3e:	19 f4       	brne	.+6      	; 0x1f46 <_fpadd_parts+0x170>
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	a9 01       	movw	r20, r18
    1f46:	26 29       	or	r18, r6
    1f48:	37 29       	or	r19, r7
    1f4a:	48 29       	or	r20, r8
    1f4c:	59 29       	or	r21, r9
    1f4e:	0b c0       	rjmp	.+22     	; 0x1f66 <_fpadd_parts+0x190>
    1f50:	6c 14       	cp	r6, r12
    1f52:	7d 04       	cpc	r7, r13
    1f54:	24 f4       	brge	.+8      	; 0x1f5e <_fpadd_parts+0x188>
    1f56:	ee 24       	eor	r14, r14
    1f58:	ff 24       	eor	r15, r15
    1f5a:	87 01       	movw	r16, r14
    1f5c:	04 c0       	rjmp	.+8      	; 0x1f66 <_fpadd_parts+0x190>
    1f5e:	63 01       	movw	r12, r6
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	a9 01       	movw	r20, r18
    1f66:	81 81       	ldd	r24, Z+1	; 0x01
    1f68:	fb 01       	movw	r30, r22
    1f6a:	91 81       	ldd	r25, Z+1	; 0x01
    1f6c:	89 17       	cp	r24, r25
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <_fpadd_parts+0x19c>
    1f70:	45 c0       	rjmp	.+138    	; 0x1ffc <_fpadd_parts+0x226>
    1f72:	88 23       	and	r24, r24
    1f74:	49 f0       	breq	.+18     	; 0x1f88 <_fpadd_parts+0x1b2>
    1f76:	d8 01       	movw	r26, r16
    1f78:	c7 01       	movw	r24, r14
    1f7a:	82 1b       	sub	r24, r18
    1f7c:	93 0b       	sbc	r25, r19
    1f7e:	a4 0b       	sbc	r26, r20
    1f80:	b5 0b       	sbc	r27, r21
    1f82:	9c 01       	movw	r18, r24
    1f84:	ad 01       	movw	r20, r26
    1f86:	04 c0       	rjmp	.+8      	; 0x1f90 <_fpadd_parts+0x1ba>
    1f88:	2e 19       	sub	r18, r14
    1f8a:	3f 09       	sbc	r19, r15
    1f8c:	40 0b       	sbc	r20, r16
    1f8e:	51 0b       	sbc	r21, r17
    1f90:	57 fd       	sbrc	r21, 7
    1f92:	04 c0       	rjmp	.+8      	; 0x1f9c <_fpadd_parts+0x1c6>
    1f94:	19 82       	std	Y+1, r1	; 0x01
    1f96:	db 82       	std	Y+3, r13	; 0x03
    1f98:	ca 82       	std	Y+2, r12	; 0x02
    1f9a:	0b c0       	rjmp	.+22     	; 0x1fb2 <_fpadd_parts+0x1dc>
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    1fa0:	db 82       	std	Y+3, r13	; 0x03
    1fa2:	ca 82       	std	Y+2, r12	; 0x02
    1fa4:	50 95       	com	r21
    1fa6:	40 95       	com	r20
    1fa8:	30 95       	com	r19
    1faa:	21 95       	neg	r18
    1fac:	3f 4f       	sbci	r19, 0xFF	; 255
    1fae:	4f 4f       	sbci	r20, 0xFF	; 255
    1fb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb2:	2c 83       	std	Y+4, r18	; 0x04
    1fb4:	3d 83       	std	Y+5, r19	; 0x05
    1fb6:	4e 83       	std	Y+6, r20	; 0x06
    1fb8:	5f 83       	std	Y+7, r21	; 0x07
    1fba:	0d c0       	rjmp	.+26     	; 0x1fd6 <_fpadd_parts+0x200>
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	aa 1f       	adc	r26, r26
    1fc2:	bb 1f       	adc	r27, r27
    1fc4:	8c 83       	std	Y+4, r24	; 0x04
    1fc6:	9d 83       	std	Y+5, r25	; 0x05
    1fc8:	ae 83       	std	Y+6, r26	; 0x06
    1fca:	bf 83       	std	Y+7, r27	; 0x07
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	9b 83       	std	Y+3, r25	; 0x03
    1fd4:	8a 83       	std	Y+2, r24	; 0x02
    1fd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fda:	ae 81       	ldd	r26, Y+6	; 0x06
    1fdc:	bf 81       	ldd	r27, Y+7	; 0x07
    1fde:	9c 01       	movw	r18, r24
    1fe0:	ad 01       	movw	r20, r26
    1fe2:	21 50       	subi	r18, 0x01	; 1
    1fe4:	30 40       	sbci	r19, 0x00	; 0
    1fe6:	40 40       	sbci	r20, 0x00	; 0
    1fe8:	50 40       	sbci	r21, 0x00	; 0
    1fea:	2f 3f       	cpi	r18, 0xFF	; 255
    1fec:	ef ef       	ldi	r30, 0xFF	; 255
    1fee:	3e 07       	cpc	r19, r30
    1ff0:	ef ef       	ldi	r30, 0xFF	; 255
    1ff2:	4e 07       	cpc	r20, r30
    1ff4:	ef e3       	ldi	r30, 0x3F	; 63
    1ff6:	5e 07       	cpc	r21, r30
    1ff8:	08 f3       	brcs	.-62     	; 0x1fbc <_fpadd_parts+0x1e6>
    1ffa:	0b c0       	rjmp	.+22     	; 0x2012 <_fpadd_parts+0x23c>
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	db 82       	std	Y+3, r13	; 0x03
    2000:	ca 82       	std	Y+2, r12	; 0x02
    2002:	2e 0d       	add	r18, r14
    2004:	3f 1d       	adc	r19, r15
    2006:	40 1f       	adc	r20, r16
    2008:	51 1f       	adc	r21, r17
    200a:	2c 83       	std	Y+4, r18	; 0x04
    200c:	3d 83       	std	Y+5, r19	; 0x05
    200e:	4e 83       	std	Y+6, r20	; 0x06
    2010:	5f 83       	std	Y+7, r21	; 0x07
    2012:	83 e0       	ldi	r24, 0x03	; 3
    2014:	88 83       	st	Y, r24
    2016:	2c 81       	ldd	r18, Y+4	; 0x04
    2018:	3d 81       	ldd	r19, Y+5	; 0x05
    201a:	4e 81       	ldd	r20, Y+6	; 0x06
    201c:	5f 81       	ldd	r21, Y+7	; 0x07
    201e:	57 ff       	sbrs	r21, 7
    2020:	1d c0       	rjmp	.+58     	; 0x205c <_fpadd_parts+0x286>
    2022:	da 01       	movw	r26, r20
    2024:	c9 01       	movw	r24, r18
    2026:	81 70       	andi	r24, 0x01	; 1
    2028:	90 70       	andi	r25, 0x00	; 0
    202a:	a0 70       	andi	r26, 0x00	; 0
    202c:	b0 70       	andi	r27, 0x00	; 0
    202e:	56 95       	lsr	r21
    2030:	47 95       	ror	r20
    2032:	37 95       	ror	r19
    2034:	27 95       	ror	r18
    2036:	82 2b       	or	r24, r18
    2038:	93 2b       	or	r25, r19
    203a:	a4 2b       	or	r26, r20
    203c:	b5 2b       	or	r27, r21
    203e:	8c 83       	std	Y+4, r24	; 0x04
    2040:	9d 83       	std	Y+5, r25	; 0x05
    2042:	ae 83       	std	Y+6, r26	; 0x06
    2044:	bf 83       	std	Y+7, r27	; 0x07
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
    2048:	9b 81       	ldd	r25, Y+3	; 0x03
    204a:	01 96       	adiw	r24, 0x01	; 1
    204c:	9b 83       	std	Y+3, r25	; 0x03
    204e:	8a 83       	std	Y+2, r24	; 0x02
    2050:	05 c0       	rjmp	.+10     	; 0x205c <_fpadd_parts+0x286>
    2052:	eb e2       	ldi	r30, 0x2B	; 43
    2054:	f1 e0       	ldi	r31, 0x01	; 1
    2056:	03 c0       	rjmp	.+6      	; 0x205e <_fpadd_parts+0x288>
    2058:	fb 01       	movw	r30, r22
    205a:	01 c0       	rjmp	.+2      	; 0x205e <_fpadd_parts+0x288>
    205c:	fe 01       	movw	r30, r28
    205e:	cf 01       	movw	r24, r30
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	ee e0       	ldi	r30, 0x0E	; 14
    2066:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__epilogue_restores__+0x8>

0000206a <__addsf3>:
    206a:	a0 e2       	ldi	r26, 0x20	; 32
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	eb e3       	ldi	r30, 0x3B	; 59
    2070:	f0 e1       	ldi	r31, 0x10	; 16
    2072:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x18>
    2076:	69 83       	std	Y+1, r22	; 0x01
    2078:	7a 83       	std	Y+2, r23	; 0x02
    207a:	8b 83       	std	Y+3, r24	; 0x03
    207c:	9c 83       	std	Y+4, r25	; 0x04
    207e:	2d 83       	std	Y+5, r18	; 0x05
    2080:	3e 83       	std	Y+6, r19	; 0x06
    2082:	4f 83       	std	Y+7, r20	; 0x07
    2084:	58 87       	std	Y+8, r21	; 0x08
    2086:	89 e0       	ldi	r24, 0x09	; 9
    2088:	e8 2e       	mov	r14, r24
    208a:	f1 2c       	mov	r15, r1
    208c:	ec 0e       	add	r14, r28
    208e:	fd 1e       	adc	r15, r29
    2090:	ce 01       	movw	r24, r28
    2092:	01 96       	adiw	r24, 0x01	; 1
    2094:	b7 01       	movw	r22, r14
    2096:	0e 94 9f 14 	call	0x293e	; 0x293e <__unpack_f>
    209a:	8e 01       	movw	r16, r28
    209c:	0f 5e       	subi	r16, 0xEF	; 239
    209e:	1f 4f       	sbci	r17, 0xFF	; 255
    20a0:	ce 01       	movw	r24, r28
    20a2:	05 96       	adiw	r24, 0x05	; 5
    20a4:	b8 01       	movw	r22, r16
    20a6:	0e 94 9f 14 	call	0x293e	; 0x293e <__unpack_f>
    20aa:	c7 01       	movw	r24, r14
    20ac:	b8 01       	movw	r22, r16
    20ae:	ae 01       	movw	r20, r28
    20b0:	47 5e       	subi	r20, 0xE7	; 231
    20b2:	5f 4f       	sbci	r21, 0xFF	; 255
    20b4:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_fpadd_parts>
    20b8:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__pack_f>
    20bc:	a0 96       	adiw	r28, 0x20	; 32
    20be:	e6 e0       	ldi	r30, 0x06	; 6
    20c0:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x18>

000020c4 <__subsf3>:
    20c4:	a0 e2       	ldi	r26, 0x20	; 32
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e8 e6       	ldi	r30, 0x68	; 104
    20ca:	f0 e1       	ldi	r31, 0x10	; 16
    20cc:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x18>
    20d0:	69 83       	std	Y+1, r22	; 0x01
    20d2:	7a 83       	std	Y+2, r23	; 0x02
    20d4:	8b 83       	std	Y+3, r24	; 0x03
    20d6:	9c 83       	std	Y+4, r25	; 0x04
    20d8:	2d 83       	std	Y+5, r18	; 0x05
    20da:	3e 83       	std	Y+6, r19	; 0x06
    20dc:	4f 83       	std	Y+7, r20	; 0x07
    20de:	58 87       	std	Y+8, r21	; 0x08
    20e0:	8e 01       	movw	r16, r28
    20e2:	07 5f       	subi	r16, 0xF7	; 247
    20e4:	1f 4f       	sbci	r17, 0xFF	; 255
    20e6:	ce 01       	movw	r24, r28
    20e8:	01 96       	adiw	r24, 0x01	; 1
    20ea:	b8 01       	movw	r22, r16
    20ec:	0e 94 9f 14 	call	0x293e	; 0x293e <__unpack_f>
    20f0:	91 e1       	ldi	r25, 0x11	; 17
    20f2:	e9 2e       	mov	r14, r25
    20f4:	f1 2c       	mov	r15, r1
    20f6:	ec 0e       	add	r14, r28
    20f8:	fd 1e       	adc	r15, r29
    20fa:	ce 01       	movw	r24, r28
    20fc:	05 96       	adiw	r24, 0x05	; 5
    20fe:	b7 01       	movw	r22, r14
    2100:	0e 94 9f 14 	call	0x293e	; 0x293e <__unpack_f>
    2104:	8a 89       	ldd	r24, Y+18	; 0x12
    2106:	91 e0       	ldi	r25, 0x01	; 1
    2108:	89 27       	eor	r24, r25
    210a:	8a 8b       	std	Y+18, r24	; 0x12
    210c:	c8 01       	movw	r24, r16
    210e:	b7 01       	movw	r22, r14
    2110:	ae 01       	movw	r20, r28
    2112:	47 5e       	subi	r20, 0xE7	; 231
    2114:	5f 4f       	sbci	r21, 0xFF	; 255
    2116:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_fpadd_parts>
    211a:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__pack_f>
    211e:	a0 96       	adiw	r28, 0x20	; 32
    2120:	e6 e0       	ldi	r30, 0x06	; 6
    2122:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x18>

00002126 <__mulsf3>:
    2126:	a0 e2       	ldi	r26, 0x20	; 32
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e9 e9       	ldi	r30, 0x99	; 153
    212c:	f0 e1       	ldi	r31, 0x10	; 16
    212e:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__prologue_saves__>
    2132:	69 83       	std	Y+1, r22	; 0x01
    2134:	7a 83       	std	Y+2, r23	; 0x02
    2136:	8b 83       	std	Y+3, r24	; 0x03
    2138:	9c 83       	std	Y+4, r25	; 0x04
    213a:	2d 83       	std	Y+5, r18	; 0x05
    213c:	3e 83       	std	Y+6, r19	; 0x06
    213e:	4f 83       	std	Y+7, r20	; 0x07
    2140:	58 87       	std	Y+8, r21	; 0x08
    2142:	ce 01       	movw	r24, r28
    2144:	01 96       	adiw	r24, 0x01	; 1
    2146:	be 01       	movw	r22, r28
    2148:	67 5f       	subi	r22, 0xF7	; 247
    214a:	7f 4f       	sbci	r23, 0xFF	; 255
    214c:	0e 94 9f 14 	call	0x293e	; 0x293e <__unpack_f>
    2150:	ce 01       	movw	r24, r28
    2152:	05 96       	adiw	r24, 0x05	; 5
    2154:	be 01       	movw	r22, r28
    2156:	6f 5e       	subi	r22, 0xEF	; 239
    2158:	7f 4f       	sbci	r23, 0xFF	; 255
    215a:	0e 94 9f 14 	call	0x293e	; 0x293e <__unpack_f>
    215e:	99 85       	ldd	r25, Y+9	; 0x09
    2160:	92 30       	cpi	r25, 0x02	; 2
    2162:	78 f0       	brcs	.+30     	; 0x2182 <__mulsf3+0x5c>
    2164:	89 89       	ldd	r24, Y+17	; 0x11
    2166:	82 30       	cpi	r24, 0x02	; 2
    2168:	c0 f0       	brcs	.+48     	; 0x219a <__mulsf3+0x74>
    216a:	94 30       	cpi	r25, 0x04	; 4
    216c:	19 f4       	brne	.+6      	; 0x2174 <__mulsf3+0x4e>
    216e:	82 30       	cpi	r24, 0x02	; 2
    2170:	41 f4       	brne	.+16     	; 0x2182 <__mulsf3+0x5c>
    2172:	cb c0       	rjmp	.+406    	; 0x230a <__mulsf3+0x1e4>
    2174:	84 30       	cpi	r24, 0x04	; 4
    2176:	19 f4       	brne	.+6      	; 0x217e <__mulsf3+0x58>
    2178:	92 30       	cpi	r25, 0x02	; 2
    217a:	79 f4       	brne	.+30     	; 0x219a <__mulsf3+0x74>
    217c:	c6 c0       	rjmp	.+396    	; 0x230a <__mulsf3+0x1e4>
    217e:	92 30       	cpi	r25, 0x02	; 2
    2180:	51 f4       	brne	.+20     	; 0x2196 <__mulsf3+0x70>
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	2a 85       	ldd	r18, Y+10	; 0x0a
    2186:	9a 89       	ldd	r25, Y+18	; 0x12
    2188:	29 17       	cp	r18, r25
    218a:	09 f4       	brne	.+2      	; 0x218e <__mulsf3+0x68>
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	8a 87       	std	Y+10, r24	; 0x0a
    2190:	ce 01       	movw	r24, r28
    2192:	09 96       	adiw	r24, 0x09	; 9
    2194:	bc c0       	rjmp	.+376    	; 0x230e <__mulsf3+0x1e8>
    2196:	82 30       	cpi	r24, 0x02	; 2
    2198:	51 f4       	brne	.+20     	; 0x21ae <__mulsf3+0x88>
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	2a 85       	ldd	r18, Y+10	; 0x0a
    219e:	9a 89       	ldd	r25, Y+18	; 0x12
    21a0:	29 17       	cp	r18, r25
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <__mulsf3+0x80>
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	8a 8b       	std	Y+18, r24	; 0x12
    21a8:	ce 01       	movw	r24, r28
    21aa:	41 96       	adiw	r24, 0x11	; 17
    21ac:	b0 c0       	rjmp	.+352    	; 0x230e <__mulsf3+0x1e8>
    21ae:	6d 84       	ldd	r6, Y+13	; 0x0d
    21b0:	7e 84       	ldd	r7, Y+14	; 0x0e
    21b2:	8f 84       	ldd	r8, Y+15	; 0x0f
    21b4:	98 88       	ldd	r9, Y+16	; 0x10
    21b6:	ed 88       	ldd	r14, Y+21	; 0x15
    21b8:	fe 88       	ldd	r15, Y+22	; 0x16
    21ba:	0f 89       	ldd	r16, Y+23	; 0x17
    21bc:	18 8d       	ldd	r17, Y+24	; 0x18
    21be:	e0 e2       	ldi	r30, 0x20	; 32
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	dc 01       	movw	r26, r24
    21c8:	aa 24       	eor	r10, r10
    21ca:	bb 24       	eor	r11, r11
    21cc:	65 01       	movw	r12, r10
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	a9 01       	movw	r20, r18
    21d4:	b3 01       	movw	r22, r6
    21d6:	61 70       	andi	r22, 0x01	; 1
    21d8:	70 70       	andi	r23, 0x00	; 0
    21da:	61 15       	cp	r22, r1
    21dc:	71 05       	cpc	r23, r1
    21de:	d1 f0       	breq	.+52     	; 0x2214 <__mulsf3+0xee>
    21e0:	2e 0d       	add	r18, r14
    21e2:	3f 1d       	adc	r19, r15
    21e4:	40 1f       	adc	r20, r16
    21e6:	51 1f       	adc	r21, r17
    21e8:	15 01       	movw	r2, r10
    21ea:	26 01       	movw	r4, r12
    21ec:	28 0e       	add	r2, r24
    21ee:	39 1e       	adc	r3, r25
    21f0:	4a 1e       	adc	r4, r26
    21f2:	5b 1e       	adc	r5, r27
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	a0 e0       	ldi	r26, 0x00	; 0
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	2e 15       	cp	r18, r14
    21fe:	3f 05       	cpc	r19, r15
    2200:	40 07       	cpc	r20, r16
    2202:	51 07       	cpc	r21, r17
    2204:	18 f0       	brcs	.+6      	; 0x220c <__mulsf3+0xe6>
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	dc 01       	movw	r26, r24
    220c:	82 0d       	add	r24, r2
    220e:	93 1d       	adc	r25, r3
    2210:	a4 1d       	adc	r26, r4
    2212:	b5 1d       	adc	r27, r5
    2214:	aa 0c       	add	r10, r10
    2216:	bb 1c       	adc	r11, r11
    2218:	cc 1c       	adc	r12, r12
    221a:	dd 1c       	adc	r13, r13
    221c:	17 ff       	sbrs	r17, 7
    221e:	09 c0       	rjmp	.+18     	; 0x2232 <__mulsf3+0x10c>
    2220:	61 e0       	ldi	r22, 0x01	; 1
    2222:	26 2e       	mov	r2, r22
    2224:	31 2c       	mov	r3, r1
    2226:	41 2c       	mov	r4, r1
    2228:	51 2c       	mov	r5, r1
    222a:	a2 28       	or	r10, r2
    222c:	b3 28       	or	r11, r3
    222e:	c4 28       	or	r12, r4
    2230:	d5 28       	or	r13, r5
    2232:	31 97       	sbiw	r30, 0x01	; 1
    2234:	49 f0       	breq	.+18     	; 0x2248 <__mulsf3+0x122>
    2236:	ee 0c       	add	r14, r14
    2238:	ff 1c       	adc	r15, r15
    223a:	00 1f       	adc	r16, r16
    223c:	11 1f       	adc	r17, r17
    223e:	96 94       	lsr	r9
    2240:	87 94       	ror	r8
    2242:	77 94       	ror	r7
    2244:	67 94       	ror	r6
    2246:	c6 cf       	rjmp	.-116    	; 0x21d4 <__mulsf3+0xae>
    2248:	6b 89       	ldd	r22, Y+19	; 0x13
    224a:	7c 89       	ldd	r23, Y+20	; 0x14
    224c:	eb 85       	ldd	r30, Y+11	; 0x0b
    224e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2250:	6e 0f       	add	r22, r30
    2252:	7f 1f       	adc	r23, r31
    2254:	6e 5f       	subi	r22, 0xFE	; 254
    2256:	7f 4f       	sbci	r23, 0xFF	; 255
    2258:	7c 8f       	std	Y+28, r23	; 0x1c
    225a:	6b 8f       	std	Y+27, r22	; 0x1b
    225c:	61 e0       	ldi	r22, 0x01	; 1
    225e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2260:	7a 89       	ldd	r23, Y+18	; 0x12
    2262:	e7 17       	cp	r30, r23
    2264:	09 f4       	brne	.+2      	; 0x2268 <__mulsf3+0x142>
    2266:	60 e0       	ldi	r22, 0x00	; 0
    2268:	6a 8f       	std	Y+26, r22	; 0x1a
    226a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    226c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    226e:	10 c0       	rjmp	.+32     	; 0x2290 <__mulsf3+0x16a>
    2270:	fc 01       	movw	r30, r24
    2272:	e1 70       	andi	r30, 0x01	; 1
    2274:	f0 70       	andi	r31, 0x00	; 0
    2276:	30 97       	sbiw	r30, 0x00	; 0
    2278:	29 f0       	breq	.+10     	; 0x2284 <__mulsf3+0x15e>
    227a:	56 95       	lsr	r21
    227c:	47 95       	ror	r20
    227e:	37 95       	ror	r19
    2280:	27 95       	ror	r18
    2282:	50 68       	ori	r21, 0x80	; 128
    2284:	b6 95       	lsr	r27
    2286:	a7 95       	ror	r26
    2288:	97 95       	ror	r25
    228a:	87 95       	ror	r24
    228c:	6f 5f       	subi	r22, 0xFF	; 255
    228e:	7f 4f       	sbci	r23, 0xFF	; 255
    2290:	b7 fd       	sbrc	r27, 7
    2292:	ee cf       	rjmp	.-36     	; 0x2270 <__mulsf3+0x14a>
    2294:	0c c0       	rjmp	.+24     	; 0x22ae <__mulsf3+0x188>
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	aa 1f       	adc	r26, r26
    229c:	bb 1f       	adc	r27, r27
    229e:	57 fd       	sbrc	r21, 7
    22a0:	81 60       	ori	r24, 0x01	; 1
    22a2:	22 0f       	add	r18, r18
    22a4:	33 1f       	adc	r19, r19
    22a6:	44 1f       	adc	r20, r20
    22a8:	55 1f       	adc	r21, r21
    22aa:	61 50       	subi	r22, 0x01	; 1
    22ac:	70 40       	sbci	r23, 0x00	; 0
    22ae:	80 30       	cpi	r24, 0x00	; 0
    22b0:	e0 e0       	ldi	r30, 0x00	; 0
    22b2:	9e 07       	cpc	r25, r30
    22b4:	e0 e0       	ldi	r30, 0x00	; 0
    22b6:	ae 07       	cpc	r26, r30
    22b8:	e0 e4       	ldi	r30, 0x40	; 64
    22ba:	be 07       	cpc	r27, r30
    22bc:	60 f3       	brcs	.-40     	; 0x2296 <__mulsf3+0x170>
    22be:	6b 8f       	std	Y+27, r22	; 0x1b
    22c0:	7c 8f       	std	Y+28, r23	; 0x1c
    22c2:	6f e7       	ldi	r22, 0x7F	; 127
    22c4:	e6 2e       	mov	r14, r22
    22c6:	f1 2c       	mov	r15, r1
    22c8:	01 2d       	mov	r16, r1
    22ca:	11 2d       	mov	r17, r1
    22cc:	e8 22       	and	r14, r24
    22ce:	f9 22       	and	r15, r25
    22d0:	0a 23       	and	r16, r26
    22d2:	1b 23       	and	r17, r27
    22d4:	60 e4       	ldi	r22, 0x40	; 64
    22d6:	e6 16       	cp	r14, r22
    22d8:	f1 04       	cpc	r15, r1
    22da:	01 05       	cpc	r16, r1
    22dc:	11 05       	cpc	r17, r1
    22de:	61 f4       	brne	.+24     	; 0x22f8 <__mulsf3+0x1d2>
    22e0:	87 fd       	sbrc	r24, 7
    22e2:	0a c0       	rjmp	.+20     	; 0x22f8 <__mulsf3+0x1d2>
    22e4:	21 15       	cp	r18, r1
    22e6:	31 05       	cpc	r19, r1
    22e8:	41 05       	cpc	r20, r1
    22ea:	51 05       	cpc	r21, r1
    22ec:	29 f0       	breq	.+10     	; 0x22f8 <__mulsf3+0x1d2>
    22ee:	80 5c       	subi	r24, 0xC0	; 192
    22f0:	9f 4f       	sbci	r25, 0xFF	; 255
    22f2:	af 4f       	sbci	r26, 0xFF	; 255
    22f4:	bf 4f       	sbci	r27, 0xFF	; 255
    22f6:	80 78       	andi	r24, 0x80	; 128
    22f8:	8d 8f       	std	Y+29, r24	; 0x1d
    22fa:	9e 8f       	std	Y+30, r25	; 0x1e
    22fc:	af 8f       	std	Y+31, r26	; 0x1f
    22fe:	b8 a3       	std	Y+32, r27	; 0x20
    2300:	83 e0       	ldi	r24, 0x03	; 3
    2302:	89 8f       	std	Y+25, r24	; 0x19
    2304:	ce 01       	movw	r24, r28
    2306:	49 96       	adiw	r24, 0x19	; 25
    2308:	02 c0       	rjmp	.+4      	; 0x230e <__mulsf3+0x1e8>
    230a:	8b e2       	ldi	r24, 0x2B	; 43
    230c:	91 e0       	ldi	r25, 0x01	; 1
    230e:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__pack_f>
    2312:	a0 96       	adiw	r28, 0x20	; 32
    2314:	e2 e1       	ldi	r30, 0x12	; 18
    2316:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <__epilogue_restores__>

0000231a <__gtsf2>:
    231a:	a8 e1       	ldi	r26, 0x18	; 24
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e3 e9       	ldi	r30, 0x93	; 147
    2320:	f1 e1       	ldi	r31, 0x11	; 17
    2322:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x18>
    2326:	69 83       	std	Y+1, r22	; 0x01
    2328:	7a 83       	std	Y+2, r23	; 0x02
    232a:	8b 83       	std	Y+3, r24	; 0x03
    232c:	9c 83       	std	Y+4, r25	; 0x04
    232e:	2d 83       	std	Y+5, r18	; 0x05
    2330:	3e 83       	std	Y+6, r19	; 0x06
    2332:	4f 83       	std	Y+7, r20	; 0x07
    2334:	58 87       	std	Y+8, r21	; 0x08
    2336:	8e 01       	movw	r16, r28
    2338:	07 5f       	subi	r16, 0xF7	; 247
    233a:	1f 4f       	sbci	r17, 0xFF	; 255
    233c:	ce 01       	movw	r24, r28
    233e:	01 96       	adiw	r24, 0x01	; 1
    2340:	b8 01       	movw	r22, r16
    2342:	0e 94 9f 14 	call	0x293e	; 0x293e <__unpack_f>
    2346:	81 e1       	ldi	r24, 0x11	; 17
    2348:	e8 2e       	mov	r14, r24
    234a:	f1 2c       	mov	r15, r1
    234c:	ec 0e       	add	r14, r28
    234e:	fd 1e       	adc	r15, r29
    2350:	ce 01       	movw	r24, r28
    2352:	05 96       	adiw	r24, 0x05	; 5
    2354:	b7 01       	movw	r22, r14
    2356:	0e 94 9f 14 	call	0x293e	; 0x293e <__unpack_f>
    235a:	89 85       	ldd	r24, Y+9	; 0x09
    235c:	82 30       	cpi	r24, 0x02	; 2
    235e:	40 f0       	brcs	.+16     	; 0x2370 <__gtsf2+0x56>
    2360:	89 89       	ldd	r24, Y+17	; 0x11
    2362:	82 30       	cpi	r24, 0x02	; 2
    2364:	28 f0       	brcs	.+10     	; 0x2370 <__gtsf2+0x56>
    2366:	c8 01       	movw	r24, r16
    2368:	b7 01       	movw	r22, r14
    236a:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__fpcmp_parts_f>
    236e:	01 c0       	rjmp	.+2      	; 0x2372 <__gtsf2+0x58>
    2370:	8f ef       	ldi	r24, 0xFF	; 255
    2372:	68 96       	adiw	r28, 0x18	; 24
    2374:	e6 e0       	ldi	r30, 0x06	; 6
    2376:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x18>

0000237a <__gesf2>:
    237a:	a8 e1       	ldi	r26, 0x18	; 24
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e3 ec       	ldi	r30, 0xC3	; 195
    2380:	f1 e1       	ldi	r31, 0x11	; 17
    2382:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x18>
    2386:	69 83       	std	Y+1, r22	; 0x01
    2388:	7a 83       	std	Y+2, r23	; 0x02
    238a:	8b 83       	std	Y+3, r24	; 0x03
    238c:	9c 83       	std	Y+4, r25	; 0x04
    238e:	2d 83       	std	Y+5, r18	; 0x05
    2390:	3e 83       	std	Y+6, r19	; 0x06
    2392:	4f 83       	std	Y+7, r20	; 0x07
    2394:	58 87       	std	Y+8, r21	; 0x08
    2396:	8e 01       	movw	r16, r28
    2398:	07 5f       	subi	r16, 0xF7	; 247
    239a:	1f 4f       	sbci	r17, 0xFF	; 255
    239c:	ce 01       	movw	r24, r28
    239e:	01 96       	adiw	r24, 0x01	; 1
    23a0:	b8 01       	movw	r22, r16
    23a2:	0e 94 9f 14 	call	0x293e	; 0x293e <__unpack_f>
    23a6:	81 e1       	ldi	r24, 0x11	; 17
    23a8:	e8 2e       	mov	r14, r24
    23aa:	f1 2c       	mov	r15, r1
    23ac:	ec 0e       	add	r14, r28
    23ae:	fd 1e       	adc	r15, r29
    23b0:	ce 01       	movw	r24, r28
    23b2:	05 96       	adiw	r24, 0x05	; 5
    23b4:	b7 01       	movw	r22, r14
    23b6:	0e 94 9f 14 	call	0x293e	; 0x293e <__unpack_f>
    23ba:	89 85       	ldd	r24, Y+9	; 0x09
    23bc:	82 30       	cpi	r24, 0x02	; 2
    23be:	40 f0       	brcs	.+16     	; 0x23d0 <__gesf2+0x56>
    23c0:	89 89       	ldd	r24, Y+17	; 0x11
    23c2:	82 30       	cpi	r24, 0x02	; 2
    23c4:	28 f0       	brcs	.+10     	; 0x23d0 <__gesf2+0x56>
    23c6:	c8 01       	movw	r24, r16
    23c8:	b7 01       	movw	r22, r14
    23ca:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__fpcmp_parts_f>
    23ce:	01 c0       	rjmp	.+2      	; 0x23d2 <__gesf2+0x58>
    23d0:	8f ef       	ldi	r24, 0xFF	; 255
    23d2:	68 96       	adiw	r28, 0x18	; 24
    23d4:	e6 e0       	ldi	r30, 0x06	; 6
    23d6:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x18>

000023da <__ltsf2>:
    23da:	a8 e1       	ldi	r26, 0x18	; 24
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e3 ef       	ldi	r30, 0xF3	; 243
    23e0:	f1 e1       	ldi	r31, 0x11	; 17
    23e2:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x18>
    23e6:	69 83       	std	Y+1, r22	; 0x01
    23e8:	7a 83       	std	Y+2, r23	; 0x02
    23ea:	8b 83       	std	Y+3, r24	; 0x03
    23ec:	9c 83       	std	Y+4, r25	; 0x04
    23ee:	2d 83       	std	Y+5, r18	; 0x05
    23f0:	3e 83       	std	Y+6, r19	; 0x06
    23f2:	4f 83       	std	Y+7, r20	; 0x07
    23f4:	58 87       	std	Y+8, r21	; 0x08
    23f6:	8e 01       	movw	r16, r28
    23f8:	07 5f       	subi	r16, 0xF7	; 247
    23fa:	1f 4f       	sbci	r17, 0xFF	; 255
    23fc:	ce 01       	movw	r24, r28
    23fe:	01 96       	adiw	r24, 0x01	; 1
    2400:	b8 01       	movw	r22, r16
    2402:	0e 94 9f 14 	call	0x293e	; 0x293e <__unpack_f>
    2406:	81 e1       	ldi	r24, 0x11	; 17
    2408:	e8 2e       	mov	r14, r24
    240a:	f1 2c       	mov	r15, r1
    240c:	ec 0e       	add	r14, r28
    240e:	fd 1e       	adc	r15, r29
    2410:	ce 01       	movw	r24, r28
    2412:	05 96       	adiw	r24, 0x05	; 5
    2414:	b7 01       	movw	r22, r14
    2416:	0e 94 9f 14 	call	0x293e	; 0x293e <__unpack_f>
    241a:	89 85       	ldd	r24, Y+9	; 0x09
    241c:	82 30       	cpi	r24, 0x02	; 2
    241e:	40 f0       	brcs	.+16     	; 0x2430 <__ltsf2+0x56>
    2420:	89 89       	ldd	r24, Y+17	; 0x11
    2422:	82 30       	cpi	r24, 0x02	; 2
    2424:	28 f0       	brcs	.+10     	; 0x2430 <__ltsf2+0x56>
    2426:	c8 01       	movw	r24, r16
    2428:	b7 01       	movw	r22, r14
    242a:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__fpcmp_parts_f>
    242e:	01 c0       	rjmp	.+2      	; 0x2432 <__ltsf2+0x58>
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	68 96       	adiw	r28, 0x18	; 24
    2434:	e6 e0       	ldi	r30, 0x06	; 6
    2436:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x18>

0000243a <__lesf2>:
    243a:	a8 e1       	ldi	r26, 0x18	; 24
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	e3 e2       	ldi	r30, 0x23	; 35
    2440:	f2 e1       	ldi	r31, 0x12	; 18
    2442:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x18>
    2446:	69 83       	std	Y+1, r22	; 0x01
    2448:	7a 83       	std	Y+2, r23	; 0x02
    244a:	8b 83       	std	Y+3, r24	; 0x03
    244c:	9c 83       	std	Y+4, r25	; 0x04
    244e:	2d 83       	std	Y+5, r18	; 0x05
    2450:	3e 83       	std	Y+6, r19	; 0x06
    2452:	4f 83       	std	Y+7, r20	; 0x07
    2454:	58 87       	std	Y+8, r21	; 0x08
    2456:	8e 01       	movw	r16, r28
    2458:	07 5f       	subi	r16, 0xF7	; 247
    245a:	1f 4f       	sbci	r17, 0xFF	; 255
    245c:	ce 01       	movw	r24, r28
    245e:	01 96       	adiw	r24, 0x01	; 1
    2460:	b8 01       	movw	r22, r16
    2462:	0e 94 9f 14 	call	0x293e	; 0x293e <__unpack_f>
    2466:	81 e1       	ldi	r24, 0x11	; 17
    2468:	e8 2e       	mov	r14, r24
    246a:	f1 2c       	mov	r15, r1
    246c:	ec 0e       	add	r14, r28
    246e:	fd 1e       	adc	r15, r29
    2470:	ce 01       	movw	r24, r28
    2472:	05 96       	adiw	r24, 0x05	; 5
    2474:	b7 01       	movw	r22, r14
    2476:	0e 94 9f 14 	call	0x293e	; 0x293e <__unpack_f>
    247a:	89 85       	ldd	r24, Y+9	; 0x09
    247c:	82 30       	cpi	r24, 0x02	; 2
    247e:	40 f0       	brcs	.+16     	; 0x2490 <__lesf2+0x56>
    2480:	89 89       	ldd	r24, Y+17	; 0x11
    2482:	82 30       	cpi	r24, 0x02	; 2
    2484:	28 f0       	brcs	.+10     	; 0x2490 <__lesf2+0x56>
    2486:	c8 01       	movw	r24, r16
    2488:	b7 01       	movw	r22, r14
    248a:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__fpcmp_parts_f>
    248e:	01 c0       	rjmp	.+2      	; 0x2492 <__lesf2+0x58>
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	68 96       	adiw	r28, 0x18	; 24
    2494:	e6 e0       	ldi	r30, 0x06	; 6
    2496:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x18>

0000249a <__floatsisf>:
    249a:	a8 e0       	ldi	r26, 0x08	; 8
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	e3 e5       	ldi	r30, 0x53	; 83
    24a0:	f2 e1       	ldi	r31, 0x12	; 18
    24a2:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__prologue_saves__+0x18>
    24a6:	7b 01       	movw	r14, r22
    24a8:	8c 01       	movw	r16, r24
    24aa:	83 e0       	ldi	r24, 0x03	; 3
    24ac:	89 83       	std	Y+1, r24	; 0x01
    24ae:	d8 01       	movw	r26, r16
    24b0:	c7 01       	movw	r24, r14
    24b2:	88 27       	eor	r24, r24
    24b4:	b7 fd       	sbrc	r27, 7
    24b6:	83 95       	inc	r24
    24b8:	99 27       	eor	r25, r25
    24ba:	aa 27       	eor	r26, r26
    24bc:	bb 27       	eor	r27, r27
    24be:	28 2f       	mov	r18, r24
    24c0:	8a 83       	std	Y+2, r24	; 0x02
    24c2:	e1 14       	cp	r14, r1
    24c4:	f1 04       	cpc	r15, r1
    24c6:	01 05       	cpc	r16, r1
    24c8:	11 05       	cpc	r17, r1
    24ca:	19 f4       	brne	.+6      	; 0x24d2 <__floatsisf+0x38>
    24cc:	82 e0       	ldi	r24, 0x02	; 2
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	37 c0       	rjmp	.+110    	; 0x2540 <__floatsisf+0xa6>
    24d2:	8e e1       	ldi	r24, 0x1E	; 30
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	9c 83       	std	Y+4, r25	; 0x04
    24d8:	8b 83       	std	Y+3, r24	; 0x03
    24da:	22 23       	and	r18, r18
    24dc:	89 f0       	breq	.+34     	; 0x2500 <__floatsisf+0x66>
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	e8 16       	cp	r14, r24
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	f8 06       	cpc	r15, r24
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	08 07       	cpc	r16, r24
    24ea:	80 e8       	ldi	r24, 0x80	; 128
    24ec:	18 07       	cpc	r17, r24
    24ee:	69 f1       	breq	.+90     	; 0x254a <__floatsisf+0xb0>
    24f0:	10 95       	com	r17
    24f2:	00 95       	com	r16
    24f4:	f0 94       	com	r15
    24f6:	e0 94       	com	r14
    24f8:	e1 1c       	adc	r14, r1
    24fa:	f1 1c       	adc	r15, r1
    24fc:	01 1d       	adc	r16, r1
    24fe:	11 1d       	adc	r17, r1
    2500:	ed 82       	std	Y+5, r14	; 0x05
    2502:	fe 82       	std	Y+6, r15	; 0x06
    2504:	0f 83       	std	Y+7, r16	; 0x07
    2506:	18 87       	std	Y+8, r17	; 0x08
    2508:	c8 01       	movw	r24, r16
    250a:	b7 01       	movw	r22, r14
    250c:	0e 94 77 13 	call	0x26ee	; 0x26ee <__clzsi2>
    2510:	9c 01       	movw	r18, r24
    2512:	21 50       	subi	r18, 0x01	; 1
    2514:	30 40       	sbci	r19, 0x00	; 0
    2516:	12 16       	cp	r1, r18
    2518:	13 06       	cpc	r1, r19
    251a:	94 f4       	brge	.+36     	; 0x2540 <__floatsisf+0xa6>
    251c:	02 2e       	mov	r0, r18
    251e:	04 c0       	rjmp	.+8      	; 0x2528 <__floatsisf+0x8e>
    2520:	ee 0c       	add	r14, r14
    2522:	ff 1c       	adc	r15, r15
    2524:	00 1f       	adc	r16, r16
    2526:	11 1f       	adc	r17, r17
    2528:	0a 94       	dec	r0
    252a:	d2 f7       	brpl	.-12     	; 0x2520 <__floatsisf+0x86>
    252c:	ed 82       	std	Y+5, r14	; 0x05
    252e:	fe 82       	std	Y+6, r15	; 0x06
    2530:	0f 83       	std	Y+7, r16	; 0x07
    2532:	18 87       	std	Y+8, r17	; 0x08
    2534:	8e e1       	ldi	r24, 0x1E	; 30
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	82 1b       	sub	r24, r18
    253a:	93 0b       	sbc	r25, r19
    253c:	9c 83       	std	Y+4, r25	; 0x04
    253e:	8b 83       	std	Y+3, r24	; 0x03
    2540:	ce 01       	movw	r24, r28
    2542:	01 96       	adiw	r24, 0x01	; 1
    2544:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__pack_f>
    2548:	04 c0       	rjmp	.+8      	; 0x2552 <__floatsisf+0xb8>
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	70 e0       	ldi	r23, 0x00	; 0
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	9f ec       	ldi	r25, 0xCF	; 207
    2552:	28 96       	adiw	r28, 0x08	; 8
    2554:	e6 e0       	ldi	r30, 0x06	; 6
    2556:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x18>

0000255a <__fixsfsi>:
    255a:	ac e0       	ldi	r26, 0x0C	; 12
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e3 eb       	ldi	r30, 0xB3	; 179
    2560:	f2 e1       	ldi	r31, 0x12	; 18
    2562:	0c 94 7d 15 	jmp	0x2afa	; 0x2afa <__prologue_saves__+0x20>
    2566:	69 83       	std	Y+1, r22	; 0x01
    2568:	7a 83       	std	Y+2, r23	; 0x02
    256a:	8b 83       	std	Y+3, r24	; 0x03
    256c:	9c 83       	std	Y+4, r25	; 0x04
    256e:	ce 01       	movw	r24, r28
    2570:	01 96       	adiw	r24, 0x01	; 1
    2572:	be 01       	movw	r22, r28
    2574:	6b 5f       	subi	r22, 0xFB	; 251
    2576:	7f 4f       	sbci	r23, 0xFF	; 255
    2578:	0e 94 9f 14 	call	0x293e	; 0x293e <__unpack_f>
    257c:	8d 81       	ldd	r24, Y+5	; 0x05
    257e:	82 30       	cpi	r24, 0x02	; 2
    2580:	81 f1       	breq	.+96     	; 0x25e2 <__fixsfsi+0x88>
    2582:	82 30       	cpi	r24, 0x02	; 2
    2584:	70 f1       	brcs	.+92     	; 0x25e2 <__fixsfsi+0x88>
    2586:	84 30       	cpi	r24, 0x04	; 4
    2588:	21 f4       	brne	.+8      	; 0x2592 <__fixsfsi+0x38>
    258a:	8e 81       	ldd	r24, Y+6	; 0x06
    258c:	88 23       	and	r24, r24
    258e:	69 f1       	breq	.+90     	; 0x25ea <__fixsfsi+0x90>
    2590:	0a c0       	rjmp	.+20     	; 0x25a6 <__fixsfsi+0x4c>
    2592:	2f 81       	ldd	r18, Y+7	; 0x07
    2594:	38 85       	ldd	r19, Y+8	; 0x08
    2596:	37 fd       	sbrc	r19, 7
    2598:	24 c0       	rjmp	.+72     	; 0x25e2 <__fixsfsi+0x88>
    259a:	6e 81       	ldd	r22, Y+6	; 0x06
    259c:	2f 31       	cpi	r18, 0x1F	; 31
    259e:	31 05       	cpc	r19, r1
    25a0:	3c f0       	brlt	.+14     	; 0x25b0 <__fixsfsi+0x56>
    25a2:	66 23       	and	r22, r22
    25a4:	11 f1       	breq	.+68     	; 0x25ea <__fixsfsi+0x90>
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	50 e8       	ldi	r21, 0x80	; 128
    25ae:	21 c0       	rjmp	.+66     	; 0x25f2 <__fixsfsi+0x98>
    25b0:	8e e1       	ldi	r24, 0x1E	; 30
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	82 1b       	sub	r24, r18
    25b6:	93 0b       	sbc	r25, r19
    25b8:	29 85       	ldd	r18, Y+9	; 0x09
    25ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    25bc:	4b 85       	ldd	r20, Y+11	; 0x0b
    25be:	5c 85       	ldd	r21, Y+12	; 0x0c
    25c0:	04 c0       	rjmp	.+8      	; 0x25ca <__fixsfsi+0x70>
    25c2:	56 95       	lsr	r21
    25c4:	47 95       	ror	r20
    25c6:	37 95       	ror	r19
    25c8:	27 95       	ror	r18
    25ca:	8a 95       	dec	r24
    25cc:	d2 f7       	brpl	.-12     	; 0x25c2 <__fixsfsi+0x68>
    25ce:	66 23       	and	r22, r22
    25d0:	81 f0       	breq	.+32     	; 0x25f2 <__fixsfsi+0x98>
    25d2:	50 95       	com	r21
    25d4:	40 95       	com	r20
    25d6:	30 95       	com	r19
    25d8:	21 95       	neg	r18
    25da:	3f 4f       	sbci	r19, 0xFF	; 255
    25dc:	4f 4f       	sbci	r20, 0xFF	; 255
    25de:	5f 4f       	sbci	r21, 0xFF	; 255
    25e0:	08 c0       	rjmp	.+16     	; 0x25f2 <__fixsfsi+0x98>
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	a9 01       	movw	r20, r18
    25e8:	04 c0       	rjmp	.+8      	; 0x25f2 <__fixsfsi+0x98>
    25ea:	2f ef       	ldi	r18, 0xFF	; 255
    25ec:	3f ef       	ldi	r19, 0xFF	; 255
    25ee:	4f ef       	ldi	r20, 0xFF	; 255
    25f0:	5f e7       	ldi	r21, 0x7F	; 127
    25f2:	b9 01       	movw	r22, r18
    25f4:	ca 01       	movw	r24, r20
    25f6:	2c 96       	adiw	r28, 0x0c	; 12
    25f8:	e2 e0       	ldi	r30, 0x02	; 2
    25fa:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__epilogue_restores__+0x20>

000025fe <__floatunsisf>:
    25fe:	a8 e0       	ldi	r26, 0x08	; 8
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	e5 e0       	ldi	r30, 0x05	; 5
    2604:	f3 e1       	ldi	r31, 0x13	; 19
    2606:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__prologue_saves__+0x14>
    260a:	7b 01       	movw	r14, r22
    260c:	8c 01       	movw	r16, r24
    260e:	1a 82       	std	Y+2, r1	; 0x02
    2610:	61 15       	cp	r22, r1
    2612:	71 05       	cpc	r23, r1
    2614:	81 05       	cpc	r24, r1
    2616:	91 05       	cpc	r25, r1
    2618:	19 f4       	brne	.+6      	; 0x2620 <__floatunsisf+0x22>
    261a:	82 e0       	ldi	r24, 0x02	; 2
    261c:	89 83       	std	Y+1, r24	; 0x01
    261e:	5f c0       	rjmp	.+190    	; 0x26de <__floatunsisf+0xe0>
    2620:	83 e0       	ldi	r24, 0x03	; 3
    2622:	89 83       	std	Y+1, r24	; 0x01
    2624:	8e e1       	ldi	r24, 0x1E	; 30
    2626:	c8 2e       	mov	r12, r24
    2628:	d1 2c       	mov	r13, r1
    262a:	dc 82       	std	Y+4, r13	; 0x04
    262c:	cb 82       	std	Y+3, r12	; 0x03
    262e:	ed 82       	std	Y+5, r14	; 0x05
    2630:	fe 82       	std	Y+6, r15	; 0x06
    2632:	0f 83       	std	Y+7, r16	; 0x07
    2634:	18 87       	std	Y+8, r17	; 0x08
    2636:	c8 01       	movw	r24, r16
    2638:	b7 01       	movw	r22, r14
    263a:	0e 94 77 13 	call	0x26ee	; 0x26ee <__clzsi2>
    263e:	fc 01       	movw	r30, r24
    2640:	31 97       	sbiw	r30, 0x01	; 1
    2642:	f7 ff       	sbrs	r31, 7
    2644:	3a c0       	rjmp	.+116    	; 0x26ba <__floatunsisf+0xbc>
    2646:	aa 27       	eor	r26, r26
    2648:	bb 27       	eor	r27, r27
    264a:	ae 1b       	sub	r26, r30
    264c:	bf 0b       	sbc	r27, r31
    264e:	21 e0       	ldi	r18, 0x01	; 1
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	50 e0       	ldi	r21, 0x00	; 0
    2656:	0a 2e       	mov	r0, r26
    2658:	04 c0       	rjmp	.+8      	; 0x2662 <__floatunsisf+0x64>
    265a:	22 0f       	add	r18, r18
    265c:	33 1f       	adc	r19, r19
    265e:	44 1f       	adc	r20, r20
    2660:	55 1f       	adc	r21, r21
    2662:	0a 94       	dec	r0
    2664:	d2 f7       	brpl	.-12     	; 0x265a <__floatunsisf+0x5c>
    2666:	21 50       	subi	r18, 0x01	; 1
    2668:	30 40       	sbci	r19, 0x00	; 0
    266a:	40 40       	sbci	r20, 0x00	; 0
    266c:	50 40       	sbci	r21, 0x00	; 0
    266e:	2e 21       	and	r18, r14
    2670:	3f 21       	and	r19, r15
    2672:	40 23       	and	r20, r16
    2674:	51 23       	and	r21, r17
    2676:	61 e0       	ldi	r22, 0x01	; 1
    2678:	70 e0       	ldi	r23, 0x00	; 0
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	21 15       	cp	r18, r1
    2680:	31 05       	cpc	r19, r1
    2682:	41 05       	cpc	r20, r1
    2684:	51 05       	cpc	r21, r1
    2686:	19 f4       	brne	.+6      	; 0x268e <__floatunsisf+0x90>
    2688:	60 e0       	ldi	r22, 0x00	; 0
    268a:	70 e0       	ldi	r23, 0x00	; 0
    268c:	cb 01       	movw	r24, r22
    268e:	04 c0       	rjmp	.+8      	; 0x2698 <__floatunsisf+0x9a>
    2690:	16 95       	lsr	r17
    2692:	07 95       	ror	r16
    2694:	f7 94       	ror	r15
    2696:	e7 94       	ror	r14
    2698:	aa 95       	dec	r26
    269a:	d2 f7       	brpl	.-12     	; 0x2690 <__floatunsisf+0x92>
    269c:	e6 2a       	or	r14, r22
    269e:	f7 2a       	or	r15, r23
    26a0:	08 2b       	or	r16, r24
    26a2:	19 2b       	or	r17, r25
    26a4:	ed 82       	std	Y+5, r14	; 0x05
    26a6:	fe 82       	std	Y+6, r15	; 0x06
    26a8:	0f 83       	std	Y+7, r16	; 0x07
    26aa:	18 87       	std	Y+8, r17	; 0x08
    26ac:	8e e1       	ldi	r24, 0x1E	; 30
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	8e 1b       	sub	r24, r30
    26b2:	9f 0b       	sbc	r25, r31
    26b4:	9c 83       	std	Y+4, r25	; 0x04
    26b6:	8b 83       	std	Y+3, r24	; 0x03
    26b8:	12 c0       	rjmp	.+36     	; 0x26de <__floatunsisf+0xe0>
    26ba:	30 97       	sbiw	r30, 0x00	; 0
    26bc:	81 f0       	breq	.+32     	; 0x26de <__floatunsisf+0xe0>
    26be:	0e 2e       	mov	r0, r30
    26c0:	04 c0       	rjmp	.+8      	; 0x26ca <__floatunsisf+0xcc>
    26c2:	ee 0c       	add	r14, r14
    26c4:	ff 1c       	adc	r15, r15
    26c6:	00 1f       	adc	r16, r16
    26c8:	11 1f       	adc	r17, r17
    26ca:	0a 94       	dec	r0
    26cc:	d2 f7       	brpl	.-12     	; 0x26c2 <__floatunsisf+0xc4>
    26ce:	ed 82       	std	Y+5, r14	; 0x05
    26d0:	fe 82       	std	Y+6, r15	; 0x06
    26d2:	0f 83       	std	Y+7, r16	; 0x07
    26d4:	18 87       	std	Y+8, r17	; 0x08
    26d6:	ce 1a       	sub	r12, r30
    26d8:	df 0a       	sbc	r13, r31
    26da:	dc 82       	std	Y+4, r13	; 0x04
    26dc:	cb 82       	std	Y+3, r12	; 0x03
    26de:	ce 01       	movw	r24, r28
    26e0:	01 96       	adiw	r24, 0x01	; 1
    26e2:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__pack_f>
    26e6:	28 96       	adiw	r28, 0x08	; 8
    26e8:	e8 e0       	ldi	r30, 0x08	; 8
    26ea:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__epilogue_restores__+0x14>

000026ee <__clzsi2>:
    26ee:	af 92       	push	r10
    26f0:	bf 92       	push	r11
    26f2:	cf 92       	push	r12
    26f4:	df 92       	push	r13
    26f6:	ef 92       	push	r14
    26f8:	ff 92       	push	r15
    26fa:	0f 93       	push	r16
    26fc:	1f 93       	push	r17
    26fe:	7b 01       	movw	r14, r22
    2700:	8c 01       	movw	r16, r24
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	e8 16       	cp	r14, r24
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	f8 06       	cpc	r15, r24
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	08 07       	cpc	r16, r24
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	18 07       	cpc	r17, r24
    2712:	58 f4       	brcc	.+22     	; 0x272a <__clzsi2+0x3c>
    2714:	ef ef       	ldi	r30, 0xFF	; 255
    2716:	ee 16       	cp	r14, r30
    2718:	f1 04       	cpc	r15, r1
    271a:	01 05       	cpc	r16, r1
    271c:	11 05       	cpc	r17, r1
    271e:	09 f0       	breq	.+2      	; 0x2722 <__clzsi2+0x34>
    2720:	90 f4       	brcc	.+36     	; 0x2746 <__clzsi2+0x58>
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	dc 01       	movw	r26, r24
    2728:	17 c0       	rjmp	.+46     	; 0x2758 <__clzsi2+0x6a>
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	ef 16       	cp	r14, r31
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	ff 06       	cpc	r15, r31
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	0f 07       	cpc	r16, r31
    2736:	f1 e0       	ldi	r31, 0x01	; 1
    2738:	1f 07       	cpc	r17, r31
    273a:	50 f4       	brcc	.+20     	; 0x2750 <__clzsi2+0x62>
    273c:	80 e1       	ldi	r24, 0x10	; 16
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	a0 e0       	ldi	r26, 0x00	; 0
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	09 c0       	rjmp	.+18     	; 0x2758 <__clzsi2+0x6a>
    2746:	88 e0       	ldi	r24, 0x08	; 8
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	a0 e0       	ldi	r26, 0x00	; 0
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	04 c0       	rjmp	.+8      	; 0x2758 <__clzsi2+0x6a>
    2750:	88 e1       	ldi	r24, 0x18	; 24
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	a0 e0       	ldi	r26, 0x00	; 0
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	20 e2       	ldi	r18, 0x20	; 32
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e0       	ldi	r20, 0x00	; 0
    275e:	50 e0       	ldi	r21, 0x00	; 0
    2760:	28 1b       	sub	r18, r24
    2762:	39 0b       	sbc	r19, r25
    2764:	4a 0b       	sbc	r20, r26
    2766:	5b 0b       	sbc	r21, r27
    2768:	57 01       	movw	r10, r14
    276a:	68 01       	movw	r12, r16
    276c:	04 c0       	rjmp	.+8      	; 0x2776 <__clzsi2+0x88>
    276e:	d6 94       	lsr	r13
    2770:	c7 94       	ror	r12
    2772:	b7 94       	ror	r11
    2774:	a7 94       	ror	r10
    2776:	8a 95       	dec	r24
    2778:	d2 f7       	brpl	.-12     	; 0x276e <__clzsi2+0x80>
    277a:	d6 01       	movw	r26, r12
    277c:	c5 01       	movw	r24, r10
    277e:	8d 5c       	subi	r24, 0xCD	; 205
    2780:	9e 4f       	sbci	r25, 0xFE	; 254
    2782:	fc 01       	movw	r30, r24
    2784:	80 81       	ld	r24, Z
    2786:	28 1b       	sub	r18, r24
    2788:	31 09       	sbc	r19, r1
    278a:	41 09       	sbc	r20, r1
    278c:	51 09       	sbc	r21, r1
    278e:	c9 01       	movw	r24, r18
    2790:	1f 91       	pop	r17
    2792:	0f 91       	pop	r16
    2794:	ff 90       	pop	r15
    2796:	ef 90       	pop	r14
    2798:	df 90       	pop	r13
    279a:	cf 90       	pop	r12
    279c:	bf 90       	pop	r11
    279e:	af 90       	pop	r10
    27a0:	08 95       	ret

000027a2 <__pack_f>:
    27a2:	ef 92       	push	r14
    27a4:	ff 92       	push	r15
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	fc 01       	movw	r30, r24
    27b0:	24 81       	ldd	r18, Z+4	; 0x04
    27b2:	35 81       	ldd	r19, Z+5	; 0x05
    27b4:	46 81       	ldd	r20, Z+6	; 0x06
    27b6:	57 81       	ldd	r21, Z+7	; 0x07
    27b8:	61 81       	ldd	r22, Z+1	; 0x01
    27ba:	80 81       	ld	r24, Z
    27bc:	82 30       	cpi	r24, 0x02	; 2
    27be:	20 f4       	brcc	.+8      	; 0x27c8 <__pack_f+0x26>
    27c0:	40 61       	ori	r20, 0x10	; 16
    27c2:	ef ef       	ldi	r30, 0xFF	; 255
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	a3 c0       	rjmp	.+326    	; 0x290e <__pack_f+0x16c>
    27c8:	84 30       	cpi	r24, 0x04	; 4
    27ca:	09 f4       	brne	.+2      	; 0x27ce <__pack_f+0x2c>
    27cc:	9b c0       	rjmp	.+310    	; 0x2904 <__pack_f+0x162>
    27ce:	82 30       	cpi	r24, 0x02	; 2
    27d0:	09 f4       	brne	.+2      	; 0x27d4 <__pack_f+0x32>
    27d2:	92 c0       	rjmp	.+292    	; 0x28f8 <__pack_f+0x156>
    27d4:	21 15       	cp	r18, r1
    27d6:	31 05       	cpc	r19, r1
    27d8:	41 05       	cpc	r20, r1
    27da:	51 05       	cpc	r21, r1
    27dc:	09 f4       	brne	.+2      	; 0x27e0 <__pack_f+0x3e>
    27de:	8f c0       	rjmp	.+286    	; 0x28fe <__pack_f+0x15c>
    27e0:	02 80       	ldd	r0, Z+2	; 0x02
    27e2:	f3 81       	ldd	r31, Z+3	; 0x03
    27e4:	e0 2d       	mov	r30, r0
    27e6:	8f ef       	ldi	r24, 0xFF	; 255
    27e8:	e2 38       	cpi	r30, 0x82	; 130
    27ea:	f8 07       	cpc	r31, r24
    27ec:	0c f0       	brlt	.+2      	; 0x27f0 <__pack_f+0x4e>
    27ee:	5a c0       	rjmp	.+180    	; 0x28a4 <__pack_f+0x102>
    27f0:	c2 e8       	ldi	r28, 0x82	; 130
    27f2:	df ef       	ldi	r29, 0xFF	; 255
    27f4:	ce 1b       	sub	r28, r30
    27f6:	df 0b       	sbc	r29, r31
    27f8:	ca 31       	cpi	r28, 0x1A	; 26
    27fa:	d1 05       	cpc	r29, r1
    27fc:	6c f5       	brge	.+90     	; 0x2858 <__pack_f+0xb6>
    27fe:	79 01       	movw	r14, r18
    2800:	8a 01       	movw	r16, r20
    2802:	0c 2e       	mov	r0, r28
    2804:	04 c0       	rjmp	.+8      	; 0x280e <__pack_f+0x6c>
    2806:	16 95       	lsr	r17
    2808:	07 95       	ror	r16
    280a:	f7 94       	ror	r15
    280c:	e7 94       	ror	r14
    280e:	0a 94       	dec	r0
    2810:	d2 f7       	brpl	.-12     	; 0x2806 <__pack_f+0x64>
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	a0 e0       	ldi	r26, 0x00	; 0
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	0c 2e       	mov	r0, r28
    281c:	04 c0       	rjmp	.+8      	; 0x2826 <__pack_f+0x84>
    281e:	88 0f       	add	r24, r24
    2820:	99 1f       	adc	r25, r25
    2822:	aa 1f       	adc	r26, r26
    2824:	bb 1f       	adc	r27, r27
    2826:	0a 94       	dec	r0
    2828:	d2 f7       	brpl	.-12     	; 0x281e <__pack_f+0x7c>
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	a1 09       	sbc	r26, r1
    282e:	b1 09       	sbc	r27, r1
    2830:	82 23       	and	r24, r18
    2832:	93 23       	and	r25, r19
    2834:	a4 23       	and	r26, r20
    2836:	b5 23       	and	r27, r21
    2838:	21 e0       	ldi	r18, 0x01	; 1
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e0       	ldi	r20, 0x00	; 0
    283e:	50 e0       	ldi	r21, 0x00	; 0
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	a1 05       	cpc	r26, r1
    2844:	b1 05       	cpc	r27, r1
    2846:	19 f4       	brne	.+6      	; 0x284e <__pack_f+0xac>
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	a9 01       	movw	r20, r18
    284e:	2e 29       	or	r18, r14
    2850:	3f 29       	or	r19, r15
    2852:	40 2b       	or	r20, r16
    2854:	51 2b       	or	r21, r17
    2856:	03 c0       	rjmp	.+6      	; 0x285e <__pack_f+0xbc>
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	a9 01       	movw	r20, r18
    285e:	da 01       	movw	r26, r20
    2860:	c9 01       	movw	r24, r18
    2862:	8f 77       	andi	r24, 0x7F	; 127
    2864:	90 70       	andi	r25, 0x00	; 0
    2866:	a0 70       	andi	r26, 0x00	; 0
    2868:	b0 70       	andi	r27, 0x00	; 0
    286a:	80 34       	cpi	r24, 0x40	; 64
    286c:	91 05       	cpc	r25, r1
    286e:	a1 05       	cpc	r26, r1
    2870:	b1 05       	cpc	r27, r1
    2872:	39 f4       	brne	.+14     	; 0x2882 <__pack_f+0xe0>
    2874:	27 ff       	sbrs	r18, 7
    2876:	09 c0       	rjmp	.+18     	; 0x288a <__pack_f+0xe8>
    2878:	20 5c       	subi	r18, 0xC0	; 192
    287a:	3f 4f       	sbci	r19, 0xFF	; 255
    287c:	4f 4f       	sbci	r20, 0xFF	; 255
    287e:	5f 4f       	sbci	r21, 0xFF	; 255
    2880:	04 c0       	rjmp	.+8      	; 0x288a <__pack_f+0xe8>
    2882:	21 5c       	subi	r18, 0xC1	; 193
    2884:	3f 4f       	sbci	r19, 0xFF	; 255
    2886:	4f 4f       	sbci	r20, 0xFF	; 255
    2888:	5f 4f       	sbci	r21, 0xFF	; 255
    288a:	e1 e0       	ldi	r30, 0x01	; 1
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	20 30       	cpi	r18, 0x00	; 0
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	38 07       	cpc	r19, r24
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	48 07       	cpc	r20, r24
    2898:	80 e4       	ldi	r24, 0x40	; 64
    289a:	58 07       	cpc	r21, r24
    289c:	28 f5       	brcc	.+74     	; 0x28e8 <__pack_f+0x146>
    289e:	e0 e0       	ldi	r30, 0x00	; 0
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	22 c0       	rjmp	.+68     	; 0x28e8 <__pack_f+0x146>
    28a4:	e0 38       	cpi	r30, 0x80	; 128
    28a6:	f1 05       	cpc	r31, r1
    28a8:	6c f5       	brge	.+90     	; 0x2904 <__pack_f+0x162>
    28aa:	e1 58       	subi	r30, 0x81	; 129
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	da 01       	movw	r26, r20
    28b0:	c9 01       	movw	r24, r18
    28b2:	8f 77       	andi	r24, 0x7F	; 127
    28b4:	90 70       	andi	r25, 0x00	; 0
    28b6:	a0 70       	andi	r26, 0x00	; 0
    28b8:	b0 70       	andi	r27, 0x00	; 0
    28ba:	80 34       	cpi	r24, 0x40	; 64
    28bc:	91 05       	cpc	r25, r1
    28be:	a1 05       	cpc	r26, r1
    28c0:	b1 05       	cpc	r27, r1
    28c2:	39 f4       	brne	.+14     	; 0x28d2 <__pack_f+0x130>
    28c4:	27 ff       	sbrs	r18, 7
    28c6:	09 c0       	rjmp	.+18     	; 0x28da <__pack_f+0x138>
    28c8:	20 5c       	subi	r18, 0xC0	; 192
    28ca:	3f 4f       	sbci	r19, 0xFF	; 255
    28cc:	4f 4f       	sbci	r20, 0xFF	; 255
    28ce:	5f 4f       	sbci	r21, 0xFF	; 255
    28d0:	04 c0       	rjmp	.+8      	; 0x28da <__pack_f+0x138>
    28d2:	21 5c       	subi	r18, 0xC1	; 193
    28d4:	3f 4f       	sbci	r19, 0xFF	; 255
    28d6:	4f 4f       	sbci	r20, 0xFF	; 255
    28d8:	5f 4f       	sbci	r21, 0xFF	; 255
    28da:	57 ff       	sbrs	r21, 7
    28dc:	05 c0       	rjmp	.+10     	; 0x28e8 <__pack_f+0x146>
    28de:	56 95       	lsr	r21
    28e0:	47 95       	ror	r20
    28e2:	37 95       	ror	r19
    28e4:	27 95       	ror	r18
    28e6:	31 96       	adiw	r30, 0x01	; 1
    28e8:	87 e0       	ldi	r24, 0x07	; 7
    28ea:	56 95       	lsr	r21
    28ec:	47 95       	ror	r20
    28ee:	37 95       	ror	r19
    28f0:	27 95       	ror	r18
    28f2:	8a 95       	dec	r24
    28f4:	d1 f7       	brne	.-12     	; 0x28ea <__pack_f+0x148>
    28f6:	0b c0       	rjmp	.+22     	; 0x290e <__pack_f+0x16c>
    28f8:	e0 e0       	ldi	r30, 0x00	; 0
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	05 c0       	rjmp	.+10     	; 0x2908 <__pack_f+0x166>
    28fe:	e0 e0       	ldi	r30, 0x00	; 0
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	05 c0       	rjmp	.+10     	; 0x290e <__pack_f+0x16c>
    2904:	ef ef       	ldi	r30, 0xFF	; 255
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	a9 01       	movw	r20, r18
    290e:	8e 2f       	mov	r24, r30
    2910:	87 95       	ror	r24
    2912:	88 27       	eor	r24, r24
    2914:	87 95       	ror	r24
    2916:	94 2f       	mov	r25, r20
    2918:	9f 77       	andi	r25, 0x7F	; 127
    291a:	67 95       	ror	r22
    291c:	66 27       	eor	r22, r22
    291e:	67 95       	ror	r22
    2920:	e6 95       	lsr	r30
    2922:	e2 2e       	mov	r14, r18
    2924:	a9 2f       	mov	r26, r25
    2926:	a8 2b       	or	r26, r24
    2928:	fe 2f       	mov	r31, r30
    292a:	f6 2b       	or	r31, r22
    292c:	62 2f       	mov	r22, r18
    292e:	73 2f       	mov	r23, r19
    2930:	8a 2f       	mov	r24, r26
    2932:	9f 2f       	mov	r25, r31
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	e6 e0       	ldi	r30, 0x06	; 6
    293a:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__epilogue_restores__+0x18>

0000293e <__unpack_f>:
    293e:	dc 01       	movw	r26, r24
    2940:	fb 01       	movw	r30, r22
    2942:	2c 91       	ld	r18, X
    2944:	11 96       	adiw	r26, 0x01	; 1
    2946:	3c 91       	ld	r19, X
    2948:	11 97       	sbiw	r26, 0x01	; 1
    294a:	12 96       	adiw	r26, 0x02	; 2
    294c:	8c 91       	ld	r24, X
    294e:	12 97       	sbiw	r26, 0x02	; 2
    2950:	48 2f       	mov	r20, r24
    2952:	4f 77       	andi	r20, 0x7F	; 127
    2954:	50 e0       	ldi	r21, 0x00	; 0
    2956:	98 2f       	mov	r25, r24
    2958:	99 1f       	adc	r25, r25
    295a:	99 27       	eor	r25, r25
    295c:	99 1f       	adc	r25, r25
    295e:	13 96       	adiw	r26, 0x03	; 3
    2960:	6c 91       	ld	r22, X
    2962:	13 97       	sbiw	r26, 0x03	; 3
    2964:	86 2f       	mov	r24, r22
    2966:	88 0f       	add	r24, r24
    2968:	89 2b       	or	r24, r25
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	66 1f       	adc	r22, r22
    296e:	66 27       	eor	r22, r22
    2970:	66 1f       	adc	r22, r22
    2972:	61 83       	std	Z+1, r22	; 0x01
    2974:	00 97       	sbiw	r24, 0x00	; 0
    2976:	39 f5       	brne	.+78     	; 0x29c6 <__unpack_f+0x88>
    2978:	21 15       	cp	r18, r1
    297a:	31 05       	cpc	r19, r1
    297c:	41 05       	cpc	r20, r1
    297e:	51 05       	cpc	r21, r1
    2980:	11 f4       	brne	.+4      	; 0x2986 <__unpack_f+0x48>
    2982:	82 e0       	ldi	r24, 0x02	; 2
    2984:	29 c0       	rjmp	.+82     	; 0x29d8 <__unpack_f+0x9a>
    2986:	82 e8       	ldi	r24, 0x82	; 130
    2988:	9f ef       	ldi	r25, 0xFF	; 255
    298a:	93 83       	std	Z+3, r25	; 0x03
    298c:	82 83       	std	Z+2, r24	; 0x02
    298e:	67 e0       	ldi	r22, 0x07	; 7
    2990:	22 0f       	add	r18, r18
    2992:	33 1f       	adc	r19, r19
    2994:	44 1f       	adc	r20, r20
    2996:	55 1f       	adc	r21, r21
    2998:	6a 95       	dec	r22
    299a:	d1 f7       	brne	.-12     	; 0x2990 <__unpack_f+0x52>
    299c:	83 e0       	ldi	r24, 0x03	; 3
    299e:	80 83       	st	Z, r24
    29a0:	09 c0       	rjmp	.+18     	; 0x29b4 <__unpack_f+0x76>
    29a2:	22 0f       	add	r18, r18
    29a4:	33 1f       	adc	r19, r19
    29a6:	44 1f       	adc	r20, r20
    29a8:	55 1f       	adc	r21, r21
    29aa:	82 81       	ldd	r24, Z+2	; 0x02
    29ac:	93 81       	ldd	r25, Z+3	; 0x03
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	93 83       	std	Z+3, r25	; 0x03
    29b2:	82 83       	std	Z+2, r24	; 0x02
    29b4:	20 30       	cpi	r18, 0x00	; 0
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	38 07       	cpc	r19, r24
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	48 07       	cpc	r20, r24
    29be:	80 e4       	ldi	r24, 0x40	; 64
    29c0:	58 07       	cpc	r21, r24
    29c2:	78 f3       	brcs	.-34     	; 0x29a2 <__unpack_f+0x64>
    29c4:	20 c0       	rjmp	.+64     	; 0x2a06 <__unpack_f+0xc8>
    29c6:	8f 3f       	cpi	r24, 0xFF	; 255
    29c8:	91 05       	cpc	r25, r1
    29ca:	79 f4       	brne	.+30     	; 0x29ea <__unpack_f+0xac>
    29cc:	21 15       	cp	r18, r1
    29ce:	31 05       	cpc	r19, r1
    29d0:	41 05       	cpc	r20, r1
    29d2:	51 05       	cpc	r21, r1
    29d4:	19 f4       	brne	.+6      	; 0x29dc <__unpack_f+0x9e>
    29d6:	84 e0       	ldi	r24, 0x04	; 4
    29d8:	80 83       	st	Z, r24
    29da:	08 95       	ret
    29dc:	44 ff       	sbrs	r20, 4
    29de:	03 c0       	rjmp	.+6      	; 0x29e6 <__unpack_f+0xa8>
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	80 83       	st	Z, r24
    29e4:	10 c0       	rjmp	.+32     	; 0x2a06 <__unpack_f+0xc8>
    29e6:	10 82       	st	Z, r1
    29e8:	0e c0       	rjmp	.+28     	; 0x2a06 <__unpack_f+0xc8>
    29ea:	8f 57       	subi	r24, 0x7F	; 127
    29ec:	90 40       	sbci	r25, 0x00	; 0
    29ee:	93 83       	std	Z+3, r25	; 0x03
    29f0:	82 83       	std	Z+2, r24	; 0x02
    29f2:	83 e0       	ldi	r24, 0x03	; 3
    29f4:	80 83       	st	Z, r24
    29f6:	87 e0       	ldi	r24, 0x07	; 7
    29f8:	22 0f       	add	r18, r18
    29fa:	33 1f       	adc	r19, r19
    29fc:	44 1f       	adc	r20, r20
    29fe:	55 1f       	adc	r21, r21
    2a00:	8a 95       	dec	r24
    2a02:	d1 f7       	brne	.-12     	; 0x29f8 <__unpack_f+0xba>
    2a04:	50 64       	ori	r21, 0x40	; 64
    2a06:	24 83       	std	Z+4, r18	; 0x04
    2a08:	35 83       	std	Z+5, r19	; 0x05
    2a0a:	46 83       	std	Z+6, r20	; 0x06
    2a0c:	57 83       	std	Z+7, r21	; 0x07
    2a0e:	08 95       	ret

00002a10 <__fpcmp_parts_f>:
    2a10:	fc 01       	movw	r30, r24
    2a12:	db 01       	movw	r26, r22
    2a14:	90 81       	ld	r25, Z
    2a16:	92 30       	cpi	r25, 0x02	; 2
    2a18:	08 f4       	brcc	.+2      	; 0x2a1c <__fpcmp_parts_f+0xc>
    2a1a:	49 c0       	rjmp	.+146    	; 0x2aae <__fpcmp_parts_f+0x9e>
    2a1c:	8c 91       	ld	r24, X
    2a1e:	82 30       	cpi	r24, 0x02	; 2
    2a20:	08 f4       	brcc	.+2      	; 0x2a24 <__fpcmp_parts_f+0x14>
    2a22:	45 c0       	rjmp	.+138    	; 0x2aae <__fpcmp_parts_f+0x9e>
    2a24:	94 30       	cpi	r25, 0x04	; 4
    2a26:	51 f4       	brne	.+20     	; 0x2a3c <__fpcmp_parts_f+0x2c>
    2a28:	61 81       	ldd	r22, Z+1	; 0x01
    2a2a:	84 30       	cpi	r24, 0x04	; 4
    2a2c:	b1 f5       	brne	.+108    	; 0x2a9a <__fpcmp_parts_f+0x8a>
    2a2e:	11 96       	adiw	r26, 0x01	; 1
    2a30:	2c 91       	ld	r18, X
    2a32:	11 97       	sbiw	r26, 0x01	; 1
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	26 1b       	sub	r18, r22
    2a38:	31 09       	sbc	r19, r1
    2a3a:	41 c0       	rjmp	.+130    	; 0x2abe <__fpcmp_parts_f+0xae>
    2a3c:	84 30       	cpi	r24, 0x04	; 4
    2a3e:	21 f0       	breq	.+8      	; 0x2a48 <__fpcmp_parts_f+0x38>
    2a40:	92 30       	cpi	r25, 0x02	; 2
    2a42:	41 f4       	brne	.+16     	; 0x2a54 <__fpcmp_parts_f+0x44>
    2a44:	82 30       	cpi	r24, 0x02	; 2
    2a46:	b1 f1       	breq	.+108    	; 0x2ab4 <__fpcmp_parts_f+0xa4>
    2a48:	11 96       	adiw	r26, 0x01	; 1
    2a4a:	8c 91       	ld	r24, X
    2a4c:	11 97       	sbiw	r26, 0x01	; 1
    2a4e:	88 23       	and	r24, r24
    2a50:	a1 f1       	breq	.+104    	; 0x2aba <__fpcmp_parts_f+0xaa>
    2a52:	2d c0       	rjmp	.+90     	; 0x2aae <__fpcmp_parts_f+0x9e>
    2a54:	61 81       	ldd	r22, Z+1	; 0x01
    2a56:	82 30       	cpi	r24, 0x02	; 2
    2a58:	01 f1       	breq	.+64     	; 0x2a9a <__fpcmp_parts_f+0x8a>
    2a5a:	11 96       	adiw	r26, 0x01	; 1
    2a5c:	8c 91       	ld	r24, X
    2a5e:	11 97       	sbiw	r26, 0x01	; 1
    2a60:	68 17       	cp	r22, r24
    2a62:	d9 f4       	brne	.+54     	; 0x2a9a <__fpcmp_parts_f+0x8a>
    2a64:	22 81       	ldd	r18, Z+2	; 0x02
    2a66:	33 81       	ldd	r19, Z+3	; 0x03
    2a68:	12 96       	adiw	r26, 0x02	; 2
    2a6a:	8d 91       	ld	r24, X+
    2a6c:	9c 91       	ld	r25, X
    2a6e:	13 97       	sbiw	r26, 0x03	; 3
    2a70:	82 17       	cp	r24, r18
    2a72:	93 07       	cpc	r25, r19
    2a74:	94 f0       	brlt	.+36     	; 0x2a9a <__fpcmp_parts_f+0x8a>
    2a76:	28 17       	cp	r18, r24
    2a78:	39 07       	cpc	r19, r25
    2a7a:	bc f0       	brlt	.+46     	; 0x2aaa <__fpcmp_parts_f+0x9a>
    2a7c:	24 81       	ldd	r18, Z+4	; 0x04
    2a7e:	35 81       	ldd	r19, Z+5	; 0x05
    2a80:	46 81       	ldd	r20, Z+6	; 0x06
    2a82:	57 81       	ldd	r21, Z+7	; 0x07
    2a84:	14 96       	adiw	r26, 0x04	; 4
    2a86:	8d 91       	ld	r24, X+
    2a88:	9d 91       	ld	r25, X+
    2a8a:	0d 90       	ld	r0, X+
    2a8c:	bc 91       	ld	r27, X
    2a8e:	a0 2d       	mov	r26, r0
    2a90:	82 17       	cp	r24, r18
    2a92:	93 07       	cpc	r25, r19
    2a94:	a4 07       	cpc	r26, r20
    2a96:	b5 07       	cpc	r27, r21
    2a98:	18 f4       	brcc	.+6      	; 0x2aa0 <__fpcmp_parts_f+0x90>
    2a9a:	66 23       	and	r22, r22
    2a9c:	41 f0       	breq	.+16     	; 0x2aae <__fpcmp_parts_f+0x9e>
    2a9e:	0d c0       	rjmp	.+26     	; 0x2aba <__fpcmp_parts_f+0xaa>
    2aa0:	28 17       	cp	r18, r24
    2aa2:	39 07       	cpc	r19, r25
    2aa4:	4a 07       	cpc	r20, r26
    2aa6:	5b 07       	cpc	r21, r27
    2aa8:	28 f4       	brcc	.+10     	; 0x2ab4 <__fpcmp_parts_f+0xa4>
    2aaa:	66 23       	and	r22, r22
    2aac:	31 f0       	breq	.+12     	; 0x2aba <__fpcmp_parts_f+0xaa>
    2aae:	21 e0       	ldi	r18, 0x01	; 1
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	05 c0       	rjmp	.+10     	; 0x2abe <__fpcmp_parts_f+0xae>
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	02 c0       	rjmp	.+4      	; 0x2abe <__fpcmp_parts_f+0xae>
    2aba:	2f ef       	ldi	r18, 0xFF	; 255
    2abc:	3f ef       	ldi	r19, 0xFF	; 255
    2abe:	c9 01       	movw	r24, r18
    2ac0:	08 95       	ret

00002ac2 <__udivmodqi4>:
    2ac2:	99 1b       	sub	r25, r25
    2ac4:	79 e0       	ldi	r23, 0x09	; 9
    2ac6:	04 c0       	rjmp	.+8      	; 0x2ad0 <__udivmodqi4_ep>

00002ac8 <__udivmodqi4_loop>:
    2ac8:	99 1f       	adc	r25, r25
    2aca:	96 17       	cp	r25, r22
    2acc:	08 f0       	brcs	.+2      	; 0x2ad0 <__udivmodqi4_ep>
    2ace:	96 1b       	sub	r25, r22

00002ad0 <__udivmodqi4_ep>:
    2ad0:	88 1f       	adc	r24, r24
    2ad2:	7a 95       	dec	r23
    2ad4:	c9 f7       	brne	.-14     	; 0x2ac8 <__udivmodqi4_loop>
    2ad6:	80 95       	com	r24
    2ad8:	08 95       	ret

00002ada <__prologue_saves__>:
    2ada:	2f 92       	push	r2
    2adc:	3f 92       	push	r3
    2ade:	4f 92       	push	r4
    2ae0:	5f 92       	push	r5
    2ae2:	6f 92       	push	r6
    2ae4:	7f 92       	push	r7
    2ae6:	8f 92       	push	r8
    2ae8:	9f 92       	push	r9
    2aea:	af 92       	push	r10
    2aec:	bf 92       	push	r11
    2aee:	cf 92       	push	r12
    2af0:	df 92       	push	r13
    2af2:	ef 92       	push	r14
    2af4:	ff 92       	push	r15
    2af6:	0f 93       	push	r16
    2af8:	1f 93       	push	r17
    2afa:	cf 93       	push	r28
    2afc:	df 93       	push	r29
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	ca 1b       	sub	r28, r26
    2b04:	db 0b       	sbc	r29, r27
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	09 94       	ijmp

00002b12 <__epilogue_restores__>:
    2b12:	2a 88       	ldd	r2, Y+18	; 0x12
    2b14:	39 88       	ldd	r3, Y+17	; 0x11
    2b16:	48 88       	ldd	r4, Y+16	; 0x10
    2b18:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b1a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b1c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b1e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b20:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b22:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b24:	b9 84       	ldd	r11, Y+9	; 0x09
    2b26:	c8 84       	ldd	r12, Y+8	; 0x08
    2b28:	df 80       	ldd	r13, Y+7	; 0x07
    2b2a:	ee 80       	ldd	r14, Y+6	; 0x06
    2b2c:	fd 80       	ldd	r15, Y+5	; 0x05
    2b2e:	0c 81       	ldd	r16, Y+4	; 0x04
    2b30:	1b 81       	ldd	r17, Y+3	; 0x03
    2b32:	aa 81       	ldd	r26, Y+2	; 0x02
    2b34:	b9 81       	ldd	r27, Y+1	; 0x01
    2b36:	ce 0f       	add	r28, r30
    2b38:	d1 1d       	adc	r29, r1
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	ed 01       	movw	r28, r26
    2b46:	08 95       	ret

00002b48 <cos>:
    2b48:	03 d0       	rcall	.+6      	; 0x2b50 <__fp_rempio2>
    2b4a:	e3 95       	inc	r30
    2b4c:	28 c0       	rjmp	.+80     	; 0x2b9e <__fp_sinus>
    2b4e:	ce c0       	rjmp	.+412    	; 0x2cec <__fp_nan>

00002b50 <__fp_rempio2>:
    2b50:	3f d0       	rcall	.+126    	; 0x2bd0 <__fp_splitA>
    2b52:	e8 f3       	brcs	.-6      	; 0x2b4e <cos+0x6>
    2b54:	e8 94       	clt
    2b56:	e0 e0       	ldi	r30, 0x00	; 0
    2b58:	bb 27       	eor	r27, r27
    2b5a:	9f 57       	subi	r25, 0x7F	; 127
    2b5c:	f0 f0       	brcs	.+60     	; 0x2b9a <__fp_rempio2+0x4a>
    2b5e:	2a ed       	ldi	r18, 0xDA	; 218
    2b60:	3f e0       	ldi	r19, 0x0F	; 15
    2b62:	49 ec       	ldi	r20, 0xC9	; 201
    2b64:	06 c0       	rjmp	.+12     	; 0x2b72 <__fp_rempio2+0x22>
    2b66:	ee 0f       	add	r30, r30
    2b68:	bb 0f       	add	r27, r27
    2b6a:	66 1f       	adc	r22, r22
    2b6c:	77 1f       	adc	r23, r23
    2b6e:	88 1f       	adc	r24, r24
    2b70:	28 f0       	brcs	.+10     	; 0x2b7c <__fp_rempio2+0x2c>
    2b72:	b2 3a       	cpi	r27, 0xA2	; 162
    2b74:	62 07       	cpc	r22, r18
    2b76:	73 07       	cpc	r23, r19
    2b78:	84 07       	cpc	r24, r20
    2b7a:	28 f0       	brcs	.+10     	; 0x2b86 <__fp_rempio2+0x36>
    2b7c:	b2 5a       	subi	r27, 0xA2	; 162
    2b7e:	62 0b       	sbc	r22, r18
    2b80:	73 0b       	sbc	r23, r19
    2b82:	84 0b       	sbc	r24, r20
    2b84:	e3 95       	inc	r30
    2b86:	9a 95       	dec	r25
    2b88:	72 f7       	brpl	.-36     	; 0x2b66 <__fp_rempio2+0x16>
    2b8a:	80 38       	cpi	r24, 0x80	; 128
    2b8c:	30 f4       	brcc	.+12     	; 0x2b9a <__fp_rempio2+0x4a>
    2b8e:	9a 95       	dec	r25
    2b90:	bb 0f       	add	r27, r27
    2b92:	66 1f       	adc	r22, r22
    2b94:	77 1f       	adc	r23, r23
    2b96:	88 1f       	adc	r24, r24
    2b98:	d2 f7       	brpl	.-12     	; 0x2b8e <__fp_rempio2+0x3e>
    2b9a:	90 48       	sbci	r25, 0x80	; 128
    2b9c:	9b c0       	rjmp	.+310    	; 0x2cd4 <__fp_mpack_finite>

00002b9e <__fp_sinus>:
    2b9e:	ef 93       	push	r30
    2ba0:	e0 ff       	sbrs	r30, 0
    2ba2:	06 c0       	rjmp	.+12     	; 0x2bb0 <__fp_sinus+0x12>
    2ba4:	a2 ea       	ldi	r26, 0xA2	; 162
    2ba6:	2a ed       	ldi	r18, 0xDA	; 218
    2ba8:	3f e0       	ldi	r19, 0x0F	; 15
    2baa:	49 ec       	ldi	r20, 0xC9	; 201
    2bac:	5f eb       	ldi	r21, 0xBF	; 191
    2bae:	37 d0       	rcall	.+110    	; 0x2c1e <__addsf3x>
    2bb0:	bf d0       	rcall	.+382    	; 0x2d30 <__fp_round>
    2bb2:	0f 90       	pop	r0
    2bb4:	03 94       	inc	r0
    2bb6:	01 fc       	sbrc	r0, 1
    2bb8:	90 58       	subi	r25, 0x80	; 128
    2bba:	ec e8       	ldi	r30, 0x8C	; 140
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	99 c0       	rjmp	.+306    	; 0x2cf2 <__fp_powsodd>

00002bc0 <__fp_split3>:
    2bc0:	57 fd       	sbrc	r21, 7
    2bc2:	90 58       	subi	r25, 0x80	; 128
    2bc4:	44 0f       	add	r20, r20
    2bc6:	55 1f       	adc	r21, r21
    2bc8:	59 f0       	breq	.+22     	; 0x2be0 <__fp_splitA+0x10>
    2bca:	5f 3f       	cpi	r21, 0xFF	; 255
    2bcc:	71 f0       	breq	.+28     	; 0x2bea <__fp_splitA+0x1a>
    2bce:	47 95       	ror	r20

00002bd0 <__fp_splitA>:
    2bd0:	88 0f       	add	r24, r24
    2bd2:	97 fb       	bst	r25, 7
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	61 f0       	breq	.+24     	; 0x2bf0 <__fp_splitA+0x20>
    2bd8:	9f 3f       	cpi	r25, 0xFF	; 255
    2bda:	79 f0       	breq	.+30     	; 0x2bfa <__fp_splitA+0x2a>
    2bdc:	87 95       	ror	r24
    2bde:	08 95       	ret
    2be0:	12 16       	cp	r1, r18
    2be2:	13 06       	cpc	r1, r19
    2be4:	14 06       	cpc	r1, r20
    2be6:	55 1f       	adc	r21, r21
    2be8:	f2 cf       	rjmp	.-28     	; 0x2bce <__fp_split3+0xe>
    2bea:	46 95       	lsr	r20
    2bec:	f1 df       	rcall	.-30     	; 0x2bd0 <__fp_splitA>
    2bee:	08 c0       	rjmp	.+16     	; 0x2c00 <__fp_splitA+0x30>
    2bf0:	16 16       	cp	r1, r22
    2bf2:	17 06       	cpc	r1, r23
    2bf4:	18 06       	cpc	r1, r24
    2bf6:	99 1f       	adc	r25, r25
    2bf8:	f1 cf       	rjmp	.-30     	; 0x2bdc <__fp_splitA+0xc>
    2bfa:	86 95       	lsr	r24
    2bfc:	71 05       	cpc	r23, r1
    2bfe:	61 05       	cpc	r22, r1
    2c00:	08 94       	sec
    2c02:	08 95       	ret
    2c04:	87 d0       	rcall	.+270    	; 0x2d14 <__fp_pscA>
    2c06:	30 f0       	brcs	.+12     	; 0x2c14 <__fp_splitA+0x44>
    2c08:	8c d0       	rcall	.+280    	; 0x2d22 <__fp_pscB>
    2c0a:	20 f0       	brcs	.+8      	; 0x2c14 <__fp_splitA+0x44>
    2c0c:	31 f4       	brne	.+12     	; 0x2c1a <__fp_splitA+0x4a>
    2c0e:	9f 3f       	cpi	r25, 0xFF	; 255
    2c10:	11 f4       	brne	.+4      	; 0x2c16 <__fp_splitA+0x46>
    2c12:	1e f4       	brtc	.+6      	; 0x2c1a <__fp_splitA+0x4a>
    2c14:	6b c0       	rjmp	.+214    	; 0x2cec <__fp_nan>
    2c16:	0e f4       	brtc	.+2      	; 0x2c1a <__fp_splitA+0x4a>
    2c18:	e0 95       	com	r30
    2c1a:	e7 fb       	bst	r30, 7
    2c1c:	53 c0       	rjmp	.+166    	; 0x2cc4 <__fp_inf>

00002c1e <__addsf3x>:
    2c1e:	e9 2f       	mov	r30, r25
    2c20:	cf df       	rcall	.-98     	; 0x2bc0 <__fp_split3>
    2c22:	80 f3       	brcs	.-32     	; 0x2c04 <__fp_splitA+0x34>
    2c24:	ba 17       	cp	r27, r26
    2c26:	62 07       	cpc	r22, r18
    2c28:	73 07       	cpc	r23, r19
    2c2a:	84 07       	cpc	r24, r20
    2c2c:	95 07       	cpc	r25, r21
    2c2e:	18 f0       	brcs	.+6      	; 0x2c36 <__addsf3x+0x18>
    2c30:	71 f4       	brne	.+28     	; 0x2c4e <__addsf3x+0x30>
    2c32:	9e f5       	brtc	.+102    	; 0x2c9a <__addsf3x+0x7c>
    2c34:	8e c0       	rjmp	.+284    	; 0x2d52 <__fp_zero>
    2c36:	0e f4       	brtc	.+2      	; 0x2c3a <__addsf3x+0x1c>
    2c38:	e0 95       	com	r30
    2c3a:	0b 2e       	mov	r0, r27
    2c3c:	ba 2f       	mov	r27, r26
    2c3e:	a0 2d       	mov	r26, r0
    2c40:	0b 01       	movw	r0, r22
    2c42:	b9 01       	movw	r22, r18
    2c44:	90 01       	movw	r18, r0
    2c46:	0c 01       	movw	r0, r24
    2c48:	ca 01       	movw	r24, r20
    2c4a:	a0 01       	movw	r20, r0
    2c4c:	11 24       	eor	r1, r1
    2c4e:	ff 27       	eor	r31, r31
    2c50:	59 1b       	sub	r21, r25
    2c52:	99 f0       	breq	.+38     	; 0x2c7a <__addsf3x+0x5c>
    2c54:	59 3f       	cpi	r21, 0xF9	; 249
    2c56:	50 f4       	brcc	.+20     	; 0x2c6c <__addsf3x+0x4e>
    2c58:	50 3e       	cpi	r21, 0xE0	; 224
    2c5a:	68 f1       	brcs	.+90     	; 0x2cb6 <__addsf3x+0x98>
    2c5c:	1a 16       	cp	r1, r26
    2c5e:	f0 40       	sbci	r31, 0x00	; 0
    2c60:	a2 2f       	mov	r26, r18
    2c62:	23 2f       	mov	r18, r19
    2c64:	34 2f       	mov	r19, r20
    2c66:	44 27       	eor	r20, r20
    2c68:	58 5f       	subi	r21, 0xF8	; 248
    2c6a:	f3 cf       	rjmp	.-26     	; 0x2c52 <__addsf3x+0x34>
    2c6c:	46 95       	lsr	r20
    2c6e:	37 95       	ror	r19
    2c70:	27 95       	ror	r18
    2c72:	a7 95       	ror	r26
    2c74:	f0 40       	sbci	r31, 0x00	; 0
    2c76:	53 95       	inc	r21
    2c78:	c9 f7       	brne	.-14     	; 0x2c6c <__addsf3x+0x4e>
    2c7a:	7e f4       	brtc	.+30     	; 0x2c9a <__addsf3x+0x7c>
    2c7c:	1f 16       	cp	r1, r31
    2c7e:	ba 0b       	sbc	r27, r26
    2c80:	62 0b       	sbc	r22, r18
    2c82:	73 0b       	sbc	r23, r19
    2c84:	84 0b       	sbc	r24, r20
    2c86:	ba f0       	brmi	.+46     	; 0x2cb6 <__addsf3x+0x98>
    2c88:	91 50       	subi	r25, 0x01	; 1
    2c8a:	a1 f0       	breq	.+40     	; 0x2cb4 <__addsf3x+0x96>
    2c8c:	ff 0f       	add	r31, r31
    2c8e:	bb 1f       	adc	r27, r27
    2c90:	66 1f       	adc	r22, r22
    2c92:	77 1f       	adc	r23, r23
    2c94:	88 1f       	adc	r24, r24
    2c96:	c2 f7       	brpl	.-16     	; 0x2c88 <__addsf3x+0x6a>
    2c98:	0e c0       	rjmp	.+28     	; 0x2cb6 <__addsf3x+0x98>
    2c9a:	ba 0f       	add	r27, r26
    2c9c:	62 1f       	adc	r22, r18
    2c9e:	73 1f       	adc	r23, r19
    2ca0:	84 1f       	adc	r24, r20
    2ca2:	48 f4       	brcc	.+18     	; 0x2cb6 <__addsf3x+0x98>
    2ca4:	87 95       	ror	r24
    2ca6:	77 95       	ror	r23
    2ca8:	67 95       	ror	r22
    2caa:	b7 95       	ror	r27
    2cac:	f7 95       	ror	r31
    2cae:	9e 3f       	cpi	r25, 0xFE	; 254
    2cb0:	08 f0       	brcs	.+2      	; 0x2cb4 <__addsf3x+0x96>
    2cb2:	b3 cf       	rjmp	.-154    	; 0x2c1a <__fp_splitA+0x4a>
    2cb4:	93 95       	inc	r25
    2cb6:	88 0f       	add	r24, r24
    2cb8:	08 f0       	brcs	.+2      	; 0x2cbc <__addsf3x+0x9e>
    2cba:	99 27       	eor	r25, r25
    2cbc:	ee 0f       	add	r30, r30
    2cbe:	97 95       	ror	r25
    2cc0:	87 95       	ror	r24
    2cc2:	08 95       	ret

00002cc4 <__fp_inf>:
    2cc4:	97 f9       	bld	r25, 7
    2cc6:	9f 67       	ori	r25, 0x7F	; 127
    2cc8:	80 e8       	ldi	r24, 0x80	; 128
    2cca:	70 e0       	ldi	r23, 0x00	; 0
    2ccc:	60 e0       	ldi	r22, 0x00	; 0
    2cce:	08 95       	ret

00002cd0 <__fp_mpack>:
    2cd0:	9f 3f       	cpi	r25, 0xFF	; 255
    2cd2:	31 f0       	breq	.+12     	; 0x2ce0 <__fp_mpack_finite+0xc>

00002cd4 <__fp_mpack_finite>:
    2cd4:	91 50       	subi	r25, 0x01	; 1
    2cd6:	20 f4       	brcc	.+8      	; 0x2ce0 <__fp_mpack_finite+0xc>
    2cd8:	87 95       	ror	r24
    2cda:	77 95       	ror	r23
    2cdc:	67 95       	ror	r22
    2cde:	b7 95       	ror	r27
    2ce0:	88 0f       	add	r24, r24
    2ce2:	91 1d       	adc	r25, r1
    2ce4:	96 95       	lsr	r25
    2ce6:	87 95       	ror	r24
    2ce8:	97 f9       	bld	r25, 7
    2cea:	08 95       	ret

00002cec <__fp_nan>:
    2cec:	9f ef       	ldi	r25, 0xFF	; 255
    2cee:	80 ec       	ldi	r24, 0xC0	; 192
    2cf0:	08 95       	ret

00002cf2 <__fp_powsodd>:
    2cf2:	9f 93       	push	r25
    2cf4:	8f 93       	push	r24
    2cf6:	7f 93       	push	r23
    2cf8:	6f 93       	push	r22
    2cfa:	ff 93       	push	r31
    2cfc:	ef 93       	push	r30
    2cfe:	9b 01       	movw	r18, r22
    2d00:	ac 01       	movw	r20, r24
    2d02:	11 da       	rcall	.-3038   	; 0x2126 <__mulsf3>
    2d04:	ef 91       	pop	r30
    2d06:	ff 91       	pop	r31
    2d08:	2b d0       	rcall	.+86     	; 0x2d60 <__fp_powser>
    2d0a:	2f 91       	pop	r18
    2d0c:	3f 91       	pop	r19
    2d0e:	4f 91       	pop	r20
    2d10:	5f 91       	pop	r21
    2d12:	09 ca       	rjmp	.-3054   	; 0x2126 <__mulsf3>

00002d14 <__fp_pscA>:
    2d14:	00 24       	eor	r0, r0
    2d16:	0a 94       	dec	r0
    2d18:	16 16       	cp	r1, r22
    2d1a:	17 06       	cpc	r1, r23
    2d1c:	18 06       	cpc	r1, r24
    2d1e:	09 06       	cpc	r0, r25
    2d20:	08 95       	ret

00002d22 <__fp_pscB>:
    2d22:	00 24       	eor	r0, r0
    2d24:	0a 94       	dec	r0
    2d26:	12 16       	cp	r1, r18
    2d28:	13 06       	cpc	r1, r19
    2d2a:	14 06       	cpc	r1, r20
    2d2c:	05 06       	cpc	r0, r21
    2d2e:	08 95       	ret

00002d30 <__fp_round>:
    2d30:	09 2e       	mov	r0, r25
    2d32:	03 94       	inc	r0
    2d34:	00 0c       	add	r0, r0
    2d36:	11 f4       	brne	.+4      	; 0x2d3c <__fp_round+0xc>
    2d38:	88 23       	and	r24, r24
    2d3a:	52 f0       	brmi	.+20     	; 0x2d50 <__fp_round+0x20>
    2d3c:	bb 0f       	add	r27, r27
    2d3e:	40 f4       	brcc	.+16     	; 0x2d50 <__fp_round+0x20>
    2d40:	bf 2b       	or	r27, r31
    2d42:	11 f4       	brne	.+4      	; 0x2d48 <__fp_round+0x18>
    2d44:	60 ff       	sbrs	r22, 0
    2d46:	04 c0       	rjmp	.+8      	; 0x2d50 <__fp_round+0x20>
    2d48:	6f 5f       	subi	r22, 0xFF	; 255
    2d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d4c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d50:	08 95       	ret

00002d52 <__fp_zero>:
    2d52:	e8 94       	clt

00002d54 <__fp_szero>:
    2d54:	bb 27       	eor	r27, r27
    2d56:	66 27       	eor	r22, r22
    2d58:	77 27       	eor	r23, r23
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	97 f9       	bld	r25, 7
    2d5e:	08 95       	ret

00002d60 <__fp_powser>:
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	1f 93       	push	r17
    2d66:	0f 93       	push	r16
    2d68:	ff 92       	push	r15
    2d6a:	ef 92       	push	r14
    2d6c:	df 92       	push	r13
    2d6e:	7b 01       	movw	r14, r22
    2d70:	8c 01       	movw	r16, r24
    2d72:	68 94       	set
    2d74:	05 c0       	rjmp	.+10     	; 0x2d80 <__fp_powser+0x20>
    2d76:	da 2e       	mov	r13, r26
    2d78:	ef 01       	movw	r28, r30
    2d7a:	21 d0       	rcall	.+66     	; 0x2dbe <__mulsf3x>
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	e8 94       	clt
    2d80:	a5 91       	lpm	r26, Z+
    2d82:	25 91       	lpm	r18, Z+
    2d84:	35 91       	lpm	r19, Z+
    2d86:	45 91       	lpm	r20, Z+
    2d88:	55 91       	lpm	r21, Z+
    2d8a:	ae f3       	brts	.-22     	; 0x2d76 <__fp_powser+0x16>
    2d8c:	ef 01       	movw	r28, r30
    2d8e:	47 df       	rcall	.-370    	; 0x2c1e <__addsf3x>
    2d90:	fe 01       	movw	r30, r28
    2d92:	97 01       	movw	r18, r14
    2d94:	a8 01       	movw	r20, r16
    2d96:	da 94       	dec	r13
    2d98:	79 f7       	brne	.-34     	; 0x2d78 <__fp_powser+0x18>
    2d9a:	df 90       	pop	r13
    2d9c:	ef 90       	pop	r14
    2d9e:	ff 90       	pop	r15
    2da0:	0f 91       	pop	r16
    2da2:	1f 91       	pop	r17
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	08 95       	ret
    2daa:	b4 df       	rcall	.-152    	; 0x2d14 <__fp_pscA>
    2dac:	28 f0       	brcs	.+10     	; 0x2db8 <__fp_powser+0x58>
    2dae:	b9 df       	rcall	.-142    	; 0x2d22 <__fp_pscB>
    2db0:	18 f0       	brcs	.+6      	; 0x2db8 <__fp_powser+0x58>
    2db2:	95 23       	and	r25, r21
    2db4:	09 f0       	breq	.+2      	; 0x2db8 <__fp_powser+0x58>
    2db6:	86 cf       	rjmp	.-244    	; 0x2cc4 <__fp_inf>
    2db8:	99 cf       	rjmp	.-206    	; 0x2cec <__fp_nan>
    2dba:	11 24       	eor	r1, r1
    2dbc:	cb cf       	rjmp	.-106    	; 0x2d54 <__fp_szero>

00002dbe <__mulsf3x>:
    2dbe:	00 df       	rcall	.-512    	; 0x2bc0 <__fp_split3>
    2dc0:	a0 f3       	brcs	.-24     	; 0x2daa <__fp_powser+0x4a>

00002dc2 <__mulsf3_pse>:
    2dc2:	95 9f       	mul	r25, r21
    2dc4:	d1 f3       	breq	.-12     	; 0x2dba <__fp_powser+0x5a>
    2dc6:	95 0f       	add	r25, r21
    2dc8:	50 e0       	ldi	r21, 0x00	; 0
    2dca:	55 1f       	adc	r21, r21
    2dcc:	62 9f       	mul	r22, r18
    2dce:	f0 01       	movw	r30, r0
    2dd0:	72 9f       	mul	r23, r18
    2dd2:	bb 27       	eor	r27, r27
    2dd4:	f0 0d       	add	r31, r0
    2dd6:	b1 1d       	adc	r27, r1
    2dd8:	63 9f       	mul	r22, r19
    2dda:	aa 27       	eor	r26, r26
    2ddc:	f0 0d       	add	r31, r0
    2dde:	b1 1d       	adc	r27, r1
    2de0:	aa 1f       	adc	r26, r26
    2de2:	64 9f       	mul	r22, r20
    2de4:	66 27       	eor	r22, r22
    2de6:	b0 0d       	add	r27, r0
    2de8:	a1 1d       	adc	r26, r1
    2dea:	66 1f       	adc	r22, r22
    2dec:	82 9f       	mul	r24, r18
    2dee:	22 27       	eor	r18, r18
    2df0:	b0 0d       	add	r27, r0
    2df2:	a1 1d       	adc	r26, r1
    2df4:	62 1f       	adc	r22, r18
    2df6:	73 9f       	mul	r23, r19
    2df8:	b0 0d       	add	r27, r0
    2dfa:	a1 1d       	adc	r26, r1
    2dfc:	62 1f       	adc	r22, r18
    2dfe:	83 9f       	mul	r24, r19
    2e00:	a0 0d       	add	r26, r0
    2e02:	61 1d       	adc	r22, r1
    2e04:	22 1f       	adc	r18, r18
    2e06:	74 9f       	mul	r23, r20
    2e08:	33 27       	eor	r19, r19
    2e0a:	a0 0d       	add	r26, r0
    2e0c:	61 1d       	adc	r22, r1
    2e0e:	23 1f       	adc	r18, r19
    2e10:	84 9f       	mul	r24, r20
    2e12:	60 0d       	add	r22, r0
    2e14:	21 1d       	adc	r18, r1
    2e16:	82 2f       	mov	r24, r18
    2e18:	76 2f       	mov	r23, r22
    2e1a:	6a 2f       	mov	r22, r26
    2e1c:	11 24       	eor	r1, r1
    2e1e:	9f 57       	subi	r25, 0x7F	; 127
    2e20:	50 40       	sbci	r21, 0x00	; 0
    2e22:	8a f0       	brmi	.+34     	; 0x2e46 <__mulsf3_pse+0x84>
    2e24:	e1 f0       	breq	.+56     	; 0x2e5e <__mulsf3_pse+0x9c>
    2e26:	88 23       	and	r24, r24
    2e28:	4a f0       	brmi	.+18     	; 0x2e3c <__mulsf3_pse+0x7a>
    2e2a:	ee 0f       	add	r30, r30
    2e2c:	ff 1f       	adc	r31, r31
    2e2e:	bb 1f       	adc	r27, r27
    2e30:	66 1f       	adc	r22, r22
    2e32:	77 1f       	adc	r23, r23
    2e34:	88 1f       	adc	r24, r24
    2e36:	91 50       	subi	r25, 0x01	; 1
    2e38:	50 40       	sbci	r21, 0x00	; 0
    2e3a:	a9 f7       	brne	.-22     	; 0x2e26 <__mulsf3_pse+0x64>
    2e3c:	9e 3f       	cpi	r25, 0xFE	; 254
    2e3e:	51 05       	cpc	r21, r1
    2e40:	70 f0       	brcs	.+28     	; 0x2e5e <__mulsf3_pse+0x9c>
    2e42:	40 cf       	rjmp	.-384    	; 0x2cc4 <__fp_inf>
    2e44:	87 cf       	rjmp	.-242    	; 0x2d54 <__fp_szero>
    2e46:	5f 3f       	cpi	r21, 0xFF	; 255
    2e48:	ec f3       	brlt	.-6      	; 0x2e44 <__mulsf3_pse+0x82>
    2e4a:	98 3e       	cpi	r25, 0xE8	; 232
    2e4c:	dc f3       	brlt	.-10     	; 0x2e44 <__mulsf3_pse+0x82>
    2e4e:	86 95       	lsr	r24
    2e50:	77 95       	ror	r23
    2e52:	67 95       	ror	r22
    2e54:	b7 95       	ror	r27
    2e56:	f7 95       	ror	r31
    2e58:	e7 95       	ror	r30
    2e5a:	9f 5f       	subi	r25, 0xFF	; 255
    2e5c:	c1 f7       	brne	.-16     	; 0x2e4e <__mulsf3_pse+0x8c>
    2e5e:	fe 2b       	or	r31, r30
    2e60:	88 0f       	add	r24, r24
    2e62:	91 1d       	adc	r25, r1
    2e64:	96 95       	lsr	r25
    2e66:	87 95       	ror	r24
    2e68:	97 f9       	bld	r25, 7
    2e6a:	08 95       	ret

00002e6c <_exit>:
    2e6c:	f8 94       	cli

00002e6e <__stop_program>:
    2e6e:	ff cf       	rjmp	.-2      	; 0x2e6e <__stop_program>
