
180112.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800100  00002862  000028f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002862  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  00800234  00800234  00002a2a  2**0
                  ALLOC
  3 .stab         00001cc8  00000000  00000000  00002a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000064a  00000000  00000000  000046f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00004d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000055e  00000000  00000000  00004f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000378a  00000000  00000000  000054dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a48  00000000  00000000  00008c66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000027d5  00000000  00000000  0000a6ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000430  00000000  00000000  0000ce84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006e5  00000000  00000000  0000d2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001a13  00000000  00000000  0000d999  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000007fb  00000000  00000000  0000f3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  0000fba7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__vector_14>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__vector_18>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_30>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <__vector_18+0x54>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d0 e1       	ldi	r29, 0x10	; 16
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	12 e0       	ldi	r17, 0x02	; 2
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	e2 e6       	ldi	r30, 0x62	; 98
      be:	f8 e2       	ldi	r31, 0x28	; 40
      c0:	00 e0       	ldi	r16, 0x00	; 0
      c2:	0b bf       	out	0x3b, r16	; 59
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
      c6:	07 90       	elpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a4 33       	cpi	r26, 0x34	; 52
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
      d0:	12 e0       	ldi	r17, 0x02	; 2
      d2:	a4 e3       	ldi	r26, 0x34	; 52
      d4:	b2 e0       	ldi	r27, 0x02	; 2
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	a0 38       	cpi	r26, 0x80	; 128
      dc:	b1 07       	cpc	r27, r17
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	0e 94 aa 08 	call	0x1154	; 0x1154 <main>
      e4:	0c 94 2f 14 	jmp	0x285e	; 0x285e <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <MCU_init>:
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART1 Receiver: On
	// USART1 Transmitter: On
	// USART1 Mode: Asynchronous
	// USART1 Baud Rate: 9600
	UCSR1A=0x00;
      ec:	10 92 9b 00 	sts	0x009B, r1
	UCSR1B=0x98;
      f0:	88 e9       	ldi	r24, 0x98	; 152
      f2:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C=0x06;
      f6:	86 e0       	ldi	r24, 0x06	; 6
      f8:	80 93 9d 00 	sts	0x009D, r24
	UBRR1H=0x00;
      fc:	10 92 98 00 	sts	0x0098, r1
	UBRR1L=0x5F;
     100:	8f e5       	ldi	r24, 0x5F	; 95
     102:	80 93 99 00 	sts	0x0099, r24

	sei();
     106:	78 94       	sei
}
     108:	08 95       	ret

0000010a <__vector_30>:

ISR(USART1_RX_vect)
{
     10a:	1f 92       	push	r1
     10c:	0f 92       	push	r0
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	0f 92       	push	r0
     112:	11 24       	eor	r1, r1
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
	char data;
	
	data=UDR1;
     118:	90 91 9c 00 	lds	r25, 0x009C
	while(!(UCSR1A&0xB8)); //수신완료 및 에러 검출되지 않을시
     11c:	80 91 9b 00 	lds	r24, 0x009B
     120:	88 7b       	andi	r24, 0xB8	; 184
     122:	e1 f3       	breq	.-8      	; 0x11c <__vector_30+0x12>
	rx1_flg=1;              //수신완료 플레그 set
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	80 93 34 02 	sts	0x0234, r24
	rx1_buff=data;	
     12a:	90 93 35 02 	sts	0x0235, r25
}
     12e:	9f 91       	pop	r25
     130:	8f 91       	pop	r24
     132:	0f 90       	pop	r0
     134:	0f be       	out	0x3f, r0	; 63
     136:	0f 90       	pop	r0
     138:	1f 90       	pop	r1
     13a:	18 95       	reti

0000013c <getchar1>:

char getchar1(void)  //uart 수신하기
{
	char data;
	
	data=rx1_buff;
     13c:	80 91 35 02 	lds	r24, 0x0235
	rx1_buff=0;
     140:	10 92 35 02 	sts	0x0235, r1
	cli();           //글로벌 인터럽트 disable
     144:	f8 94       	cli
	rx1_flg=0;       //수신완료 플레그 reset
     146:	10 92 34 02 	sts	0x0234, r1
	sei();           //글로벌 인터럽트 enable          
     14a:	78 94       	sei
	return data;     //수신데이터 반환
}
     14c:	08 95       	ret

0000014e <putchar1>:

void putchar1(char data) //uart 송신화기
{
	while(!(UCSR1A&0x20));  //송신 준비 완료시
     14e:	90 91 9b 00 	lds	r25, 0x009B
     152:	95 ff       	sbrs	r25, 5
     154:	fc cf       	rjmp	.-8      	; 0x14e <putchar1>
	UDR1=data;              //송신 버퍼에 데이터 쓰기
     156:	80 93 9c 00 	sts	0x009C, r24
}
     15a:	08 95       	ret

0000015c <Interface_init>:
// Parameter : 없음
// Return    : 없음
void Interface_init(void)
{
    // LCD / EX I/O Expander
	TWDR = 0xFF;
     15c:	8f ef       	ldi	r24, 0xFF	; 255
     15e:	80 93 73 00 	sts	0x0073, r24
	TWBR = 0x48;
     162:	88 e4       	ldi	r24, 0x48	; 72
     164:	80 93 70 00 	sts	0x0070, r24
}
     168:	08 95       	ret

0000016a <lcd_write_data>:
//          data - 전송할 한바이트 데이터
// Return    : 없음
void lcd_write_data(unsigned char data)
{
	// 시작
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     16a:	94 ea       	ldi	r25, 0xA4	; 164
     16c:	90 93 74 00 	sts	0x0074, r25
	// 준비상태 체크
    while(!(TWCR & (1 << TWINT)));
     170:	90 91 74 00 	lds	r25, 0x0074
     174:	97 ff       	sbrs	r25, 7
     176:	fc cf       	rjmp	.-8      	; 0x170 <lcd_write_data+0x6>
	
	// 주소 전송
    TWDR = SLA << 1;
     178:	9e e0       	ldi	r25, 0x0E	; 14
     17a:	90 93 73 00 	sts	0x0073, r25
	
	TWCR = (1 << TWINT) | (1 << TWEN);
     17e:	94 e8       	ldi	r25, 0x84	; 132
     180:	90 93 74 00 	sts	0x0074, r25
	while(!(TWCR & (1 << TWINT)));
     184:	90 91 74 00 	lds	r25, 0x0074
     188:	97 ff       	sbrs	r25, 7
     18a:	fc cf       	rjmp	.-8      	; 0x184 <lcd_write_data+0x1a>
	
	TWDR = data;
     18c:	80 93 73 00 	sts	0x0073, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
     190:	84 e8       	ldi	r24, 0x84	; 132
     192:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1 << TWINT)));
     196:	80 91 74 00 	lds	r24, 0x0074
     19a:	87 ff       	sbrs	r24, 7
     19c:	fc cf       	rjmp	.-8      	; 0x196 <lcd_write_data+0x2c>
	
    // 정지
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     19e:	84 e9       	ldi	r24, 0x94	; 148
     1a0:	80 93 74 00 	sts	0x0074, r24
}
     1a4:	08 95       	ret

000001a6 <lcd_display_str>:
// Parameter :
//          line   - 출력할 라인번호(0~3)
//          string - 출력할 문자열(최대 20자)
// Return    : 없음
void lcd_display_str(unsigned char Y_line, unsigned char X_line,char *string) //lcd 스트링데이터 쓰기
{
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <lcd_display_str+0xe>
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	08 2f       	mov	r16, r24
     1ba:	16 2f       	mov	r17, r22
    int i=X_line;

	if((Y_line<4) && (X_line<20)){
     1bc:	84 30       	cpi	r24, 0x04	; 4
     1be:	70 f5       	brcc	.+92     	; 0x21c <lcd_display_str+0x76>
     1c0:	64 31       	cpi	r22, 0x14	; 20
     1c2:	60 f5       	brcc	.+88     	; 0x21c <lcd_display_str+0x76>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     1c4:	8b e1       	ldi	r24, 0x1B	; 27
     1c6:	49 83       	std	Y+1, r20	; 0x01
     1c8:	5a 83       	std	Y+2, r21	; 0x02
     1ca:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1ce:	8c e4       	ldi	r24, 0x4C	; 76
     1d0:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     1d4:	81 2f       	mov	r24, r17
     1d6:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1da:	80 2f       	mov	r24, r16
     1dc:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e0:	80 e7       	ldi	r24, 0x70	; 112
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	01 97       	sbiw	r24, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_display_str+0x3e>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_display_str+0x44>
     1ea:	e1 2e       	mov	r14, r17
     1ec:	ff 24       	eor	r15, r15
     1ee:	49 81       	ldd	r20, Y+1	; 0x01
     1f0:	5a 81       	ldd	r21, Y+2	; 0x02
     1f2:	04 2f       	mov	r16, r20
     1f4:	15 2f       	mov	r17, r21
     1f6:	06 c0       	rjmp	.+12     	; 0x204 <lcd_display_str+0x5e>
		_delay_us(100);
    	while(((i++)<20)&&*string){
        	lcd_write_data(*string++);
     1f8:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1fc:	94 ec       	ldi	r25, 0xC4	; 196
     1fe:	9a 95       	dec	r25
     200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_display_str+0x58>
     202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_display_str+0x5e>

	if((Y_line<4) && (X_line<20)){
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
		lcd_write_data(X_line); lcd_write_data(Y_line);
		_delay_us(100);
    	while(((i++)<20)&&*string){
     204:	e4 e1       	ldi	r30, 0x14	; 20
     206:	ee 16       	cp	r14, r30
     208:	f1 04       	cpc	r15, r1
     20a:	44 f4       	brge	.+16     	; 0x21c <lcd_display_str+0x76>
     20c:	f8 01       	movw	r30, r16
     20e:	81 91       	ld	r24, Z+
     210:	8f 01       	movw	r16, r30
     212:	08 94       	sec
     214:	e1 1c       	adc	r14, r1
     216:	f1 1c       	adc	r15, r1
     218:	88 23       	and	r24, r24
     21a:	71 f7       	brne	.-36     	; 0x1f8 <lcd_display_str+0x52>
        	lcd_write_data(*string++);
			_delay_us(40);
		}
    }
}
     21c:	0f 90       	pop	r0
     21e:	0f 90       	pop	r0
     220:	cf 91       	pop	r28
     222:	df 91       	pop	r29
     224:	1f 91       	pop	r17
     226:	0f 91       	pop	r16
     228:	ff 90       	pop	r15
     22a:	ef 90       	pop	r14
     22c:	08 95       	ret

0000022e <write_lcd_data>:

void write_lcd_data(unsigned char Y_line, unsigned char X_line, long data) //lcd데이터 쓰기
{
     22e:	1f 93       	push	r17
     230:	df 93       	push	r29
     232:	cf 93       	push	r28
     234:	00 d0       	rcall	.+0      	; 0x236 <write_lcd_data+0x8>
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	18 2f       	mov	r17, r24
    if(Y_line<4 && X_line<20){
     23c:	84 30       	cpi	r24, 0x04	; 4
     23e:	f0 f4       	brcc	.+60     	; 0x27c <write_lcd_data+0x4e>
     240:	64 31       	cpi	r22, 0x14	; 20
     242:	e0 f4       	brcc	.+56     	; 0x27c <write_lcd_data+0x4e>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     244:	8b e1       	ldi	r24, 0x1B	; 27
     246:	2a 83       	std	Y+2, r18	; 0x02
     248:	69 83       	std	Y+1, r22	; 0x01
     24a:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     24e:	8c e4       	ldi	r24, 0x4C	; 76
     250:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     254:	69 81       	ldd	r22, Y+1	; 0x01
     256:	86 2f       	mov	r24, r22
     258:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     25c:	81 2f       	mov	r24, r17
     25e:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     262:	80 e7       	ldi	r24, 0x70	; 112
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <write_lcd_data+0x38>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <write_lcd_data+0x3e>
		_delay_us(100);
		lcd_write_data(data);
     26c:	2a 81       	ldd	r18, Y+2	; 0x02
     26e:	82 2f       	mov	r24, r18
     270:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     274:	94 ec       	ldi	r25, 0xC4	; 196
     276:	9a 95       	dec	r25
     278:	f1 f7       	brne	.-4      	; 0x276 <write_lcd_data+0x48>
     27a:	00 c0       	rjmp	.+0      	; 0x27c <write_lcd_data+0x4e>
		_delay_us(40);
    }
}
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	cf 91       	pop	r28
     282:	df 91       	pop	r29
     284:	1f 91       	pop	r17
     286:	08 95       	ret

00000288 <lcd_clear_screen>:

void lcd_clear_screen(void){ lcd_write_data(0x1B); lcd_write_data(0x43); _delay_ms(20); } //lcd전체화면 클리어
     288:	8b e1       	ldi	r24, 0x1B	; 27
     28a:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     28e:	83 e4       	ldi	r24, 0x43	; 67
     290:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     294:	86 e6       	ldi	r24, 0x66	; 102
     296:	96 ee       	ldi	r25, 0xE6	; 230
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	81 50       	subi	r24, 0x01	; 1
     29c:	90 40       	sbci	r25, 0x00	; 0
     29e:	a0 40       	sbci	r26, 0x00	; 0
     2a0:	e1 f7       	brne	.-8      	; 0x29a <lcd_clear_screen+0x12>
     2a2:	08 95       	ret

000002a4 <display_char>:
void display_char(unsigned char line, unsigned char col, unsigned char data) ////lcd char 데이터 표시
{
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	18 2f       	mov	r17, r24
     2ae:	f6 2e       	mov	r15, r22
     2b0:	e4 2e       	mov	r14, r20
    unsigned char val=0, val_buff=0;

	val=data;   

	val_buff=val/100;             
     2b2:	84 2f       	mov	r24, r20
     2b4:	64 e6       	ldi	r22, 0x64	; 100
     2b6:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__udivmodqi4>
     2ba:	08 2f       	mov	r16, r24
	write_lcd_data(line, col, val_buff+'0' );
     2bc:	28 2f       	mov	r18, r24
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	20 5d       	subi	r18, 0xD0	; 208
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
     2c4:	44 27       	eor	r20, r20
     2c6:	37 fd       	sbrc	r19, 7
     2c8:	40 95       	com	r20
     2ca:	54 2f       	mov	r21, r20
     2cc:	81 2f       	mov	r24, r17
     2ce:	6f 2d       	mov	r22, r15
     2d0:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
	val=val-(100*val_buff);
     2d4:	8c e9       	ldi	r24, 0x9C	; 156
     2d6:	08 9f       	mul	r16, r24
     2d8:	00 2d       	mov	r16, r0
     2da:	11 24       	eor	r1, r1
     2dc:	0e 0d       	add	r16, r14

	val_buff=val/10;
     2de:	80 2f       	mov	r24, r16
     2e0:	6a e0       	ldi	r22, 0x0A	; 10
     2e2:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__udivmodqi4>
     2e6:	e8 2e       	mov	r14, r24
	write_lcd_data(line, 1+col, val_buff+'0' );
     2e8:	6f 2d       	mov	r22, r15
     2ea:	6f 5f       	subi	r22, 0xFF	; 255
     2ec:	28 2f       	mov	r18, r24
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	20 5d       	subi	r18, 0xD0	; 208
     2f2:	3f 4f       	sbci	r19, 0xFF	; 255
     2f4:	44 27       	eor	r20, r20
     2f6:	37 fd       	sbrc	r19, 7
     2f8:	40 95       	com	r20
     2fa:	54 2f       	mov	r21, r20
     2fc:	81 2f       	mov	r24, r17
     2fe:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
	val=val-(10*val_buff);

	write_lcd_data(line, 2+col, val+'0');
     302:	6f 2d       	mov	r22, r15
     304:	6e 5f       	subi	r22, 0xFE	; 254
	write_lcd_data(line, col, val_buff+'0' );
	val=val-(100*val_buff);

	val_buff=val/10;
	write_lcd_data(line, 1+col, val_buff+'0' );
	val=val-(10*val_buff);
     306:	26 ef       	ldi	r18, 0xF6	; 246
     308:	e2 9e       	mul	r14, r18
     30a:	20 2d       	mov	r18, r0
     30c:	11 24       	eor	r1, r1
     30e:	20 0f       	add	r18, r16

	write_lcd_data(line, 2+col, val+'0');
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	20 5d       	subi	r18, 0xD0	; 208
     314:	3f 4f       	sbci	r19, 0xFF	; 255
     316:	44 27       	eor	r20, r20
     318:	37 fd       	sbrc	r19, 7
     31a:	40 95       	com	r20
     31c:	54 2f       	mov	r21, r20
     31e:	81 2f       	mov	r24, r17
     320:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
}
     324:	1f 91       	pop	r17
     326:	0f 91       	pop	r16
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	08 95       	ret

0000032e <ReadData>:
unsigned char ReadData(unsigned char motor)
{
    unsigned char data;

    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	fc 01       	movw	r30, r24
     332:	b0 96       	adiw	r30, 0x20	; 32
     334:	fe 2f       	mov	r31, r30
     336:	ee 27       	eor	r30, r30
     338:	20 81       	ld	r18, Z
     33a:	20 93 72 02 	sts	0x0272, r18
     33e:	20 fd       	sbrc	r18, 0
     340:	fb cf       	rjmp	.-10     	; 0x338 <ReadData+0xa>
    // 데이터 입력
    data = MOTOR_DATA(motor);
     342:	88 96       	adiw	r24, 0x28	; 40
     344:	b8 2f       	mov	r27, r24
     346:	aa 27       	eor	r26, r26
     348:	8c 91       	ld	r24, X

	CHECK_BUSY(motor, status);
     34a:	90 81       	ld	r25, Z
     34c:	90 93 72 02 	sts	0x0272, r25
     350:	90 fd       	sbrc	r25, 0
     352:	fb cf       	rjmp	.-10     	; 0x34a <ReadData+0x1c>
    // 입력된 데이터 리턴
    return data;
}    
     354:	08 95       	ret

00000356 <WriteCommand>:
// Return    : 없음

void WriteCommand(unsigned char motor, unsigned char cmd)
{
    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	80 96       	adiw	r24, 0x20	; 32
     35a:	f8 2f       	mov	r31, r24
     35c:	ee 27       	eor	r30, r30
     35e:	80 81       	ld	r24, Z
     360:	80 93 72 02 	sts	0x0272, r24
     364:	80 fd       	sbrc	r24, 0
     366:	fb cf       	rjmp	.-10     	; 0x35e <WriteCommand+0x8>
    // 커맨드 출력
    MOTOR_CMD(motor) = cmd;
     368:	60 83       	st	Z, r22

	CHECK_BUSY(motor, status);
     36a:	80 81       	ld	r24, Z
     36c:	80 93 72 02 	sts	0x0272, r24
     370:	80 fd       	sbrc	r24, 0
     372:	fb cf       	rjmp	.-10     	; 0x36a <WriteCommand+0x14>
}
     374:	08 95       	ret

00000376 <WriteDataTwoByte>:
//      data  - 쓸 데이터
// Return    : 없음
void WriteDataTwoByte(unsigned char motor, int data)
{
    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
     376:	a8 2f       	mov	r26, r24
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	fd 01       	movw	r30, r26
     37c:	b0 96       	adiw	r30, 0x20	; 32
     37e:	fe 2f       	mov	r31, r30
     380:	ee 27       	eor	r30, r30
     382:	80 81       	ld	r24, Z
     384:	80 93 72 02 	sts	0x0272, r24
     388:	80 fd       	sbrc	r24, 0
     38a:	fb cf       	rjmp	.-10     	; 0x382 <WriteDataTwoByte+0xc>
    // 2 바이트 데이터 출력
    MOTOR_DATA(motor) = (uint8_t)((data >> 8)&0xFF);
     38c:	98 96       	adiw	r26, 0x28	; 40
     38e:	ba 2f       	mov	r27, r26
     390:	aa 27       	eor	r26, r26
     392:	87 2f       	mov	r24, r23
     394:	99 27       	eor	r25, r25
     396:	87 fd       	sbrc	r24, 7
     398:	9a 95       	dec	r25
     39a:	8c 93       	st	X, r24
	CHECK_BUSY(motor, status);
     39c:	80 81       	ld	r24, Z
     39e:	80 93 72 02 	sts	0x0272, r24
     3a2:	80 fd       	sbrc	r24, 0
     3a4:	fb cf       	rjmp	.-10     	; 0x39c <WriteDataTwoByte+0x26>
    MOTOR_DATA(motor) = (uint8_t)(data&0xFF);
     3a6:	6c 93       	st	X, r22
	CHECK_BUSY(motor, status);
     3a8:	80 81       	ld	r24, Z
     3aa:	80 93 72 02 	sts	0x0272, r24
     3ae:	80 fd       	sbrc	r24, 0
     3b0:	fb cf       	rjmp	.-10     	; 0x3a8 <WriteDataTwoByte+0x32>
}
     3b2:	08 95       	ret

000003b4 <WriteDataFourByte>:
// Parameter :
//      motor - 선택할 모터
//      data  - 쓸 데이터
// Return    : 없음
void WriteDataFourByte(unsigned char motor, long data)
{
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	d8 2e       	mov	r13, r24
     3c0:	7a 01       	movw	r14, r20
     3c2:	8b 01       	movw	r16, r22
    // 4 바이트의 데이터를 둘로 나누어서 WriteDataTwoByte함수를 두번 호출
    WriteDataTwoByte(motor, (int16_t)(data >> 16));
     3c4:	9b 01       	movw	r18, r22
     3c6:	55 27       	eor	r21, r21
     3c8:	37 fd       	sbrc	r19, 7
     3ca:	50 95       	com	r21
     3cc:	45 2f       	mov	r20, r21
     3ce:	b9 01       	movw	r22, r18
     3d0:	0e 94 bb 01 	call	0x376	; 0x376 <WriteDataTwoByte>
    WriteDataTwoByte(motor, (int16_t)(data));
     3d4:	8d 2d       	mov	r24, r13
     3d6:	b7 01       	movw	r22, r14
     3d8:	0e 94 bb 01 	call	0x376	; 0x376 <WriteDataTwoByte>
}
     3dc:	1f 91       	pop	r17
     3de:	0f 91       	pop	r16
     3e0:	ff 90       	pop	r15
     3e2:	ef 90       	pop	r14
     3e4:	df 90       	pop	r13
     3e6:	08 95       	ret

000003e8 <Motor_Reset>:
// Function  : LM629를 리셋한다.
// Parameter :
//      motor - 선택할 모터
// Return    : 없음
void Motor_Reset(uint8_t motor)
{
     3e8:	1f 93       	push	r17
     3ea:	18 2f       	mov	r17, r24
    // RESET 커맨드 출력
    WriteCommand(motor, RESET);
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	0e 94 ab 01 	call	0x356	; 0x356 <WriteCommand>
     3f2:	8c ec       	ldi	r24, 0xCC	; 204
     3f4:	9c e1       	ldi	r25, 0x1C	; 28
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	f1 f7       	brne	.-4      	; 0x3f6 <Motor_Reset+0xe>
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <Motor_Reset+0x14>
     3fc:	00 00       	nop
    // 리셋이 완료될 때까지 최소 1.5ms이상 대기
    _delay_ms(2);
	// Morot1 인터럽트 마스크 리셋
    WriteCommand(motor, RSTI);
     3fe:	81 2f       	mov	r24, r17
     400:	6d e1       	ldi	r22, 0x1D	; 29
     402:	0e 94 ab 01 	call	0x356	; 0x356 <WriteCommand>
    WriteDataTwoByte(motor, 0x0000);
     406:	81 2f       	mov	r24, r17
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	0e 94 bb 01 	call	0x376	; 0x376 <WriteDataTwoByte>
}
     410:	1f 91       	pop	r17
     412:	08 95       	ret

00000414 <SetGain>:
//      kp    - P값
//      ki    - I값
//      kd    - D값
// Return    : 없음
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
{
     414:	af 92       	push	r10
     416:	bf 92       	push	r11
     418:	cf 92       	push	r12
     41a:	df 92       	push	r13
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	f8 2e       	mov	r15, r24
     42a:	6b 01       	movw	r12, r22
     42c:	ea 01       	movw	r28, r20
     42e:	89 01       	movw	r16, r18
//      motor - 선택할 모터
//      kp    - P값
//      ki    - I값
//      kd    - D값
// Return    : 없음
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
     430:	aa 24       	eor	r10, r10
     432:	a3 94       	inc	r10
     434:	61 15       	cp	r22, r1
     436:	71 05       	cpc	r23, r1
     438:	09 f4       	brne	.+2      	; 0x43c <SetGain+0x28>
     43a:	aa 24       	eor	r10, r10
     43c:	bb 24       	eor	r11, r11
     43e:	b3 94       	inc	r11
     440:	20 97       	sbiw	r28, 0x00	; 0
     442:	09 f4       	brne	.+2      	; 0x446 <SetGain+0x32>
     444:	bb 24       	eor	r11, r11
     446:	ee 24       	eor	r14, r14
     448:	e3 94       	inc	r14
     44a:	01 15       	cp	r16, r1
     44c:	11 05       	cpc	r17, r1
     44e:	09 f4       	brne	.+2      	; 0x452 <SetGain+0x3e>
     450:	ee 24       	eor	r14, r14
	if(ki)LD_ki=1;
	else LD_ki=0;
	if(kd)LD_kd=1;
	else LD_kd=0;
	// LFIL 커맨드 출력
    WriteCommand(motor, LFIL);
     452:	8f 2d       	mov	r24, r15
     454:	6e e1       	ldi	r22, 0x1E	; 30
     456:	0e 94 ab 01 	call	0x356	; 0x356 <WriteCommand>
    // 컨트롤 워드 출력, sampling interval은 341us 고정
    WriteDataTwoByte(motor, (0x0000) | (LD_kp << 3) | (LD_ki << 2) | (LD_kd << 1)  );
     45a:	6b 2d       	mov	r22, r11
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	66 0f       	add	r22, r22
     460:	77 1f       	adc	r23, r23
     462:	66 0f       	add	r22, r22
     464:	77 1f       	adc	r23, r23
     466:	8a 2d       	mov	r24, r10
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	43 e0       	ldi	r20, 0x03	; 3
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	4a 95       	dec	r20
     472:	e1 f7       	brne	.-8      	; 0x46c <SetGain+0x58>
     474:	68 2b       	or	r22, r24
     476:	79 2b       	or	r23, r25
     478:	8e 2d       	mov	r24, r14
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	68 2b       	or	r22, r24
     482:	79 2b       	or	r23, r25
     484:	8f 2d       	mov	r24, r15
     486:	0e 94 bb 01 	call	0x376	; 0x376 <WriteDataTwoByte>
    ////////////////////////////
	// P값 출력
	if(kp)WriteDataTwoByte(motor, kp);
     48a:	aa 20       	and	r10, r10
     48c:	21 f0       	breq	.+8      	; 0x496 <SetGain+0x82>
     48e:	8f 2d       	mov	r24, r15
     490:	b6 01       	movw	r22, r12
     492:	0e 94 bb 01 	call	0x376	; 0x376 <WriteDataTwoByte>
    // I값 출력
    if(ki)WriteDataTwoByte(motor, ki);
     496:	bb 20       	and	r11, r11
     498:	21 f0       	breq	.+8      	; 0x4a2 <SetGain+0x8e>
     49a:	8f 2d       	mov	r24, r15
     49c:	be 01       	movw	r22, r28
     49e:	0e 94 bb 01 	call	0x376	; 0x376 <WriteDataTwoByte>
    // D값 출력
    if(kd)WriteDataTwoByte(motor, kd);
     4a2:	ee 20       	and	r14, r14
     4a4:	21 f0       	breq	.+8      	; 0x4ae <SetGain+0x9a>
     4a6:	8f 2d       	mov	r24, r15
     4a8:	b8 01       	movw	r22, r16
     4aa:	0e 94 bb 01 	call	0x376	; 0x376 <WriteDataTwoByte>
    // 필터 업데이트
    WriteCommand(motor, UDF);
     4ae:	8f 2d       	mov	r24, r15
     4b0:	64 e0       	ldi	r22, 0x04	; 4
     4b2:	0e 94 ab 01 	call	0x356	; 0x356 <WriteCommand>
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	bf 90       	pop	r11
     4c8:	af 90       	pop	r10
     4ca:	08 95       	ret

000004cc <SetAcceleration>:
// Parameter :
//      motor - 선택할 모터
//      acc   - 가속도값
// Return    : 없음
void SetAcceleration(uint8_t motor, int32_t acc)
{
     4cc:	df 92       	push	r13
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	d8 2e       	mov	r13, r24
     4d8:	7a 01       	movw	r14, r20
     4da:	8b 01       	movw	r16, r22
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);
     4dc:	6f e1       	ldi	r22, 0x1F	; 31
     4de:	0e 94 ab 01 	call	0x356	; 0x356 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(motor, (1 << ACC_LOAD));
     4e2:	8d 2d       	mov	r24, r13
     4e4:	60 e2       	ldi	r22, 0x20	; 32
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	0e 94 bb 01 	call	0x376	; 0x376 <WriteDataTwoByte>
    // 가속도값 출력
    WriteDataFourByte(motor, acc);
     4ec:	8d 2d       	mov	r24, r13
     4ee:	b8 01       	movw	r22, r16
     4f0:	a7 01       	movw	r20, r14
     4f2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <WriteDataFourByte>
}
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	ff 90       	pop	r15
     4fc:	ef 90       	pop	r14
     4fe:	df 90       	pop	r13
     500:	08 95       	ret

00000502 <Motor_init>:
// Parameter : 없음
// Return    : 없음
void Motor_init(void)
{	
    // Motor1 게인 설정
    SetGain(MOTOR0, 7, 3, 1);
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	67 e0       	ldi	r22, 0x07	; 7
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	43 e0       	ldi	r20, 0x03	; 3
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	21 e0       	ldi	r18, 0x01	; 1
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	0e 94 0a 02 	call	0x414	; 0x414 <SetGain>
    // Motor2 게인 설정
    SetGain(MOTOR1, 7, 3, 1);
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	67 e0       	ldi	r22, 0x07	; 7
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	43 e0       	ldi	r20, 0x03	; 3
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	21 e0       	ldi	r18, 0x01	; 1
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	0e 94 0a 02 	call	0x414	; 0x414 <SetGain>
    // Motor3 게인 설정
    SetGain(MOTOR2, 7, 3, 1);
     526:	82 e0       	ldi	r24, 0x02	; 2
     528:	67 e0       	ldi	r22, 0x07	; 7
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	43 e0       	ldi	r20, 0x03	; 3
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	21 e0       	ldi	r18, 0x01	; 1
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	0e 94 0a 02 	call	0x414	; 0x414 <SetGain>

    SetAcceleration(MOTOR0, 0x3FFFFFFF);
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	4f ef       	ldi	r20, 0xFF	; 255
     53c:	5f ef       	ldi	r21, 0xFF	; 255
     53e:	6f ef       	ldi	r22, 0xFF	; 255
     540:	7f e3       	ldi	r23, 0x3F	; 63
     542:	0e 94 66 02 	call	0x4cc	; 0x4cc <SetAcceleration>
    SetAcceleration(MOTOR1, 0x3FFFFFFF);
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	4f ef       	ldi	r20, 0xFF	; 255
     54a:	5f ef       	ldi	r21, 0xFF	; 255
     54c:	6f ef       	ldi	r22, 0xFF	; 255
     54e:	7f e3       	ldi	r23, 0x3F	; 63
     550:	0e 94 66 02 	call	0x4cc	; 0x4cc <SetAcceleration>
    SetAcceleration(MOTOR2, 0x3FFFFFFF);
     554:	82 e0       	ldi	r24, 0x02	; 2
     556:	4f ef       	ldi	r20, 0xFF	; 255
     558:	5f ef       	ldi	r21, 0xFF	; 255
     55a:	6f ef       	ldi	r22, 0xFF	; 255
     55c:	7f e3       	ldi	r23, 0x3F	; 63
     55e:	0e 94 66 02 	call	0x4cc	; 0x4cc <SetAcceleration>
}
     562:	08 95       	ret

00000564 <SetVelocity>:
// Parameter :
//      motor    - 선택할 모터
//      velocity - 속도 설정  (0 ~ 1,073,741,823) 음수 입력시 역방향으로 회전
// Return    : 없음
void SetVelocity(uint8_t motor, int32_t velocity)
{
     564:	df 92       	push	r13
     566:	ef 92       	push	r14
     568:	ff 92       	push	r15
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	df 93       	push	r29
     570:	cf 93       	push	r28
     572:	0f 92       	push	r0
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	d8 2e       	mov	r13, r24
     57a:	7a 01       	movw	r14, r20
     57c:	8b 01       	movw	r16, r22
	unsigned char dir=1;

	if(velocity<0){
     57e:	77 ff       	sbrs	r23, 7
     580:	0a c0       	rjmp	.+20     	; 0x596 <SetVelocity+0x32>
		velocity*=(-1);
     582:	10 95       	com	r17
     584:	00 95       	com	r16
     586:	f0 94       	com	r15
     588:	e0 94       	com	r14
     58a:	e1 1c       	adc	r14, r1
     58c:	f1 1c       	adc	r15, r1
     58e:	01 1d       	adc	r16, r1
     590:	11 1d       	adc	r17, r1
		dir=0;
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	01 c0       	rjmp	.+2      	; 0x598 <SetVelocity+0x34>
//      motor    - 선택할 모터
//      velocity - 속도 설정  (0 ~ 1,073,741,823) 음수 입력시 역방향으로 회전
// Return    : 없음
void SetVelocity(uint8_t motor, int32_t velocity)
{
	unsigned char dir=1;
     596:	91 e0       	ldi	r25, 0x01	; 1
	if(velocity<0){
		velocity*=(-1);
		dir=0;
	}
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);        
     598:	8d 2d       	mov	r24, r13
     59a:	6f e1       	ldi	r22, 0x1F	; 31
     59c:	99 83       	std	Y+1, r25	; 0x01
     59e:	0e 94 ab 01 	call	0x356	; 0x356 <WriteCommand>
    // 컨트롤 워드 출력        
    WriteDataTwoByte(motor,  (dir << FORWARD_DIR) | (1 << VELOCITY_MODE) | (1 << VELOCITY_LOAD));
     5a2:	99 81       	ldd	r25, Y+1	; 0x01
     5a4:	79 2f       	mov	r23, r25
     5a6:	72 95       	swap	r23
     5a8:	70 7f       	andi	r23, 0xF0	; 240
     5aa:	60 e0       	ldi	r22, 0x00	; 0
     5ac:	68 60       	ori	r22, 0x08	; 8
     5ae:	78 60       	ori	r23, 0x08	; 8
     5b0:	8d 2d       	mov	r24, r13
     5b2:	0e 94 bb 01 	call	0x376	; 0x376 <WriteDataTwoByte>
    // 속도값 출력
    WriteDataFourByte(motor, velocity);
     5b6:	8d 2d       	mov	r24, r13
     5b8:	b8 01       	movw	r22, r16
     5ba:	a7 01       	movw	r20, r14
     5bc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <WriteDataFourByte>
}
     5c0:	0f 90       	pop	r0
     5c2:	cf 91       	pop	r28
     5c4:	df 91       	pop	r29
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	df 90       	pop	r13
     5d0:	08 95       	ret

000005d2 <SetPosition>:
//		acc   - 가속도 설정  (0 ~ 1,073,741,823)
//   velocity - 속도 설정    (0 ~ 1,073,741,823)
//   position - 모터위치설정 (-1,073,741,824 ~ 1,073,741,823)counts
// Return    : 없음
void SetPosition(uint8_t motor, uint8_t mode, int32_t acc,int32_t velocity,int32_t position)
{
     5d2:	4f 92       	push	r4
     5d4:	5f 92       	push	r5
     5d6:	6f 92       	push	r6
     5d8:	7f 92       	push	r7
     5da:	8f 92       	push	r8
     5dc:	9f 92       	push	r9
     5de:	af 92       	push	r10
     5e0:	bf 92       	push	r11
     5e2:	cf 92       	push	r12
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	98 2e       	mov	r9, r24
     5f0:	86 2e       	mov	r8, r22
     5f2:	29 01       	movw	r4, r18
     5f4:	3a 01       	movw	r6, r20
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);
     5f6:	6f e1       	ldi	r22, 0x1F	; 31
     5f8:	0e 94 ab 01 	call	0x356	; 0x356 <WriteCommand>
    // 컨트롤 워드 출력
    // mode : 0 - Absolute Position, 1 - Relative Position
    // Position Mode로 설정
    
	WriteDataTwoByte(motor, (1 << ACC_LOAD) | (1 << VELOCITY_LOAD) | (1 << POSITION_LOAD) | (mode << POSITION_RELATIVE) );//WriteDataTwoByte(motor, 0x2A|mode);
     5fc:	68 2d       	mov	r22, r8
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	6a 62       	ori	r22, 0x2A	; 42
     602:	89 2d       	mov	r24, r9
     604:	0e 94 bb 01 	call	0x376	; 0x376 <WriteDataTwoByte>
    // 위치값 출력
	WriteDataFourByte(motor, acc);    
     608:	89 2d       	mov	r24, r9
     60a:	b3 01       	movw	r22, r6
     60c:	a2 01       	movw	r20, r4
     60e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <WriteDataFourByte>
	WriteDataFourByte(motor, velocity);
     612:	89 2d       	mov	r24, r9
     614:	b8 01       	movw	r22, r16
     616:	a7 01       	movw	r20, r14
     618:	0e 94 da 01 	call	0x3b4	; 0x3b4 <WriteDataFourByte>
    WriteDataFourByte(motor, position);
     61c:	89 2d       	mov	r24, r9
     61e:	b6 01       	movw	r22, r12
     620:	a5 01       	movw	r20, r10
     622:	0e 94 da 01 	call	0x3b4	; 0x3b4 <WriteDataFourByte>
}
     626:	1f 91       	pop	r17
     628:	0f 91       	pop	r16
     62a:	ff 90       	pop	r15
     62c:	ef 90       	pop	r14
     62e:	df 90       	pop	r13
     630:	cf 90       	pop	r12
     632:	bf 90       	pop	r11
     634:	af 90       	pop	r10
     636:	9f 90       	pop	r9
     638:	8f 90       	pop	r8
     63a:	7f 90       	pop	r7
     63c:	6f 90       	pop	r6
     63e:	5f 90       	pop	r5
     640:	4f 90       	pop	r4
     642:	08 95       	ret

00000644 <LM629_HW_Reset>:

// Function  : LM629 H/W Reset. 최초 전원 인가시 반드시 실행해야한다.
// Parameter : 없음
// Return    : 없음
void LM629_HW_Reset(void){
     644:	8f 92       	push	r8
     646:	9f 92       	push	r9
     648:	af 92       	push	r10
     64a:	bf 92       	push	r11
     64c:	cf 92       	push	r12
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	df 93       	push	r29
     65a:	cf 93       	push	r28
     65c:	00 d0       	rcall	.+0      	; 0x65e <LM629_HW_Reset+0x1a>
     65e:	0f 92       	push	r0
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
	unsigned char status[3]={0, }, i=0, step=0;
	
	DDRA=0x00;
     664:	1a ba       	out	0x1a, r1	; 26

	PORTC=0x00;
     666:	15 ba       	out	0x15, r1	; 21
	DDRC=0xFF;
     668:	8f ef       	ldi	r24, 0xFF	; 255
     66a:	84 bb       	out	0x14, r24	; 20

	PORTG=0x00;
     66c:	10 92 65 00 	sts	0x0065, r1
	DDRG=0x03;
     670:	83 e0       	ldi	r24, 0x03	; 3
     672:	80 93 64 00 	sts	0x0064, r24
			}
		}
		
		if(step==1){
			// SRE : 외부 데이터 메모리 영역 활성화
			MCUCR = (1 << SRE) | (0 << SRW10);
     676:	e0 e8       	ldi	r30, 0x80	; 128
     678:	9e 2e       	mov	r9, r30
		    // SRL(0) : Upper Sector로만 사용 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
     67a:	72 e0       	ldi	r23, 0x02	; 2
     67c:	a7 2e       	mov	r10, r23
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
     67e:	64 e8       	ldi	r22, 0x84	; 132
     680:	b6 2e       	mov	r11, r22
     682:	6e 01       	movw	r12, r28
     684:	08 94       	sec
     686:	c1 1c       	adc	r12, r1
     688:	d1 1c       	adc	r13, r1
	DDRG=0x03;

	while(1){
		if(step==0){
			while(1){
				PORTC |= 0x05; //Hw Rst Hi(decoder = Low)
     68a:	85 b3       	in	r24, 0x15	; 21
     68c:	85 60       	ori	r24, 0x05	; 5
     68e:	85 bb       	out	0x15, r24	; 21
     690:	83 e3       	ldi	r24, 0x33	; 51
     692:	9b e2       	ldi	r25, 0x2B	; 43
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <LM629_HW_Reset+0x50>
				_delay_ms(3);
				PORTC &= ~0x05; //Hw Rst Low(decoder = Hi)
     698:	85 b3       	in	r24, 0x15	; 21
     69a:	8a 7f       	andi	r24, 0xFA	; 250
     69c:	85 bb       	out	0x15, r24	; 21
     69e:	ec ec       	ldi	r30, 0xCC	; 204
     6a0:	fc e1       	ldi	r31, 0x1C	; 28
     6a2:	31 97       	sbiw	r30, 0x01	; 1
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <LM629_HW_Reset+0x5e>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <LM629_HW_Reset+0x64>
     6a8:	00 00       	nop
				_delay_ms(2);

				PORTG &= ~0x02; //RD low
     6aa:	80 91 65 00 	lds	r24, 0x0065
     6ae:	8d 7f       	andi	r24, 0xFD	; 253
     6b0:	80 93 65 00 	sts	0x0065, r24
				PORTC &= ~0x08; //PS low
     6b4:	ab 98       	cbi	0x15, 3	; 21
		
				PORTC &=~0x07;	//cs motor0
     6b6:	85 b3       	in	r24, 0x15	; 21
     6b8:	88 7f       	andi	r24, 0xF8	; 248
     6ba:	85 bb       	out	0x15, r24	; 21
				status[0]=PINA; //Read status motor0
     6bc:	29 b3       	in	r18, 0x19	; 25
     6be:	29 83       	std	Y+1, r18	; 0x01
				
				PORTC |=0x01;	//cs motor1
     6c0:	a8 9a       	sbi	0x15, 0	; 21
				status[1]=PINA; //Read status motor0
     6c2:	99 b3       	in	r25, 0x19	; 25
     6c4:	9a 83       	std	Y+2, r25	; 0x02
				
				PORTC = (PORTC&0xF8)|0x02; 	//cs motor2
     6c6:	85 b3       	in	r24, 0x15	; 21
     6c8:	88 7f       	andi	r24, 0xF8	; 248
     6ca:	82 60       	ori	r24, 0x02	; 2
     6cc:	85 bb       	out	0x15, r24	; 21
				status[2]=PINA;  //Read status motor0
     6ce:	89 b3       	in	r24, 0x19	; 25
     6d0:	8b 83       	std	Y+3, r24	; 0x03

				if( (status[0]==0xC4||status[0]==0x84) && 
     6d2:	24 3c       	cpi	r18, 0xC4	; 196
     6d4:	11 f0       	breq	.+4      	; 0x6da <LM629_HW_Reset+0x96>
     6d6:	24 38       	cpi	r18, 0x84	; 132
     6d8:	c1 f5       	brne	.+112    	; 0x74a <LM629_HW_Reset+0x106>
     6da:	94 3c       	cpi	r25, 0xC4	; 196
     6dc:	11 f0       	breq	.+4      	; 0x6e2 <LM629_HW_Reset+0x9e>
					(status[1]==0xC4||status[1]==0x84) && 
     6de:	94 38       	cpi	r25, 0x84	; 132
     6e0:	a1 f5       	brne	.+104    	; 0x74a <LM629_HW_Reset+0x106>
     6e2:	84 3c       	cpi	r24, 0xC4	; 196
     6e4:	11 f0       	breq	.+4      	; 0x6ea <LM629_HW_Reset+0xa6>
					(status[2]==0xC4||status[2]==0x84) ){
     6e6:	84 38       	cpi	r24, 0x84	; 132
     6e8:	81 f5       	brne	.+96     	; 0x74a <LM629_HW_Reset+0x106>
			}
		}
		
		if(step==1){
			// SRE : 외부 데이터 메모리 영역 활성화
			MCUCR = (1 << SRE) | (0 << SRW10);
     6ea:	95 be       	out	0x35, r9	; 53
		    // SRL(0) : Upper Sector로만 사용 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
     6ec:	a0 92 6d 00 	sts	0x006D, r10
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
     6f0:	b0 92 6c 00 	sts	0x006C, r11
     6f4:	76 01       	movw	r14, r12
     6f6:	00 e0       	ldi	r16, 0x00	; 0
     6f8:	10 e2       	ldi	r17, 0x20	; 32
     6fa:	8e 2c       	mov	r8, r14
     6fc:	8c 18       	sub	r8, r12
			while(1){
				for(i=0;i<3;++i){
		        	WriteCommand(i, RSTI);
     6fe:	88 2d       	mov	r24, r8
     700:	6d e1       	ldi	r22, 0x1D	; 29
     702:	0e 94 ab 01 	call	0x356	; 0x356 <WriteCommand>
					WriteDataTwoByte(i, 0x0000);
     706:	88 2d       	mov	r24, r8
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	0e 94 bb 01 	call	0x376	; 0x376 <WriteDataTwoByte>
					READ_STATUS(i, status[i]);
     710:	f8 01       	movw	r30, r16
     712:	80 81       	ld	r24, Z
     714:	f7 01       	movw	r30, r14
     716:	81 93       	st	Z+, r24
     718:	7f 01       	movw	r14, r30
     71a:	00 50       	subi	r16, 0x00	; 0
     71c:	1f 4f       	sbci	r17, 0xFF	; 255
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
			while(1){
				for(i=0;i<3;++i){
     71e:	f3 e2       	ldi	r31, 0x23	; 35
     720:	00 30       	cpi	r16, 0x00	; 0
     722:	1f 07       	cpc	r17, r31
     724:	51 f7       	brne	.-44     	; 0x6fa <LM629_HW_Reset+0xb6>
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
     726:	89 81       	ldd	r24, Y+1	; 0x01
     728:	80 3c       	cpi	r24, 0xC0	; 192
     72a:	11 f0       	breq	.+4      	; 0x730 <LM629_HW_Reset+0xec>
     72c:	80 38       	cpi	r24, 0x80	; 128
     72e:	51 f4       	brne	.+20     	; 0x744 <LM629_HW_Reset+0x100>
					(status[1]==0xC0||status[1]==0x80) && 
     730:	8a 81       	ldd	r24, Y+2	; 0x02
				for(i=0;i<3;++i){
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
     732:	80 3c       	cpi	r24, 0xC0	; 192
     734:	11 f0       	breq	.+4      	; 0x73a <LM629_HW_Reset+0xf6>
					(status[1]==0xC0||status[1]==0x80) && 
     736:	80 38       	cpi	r24, 0x80	; 128
     738:	29 f4       	brne	.+10     	; 0x744 <LM629_HW_Reset+0x100>
					(status[2]==0xC0||status[2]==0x80) ){
     73a:	8b 81       	ldd	r24, Y+3	; 0x03
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
					(status[1]==0xC0||status[1]==0x80) && 
     73c:	80 3c       	cpi	r24, 0xC0	; 192
     73e:	69 f0       	breq	.+26     	; 0x75a <LM629_HW_Reset+0x116>
					(status[2]==0xC0||status[2]==0x80) ){
     740:	80 38       	cpi	r24, 0x80	; 128
     742:	59 f0       	breq	.+22     	; 0x75a <LM629_HW_Reset+0x116>
					break;
				}
				else{	//다시 처음부터 LM629초기화
					step=0;	
					// SRE : 외부 데이터 메모리 영역 비활성화
					MCUCR &= ~(1 << SRE) & ~(1 << SRW10);
     744:	85 b7       	in	r24, 0x35	; 53
     746:	8f 73       	andi	r24, 0x3F	; 63
     748:	85 bf       	out	0x35, r24	; 53
					PORTC=0x00;
     74a:	15 ba       	out	0x15, r1	; 21
					lcd_display_str(0,0,"Error. Restart");
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	51 e0       	ldi	r21, 0x01	; 1
     754:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_display_str>
     758:	98 cf       	rjmp	.-208    	; 0x68a <LM629_HW_Reset+0x46>
					break;
				}
			}
		}
		if(step==2){
			lcd_display_str(0,0,"Initialize success.");
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	4f e0       	ldi	r20, 0x0F	; 15
     760:	51 e0       	ldi	r21, 0x01	; 1
     762:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_display_str>
     766:	83 e0       	ldi	r24, 0x03	; 3
			for(i=0;i<3;++i){
				PORTB|=0x07;
     768:	98 b3       	in	r25, 0x18	; 24
     76a:	97 60       	ori	r25, 0x07	; 7
     76c:	98 bb       	out	0x18, r25	; 24
     76e:	2f ef       	ldi	r18, 0xFF	; 255
     770:	3f eb       	ldi	r19, 0xBF	; 191
     772:	46 e0       	ldi	r20, 0x06	; 6
     774:	21 50       	subi	r18, 0x01	; 1
     776:	30 40       	sbci	r19, 0x00	; 0
     778:	40 40       	sbci	r20, 0x00	; 0
     77a:	e1 f7       	brne	.-8      	; 0x774 <LM629_HW_Reset+0x130>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <LM629_HW_Reset+0x13a>
     77e:	00 00       	nop
				_delay_ms(150);
				PORTB&=~0x07;
     780:	98 b3       	in	r25, 0x18	; 24
     782:	98 7f       	andi	r25, 0xF8	; 248
     784:	98 bb       	out	0x18, r25	; 24
     786:	2f ef       	ldi	r18, 0xFF	; 255
     788:	3f eb       	ldi	r19, 0xBF	; 191
     78a:	46 e0       	ldi	r20, 0x06	; 6
     78c:	21 50       	subi	r18, 0x01	; 1
     78e:	30 40       	sbci	r19, 0x00	; 0
     790:	40 40       	sbci	r20, 0x00	; 0
     792:	e1 f7       	brne	.-8      	; 0x78c <LM629_HW_Reset+0x148>
     794:	00 c0       	rjmp	.+0      	; 0x796 <LM629_HW_Reset+0x152>
     796:	00 00       	nop
     798:	81 50       	subi	r24, 0x01	; 1
				}
			}
		}
		if(step==2){
			lcd_display_str(0,0,"Initialize success.");
			for(i=0;i<3;++i){
     79a:	31 f7       	brne	.-52     	; 0x768 <LM629_HW_Reset+0x124>
				PORTB|=0x07;
				_delay_ms(150);
				PORTB&=~0x07;
				_delay_ms(150);
			}
			lcd_clear_screen();
     79c:	0e 94 44 01 	call	0x288	; 0x288 <lcd_clear_screen>
			break;
		}
	}
}
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	cf 91       	pop	r28
     7a8:	df 91       	pop	r29
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	ff 90       	pop	r15
     7b0:	ef 90       	pop	r14
     7b2:	df 90       	pop	r13
     7b4:	cf 90       	pop	r12
     7b6:	bf 90       	pop	r11
     7b8:	af 90       	pop	r10
     7ba:	9f 90       	pop	r9
     7bc:	8f 90       	pop	r8
     7be:	08 95       	ret

000007c0 <StartMotion>:
// Function  : 모든 모터의 모션을 시작한다.
// Parameter : 없음
// Return    : 없음
void StartMotion(void)
{
    WriteCommand(MOTOR0, STT);
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	0e 94 ab 01 	call	0x356	; 0x356 <WriteCommand>
    WriteCommand(MOTOR1, STT);
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	0e 94 ab 01 	call	0x356	; 0x356 <WriteCommand>
    WriteCommand(MOTOR2, STT);
     7d0:	82 e0       	ldi	r24, 0x02	; 2
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	0e 94 ab 01 	call	0x356	; 0x356 <WriteCommand>
}
     7d8:	08 95       	ret

000007da <StopMotion>:

// Function  : 모든 모터의 모션을 정지한다.
// Parameter : 없음
// Return    : 없음
void StopMotion(uint16_t mode)
{
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	18 2f       	mov	r17, r24
    // Motor1 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR0, LTRJ);
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	6f e1       	ldi	r22, 0x1F	; 31
     7e6:	0e 94 ab 01 	call	0x356	; 0x356 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR0, (1 << mode));
     7ea:	c1 e0       	ldi	r28, 0x01	; 1
     7ec:	d0 e0       	ldi	r29, 0x00	; 0
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <StopMotion+0x1a>
     7f0:	cc 0f       	add	r28, r28
     7f2:	dd 1f       	adc	r29, r29
     7f4:	1a 95       	dec	r17
     7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <StopMotion+0x16>
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	be 01       	movw	r22, r28
     7fc:	0e 94 bb 01 	call	0x376	; 0x376 <WriteDataTwoByte>

    // Motor2 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR1, LTRJ);
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	6f e1       	ldi	r22, 0x1F	; 31
     804:	0e 94 ab 01 	call	0x356	; 0x356 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR1, (1 << mode));
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	be 01       	movw	r22, r28
     80c:	0e 94 bb 01 	call	0x376	; 0x376 <WriteDataTwoByte>

    // Motor3 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR2, LTRJ);
     810:	82 e0       	ldi	r24, 0x02	; 2
     812:	6f e1       	ldi	r22, 0x1F	; 31
     814:	0e 94 ab 01 	call	0x356	; 0x356 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR2, (1 << mode));
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	be 01       	movw	r22, r28
     81c:	0e 94 bb 01 	call	0x376	; 0x376 <WriteDataTwoByte>

    // 모션 정지
    WriteCommand(MOTOR0, STT);
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	0e 94 ab 01 	call	0x356	; 0x356 <WriteCommand>
    WriteCommand(MOTOR1, STT);
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	61 e0       	ldi	r22, 0x01	; 1
     82c:	0e 94 ab 01 	call	0x356	; 0x356 <WriteCommand>
    WriteCommand(MOTOR2, STT);
     830:	82 e0       	ldi	r24, 0x02	; 2
     832:	61 e0       	ldi	r22, 0x01	; 1
     834:	0e 94 ab 01 	call	0x356	; 0x356 <WriteCommand>
}
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	08 95       	ret

00000840 <MOTOR_CTR>:

void MOTOR_CTR(long MT0,long MT1,long MT2){
     840:	af 92       	push	r10
     842:	bf 92       	push	r11
     844:	cf 92       	push	r12
     846:	df 92       	push	r13
     848:	ef 92       	push	r14
     84a:	ff 92       	push	r15
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	df 93       	push	r29
     852:	cf 93       	push	r28
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	2c 97       	sbiw	r28, 0x0c	; 12
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
     864:	59 01       	movw	r10, r18
     866:	6a 01       	movw	r12, r20
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};
     868:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatsisf>
     86c:	69 83       	std	Y+1, r22	; 0x01
     86e:	7a 83       	std	Y+2, r23	; 0x02
     870:	8b 83       	std	Y+3, r24	; 0x03
     872:	9c 83       	std	Y+4, r25	; 0x04
     874:	c6 01       	movw	r24, r12
     876:	b5 01       	movw	r22, r10
     878:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatsisf>
     87c:	6d 83       	std	Y+5, r22	; 0x05
     87e:	7e 83       	std	Y+6, r23	; 0x06
     880:	8f 83       	std	Y+7, r24	; 0x07
     882:	98 87       	std	Y+8, r25	; 0x08
     884:	c8 01       	movw	r24, r16
     886:	b7 01       	movw	r22, r14
     888:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatsisf>
     88c:	69 87       	std	Y+9, r22	; 0x09
     88e:	7a 87       	std	Y+10, r23	; 0x0a
     890:	8b 87       	std	Y+11, r24	; 0x0b
     892:	9c 87       	std	Y+12, r25	; 0x0c
     894:	8e 01       	movw	r16, r28
     896:	0f 5f       	subi	r16, 0xFF	; 255
     898:	1f 4f       	sbci	r17, 0xFF	; 255

	for(i=0;i<3;++i){
     89a:	ee 24       	eor	r14, r14
		
		V[i]=V[i]*0.2728;
     89c:	f8 01       	movw	r30, r16
     89e:	60 81       	ld	r22, Z
     8a0:	71 81       	ldd	r23, Z+1	; 0x01
     8a2:	82 81       	ldd	r24, Z+2	; 0x02
     8a4:	93 81       	ldd	r25, Z+3	; 0x03
     8a6:	21 e7       	ldi	r18, 0x71	; 113
     8a8:	3c ea       	ldi	r19, 0xAC	; 172
     8aa:	4b e8       	ldi	r20, 0x8B	; 139
     8ac:	5e e3       	ldi	r21, 0x3E	; 62
     8ae:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     8b2:	9b 01       	movw	r18, r22
     8b4:	ac 01       	movw	r20, r24
     8b6:	f8 01       	movw	r30, r16
     8b8:	21 93       	st	Z+, r18
     8ba:	31 93       	st	Z+, r19
     8bc:	41 93       	st	Z+, r20
     8be:	51 93       	st	Z+, r21
     8c0:	8f 01       	movw	r16, r30

		SetVelocity(i, V[i]*65536);
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	40 e8       	ldi	r20, 0x80	; 128
     8c8:	57 e4       	ldi	r21, 0x47	; 71
     8ca:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     8ce:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__fixsfsi>
     8d2:	ab 01       	movw	r20, r22
     8d4:	bc 01       	movw	r22, r24
     8d6:	8e 2d       	mov	r24, r14
     8d8:	0e 94 b2 02 	call	0x564	; 0x564 <SetVelocity>
void MOTOR_CTR(long MT0,long MT1,long MT2){
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};

	for(i=0;i<3;++i){
     8dc:	e3 94       	inc	r14
     8de:	fe 2d       	mov	r31, r14
     8e0:	f3 30       	cpi	r31, 0x03	; 3
     8e2:	e1 f6       	brne	.-72     	; 0x89c <MOTOR_CTR+0x5c>
		
		V[i]=V[i]*0.2728;

		SetVelocity(i, V[i]*65536);
	}
	StartMotion();	
     8e4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <StartMotion>
}
     8e8:	2c 96       	adiw	r28, 0x0c	; 12
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	cf 91       	pop	r28
     8f6:	df 91       	pop	r29
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	ff 90       	pop	r15
     8fe:	ef 90       	pop	r14
     900:	df 90       	pop	r13
     902:	cf 90       	pop	r12
     904:	bf 90       	pop	r11
     906:	af 90       	pop	r10
     908:	08 95       	ret

0000090a <Camera_init>:


void Camera_init(void){
	unsigned char buff=0;
	while(1){	//우선순위 큰것부터
		putchar1(11);
     90a:	8b e0       	ldi	r24, 0x0B	; 11
     90c:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		while(!rx1_flg); 
     910:	80 91 34 02 	lds	r24, 0x0234
     914:	88 23       	and	r24, r24
     916:	e1 f3       	breq	.-8      	; 0x910 <Camera_init+0x6>
		buff=getchar1();
     918:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
		if(buff){
     91c:	88 23       	and	r24, r24
     91e:	a9 f3       	breq	.-22     	; 0x90a <Camera_init>
			buff=0;
			break;
		}
	}
	while(1){	//추적 할 최소 픽셀수  255픽셀
		putchar1(17);
     920:	81 e1       	ldi	r24, 0x11	; 17
     922:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		putchar1(255);
     926:	8f ef       	ldi	r24, 0xFF	; 255
     928:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		while(!rx1_flg);
     92c:	80 91 34 02 	lds	r24, 0x0234
     930:	88 23       	and	r24, r24
     932:	e1 f3       	breq	.-8      	; 0x92c <Camera_init+0x22>
		buff=getchar1();
     934:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
		if(buff)break;
     938:	88 23       	and	r24, r24
     93a:	91 f3       	breq	.-28     	; 0x920 <Camera_init+0x16>
	}
}
     93c:	08 95       	ret

0000093e <Camera_Cmd>:

unsigned char Camera_Cmd(unsigned char color, unsigned char cmd){
     93e:	df 93       	push	r29
     940:	cf 93       	push	r28
     942:	00 d0       	rcall	.+0      	; 0x944 <Camera_Cmd+0x6>
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
	
	volatile unsigned char buff=0, data=0;
     948:	19 82       	std	Y+1, r1	; 0x01
     94a:	1a 82       	std	Y+2, r1	; 0x02
	
	data=cmd+(color*10);
     94c:	88 0f       	add	r24, r24
     94e:	98 2f       	mov	r25, r24
     950:	99 0f       	add	r25, r25
     952:	99 0f       	add	r25, r25
     954:	98 0f       	add	r25, r24
     956:	69 0f       	add	r22, r25
     958:	6a 83       	std	Y+2, r22	; 0x02

	putchar1(data);
     95a:	8a 81       	ldd	r24, Y+2	; 0x02
     95c:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
	while(!rx1_flg);
     960:	80 91 34 02 	lds	r24, 0x0234
     964:	88 23       	and	r24, r24
     966:	e1 f3       	breq	.-8      	; 0x960 <Camera_Cmd+0x22>
	buff=getchar1();
     968:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
     96c:	89 83       	std	Y+1, r24	; 0x01
	
	return buff;
     96e:	89 81       	ldd	r24, Y+1	; 0x01
}
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
     974:	cf 91       	pop	r28
     976:	df 91       	pop	r29
     978:	08 95       	ret

0000097a <Sensor_init>:
// Function  : IR, PSD 센서를 초기화
// Parameter : 없음
// Return    : 없음
void Sensor_init(void)
{
    DDRE  &= ~0x1C;
     97a:	82 b1       	in	r24, 0x02	; 2
     97c:	83 7e       	andi	r24, 0xE3	; 227
     97e:	82 b9       	out	0x02, r24	; 2
    DDRG  &= ~0x18;
     980:	e4 e6       	ldi	r30, 0x64	; 100
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	87 7e       	andi	r24, 0xE7	; 231
     988:	80 83       	st	Z, r24

    UCSR0A = 0x00;
     98a:	1b b8       	out	0x0b, r1	; 11
    UCSR0B = 0x98;
     98c:	88 e9       	ldi	r24, 0x98	; 152
     98e:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = 0x06;
     990:	86 e0       	ldi	r24, 0x06	; 6
     992:	80 93 95 00 	sts	0x0095, r24
    UBRR0H = 0x00;
     996:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 0x0F;
     99a:	8f e0       	ldi	r24, 0x0F	; 15
     99c:	89 b9       	out	0x09, r24	; 9

    sei();
     99e:	78 94       	sei
}
     9a0:	08 95       	ret

000009a2 <__vector_18>:

// Function  : USART를 통해 전송되는 PSD 센서값을 전역변수에 저장하는 ISR
// Parameter : 없음
// Return    : 없음
ISR(USART0_RX_vect)
{
     9a2:	1f 92       	push	r1
     9a4:	0f 92       	push	r0
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	0f 92       	push	r0
     9aa:	0b b6       	in	r0, 0x3b	; 59
     9ac:	0f 92       	push	r0
     9ae:	11 24       	eor	r1, r1
     9b0:	2f 93       	push	r18
     9b2:	3f 93       	push	r19
     9b4:	8f 93       	push	r24
     9b6:	9f 93       	push	r25
     9b8:	ef 93       	push	r30
     9ba:	ff 93       	push	r31
    volatile static unsigned char rx_cnt = 0;
    volatile static unsigned char chksum = 0;
    volatile static unsigned char buf[11] = {0, };
    uint8_t rxbuf = 0, i;

    rxbuf = UDR0;
     9bc:	9c b1       	in	r25, 0x0c	; 12
    //수신완료 및 에러 검출되지 않을시
    while(!(UCSR0A & 0xB8));
     9be:	8b b1       	in	r24, 0x0b	; 11
     9c0:	88 7b       	andi	r24, 0xB8	; 184
     9c2:	e9 f3       	breq	.-6      	; 0x9be <__vector_18+0x1c>

    if(rxbuf == 0xFF)
     9c4:	9f 3f       	cpi	r25, 0xFF	; 255
     9c6:	21 f4       	brne	.+8      	; 0x9d0 <__vector_18+0x2e>
    {
        //시작 버퍼 수신
        rx_en = 1;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 43 02 	sts	0x0243, r24
     9ce:	47 c0       	rjmp	.+142    	; 0xa5e <__vector_18+0xbc>
    }
    else if(rx_en == 1)
     9d0:	80 91 43 02 	lds	r24, 0x0243
     9d4:	81 30       	cpi	r24, 0x01	; 1
     9d6:	09 f0       	breq	.+2      	; 0x9da <__vector_18+0x38>
     9d8:	42 c0       	rjmp	.+132    	; 0xa5e <__vector_18+0xbc>
    {
        //데이터 받기
        //0번지부터 PSD0 저장
        buf[rx_cnt++] = rxbuf;
     9da:	80 91 42 02 	lds	r24, 0x0242
     9de:	e8 2f       	mov	r30, r24
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	ea 5c       	subi	r30, 0xCA	; 202
     9e4:	fd 4f       	sbci	r31, 0xFD	; 253
     9e6:	90 83       	st	Z, r25
     9e8:	8f 5f       	subi	r24, 0xFF	; 255
     9ea:	80 93 42 02 	sts	0x0242, r24

        if(rx_cnt > 10)
     9ee:	80 91 42 02 	lds	r24, 0x0242
     9f2:	8b 30       	cpi	r24, 0x0B	; 11
     9f4:	a0 f1       	brcs	.+104    	; 0xa5e <__vector_18+0xbc>
        {
            // PSD 10개, 체크섬 1개 수신 완료되면
            //플래그 리셋
            rx_en = rx_cnt = 0;
     9f6:	10 92 42 02 	sts	0x0242, r1
     9fa:	80 91 42 02 	lds	r24, 0x0242
     9fe:	80 93 43 02 	sts	0x0243, r24
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0

            // 체크섬 계산
            for(i = 0 ; i < 10 ; i++)
                chksum += buf[i];
     a06:	30 91 41 02 	lds	r19, 0x0241
     a0a:	fc 01       	movw	r30, r24
     a0c:	ea 5c       	subi	r30, 0xCA	; 202
     a0e:	fd 4f       	sbci	r31, 0xFD	; 253
     a10:	20 81       	ld	r18, Z
     a12:	23 0f       	add	r18, r19
     a14:	20 93 41 02 	sts	0x0241, r18
     a18:	01 96       	adiw	r24, 0x01	; 1
            // PSD 10개, 체크섬 1개 수신 완료되면
            //플래그 리셋
            rx_en = rx_cnt = 0;

            // 체크섬 계산
            for(i = 0 ; i < 10 ; i++)
     a1a:	8a 30       	cpi	r24, 0x0A	; 10
     a1c:	91 05       	cpc	r25, r1
     a1e:	99 f7       	brne	.-26     	; 0xa06 <__vector_18+0x64>
                chksum += buf[i];

            //00~FE 이므로 FF나오면 +1 (오류방지)
            if(chksum == 0xFF)chksum++;
     a20:	80 91 41 02 	lds	r24, 0x0241
     a24:	8f 3f       	cpi	r24, 0xFF	; 255
     a26:	29 f4       	brne	.+10     	; 0xa32 <__vector_18+0x90>
     a28:	80 91 41 02 	lds	r24, 0x0241
     a2c:	8f 5f       	subi	r24, 0xFF	; 255
     a2e:	80 93 41 02 	sts	0x0241, r24

            // 체크섬이 올바른지 체크 후 맞으면 전역변수로 이동
            if(chksum == buf[10])
     a32:	90 91 41 02 	lds	r25, 0x0241
     a36:	80 91 40 02 	lds	r24, 0x0240
     a3a:	98 17       	cp	r25, r24
     a3c:	71 f4       	brne	.+28     	; 0xa5a <__vector_18+0xb8>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
                for(i = 0 ; i < 10 ; i++)
                    psd_value[i] = buf[i];
     a42:	fc 01       	movw	r30, r24
     a44:	ea 5c       	subi	r30, 0xCA	; 202
     a46:	fd 4f       	sbci	r31, 0xFD	; 253
     a48:	20 81       	ld	r18, Z
     a4a:	fc 01       	movw	r30, r24
     a4c:	ea 58       	subi	r30, 0x8A	; 138
     a4e:	fd 4f       	sbci	r31, 0xFD	; 253
     a50:	20 83       	st	Z, r18
     a52:	01 96       	adiw	r24, 0x01	; 1
            //00~FE 이므로 FF나오면 +1 (오류방지)
            if(chksum == 0xFF)chksum++;

            // 체크섬이 올바른지 체크 후 맞으면 전역변수로 이동
            if(chksum == buf[10])
                for(i = 0 ; i < 10 ; i++)
     a54:	8a 30       	cpi	r24, 0x0A	; 10
     a56:	91 05       	cpc	r25, r1
     a58:	a1 f7       	brne	.-24     	; 0xa42 <__vector_18+0xa0>
                    psd_value[i] = buf[i];

            //체크섬 리셋
            chksum = 0;
     a5a:	10 92 41 02 	sts	0x0241, r1
    	}
    }
}
     a5e:	ff 91       	pop	r31
     a60:	ef 91       	pop	r30
     a62:	9f 91       	pop	r25
     a64:	8f 91       	pop	r24
     a66:	3f 91       	pop	r19
     a68:	2f 91       	pop	r18
     a6a:	0f 90       	pop	r0
     a6c:	0b be       	out	0x3b, r0	; 59
     a6e:	0f 90       	pop	r0
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	0f 90       	pop	r0
     a74:	1f 90       	pop	r1
     a76:	18 95       	reti

00000a78 <HolonomicW>:
	}		
}



void HolonomicW(int f_agl, int f_speed, int fw_speed){
     a78:	2f 92       	push	r2
     a7a:	3f 92       	push	r3
     a7c:	4f 92       	push	r4
     a7e:	5f 92       	push	r5
     a80:	6f 92       	push	r6
     a82:	7f 92       	push	r7
     a84:	8f 92       	push	r8
     a86:	9f 92       	push	r9
     a88:	af 92       	push	r10
     a8a:	bf 92       	push	r11
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	df 93       	push	r29
     a9a:	cf 93       	push	r28
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	60 97       	sbiw	r28, 0x10	; 16
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	8c 01       	movw	r16, r24
     aae:	7b 01       	movw	r14, r22
     ab0:	1a 01       	movw	r2, r20
	double V[3]={0,0,0};

	unsigned char i=0;

	// 좌표계 변환
	if(f_agl <= 180) DesiredDirection = 180 - f_agl;
     ab2:	85 3b       	cpi	r24, 0xB5	; 181
     ab4:	91 05       	cpc	r25, r1
     ab6:	1c f4       	brge	.+6      	; 0xabe <HolonomicW+0x46>
     ab8:	64 eb       	ldi	r22, 0xB4	; 180
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <HolonomicW+0x4a>
	else if(f_agl > 180) DesiredDirection = 540 - f_agl;
     abe:	6c e1       	ldi	r22, 0x1C	; 28
     ac0:	72 e0       	ldi	r23, 0x02	; 2
     ac2:	60 1b       	sub	r22, r16
     ac4:	71 0b       	sbc	r23, r17
	
	// 라디안 변환
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
     ac6:	88 27       	eor	r24, r24
     ac8:	77 fd       	sbrc	r23, 7
     aca:	80 95       	com	r24
     acc:	98 2f       	mov	r25, r24
     ace:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatsisf>
     ad2:	5b 01       	movw	r10, r22
     ad4:	6c 01       	movw	r12, r24
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	84 e3       	ldi	r24, 0x34	; 52
     adc:	93 e4       	ldi	r25, 0x43	; 67
     ade:	a6 01       	movw	r20, r12
     ae0:	95 01       	movw	r18, r10
     ae2:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__subsf3>
     ae6:	28 e9       	ldi	r18, 0x98	; 152
     ae8:	39 ef       	ldi	r19, 0xF9	; 249
     aea:	4e e8       	ldi	r20, 0x8E	; 142
     aec:	5c e3       	ldi	r21, 0x3C	; 60
     aee:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
	radianB = (90-(double)DesiredDirection) * 0.017453;

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
     af2:	0e 94 9d 12 	call	0x253a	; 0x253a <cos>
     af6:	3b 01       	movw	r6, r22
     af8:	4c 01       	movw	r8, r24
	if(f_agl <= 180) DesiredDirection = 180 - f_agl;
	else if(f_agl > 180) DesiredDirection = 540 - f_agl;
	
	// 라디안 변환
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
	radianB = (90-(double)DesiredDirection) * 0.017453;
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	84 eb       	ldi	r24, 0xB4	; 180
     b00:	92 e4       	ldi	r25, 0x42	; 66
     b02:	a6 01       	movw	r20, r12
     b04:	95 01       	movw	r18, r10
     b06:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__subsf3>
     b0a:	28 e9       	ldi	r18, 0x98	; 152
     b0c:	39 ef       	ldi	r19, 0xF9	; 249
     b0e:	4e e8       	ldi	r20, 0x8E	; 142
     b10:	5c e3       	ldi	r21, 0x3C	; 60
     b12:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
	Fy = f_speed * cos(radianB);
     b16:	0e 94 9d 12 	call	0x253a	; 0x253a <cos>
     b1a:	5b 01       	movw	r10, r22
     b1c:	6c 01       	movw	r12, r24
	Fw=fw_speed;

	if(f_agl<0 || f_agl>=360){
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	08 36       	cpi	r16, 0x68	; 104
     b22:	18 07       	cpc	r17, r24
     b24:	28 f5       	brcc	.+74     	; 0xb70 <HolonomicW+0xf8>
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
	radianB = (90-(double)DesiredDirection) * 0.017453;

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
     b26:	b7 01       	movw	r22, r14
     b28:	88 27       	eor	r24, r24
     b2a:	77 fd       	sbrc	r23, 7
     b2c:	80 95       	com	r24
     b2e:	98 2f       	mov	r25, r24
     b30:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatsisf>
     b34:	7b 01       	movw	r14, r22
     b36:	8c 01       	movw	r16, r24
     b38:	a4 01       	movw	r20, r8
     b3a:	93 01       	movw	r18, r6
     b3c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     b40:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__fixsfsi>
     b44:	66 2e       	mov	r6, r22
     b46:	77 2e       	mov	r7, r23
     b48:	88 2e       	mov	r8, r24
     b4a:	99 2e       	mov	r9, r25
	Fy = f_speed * cos(radianB);
     b4c:	c8 01       	movw	r24, r16
     b4e:	b7 01       	movw	r22, r14
     b50:	a6 01       	movw	r20, r12
     b52:	95 01       	movw	r18, r10
     b54:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     b58:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__fixsfsi>
     b5c:	e6 2e       	mov	r14, r22
     b5e:	f7 2e       	mov	r15, r23
     b60:	08 2f       	mov	r16, r24
     b62:	19 2f       	mov	r17, r25
	Fw=fw_speed;
     b64:	51 01       	movw	r10, r2
     b66:	cc 24       	eor	r12, r12
     b68:	b7 fc       	sbrc	r11, 7
     b6a:	c0 94       	com	r12
     b6c:	dc 2c       	mov	r13, r12
     b6e:	11 c0       	rjmp	.+34     	; 0xb92 <HolonomicW+0x11a>

	if(f_agl<0 || f_agl>=360){
		if(f_agl<0)Fw = -f_speed;
     b70:	17 ff       	sbrs	r17, 7
     b72:	04 c0       	rjmp	.+8      	; 0xb7c <HolonomicW+0x104>
     b74:	f0 94       	com	r15
     b76:	e1 94       	neg	r14
     b78:	f1 08       	sbc	r15, r1
     b7a:	f3 94       	inc	r15
		else if(f_agl>=360)Fw = f_speed;
     b7c:	57 01       	movw	r10, r14
     b7e:	cc 24       	eor	r12, r12
     b80:	b7 fc       	sbrc	r11, 7
     b82:	c0 94       	com	r12
     b84:	dc 2c       	mov	r13, r12
		Fx=0;
		Fy=0;
     b86:	ee 24       	eor	r14, r14
     b88:	ff 24       	eor	r15, r15
     b8a:	87 01       	movw	r16, r14
	Fw=fw_speed;

	if(f_agl<0 || f_agl>=360){
		if(f_agl<0)Fw = -f_speed;
		else if(f_agl>=360)Fw = f_speed;
		Fx=0;
     b8c:	66 24       	eor	r6, r6
     b8e:	77 24       	eor	r7, r7
     b90:	43 01       	movw	r8, r6
		Fy=0;
	}
		
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
     b92:	c4 01       	movw	r24, r8
     b94:	b3 01       	movw	r22, r6
     b96:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatsisf>
     b9a:	6d 87       	std	Y+13, r22	; 0x0d
     b9c:	7e 87       	std	Y+14, r23	; 0x0e
     b9e:	8f 87       	std	Y+15, r24	; 0x0f
     ba0:	98 8b       	std	Y+16, r25	; 0x10
     ba2:	c8 01       	movw	r24, r16
     ba4:	b7 01       	movw	r22, r14
     ba6:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatsisf>
     baa:	1b 01       	movw	r2, r22
     bac:	2c 01       	movw	r4, r24
     bae:	22 e0       	ldi	r18, 0x02	; 2
     bb0:	3b e2       	ldi	r19, 0x2B	; 43
     bb2:	47 e0       	ldi	r20, 0x07	; 7
     bb4:	5d e3       	ldi	r21, 0x3D	; 61
     bb6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     bba:	16 2f       	mov	r17, r22
     bbc:	f7 2e       	mov	r15, r23
     bbe:	98 2e       	mov	r9, r24
     bc0:	89 2e       	mov	r8, r25
     bc2:	c6 01       	movw	r24, r12
     bc4:	b5 01       	movw	r22, r10
     bc6:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatsisf>
     bca:	2e e4       	ldi	r18, 0x4E	; 78
     bcc:	32 e6       	ldi	r19, 0x62	; 98
     bce:	40 e1       	ldi	r20, 0x10	; 16
     bd0:	5e e3       	ldi	r21, 0x3E	; 62
     bd2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     bd6:	a6 2e       	mov	r10, r22
     bd8:	e7 2e       	mov	r14, r23
     bda:	08 2f       	mov	r16, r24
     bdc:	69 2e       	mov	r6, r25
     bde:	6d 85       	ldd	r22, Y+13	; 0x0d
     be0:	7e 85       	ldd	r23, Y+14	; 0x0e
     be2:	8f 85       	ldd	r24, Y+15	; 0x0f
     be4:	98 89       	ldd	r25, Y+16	; 0x10
     be6:	25 ed       	ldi	r18, 0xD5	; 213
     be8:	38 e7       	ldi	r19, 0x78	; 120
     bea:	49 e6       	ldi	r20, 0x69	; 105
     bec:	5d e3       	ldi	r21, 0x3D	; 61
     bee:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     bf2:	f4 01       	movw	r30, r8
     bf4:	21 2f       	mov	r18, r17
     bf6:	3f 2d       	mov	r19, r15
     bf8:	4f 2f       	mov	r20, r31
     bfa:	5e 2f       	mov	r21, r30
     bfc:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
     c00:	2a 2d       	mov	r18, r10
     c02:	3e 2d       	mov	r19, r14
     c04:	40 2f       	mov	r20, r16
     c06:	56 2d       	mov	r21, r6
     c08:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
     c0c:	69 83       	std	Y+1, r22	; 0x01
     c0e:	7a 83       	std	Y+2, r23	; 0x02
     c10:	8b 83       	std	Y+3, r24	; 0x03
     c12:	9c 83       	std	Y+4, r25	; 0x04
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
     c14:	c2 01       	movw	r24, r4
     c16:	b1 01       	movw	r22, r2
     c18:	28 eb       	ldi	r18, 0xB8	; 184
     c1a:	3e e1       	ldi	r19, 0x1E	; 30
     c1c:	45 e8       	ldi	r20, 0x85	; 133
     c1e:	5d eb       	ldi	r21, 0xBD	; 189
     c20:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     c24:	2a 2d       	mov	r18, r10
     c26:	3e 2d       	mov	r19, r14
     c28:	40 2f       	mov	r20, r16
     c2a:	56 2d       	mov	r21, r6
     c2c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
     c30:	6d 83       	std	Y+5, r22	; 0x05
     c32:	7e 83       	std	Y+6, r23	; 0x06
     c34:	8f 83       	std	Y+7, r24	; 0x07
     c36:	98 87       	std	Y+8, r25	; 0x08
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
     c38:	6d 85       	ldd	r22, Y+13	; 0x0d
     c3a:	7e 85       	ldd	r23, Y+14	; 0x0e
     c3c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c3e:	98 89       	ldd	r25, Y+16	; 0x10
     c40:	25 ed       	ldi	r18, 0xD5	; 213
     c42:	38 e7       	ldi	r19, 0x78	; 120
     c44:	49 e6       	ldi	r20, 0x69	; 105
     c46:	5d eb       	ldi	r21, 0xBD	; 189
     c48:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     c4c:	f4 01       	movw	r30, r8
     c4e:	21 2f       	mov	r18, r17
     c50:	3f 2d       	mov	r19, r15
     c52:	4f 2f       	mov	r20, r31
     c54:	5e 2f       	mov	r21, r30
     c56:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
     c5a:	2a 2d       	mov	r18, r10
     c5c:	3e 2d       	mov	r19, r14
     c5e:	40 2f       	mov	r20, r16
     c60:	56 2d       	mov	r21, r6
     c62:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
     c66:	69 87       	std	Y+9, r22	; 0x09
     c68:	7a 87       	std	Y+10, r23	; 0x0a
     c6a:	8b 87       	std	Y+11, r24	; 0x0b
     c6c:	9c 87       	std	Y+12, r25	; 0x0c
     c6e:	8e 01       	movw	r16, r28
     c70:	0f 5f       	subi	r16, 0xFF	; 255
     c72:	1f 4f       	sbci	r17, 0xFF	; 255
	
    for(i=0;i<3;++i){
     c74:	ee 24       	eor	r14, r14
	}		
}



void HolonomicW(int f_agl, int f_speed, int fw_speed){
     c76:	58 01       	movw	r10, r16
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
	
    for(i=0;i<3;++i){
		if(V[i]>=40)V[i]=40;
     c78:	f8 01       	movw	r30, r16
     c7a:	60 81       	ld	r22, Z
     c7c:	71 81       	ldd	r23, Z+1	; 0x01
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	40 e2       	ldi	r20, 0x20	; 32
     c88:	52 e4       	ldi	r21, 0x42	; 66
     c8a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__gesf2>
     c8e:	87 fd       	sbrc	r24, 7
     c90:	09 c0       	rjmp	.+18     	; 0xca4 <HolonomicW+0x22c>
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a0 e2       	ldi	r26, 0x20	; 32
     c98:	b2 e4       	ldi	r27, 0x42	; 66
     c9a:	f8 01       	movw	r30, r16
     c9c:	80 83       	st	Z, r24
     c9e:	91 83       	std	Z+1, r25	; 0x01
     ca0:	a2 83       	std	Z+2, r26	; 0x02
     ca2:	b3 83       	std	Z+3, r27	; 0x03
		if(V[i]<=(-40))V[i]=-40;
     ca4:	f8 01       	movw	r30, r16
     ca6:	60 81       	ld	r22, Z
     ca8:	71 81       	ldd	r23, Z+1	; 0x01
     caa:	82 81       	ldd	r24, Z+2	; 0x02
     cac:	93 81       	ldd	r25, Z+3	; 0x03
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	40 e2       	ldi	r20, 0x20	; 32
     cb4:	52 ec       	ldi	r21, 0xC2	; 194
     cb6:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__lesf2>
     cba:	18 16       	cp	r1, r24
     cbc:	4c f0       	brlt	.+18     	; 0xcd0 <HolonomicW+0x258>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e2       	ldi	r26, 0x20	; 32
     cc4:	b2 ec       	ldi	r27, 0xC2	; 194
     cc6:	f8 01       	movw	r30, r16
     cc8:	80 83       	st	Z, r24
     cca:	91 83       	std	Z+1, r25	; 0x01
     ccc:	a2 83       	std	Z+2, r26	; 0x02
     cce:	b3 83       	std	Z+3, r27	; 0x03
     cd0:	0c 5f       	subi	r16, 0xFC	; 252
     cd2:	1f 4f       	sbci	r17, 0xFF	; 255
		SetVelocity(i, V[i]*65536);
     cd4:	f5 01       	movw	r30, r10
     cd6:	60 81       	ld	r22, Z
     cd8:	71 81       	ldd	r23, Z+1	; 0x01
     cda:	82 81       	ldd	r24, Z+2	; 0x02
     cdc:	93 81       	ldd	r25, Z+3	; 0x03
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e8       	ldi	r20, 0x80	; 128
     ce4:	57 e4       	ldi	r21, 0x47	; 71
     ce6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     cea:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__fixsfsi>
     cee:	ab 01       	movw	r20, r22
     cf0:	bc 01       	movw	r22, r24
     cf2:	8e 2d       	mov	r24, r14
     cf4:	0e 94 b2 02 	call	0x564	; 0x564 <SetVelocity>
		
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
	
    for(i=0;i<3;++i){
     cf8:	e3 94       	inc	r14
     cfa:	fe 2d       	mov	r31, r14
     cfc:	f3 30       	cpi	r31, 0x03	; 3
     cfe:	09 f0       	breq	.+2      	; 0xd02 <HolonomicW+0x28a>
     d00:	ba cf       	rjmp	.-140    	; 0xc76 <HolonomicW+0x1fe>
		if(V[i]>=40)V[i]=40;
		if(V[i]<=(-40))V[i]=-40;
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
     d02:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <StartMotion>
}
     d06:	60 96       	adiw	r28, 0x10	; 16
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	df 90       	pop	r13
     d20:	cf 90       	pop	r12
     d22:	bf 90       	pop	r11
     d24:	af 90       	pop	r10
     d26:	9f 90       	pop	r9
     d28:	8f 90       	pop	r8
     d2a:	7f 90       	pop	r7
     d2c:	6f 90       	pop	r6
     d2e:	5f 90       	pop	r5
     d30:	4f 90       	pop	r4
     d32:	3f 90       	pop	r3
     d34:	2f 90       	pop	r2
     d36:	08 95       	ret

00000d38 <Holonomic_distance>:


////////////////////////함수/////////////////////////


void Holonomic_distance(int f_agl,int f_speed,unsigned int distance,unsigned stop){
     d38:	2f 92       	push	r2
     d3a:	3f 92       	push	r3
     d3c:	4f 92       	push	r4
     d3e:	5f 92       	push	r5
     d40:	6f 92       	push	r6
     d42:	7f 92       	push	r7
     d44:	8f 92       	push	r8
     d46:	9f 92       	push	r9
     d48:	af 92       	push	r10
     d4a:	bf 92       	push	r11
     d4c:	cf 92       	push	r12
     d4e:	df 92       	push	r13
     d50:	ef 92       	push	r14
     d52:	ff 92       	push	r15
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <Holonomic_distance+0x26>
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	9a 83       	std	Y+2, r25	; 0x02
     d64:	89 83       	std	Y+1, r24	; 0x01
     d66:	1a 01       	movw	r2, r20
     d68:	79 01       	movw	r14, r18
//1.각도	2.속도	3.거리	4.감속지점	
	next_speed=f_speed;
     d6a:	88 27       	eor	r24, r24
     d6c:	77 fd       	sbrc	r23, 7
     d6e:	80 95       	com	r24
     d70:	98 2f       	mov	r25, r24
     d72:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatsisf>
     d76:	60 93 4a 02 	sts	0x024A, r22
     d7a:	70 93 4b 02 	sts	0x024B, r23
     d7e:	80 93 4c 02 	sts	0x024C, r24
     d82:	90 93 4d 02 	sts	0x024D, r25
	acc=5;
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	a0 ea       	ldi	r26, 0xA0	; 160
     d8c:	b0 e4       	ldi	r27, 0x40	; 64
     d8e:	80 93 23 01 	sts	0x0123, r24
     d92:	90 93 24 01 	sts	0x0124, r25
     d96:	a0 93 25 01 	sts	0x0125, r26
     d9a:	b0 93 26 01 	sts	0x0126, r27
	TCNT1H=0xFF; TCNT1L=0x70;	//0.01초
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	8d bd       	out	0x2d, r24	; 45
     da2:	80 e7       	ldi	r24, 0x70	; 112
     da4:	8c bd       	out	0x2c, r24	; 44
	sec=0;
     da6:	10 92 45 02 	sts	0x0245, r1
     daa:	10 92 44 02 	sts	0x0244, r1
	disMD=0;	//거리 초기화
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	dc 01       	movw	r26, r24
     db4:	80 93 62 02 	sts	0x0262, r24
     db8:	90 93 63 02 	sts	0x0263, r25
     dbc:	a0 93 64 02 	sts	0x0264, r26
     dc0:	b0 93 65 02 	sts	0x0265, r27
	
	while(1){
	
		HolonomicW(f_agl,speed,0);
	
		if(disMD>=distance) break;
     dc4:	44 24       	eor	r4, r4
     dc6:	55 24       	eor	r5, r5
		else if(disMD>=stop) next_speed=50;
     dc8:	57 01       	movw	r10, r14
     dca:	cc 24       	eor	r12, r12
     dcc:	dd 24       	eor	r13, r13
     dce:	0f 2e       	mov	r0, r31
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	6f 2e       	mov	r6, r31
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	7f 2e       	mov	r7, r31
     dd8:	f8 e4       	ldi	r31, 0x48	; 72
     dda:	8f 2e       	mov	r8, r31
     ddc:	f2 e4       	ldi	r31, 0x42	; 66
     dde:	9f 2e       	mov	r9, r31
     de0:	f0 2d       	mov	r31, r0
	sec=0;
	disMD=0;	//거리 초기화
	
	while(1){
	
		HolonomicW(f_agl,speed,0);
     de2:	60 91 46 02 	lds	r22, 0x0246
     de6:	70 91 47 02 	lds	r23, 0x0247
     dea:	80 91 48 02 	lds	r24, 0x0248
     dee:	90 91 49 02 	lds	r25, 0x0249
     df2:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__fixsfsi>
     df6:	9b 01       	movw	r18, r22
     df8:	ac 01       	movw	r20, r24
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	9a 81       	ldd	r25, Y+2	; 0x02
     dfe:	b9 01       	movw	r22, r18
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	0e 94 3c 05 	call	0xa78	; 0xa78 <HolonomicW>
	
		if(disMD>=distance) break;
     e08:	e0 90 62 02 	lds	r14, 0x0262
     e0c:	f0 90 63 02 	lds	r15, 0x0263
     e10:	00 91 64 02 	lds	r16, 0x0264
     e14:	10 91 65 02 	lds	r17, 0x0265
     e18:	c2 01       	movw	r24, r4
     e1a:	b1 01       	movw	r22, r2
     e1c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatunsisf>
     e20:	9b 01       	movw	r18, r22
     e22:	ac 01       	movw	r20, r24
     e24:	c8 01       	movw	r24, r16
     e26:	b7 01       	movw	r22, r14
     e28:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__gesf2>
     e2c:	87 ff       	sbrs	r24, 7
     e2e:	1d c0       	rjmp	.+58     	; 0xe6a <Holonomic_distance+0x132>
		else if(disMD>=stop) next_speed=50;
     e30:	e0 90 62 02 	lds	r14, 0x0262
     e34:	f0 90 63 02 	lds	r15, 0x0263
     e38:	00 91 64 02 	lds	r16, 0x0264
     e3c:	10 91 65 02 	lds	r17, 0x0265
     e40:	c6 01       	movw	r24, r12
     e42:	b5 01       	movw	r22, r10
     e44:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatunsisf>
     e48:	9b 01       	movw	r18, r22
     e4a:	ac 01       	movw	r20, r24
     e4c:	c8 01       	movw	r24, r16
     e4e:	b7 01       	movw	r22, r14
     e50:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__gesf2>
     e54:	87 fd       	sbrc	r24, 7
     e56:	c5 cf       	rjmp	.-118    	; 0xde2 <Holonomic_distance+0xaa>
     e58:	60 92 4a 02 	sts	0x024A, r6
     e5c:	70 92 4b 02 	sts	0x024B, r7
     e60:	80 92 4c 02 	sts	0x024C, r8
     e64:	90 92 4d 02 	sts	0x024D, r9
     e68:	bc cf       	rjmp	.-136    	; 0xde2 <Holonomic_distance+0xaa>
	}
}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	ff 90       	pop	r15
     e78:	ef 90       	pop	r14
     e7a:	df 90       	pop	r13
     e7c:	cf 90       	pop	r12
     e7e:	bf 90       	pop	r11
     e80:	af 90       	pop	r10
     e82:	9f 90       	pop	r9
     e84:	8f 90       	pop	r8
     e86:	7f 90       	pop	r7
     e88:	6f 90       	pop	r6
     e8a:	5f 90       	pop	r5
     e8c:	4f 90       	pop	r4
     e8e:	3f 90       	pop	r3
     e90:	2f 90       	pop	r2
     e92:	08 95       	ret

00000e94 <non_Holonomic>:
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
}

void non_Holonomic(long Fx, long Fy, long Fw){
     e94:	2f 92       	push	r2
     e96:	3f 92       	push	r3
     e98:	4f 92       	push	r4
     e9a:	5f 92       	push	r5
     e9c:	6f 92       	push	r6
     e9e:	7f 92       	push	r7
     ea0:	8f 92       	push	r8
     ea2:	9f 92       	push	r9
     ea4:	af 92       	push	r10
     ea6:	bf 92       	push	r11
     ea8:	cf 92       	push	r12
     eaa:	df 92       	push	r13
     eac:	ef 92       	push	r14
     eae:	ff 92       	push	r15
     eb0:	0f 93       	push	r16
     eb2:	1f 93       	push	r17
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	2d 97       	sbiw	r28, 0x0d	; 13
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	3b 01       	movw	r6, r22
     eca:	4c 01       	movw	r8, r24
     ecc:	59 01       	movw	r10, r18
     ece:	6a 01       	movw	r12, r20

	unsigned char i=0;
	double V[3]={0,0,0};
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	dc 01       	movw	r26, r24
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	9a 83       	std	Y+2, r25	; 0x02
     eda:	ab 83       	std	Y+3, r26	; 0x03
     edc:	bc 83       	std	Y+4, r27	; 0x04
     ede:	8d 83       	std	Y+5, r24	; 0x05
     ee0:	9e 83       	std	Y+6, r25	; 0x06
     ee2:	af 83       	std	Y+7, r26	; 0x07
     ee4:	b8 87       	std	Y+8, r27	; 0x08
     ee6:	89 87       	std	Y+9, r24	; 0x09
     ee8:	9a 87       	std	Y+10, r25	; 0x0a
     eea:	ab 87       	std	Y+11, r26	; 0x0b
     eec:	bc 87       	std	Y+12, r27	; 0x0c

	if(Fx==0 && Fy==0 && Fw==0)StopMotion(STOP_ABRUPTLY);
     eee:	61 14       	cp	r6, r1
     ef0:	71 04       	cpc	r7, r1
     ef2:	81 04       	cpc	r8, r1
     ef4:	91 04       	cpc	r9, r1
     ef6:	71 f4       	brne	.+28     	; 0xf14 <non_Holonomic+0x80>
     ef8:	21 15       	cp	r18, r1
     efa:	31 05       	cpc	r19, r1
     efc:	41 05       	cpc	r20, r1
     efe:	51 05       	cpc	r21, r1
     f00:	49 f4       	brne	.+18     	; 0xf14 <non_Holonomic+0x80>
     f02:	e1 14       	cp	r14, r1
     f04:	f1 04       	cpc	r15, r1
     f06:	01 05       	cpc	r16, r1
     f08:	11 05       	cpc	r17, r1
     f0a:	21 f4       	brne	.+8      	; 0xf14 <non_Holonomic+0x80>
     f0c:	89 e0       	ldi	r24, 0x09	; 9
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 ed 03 	call	0x7da	; 0x7da <StopMotion>

	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
     f14:	c4 01       	movw	r24, r8
     f16:	b3 01       	movw	r22, r6
     f18:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatsisf>
     f1c:	1b 01       	movw	r2, r22
     f1e:	2c 01       	movw	r4, r24
     f20:	c6 01       	movw	r24, r12
     f22:	b5 01       	movw	r22, r10
     f24:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatsisf>
     f28:	3b 01       	movw	r6, r22
     f2a:	4c 01       	movw	r8, r24
     f2c:	22 e0       	ldi	r18, 0x02	; 2
     f2e:	3b e2       	ldi	r19, 0x2B	; 43
     f30:	47 e0       	ldi	r20, 0x07	; 7
     f32:	5d e3       	ldi	r21, 0x3D	; 61
     f34:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     f38:	d6 2e       	mov	r13, r22
     f3a:	c7 2e       	mov	r12, r23
     f3c:	b8 2e       	mov	r11, r24
     f3e:	9d 87       	std	Y+13, r25	; 0x0d
     f40:	c8 01       	movw	r24, r16
     f42:	b7 01       	movw	r22, r14
     f44:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatsisf>
     f48:	29 e2       	ldi	r18, 0x29	; 41
     f4a:	3c e5       	ldi	r19, 0x5C	; 92
     f4c:	4f e0       	ldi	r20, 0x0F	; 15
     f4e:	5e e3       	ldi	r21, 0x3E	; 62
     f50:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     f54:	a6 2e       	mov	r10, r22
     f56:	e7 2e       	mov	r14, r23
     f58:	8c 01       	movw	r16, r24
     f5a:	c2 01       	movw	r24, r4
     f5c:	b1 01       	movw	r22, r2
     f5e:	22 e4       	ldi	r18, 0x42	; 66
     f60:	30 e6       	ldi	r19, 0x60	; 96
     f62:	45 e6       	ldi	r20, 0x65	; 101
     f64:	5d e3       	ldi	r21, 0x3D	; 61
     f66:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     f6a:	d6 01       	movw	r26, r12
     f6c:	ed 85       	ldd	r30, Y+13	; 0x0d
     f6e:	2b 2f       	mov	r18, r27
     f70:	3a 2f       	mov	r19, r26
     f72:	4b 2d       	mov	r20, r11
     f74:	5e 2f       	mov	r21, r30
     f76:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
     f7a:	2a 2d       	mov	r18, r10
     f7c:	3e 2d       	mov	r19, r14
     f7e:	40 2f       	mov	r20, r16
     f80:	51 2f       	mov	r21, r17
     f82:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
     f86:	69 83       	std	Y+1, r22	; 0x01
     f88:	7a 83       	std	Y+2, r23	; 0x02
     f8a:	8b 83       	std	Y+3, r24	; 0x03
     f8c:	9c 83       	std	Y+4, r25	; 0x04
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
     f8e:	c4 01       	movw	r24, r8
     f90:	b3 01       	movw	r22, r6
     f92:	28 eb       	ldi	r18, 0xB8	; 184
     f94:	3e e1       	ldi	r19, 0x1E	; 30
     f96:	45 e8       	ldi	r20, 0x85	; 133
     f98:	5d eb       	ldi	r21, 0xBD	; 189
     f9a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     f9e:	2a 2d       	mov	r18, r10
     fa0:	3e 2d       	mov	r19, r14
     fa2:	40 2f       	mov	r20, r16
     fa4:	51 2f       	mov	r21, r17
     fa6:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
     faa:	6d 83       	std	Y+5, r22	; 0x05
     fac:	7e 83       	std	Y+6, r23	; 0x06
     fae:	8f 83       	std	Y+7, r24	; 0x07
     fb0:	98 87       	std	Y+8, r25	; 0x08
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
     fb2:	c2 01       	movw	r24, r4
     fb4:	b1 01       	movw	r22, r2
     fb6:	22 e4       	ldi	r18, 0x42	; 66
     fb8:	30 e6       	ldi	r19, 0x60	; 96
     fba:	45 e6       	ldi	r20, 0x65	; 101
     fbc:	5d eb       	ldi	r21, 0xBD	; 189
     fbe:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
     fc2:	d6 01       	movw	r26, r12
     fc4:	ed 85       	ldd	r30, Y+13	; 0x0d
     fc6:	2b 2f       	mov	r18, r27
     fc8:	3a 2f       	mov	r19, r26
     fca:	4b 2d       	mov	r20, r11
     fcc:	5e 2f       	mov	r21, r30
     fce:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
     fd2:	2a 2d       	mov	r18, r10
     fd4:	3e 2d       	mov	r19, r14
     fd6:	40 2f       	mov	r20, r16
     fd8:	51 2f       	mov	r21, r17
     fda:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
     fde:	69 87       	std	Y+9, r22	; 0x09
     fe0:	7a 87       	std	Y+10, r23	; 0x0a
     fe2:	8b 87       	std	Y+11, r24	; 0x0b
     fe4:	9c 87       	std	Y+12, r25	; 0x0c
     fe6:	8e 01       	movw	r16, r28
     fe8:	0f 5f       	subi	r16, 0xFF	; 255
     fea:	1f 4f       	sbci	r17, 0xFF	; 255

	for(i=0;i<3;++i){
     fec:	ee 24       	eor	r14, r14
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
}

void non_Holonomic(long Fx, long Fy, long Fw){
     fee:	58 01       	movw	r10, r16
	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));

	for(i=0;i<3;++i){
		if(V[i]>=40)V[i]=40;
     ff0:	f8 01       	movw	r30, r16
     ff2:	60 81       	ld	r22, Z
     ff4:	71 81       	ldd	r23, Z+1	; 0x01
     ff6:	82 81       	ldd	r24, Z+2	; 0x02
     ff8:	93 81       	ldd	r25, Z+3	; 0x03
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e2       	ldi	r20, 0x20	; 32
    1000:	52 e4       	ldi	r21, 0x42	; 66
    1002:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__gesf2>
    1006:	87 fd       	sbrc	r24, 7
    1008:	09 c0       	rjmp	.+18     	; 0x101c <non_Holonomic+0x188>
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	a0 e2       	ldi	r26, 0x20	; 32
    1010:	b2 e4       	ldi	r27, 0x42	; 66
    1012:	f8 01       	movw	r30, r16
    1014:	80 83       	st	Z, r24
    1016:	91 83       	std	Z+1, r25	; 0x01
    1018:	a2 83       	std	Z+2, r26	; 0x02
    101a:	b3 83       	std	Z+3, r27	; 0x03
		if(V[i]<=(-40))V[i]=-40;
    101c:	f8 01       	movw	r30, r16
    101e:	60 81       	ld	r22, Z
    1020:	71 81       	ldd	r23, Z+1	; 0x01
    1022:	82 81       	ldd	r24, Z+2	; 0x02
    1024:	93 81       	ldd	r25, Z+3	; 0x03
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e2       	ldi	r20, 0x20	; 32
    102c:	52 ec       	ldi	r21, 0xC2	; 194
    102e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__lesf2>
    1032:	18 16       	cp	r1, r24
    1034:	4c f0       	brlt	.+18     	; 0x1048 <non_Holonomic+0x1b4>
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	a0 e2       	ldi	r26, 0x20	; 32
    103c:	b2 ec       	ldi	r27, 0xC2	; 194
    103e:	f8 01       	movw	r30, r16
    1040:	80 83       	st	Z, r24
    1042:	91 83       	std	Z+1, r25	; 0x01
    1044:	a2 83       	std	Z+2, r26	; 0x02
    1046:	b3 83       	std	Z+3, r27	; 0x03
    1048:	0c 5f       	subi	r16, 0xFC	; 252
    104a:	1f 4f       	sbci	r17, 0xFF	; 255
		SetVelocity(i, V[i]*65536);
    104c:	f5 01       	movw	r30, r10
    104e:	60 81       	ld	r22, Z
    1050:	71 81       	ldd	r23, Z+1	; 0x01
    1052:	82 81       	ldd	r24, Z+2	; 0x02
    1054:	93 81       	ldd	r25, Z+3	; 0x03
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e8       	ldi	r20, 0x80	; 128
    105c:	57 e4       	ldi	r21, 0x47	; 71
    105e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
    1062:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__fixsfsi>
    1066:	ab 01       	movw	r20, r22
    1068:	bc 01       	movw	r22, r24
    106a:	8e 2d       	mov	r24, r14
    106c:	0e 94 b2 02 	call	0x564	; 0x564 <SetVelocity>

	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));

	for(i=0;i<3;++i){
    1070:	e3 94       	inc	r14
    1072:	fe 2d       	mov	r31, r14
    1074:	f3 30       	cpi	r31, 0x03	; 3
    1076:	09 f0       	breq	.+2      	; 0x107a <non_Holonomic+0x1e6>
    1078:	ba cf       	rjmp	.-140    	; 0xfee <non_Holonomic+0x15a>
		if(V[i]>=40)V[i]=40;
		if(V[i]<=(-40))V[i]=-40;
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
    107a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <StartMotion>
}
    107e:	2d 96       	adiw	r28, 0x0d	; 13
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	ff 90       	pop	r15
    1094:	ef 90       	pop	r14
    1096:	df 90       	pop	r13
    1098:	cf 90       	pop	r12
    109a:	bf 90       	pop	r11
    109c:	af 90       	pop	r10
    109e:	9f 90       	pop	r9
    10a0:	8f 90       	pop	r8
    10a2:	7f 90       	pop	r7
    10a4:	6f 90       	pop	r6
    10a6:	5f 90       	pop	r5
    10a8:	4f 90       	pop	r4
    10aa:	3f 90       	pop	r3
    10ac:	2f 90       	pop	r2
    10ae:	08 95       	ret

000010b0 <LINE>:
	}
}


int LINE(void)
{
    10b0:	df 92       	push	r13
    10b2:	ef 92       	push	r14
    10b4:	ff 92       	push	r15
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
	unsigned char SENSOR=0;
	int err=0;
	unsigned char dir;
	sec=0;
    10ba:	10 92 45 02 	sts	0x0245, r1
    10be:	10 92 44 02 	sts	0x0244, r1
	while(1)
	{
		SENSOR=READ_SENSOR();	
    10c2:	80 91 63 00 	lds	r24, 0x0063
    10c6:	91 b1       	in	r25, 0x01	; 1
    10c8:	86 95       	lsr	r24
    10ca:	86 95       	lsr	r24
    10cc:	86 95       	lsr	r24
    10ce:	80 95       	com	r24
    10d0:	83 70       	andi	r24, 0x03	; 3
    10d2:	90 95       	com	r25
    10d4:	9c 71       	andi	r25, 0x1C	; 28
    10d6:	89 2b       	or	r24, r25
		if( SENSOR&0x08 )
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	83 ff       	sbrs	r24, 3
    10dc:	07 c0       	rjmp	.+14     	; 0x10ec <LINE+0x3c>
		{
			sec=0;
    10de:	10 92 45 02 	sts	0x0245, r1
    10e2:	10 92 44 02 	sts	0x0244, r1
			err=3;
    10e6:	43 e0       	ldi	r20, 0x03	; 3
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <LINE+0x40>
		}
		else if (!(SENSOR&0x08) )err=-15;
    10ec:	41 ef       	ldi	r20, 0xF1	; 241
    10ee:	5f ef       	ldi	r21, 0xFF	; 255

		if(sec>50||(SENSOR&0x1C)==0x1C)
    10f0:	20 91 44 02 	lds	r18, 0x0244
    10f4:	30 91 45 02 	lds	r19, 0x0245
    10f8:	23 33       	cpi	r18, 0x33	; 51
    10fa:	31 05       	cpc	r19, r1
    10fc:	88 f4       	brcc	.+34     	; 0x1120 <__stack+0x21>
    10fe:	9c 01       	movw	r18, r24
    1100:	2c 71       	andi	r18, 0x1C	; 28
    1102:	30 70       	andi	r19, 0x00	; 0
    1104:	2c 31       	cpi	r18, 0x1C	; 28
    1106:	31 05       	cpc	r19, r1
    1108:	59 f0       	breq	.+22     	; 0x1120 <__stack+0x21>
		{
			dir=0;
			break;
			
		}		
		if((SENSOR&0x04))
    110a:	82 fd       	sbrc	r24, 2
    110c:	0b c0       	rjmp	.+22     	; 0x1124 <__stack+0x25>
		{	
			dir=2;
			break;
		}
		else if((SENSOR&0x10))
    110e:	84 fd       	sbrc	r24, 4
    1110:	0c c0       	rjmp	.+24     	; 0x112a <__stack+0x2b>
		{
			dir=3;
			break;
		}
		HolonomicW(0,150,err);
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	66 e9       	ldi	r22, 0x96	; 150
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	0e 94 3c 05 	call	0xa78	; 0xa78 <HolonomicW>
	}
    111e:	d1 cf       	rjmp	.-94     	; 0x10c2 <LINE+0x12>
		}
		else if (!(SENSOR&0x08) )err=-15;

		if(sec>50||(SENSOR&0x1C)==0x1C)
		{
			dir=0;
    1120:	dd 24       	eor	r13, r13
    1122:	05 c0       	rjmp	.+10     	; 0x112e <__stack+0x2f>
			break;
			
		}		
		if((SENSOR&0x04))
		{	
			dir=2;
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	d9 2e       	mov	r13, r25
    1128:	02 c0       	rjmp	.+4      	; 0x112e <__stack+0x2f>
			break;
		}
		else if((SENSOR&0x10))
		{
			dir=3;
    112a:	83 e0       	ldi	r24, 0x03	; 3
    112c:	d8 2e       	mov	r13, r24
			break;
		}
		HolonomicW(0,150,err);
	}
	non_Holonomic(0,0,0);
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	cb 01       	movw	r24, r22
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	a9 01       	movw	r20, r18
    113a:	ee 24       	eor	r14, r14
    113c:	ff 24       	eor	r15, r15
    113e:	87 01       	movw	r16, r14
    1140:	0e 94 4a 07 	call	0xe94	; 0xe94 <non_Holonomic>
	return dir;
}
    1144:	8d 2d       	mov	r24, r13
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	ff 90       	pop	r15
    114e:	ef 90       	pop	r14
    1150:	df 90       	pop	r13
    1152:	08 95       	ret

00001154 <main>:

int main(void)
{    
    1154:	ef 92       	push	r14
    1156:	ff 92       	push	r15
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17

    Interface_init(); //인터페이스 초기화
    115c:	0e 94 ae 00 	call	0x15c	; 0x15c <Interface_init>

	LM629_HW_Reset();
    1160:	0e 94 22 03 	call	0x644	; 0x644 <LM629_HW_Reset>
	MCU_init();	   // MCU 초기화
    1164:	0e 94 76 00 	call	0xec	; 0xec <MCU_init>
	Motor_init();  // Motor 드라이버 초기화
    1168:	0e 94 81 02 	call	0x502	; 0x502 <Motor_init>

	Sensor_init();
    116c:	0e 94 bd 04 	call	0x97a	; 0x97a <Sensor_init>

	DDRB=0x0F;		//LED, BZ, SW
    1170:	8f e0       	ldi	r24, 0x0F	; 15
    1172:	87 bb       	out	0x17, r24	; 23
	TCCR1A=0x00;	// Clock value: 14.400 kHz
    1174:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x05;
    1176:	85 e0       	ldi	r24, 0x05	; 5
    1178:	8e bd       	out	0x2e, r24	; 46

	TCNT1H=0xFF;	//0.01초
    117a:	8f ef       	ldi	r24, 0xFF	; 255
    117c:	8d bd       	out	0x2d, r24	; 45
	TCNT1L=0x70;
    117e:	80 e7       	ldi	r24, 0x70	; 112
    1180:	8c bd       	out	0x2c, r24	; 44
	TIMSK=0x04;
    1182:	84 e0       	ldi	r24, 0x04	; 4
    1184:	87 bf       	out	0x37, r24	; 55

	sei();
    1186:	78 94       	sei
	while(1){


		if(SW1)
    1188:	b4 99       	sbic	0x16, 4	; 22
    118a:	fe c0       	rjmp	.+508    	; 0x1388 <main+0x234>
		{
			LINE();
    118c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LINE>
			non_Holonomic(0,0,100);
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	cb 01       	movw	r24, r22
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	a9 01       	movw	r20, r18
    119c:	b4 e6       	ldi	r27, 0x64	; 100
    119e:	eb 2e       	mov	r14, r27
    11a0:	f1 2c       	mov	r15, r1
    11a2:	01 2d       	mov	r16, r1
    11a4:	11 2d       	mov	r17, r1
    11a6:	0e 94 4a 07 	call	0xe94	; 0xe94 <non_Holonomic>
    11aa:	8f ef       	ldi	r24, 0xFF	; 255
    11ac:	9f e7       	ldi	r25, 0x7F	; 127
    11ae:	a8 e2       	ldi	r26, 0x28	; 40
    11b0:	81 50       	subi	r24, 0x01	; 1
    11b2:	90 40       	sbci	r25, 0x00	; 0
    11b4:	a0 40       	sbci	r26, 0x00	; 0
    11b6:	e1 f7       	brne	.-8      	; 0x11b0 <main+0x5c>
    11b8:	00 c0       	rjmp	.+0      	; 0x11ba <main+0x66>
    11ba:	00 00       	nop
			_delay_ms(900);
			non_Holonomic(0,0,0);
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	cb 01       	movw	r24, r22
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	a9 01       	movw	r20, r18
    11c8:	07 c0       	rjmp	.+14     	; 0x11d8 <main+0x84>
			while(!(READ_SENSOR()&0x08)){
				non_Holonomic(0,-150,0);
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	cb 01       	movw	r24, r22
    11d0:	2a e6       	ldi	r18, 0x6A	; 106
    11d2:	3f ef       	ldi	r19, 0xFF	; 255
    11d4:	4f ef       	ldi	r20, 0xFF	; 255
    11d6:	5f ef       	ldi	r21, 0xFF	; 255
    11d8:	ee 24       	eor	r14, r14
    11da:	ff 24       	eor	r15, r15
    11dc:	87 01       	movw	r16, r14
    11de:	0e 94 4a 07 	call	0xe94	; 0xe94 <non_Holonomic>
		{
			LINE();
			non_Holonomic(0,0,100);
			_delay_ms(900);
			non_Holonomic(0,0,0);
			while(!(READ_SENSOR()&0x08)){
    11e2:	80 91 63 00 	lds	r24, 0x0063
    11e6:	81 b1       	in	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	80 95       	com	r24
    11ec:	90 95       	com	r25
    11ee:	83 ff       	sbrs	r24, 3
    11f0:	ec cf       	rjmp	.-40     	; 0x11ca <main+0x76>
				non_Holonomic(0,-150,0);
			}
			LINE();
    11f2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LINE>
			non_Holonomic(0,0,-100);
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	cb 01       	movw	r24, r22
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	a9 01       	movw	r20, r18
    1202:	ac e9       	ldi	r26, 0x9C	; 156
    1204:	ea 2e       	mov	r14, r26
    1206:	af ef       	ldi	r26, 0xFF	; 255
    1208:	fa 2e       	mov	r15, r26
    120a:	af ef       	ldi	r26, 0xFF	; 255
    120c:	0a 2f       	mov	r16, r26
    120e:	af ef       	ldi	r26, 0xFF	; 255
    1210:	1a 2f       	mov	r17, r26
    1212:	0e 94 4a 07 	call	0xe94	; 0xe94 <non_Holonomic>
    1216:	8f ef       	ldi	r24, 0xFF	; 255
    1218:	9f e7       	ldi	r25, 0x7F	; 127
    121a:	a8 e2       	ldi	r26, 0x28	; 40
    121c:	81 50       	subi	r24, 0x01	; 1
    121e:	90 40       	sbci	r25, 0x00	; 0
    1220:	a0 40       	sbci	r26, 0x00	; 0
    1222:	e1 f7       	brne	.-8      	; 0x121c <main+0xc8>
    1224:	00 c0       	rjmp	.+0      	; 0x1226 <main+0xd2>
    1226:	00 00       	nop
    1228:	0c c0       	rjmp	.+24     	; 0x1242 <main+0xee>
			_delay_ms(900);
			while(!(READ_SENSOR()&0x08)){
				non_Holonomic(0,150,0);
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	cb 01       	movw	r24, r22
    1230:	26 e9       	ldi	r18, 0x96	; 150
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e0       	ldi	r20, 0x00	; 0
    1236:	50 e0       	ldi	r21, 0x00	; 0
    1238:	ee 24       	eor	r14, r14
    123a:	ff 24       	eor	r15, r15
    123c:	87 01       	movw	r16, r14
    123e:	0e 94 4a 07 	call	0xe94	; 0xe94 <non_Holonomic>
				non_Holonomic(0,-150,0);
			}
			LINE();
			non_Holonomic(0,0,-100);
			_delay_ms(900);
			while(!(READ_SENSOR()&0x08)){
    1242:	80 91 63 00 	lds	r24, 0x0063
    1246:	81 b1       	in	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	80 95       	com	r24
    124c:	90 95       	com	r25
    124e:	83 ff       	sbrs	r24, 3
    1250:	ec cf       	rjmp	.-40     	; 0x122a <main+0xd6>
				non_Holonomic(0,150,0);
			}			
			LINE();
    1252:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LINE>
			non_Holonomic(0,0,100);
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	cb 01       	movw	r24, r22
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	a9 01       	movw	r20, r18
    1262:	f4 e6       	ldi	r31, 0x64	; 100
    1264:	ef 2e       	mov	r14, r31
    1266:	f1 2c       	mov	r15, r1
    1268:	01 2d       	mov	r16, r1
    126a:	11 2d       	mov	r17, r1
    126c:	0e 94 4a 07 	call	0xe94	; 0xe94 <non_Holonomic>
    1270:	8f ef       	ldi	r24, 0xFF	; 255
    1272:	9f e7       	ldi	r25, 0x7F	; 127
    1274:	a8 e2       	ldi	r26, 0x28	; 40
    1276:	81 50       	subi	r24, 0x01	; 1
    1278:	90 40       	sbci	r25, 0x00	; 0
    127a:	a0 40       	sbci	r26, 0x00	; 0
    127c:	e1 f7       	brne	.-8      	; 0x1276 <main+0x122>
    127e:	00 c0       	rjmp	.+0      	; 0x1280 <main+0x12c>
    1280:	00 00       	nop
    1282:	0c c0       	rjmp	.+24     	; 0x129c <main+0x148>
			_delay_ms(900);
			while(!(READ_SENSOR()&0x08)){
				non_Holonomic(0,-150,0);
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	cb 01       	movw	r24, r22
    128a:	2a e6       	ldi	r18, 0x6A	; 106
    128c:	3f ef       	ldi	r19, 0xFF	; 255
    128e:	4f ef       	ldi	r20, 0xFF	; 255
    1290:	5f ef       	ldi	r21, 0xFF	; 255
    1292:	ee 24       	eor	r14, r14
    1294:	ff 24       	eor	r15, r15
    1296:	87 01       	movw	r16, r14
    1298:	0e 94 4a 07 	call	0xe94	; 0xe94 <non_Holonomic>
				non_Holonomic(0,150,0);
			}			
			LINE();
			non_Holonomic(0,0,100);
			_delay_ms(900);
			while(!(READ_SENSOR()&0x08)){
    129c:	80 91 63 00 	lds	r24, 0x0063
    12a0:	81 b1       	in	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	80 95       	com	r24
    12a6:	90 95       	com	r25
    12a8:	83 ff       	sbrs	r24, 3
    12aa:	ec cf       	rjmp	.-40     	; 0x1284 <main+0x130>
				non_Holonomic(0,-150,0);
			}
			LINE();
    12ac:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LINE>
			HolonomicW(0,150,0);
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	66 e9       	ldi	r22, 0x96	; 150
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	40 e0       	ldi	r20, 0x00	; 0
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	0e 94 3c 05 	call	0xa78	; 0xa78 <HolonomicW>
    12c0:	8f ef       	ldi	r24, 0xFF	; 255
    12c2:	9f e7       	ldi	r25, 0x7F	; 127
    12c4:	a6 e1       	ldi	r26, 0x16	; 22
    12c6:	81 50       	subi	r24, 0x01	; 1
    12c8:	90 40       	sbci	r25, 0x00	; 0
    12ca:	a0 40       	sbci	r26, 0x00	; 0
    12cc:	e1 f7       	brne	.-8      	; 0x12c6 <main+0x172>
    12ce:	00 c0       	rjmp	.+0      	; 0x12d0 <main+0x17c>
    12d0:	00 00       	nop
			_delay_ms(500);
			LINE();
    12d2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LINE>
			non_Holonomic(0,0,-100);
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	cb 01       	movw	r24, r22
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	a9 01       	movw	r20, r18
    12e2:	ec e9       	ldi	r30, 0x9C	; 156
    12e4:	ee 2e       	mov	r14, r30
    12e6:	ef ef       	ldi	r30, 0xFF	; 255
    12e8:	fe 2e       	mov	r15, r30
    12ea:	ef ef       	ldi	r30, 0xFF	; 255
    12ec:	0e 2f       	mov	r16, r30
    12ee:	ef ef       	ldi	r30, 0xFF	; 255
    12f0:	1e 2f       	mov	r17, r30
    12f2:	0e 94 4a 07 	call	0xe94	; 0xe94 <non_Holonomic>
    12f6:	8f ef       	ldi	r24, 0xFF	; 255
    12f8:	9f e7       	ldi	r25, 0x7F	; 127
    12fa:	a8 e2       	ldi	r26, 0x28	; 40
    12fc:	81 50       	subi	r24, 0x01	; 1
    12fe:	90 40       	sbci	r25, 0x00	; 0
    1300:	a0 40       	sbci	r26, 0x00	; 0
    1302:	e1 f7       	brne	.-8      	; 0x12fc <main+0x1a8>
    1304:	00 c0       	rjmp	.+0      	; 0x1306 <main+0x1b2>
    1306:	00 00       	nop
    1308:	0c c0       	rjmp	.+24     	; 0x1322 <main+0x1ce>
			_delay_ms(900);
			while(!(READ_SENSOR()&0x08)){
				non_Holonomic(0,150,0);
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	cb 01       	movw	r24, r22
    1310:	26 e9       	ldi	r18, 0x96	; 150
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	ee 24       	eor	r14, r14
    131a:	ff 24       	eor	r15, r15
    131c:	87 01       	movw	r16, r14
    131e:	0e 94 4a 07 	call	0xe94	; 0xe94 <non_Holonomic>
			HolonomicW(0,150,0);
			_delay_ms(500);
			LINE();
			non_Holonomic(0,0,-100);
			_delay_ms(900);
			while(!(READ_SENSOR()&0x08)){
    1322:	80 91 63 00 	lds	r24, 0x0063
    1326:	81 b1       	in	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	80 95       	com	r24
    132c:	90 95       	com	r25
    132e:	83 ff       	sbrs	r24, 3
    1330:	ec cf       	rjmp	.-40     	; 0x130a <main+0x1b6>
				non_Holonomic(0,150,0);
			}
			LINE();
    1332:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LINE>
			HolonomicW(0,150,0);
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	66 e9       	ldi	r22, 0x96	; 150
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	0e 94 3c 05 	call	0xa78	; 0xa78 <HolonomicW>
    1346:	8f ef       	ldi	r24, 0xFF	; 255
    1348:	9f ef       	ldi	r25, 0xFF	; 255
    134a:	a8 e0       	ldi	r26, 0x08	; 8
    134c:	81 50       	subi	r24, 0x01	; 1
    134e:	90 40       	sbci	r25, 0x00	; 0
    1350:	a0 40       	sbci	r26, 0x00	; 0
    1352:	e1 f7       	brne	.-8      	; 0x134c <main+0x1f8>
    1354:	00 c0       	rjmp	.+0      	; 0x1356 <main+0x202>
    1356:	00 00       	nop
			_delay_ms(200);
			LINE();
    1358:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LINE>
			BZ_ON();
    135c:	c3 9a       	sbi	0x18, 3	; 24
    135e:	8f ef       	ldi	r24, 0xFF	; 255
    1360:	9f e7       	ldi	r25, 0x7F	; 127
    1362:	a4 e0       	ldi	r26, 0x04	; 4
    1364:	81 50       	subi	r24, 0x01	; 1
    1366:	90 40       	sbci	r25, 0x00	; 0
    1368:	a0 40       	sbci	r26, 0x00	; 0
    136a:	e1 f7       	brne	.-8      	; 0x1364 <main+0x210>
    136c:	00 c0       	rjmp	.+0      	; 0x136e <main+0x21a>
    136e:	00 00       	nop
			_delay_ms(100);
			BZ_OFF();
    1370:	c3 98       	cbi	0x18, 3	; 24
			non_Holonomic(0,0,0);
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	cb 01       	movw	r24, r22
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	a9 01       	movw	r20, r18
    137e:	ee 24       	eor	r14, r14
    1380:	ff 24       	eor	r15, r15
    1382:	87 01       	movw	r16, r14
    1384:	0e 94 4a 07 	call	0xe94	; 0xe94 <non_Holonomic>
		}

		if(SW2)
    1388:	b5 99       	sbic	0x16, 5	; 22
    138a:	15 c0       	rjmp	.+42     	; 0x13b6 <main+0x262>
		{	
			Holonomic_distance(0,500,500,250);
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	64 ef       	ldi	r22, 0xF4	; 244
    1392:	71 e0       	ldi	r23, 0x01	; 1
    1394:	44 ef       	ldi	r20, 0xF4	; 244
    1396:	51 e0       	ldi	r21, 0x01	; 1
    1398:	2a ef       	ldi	r18, 0xFA	; 250
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	0e 94 9c 06 	call	0xd38	; 0xd38 <Holonomic_distance>
			non_Holonomic(0,0,0);
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	cb 01       	movw	r24, r22
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	a9 01       	movw	r20, r18
    13ac:	ee 24       	eor	r14, r14
    13ae:	ff 24       	eor	r15, r15
    13b0:	87 01       	movw	r16, r14
    13b2:	0e 94 4a 07 	call	0xe94	; 0xe94 <non_Holonomic>

		}

		if(SW3)
    13b6:	86 b3       	in	r24, 0x16	; 22
		{
	
		}

	}		
    13b8:	e7 ce       	rjmp	.-562    	; 0x1188 <main+0x34>

000013ba <__vector_14>:
	StartMotion();
}


ISR (TIMER1_OVF_vect)
{
    13ba:	1f 92       	push	r1
    13bc:	0f 92       	push	r0
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	0f 92       	push	r0
    13c2:	0b b6       	in	r0, 0x3b	; 59
    13c4:	0f 92       	push	r0
    13c6:	11 24       	eor	r1, r1
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	2f 93       	push	r18
    13d2:	3f 93       	push	r19
    13d4:	4f 93       	push	r20
    13d6:	5f 93       	push	r21
    13d8:	6f 93       	push	r22
    13da:	7f 93       	push	r23
    13dc:	8f 93       	push	r24
    13de:	9f 93       	push	r25
    13e0:	af 93       	push	r26
    13e2:	bf 93       	push	r27
    13e4:	ef 93       	push	r30
    13e6:	ff 93       	push	r31
	TCNT1H=0xFF; TCNT1L=0x70; //0.01초
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	8d bd       	out	0x2d, r24	; 45
    13ec:	80 e7       	ldi	r24, 0x70	; 112
    13ee:	8c bd       	out	0x2c, r24	; 44
	++sec;
    13f0:	80 91 44 02 	lds	r24, 0x0244
    13f4:	90 91 45 02 	lds	r25, 0x0245
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	90 93 45 02 	sts	0x0245, r25
    13fe:	80 93 44 02 	sts	0x0244, r24
	
	disMD+=speed*0.01;
    1402:	e0 90 62 02 	lds	r14, 0x0262
    1406:	f0 90 63 02 	lds	r15, 0x0263
    140a:	00 91 64 02 	lds	r16, 0x0264
    140e:	10 91 65 02 	lds	r17, 0x0265
    1412:	60 91 46 02 	lds	r22, 0x0246
    1416:	70 91 47 02 	lds	r23, 0x0247
    141a:	80 91 48 02 	lds	r24, 0x0248
    141e:	90 91 49 02 	lds	r25, 0x0249
    1422:	2a e0       	ldi	r18, 0x0A	; 10
    1424:	37 ed       	ldi	r19, 0xD7	; 215
    1426:	43 e2       	ldi	r20, 0x23	; 35
    1428:	5c e3       	ldi	r21, 0x3C	; 60
    142a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
    142e:	9b 01       	movw	r18, r22
    1430:	ac 01       	movw	r20, r24
    1432:	c8 01       	movw	r24, r16
    1434:	b7 01       	movw	r22, r14
    1436:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
    143a:	9b 01       	movw	r18, r22
    143c:	ac 01       	movw	r20, r24
    143e:	20 93 62 02 	sts	0x0262, r18
    1442:	30 93 63 02 	sts	0x0263, r19
    1446:	40 93 64 02 	sts	0x0264, r20
    144a:	50 93 65 02 	sts	0x0265, r21
	disW+=speedW*0.01;
    144e:	e0 90 5e 02 	lds	r14, 0x025E
    1452:	f0 90 5f 02 	lds	r15, 0x025F
    1456:	00 91 60 02 	lds	r16, 0x0260
    145a:	10 91 61 02 	lds	r17, 0x0261
    145e:	60 91 6e 02 	lds	r22, 0x026E
    1462:	70 91 6f 02 	lds	r23, 0x026F
    1466:	80 91 70 02 	lds	r24, 0x0270
    146a:	90 91 71 02 	lds	r25, 0x0271
    146e:	2a e0       	ldi	r18, 0x0A	; 10
    1470:	37 ed       	ldi	r19, 0xD7	; 215
    1472:	43 e2       	ldi	r20, 0x23	; 35
    1474:	5c e3       	ldi	r21, 0x3C	; 60
    1476:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
    147a:	9b 01       	movw	r18, r22
    147c:	ac 01       	movw	r20, r24
    147e:	c8 01       	movw	r24, r16
    1480:	b7 01       	movw	r22, r14
    1482:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
    1486:	9b 01       	movw	r18, r22
    1488:	ac 01       	movw	r20, r24
    148a:	20 93 5e 02 	sts	0x025E, r18
    148e:	30 93 5f 02 	sts	0x025F, r19
    1492:	40 93 60 02 	sts	0x0260, r20
    1496:	50 93 61 02 	sts	0x0261, r21
	disX+=(speedX*0.01);
    149a:	e0 90 56 02 	lds	r14, 0x0256
    149e:	f0 90 57 02 	lds	r15, 0x0257
    14a2:	00 91 58 02 	lds	r16, 0x0258
    14a6:	10 91 59 02 	lds	r17, 0x0259
    14aa:	60 91 66 02 	lds	r22, 0x0266
    14ae:	70 91 67 02 	lds	r23, 0x0267
    14b2:	80 91 68 02 	lds	r24, 0x0268
    14b6:	90 91 69 02 	lds	r25, 0x0269
    14ba:	2a e0       	ldi	r18, 0x0A	; 10
    14bc:	37 ed       	ldi	r19, 0xD7	; 215
    14be:	43 e2       	ldi	r20, 0x23	; 35
    14c0:	5c e3       	ldi	r21, 0x3C	; 60
    14c2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
    14c6:	9b 01       	movw	r18, r22
    14c8:	ac 01       	movw	r20, r24
    14ca:	c8 01       	movw	r24, r16
    14cc:	b7 01       	movw	r22, r14
    14ce:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
    14d2:	9b 01       	movw	r18, r22
    14d4:	ac 01       	movw	r20, r24
    14d6:	20 93 56 02 	sts	0x0256, r18
    14da:	30 93 57 02 	sts	0x0257, r19
    14de:	40 93 58 02 	sts	0x0258, r20
    14e2:	50 93 59 02 	sts	0x0259, r21
	disY+=(speedY*0.01);
    14e6:	e0 90 5a 02 	lds	r14, 0x025A
    14ea:	f0 90 5b 02 	lds	r15, 0x025B
    14ee:	00 91 5c 02 	lds	r16, 0x025C
    14f2:	10 91 5d 02 	lds	r17, 0x025D
    14f6:	60 91 6a 02 	lds	r22, 0x026A
    14fa:	70 91 6b 02 	lds	r23, 0x026B
    14fe:	80 91 6c 02 	lds	r24, 0x026C
    1502:	90 91 6d 02 	lds	r25, 0x026D
    1506:	2a e0       	ldi	r18, 0x0A	; 10
    1508:	37 ed       	ldi	r19, 0xD7	; 215
    150a:	43 e2       	ldi	r20, 0x23	; 35
    150c:	5c e3       	ldi	r21, 0x3C	; 60
    150e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__mulsf3>
    1512:	9b 01       	movw	r18, r22
    1514:	ac 01       	movw	r20, r24
    1516:	c8 01       	movw	r24, r16
    1518:	b7 01       	movw	r22, r14
    151a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
    151e:	9b 01       	movw	r18, r22
    1520:	ac 01       	movw	r20, r24
    1522:	20 93 5a 02 	sts	0x025A, r18
    1526:	30 93 5b 02 	sts	0x025B, r19
    152a:	40 93 5c 02 	sts	0x025C, r20
    152e:	50 93 5d 02 	sts	0x025D, r21

	if(next_speed>speed){
    1532:	60 91 4a 02 	lds	r22, 0x024A
    1536:	70 91 4b 02 	lds	r23, 0x024B
    153a:	80 91 4c 02 	lds	r24, 0x024C
    153e:	90 91 4d 02 	lds	r25, 0x024D
    1542:	20 91 46 02 	lds	r18, 0x0246
    1546:	30 91 47 02 	lds	r19, 0x0247
    154a:	40 91 48 02 	lds	r20, 0x0248
    154e:	50 91 49 02 	lds	r21, 0x0249
    1552:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__gtsf2>
    1556:	18 16       	cp	r1, r24
    1558:	94 f5       	brge	.+100    	; 0x15be <__vector_14+0x204>
		speed+=acc;
    155a:	60 91 46 02 	lds	r22, 0x0246
    155e:	70 91 47 02 	lds	r23, 0x0247
    1562:	80 91 48 02 	lds	r24, 0x0248
    1566:	90 91 49 02 	lds	r25, 0x0249
    156a:	20 91 23 01 	lds	r18, 0x0123
    156e:	30 91 24 01 	lds	r19, 0x0124
    1572:	40 91 25 01 	lds	r20, 0x0125
    1576:	50 91 26 01 	lds	r21, 0x0126
    157a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
    157e:	9b 01       	movw	r18, r22
    1580:	ac 01       	movw	r20, r24
    1582:	20 93 46 02 	sts	0x0246, r18
    1586:	30 93 47 02 	sts	0x0247, r19
    158a:	40 93 48 02 	sts	0x0248, r20
    158e:	50 93 49 02 	sts	0x0249, r21
		if(next_speed<=speed)speed=next_speed;
    1592:	60 91 4a 02 	lds	r22, 0x024A
    1596:	70 91 4b 02 	lds	r23, 0x024B
    159a:	80 91 4c 02 	lds	r24, 0x024C
    159e:	90 91 4d 02 	lds	r25, 0x024D
    15a2:	20 91 46 02 	lds	r18, 0x0246
    15a6:	30 91 47 02 	lds	r19, 0x0247
    15aa:	40 91 48 02 	lds	r20, 0x0248
    15ae:	50 91 49 02 	lds	r21, 0x0249
    15b2:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__lesf2>
    15b6:	18 16       	cp	r1, r24
    15b8:	0c f4       	brge	.+2      	; 0x15bc <__vector_14+0x202>
    15ba:	55 c0       	rjmp	.+170    	; 0x1666 <__vector_14+0x2ac>
    15bc:	44 c0       	rjmp	.+136    	; 0x1646 <__vector_14+0x28c>
	}
	else if(next_speed<speed){
    15be:	60 91 4a 02 	lds	r22, 0x024A
    15c2:	70 91 4b 02 	lds	r23, 0x024B
    15c6:	80 91 4c 02 	lds	r24, 0x024C
    15ca:	90 91 4d 02 	lds	r25, 0x024D
    15ce:	20 91 46 02 	lds	r18, 0x0246
    15d2:	30 91 47 02 	lds	r19, 0x0247
    15d6:	40 91 48 02 	lds	r20, 0x0248
    15da:	50 91 49 02 	lds	r21, 0x0249
    15de:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ltsf2>
    15e2:	87 ff       	sbrs	r24, 7
    15e4:	40 c0       	rjmp	.+128    	; 0x1666 <__vector_14+0x2ac>
		speed-=acc;
    15e6:	60 91 46 02 	lds	r22, 0x0246
    15ea:	70 91 47 02 	lds	r23, 0x0247
    15ee:	80 91 48 02 	lds	r24, 0x0248
    15f2:	90 91 49 02 	lds	r25, 0x0249
    15f6:	20 91 23 01 	lds	r18, 0x0123
    15fa:	30 91 24 01 	lds	r19, 0x0124
    15fe:	40 91 25 01 	lds	r20, 0x0125
    1602:	50 91 26 01 	lds	r21, 0x0126
    1606:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__subsf3>
    160a:	9b 01       	movw	r18, r22
    160c:	ac 01       	movw	r20, r24
    160e:	20 93 46 02 	sts	0x0246, r18
    1612:	30 93 47 02 	sts	0x0247, r19
    1616:	40 93 48 02 	sts	0x0248, r20
    161a:	50 93 49 02 	sts	0x0249, r21
		if(next_speed>=speed)speed=next_speed;
    161e:	60 91 4a 02 	lds	r22, 0x024A
    1622:	70 91 4b 02 	lds	r23, 0x024B
    1626:	80 91 4c 02 	lds	r24, 0x024C
    162a:	90 91 4d 02 	lds	r25, 0x024D
    162e:	20 91 46 02 	lds	r18, 0x0246
    1632:	30 91 47 02 	lds	r19, 0x0247
    1636:	40 91 48 02 	lds	r20, 0x0248
    163a:	50 91 49 02 	lds	r21, 0x0249
    163e:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__gesf2>
    1642:	87 fd       	sbrc	r24, 7
    1644:	10 c0       	rjmp	.+32     	; 0x1666 <__vector_14+0x2ac>
    1646:	80 91 4a 02 	lds	r24, 0x024A
    164a:	90 91 4b 02 	lds	r25, 0x024B
    164e:	a0 91 4c 02 	lds	r26, 0x024C
    1652:	b0 91 4d 02 	lds	r27, 0x024D
    1656:	80 93 46 02 	sts	0x0246, r24
    165a:	90 93 47 02 	sts	0x0247, r25
    165e:	a0 93 48 02 	sts	0x0248, r26
    1662:	b0 93 49 02 	sts	0x0249, r27
	}
	if(next_wspeed>wspeed){
    1666:	60 91 52 02 	lds	r22, 0x0252
    166a:	70 91 53 02 	lds	r23, 0x0253
    166e:	80 91 54 02 	lds	r24, 0x0254
    1672:	90 91 55 02 	lds	r25, 0x0255
    1676:	20 91 4e 02 	lds	r18, 0x024E
    167a:	30 91 4f 02 	lds	r19, 0x024F
    167e:	40 91 50 02 	lds	r20, 0x0250
    1682:	50 91 51 02 	lds	r21, 0x0251
    1686:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__gtsf2>
    168a:	18 16       	cp	r1, r24
    168c:	94 f5       	brge	.+100    	; 0x16f2 <__vector_14+0x338>
		wspeed+=accW;
    168e:	60 91 4e 02 	lds	r22, 0x024E
    1692:	70 91 4f 02 	lds	r23, 0x024F
    1696:	80 91 50 02 	lds	r24, 0x0250
    169a:	90 91 51 02 	lds	r25, 0x0251
    169e:	20 91 27 01 	lds	r18, 0x0127
    16a2:	30 91 28 01 	lds	r19, 0x0128
    16a6:	40 91 29 01 	lds	r20, 0x0129
    16aa:	50 91 2a 01 	lds	r21, 0x012A
    16ae:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
    16b2:	9b 01       	movw	r18, r22
    16b4:	ac 01       	movw	r20, r24
    16b6:	20 93 4e 02 	sts	0x024E, r18
    16ba:	30 93 4f 02 	sts	0x024F, r19
    16be:	40 93 50 02 	sts	0x0250, r20
    16c2:	50 93 51 02 	sts	0x0251, r21
		if(next_wspeed<=wspeed)wspeed=next_wspeed;
    16c6:	60 91 52 02 	lds	r22, 0x0252
    16ca:	70 91 53 02 	lds	r23, 0x0253
    16ce:	80 91 54 02 	lds	r24, 0x0254
    16d2:	90 91 55 02 	lds	r25, 0x0255
    16d6:	20 91 4e 02 	lds	r18, 0x024E
    16da:	30 91 4f 02 	lds	r19, 0x024F
    16de:	40 91 50 02 	lds	r20, 0x0250
    16e2:	50 91 51 02 	lds	r21, 0x0251
    16e6:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__lesf2>
    16ea:	18 16       	cp	r1, r24
    16ec:	0c f4       	brge	.+2      	; 0x16f0 <__vector_14+0x336>
    16ee:	55 c0       	rjmp	.+170    	; 0x179a <__vector_14+0x3e0>
    16f0:	44 c0       	rjmp	.+136    	; 0x177a <__vector_14+0x3c0>
	}
	else if(next_wspeed<wspeed){
    16f2:	60 91 52 02 	lds	r22, 0x0252
    16f6:	70 91 53 02 	lds	r23, 0x0253
    16fa:	80 91 54 02 	lds	r24, 0x0254
    16fe:	90 91 55 02 	lds	r25, 0x0255
    1702:	20 91 4e 02 	lds	r18, 0x024E
    1706:	30 91 4f 02 	lds	r19, 0x024F
    170a:	40 91 50 02 	lds	r20, 0x0250
    170e:	50 91 51 02 	lds	r21, 0x0251
    1712:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ltsf2>
    1716:	87 ff       	sbrs	r24, 7
    1718:	40 c0       	rjmp	.+128    	; 0x179a <__vector_14+0x3e0>
		wspeed-=accW;
    171a:	60 91 4e 02 	lds	r22, 0x024E
    171e:	70 91 4f 02 	lds	r23, 0x024F
    1722:	80 91 50 02 	lds	r24, 0x0250
    1726:	90 91 51 02 	lds	r25, 0x0251
    172a:	20 91 27 01 	lds	r18, 0x0127
    172e:	30 91 28 01 	lds	r19, 0x0128
    1732:	40 91 29 01 	lds	r20, 0x0129
    1736:	50 91 2a 01 	lds	r21, 0x012A
    173a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__subsf3>
    173e:	9b 01       	movw	r18, r22
    1740:	ac 01       	movw	r20, r24
    1742:	20 93 4e 02 	sts	0x024E, r18
    1746:	30 93 4f 02 	sts	0x024F, r19
    174a:	40 93 50 02 	sts	0x0250, r20
    174e:	50 93 51 02 	sts	0x0251, r21
		if(next_wspeed>=wspeed)wspeed=next_wspeed;
    1752:	60 91 52 02 	lds	r22, 0x0252
    1756:	70 91 53 02 	lds	r23, 0x0253
    175a:	80 91 54 02 	lds	r24, 0x0254
    175e:	90 91 55 02 	lds	r25, 0x0255
    1762:	20 91 4e 02 	lds	r18, 0x024E
    1766:	30 91 4f 02 	lds	r19, 0x024F
    176a:	40 91 50 02 	lds	r20, 0x0250
    176e:	50 91 51 02 	lds	r21, 0x0251
    1772:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__gesf2>
    1776:	87 fd       	sbrc	r24, 7
    1778:	10 c0       	rjmp	.+32     	; 0x179a <__vector_14+0x3e0>
    177a:	80 91 52 02 	lds	r24, 0x0252
    177e:	90 91 53 02 	lds	r25, 0x0253
    1782:	a0 91 54 02 	lds	r26, 0x0254
    1786:	b0 91 55 02 	lds	r27, 0x0255
    178a:	80 93 4e 02 	sts	0x024E, r24
    178e:	90 93 4f 02 	sts	0x024F, r25
    1792:	a0 93 50 02 	sts	0x0250, r26
    1796:	b0 93 51 02 	sts	0x0251, r27
	}
}
    179a:	ff 91       	pop	r31
    179c:	ef 91       	pop	r30
    179e:	bf 91       	pop	r27
    17a0:	af 91       	pop	r26
    17a2:	9f 91       	pop	r25
    17a4:	8f 91       	pop	r24
    17a6:	7f 91       	pop	r23
    17a8:	6f 91       	pop	r22
    17aa:	5f 91       	pop	r21
    17ac:	4f 91       	pop	r20
    17ae:	3f 91       	pop	r19
    17b0:	2f 91       	pop	r18
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	ff 90       	pop	r15
    17b8:	ef 90       	pop	r14
    17ba:	0f 90       	pop	r0
    17bc:	0b be       	out	0x3b, r0	; 59
    17be:	0f 90       	pop	r0
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	0f 90       	pop	r0
    17c4:	1f 90       	pop	r1
    17c6:	18 95       	reti

000017c8 <_fpadd_parts>:
    17c8:	a0 e0       	ldi	r26, 0x00	; 0
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	ea ee       	ldi	r30, 0xEA	; 234
    17ce:	fb e0       	ldi	r31, 0x0B	; 11
    17d0:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <__prologue_saves__+0x8>
    17d4:	fc 01       	movw	r30, r24
    17d6:	ea 01       	movw	r28, r20
    17d8:	80 81       	ld	r24, Z
    17da:	82 30       	cpi	r24, 0x02	; 2
    17dc:	08 f4       	brcc	.+2      	; 0x17e0 <_fpadd_parts+0x18>
    17de:	38 c1       	rjmp	.+624    	; 0x1a50 <_fpadd_parts+0x288>
    17e0:	db 01       	movw	r26, r22
    17e2:	9c 91       	ld	r25, X
    17e4:	92 30       	cpi	r25, 0x02	; 2
    17e6:	08 f4       	brcc	.+2      	; 0x17ea <_fpadd_parts+0x22>
    17e8:	30 c1       	rjmp	.+608    	; 0x1a4a <_fpadd_parts+0x282>
    17ea:	84 30       	cpi	r24, 0x04	; 4
    17ec:	59 f4       	brne	.+22     	; 0x1804 <_fpadd_parts+0x3c>
    17ee:	94 30       	cpi	r25, 0x04	; 4
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <_fpadd_parts+0x2c>
    17f2:	2e c1       	rjmp	.+604    	; 0x1a50 <_fpadd_parts+0x288>
    17f4:	91 81       	ldd	r25, Z+1	; 0x01
    17f6:	11 96       	adiw	r26, 0x01	; 1
    17f8:	8c 91       	ld	r24, X
    17fa:	11 97       	sbiw	r26, 0x01	; 1
    17fc:	98 17       	cp	r25, r24
    17fe:	09 f0       	breq	.+2      	; 0x1802 <_fpadd_parts+0x3a>
    1800:	21 c1       	rjmp	.+578    	; 0x1a44 <_fpadd_parts+0x27c>
    1802:	26 c1       	rjmp	.+588    	; 0x1a50 <_fpadd_parts+0x288>
    1804:	94 30       	cpi	r25, 0x04	; 4
    1806:	09 f4       	brne	.+2      	; 0x180a <_fpadd_parts+0x42>
    1808:	20 c1       	rjmp	.+576    	; 0x1a4a <_fpadd_parts+0x282>
    180a:	92 30       	cpi	r25, 0x02	; 2
    180c:	b1 f4       	brne	.+44     	; 0x183a <_fpadd_parts+0x72>
    180e:	82 30       	cpi	r24, 0x02	; 2
    1810:	09 f0       	breq	.+2      	; 0x1814 <_fpadd_parts+0x4c>
    1812:	1e c1       	rjmp	.+572    	; 0x1a50 <_fpadd_parts+0x288>
    1814:	ca 01       	movw	r24, r20
    1816:	af 01       	movw	r20, r30
    1818:	28 e0       	ldi	r18, 0x08	; 8
    181a:	da 01       	movw	r26, r20
    181c:	0d 90       	ld	r0, X+
    181e:	ad 01       	movw	r20, r26
    1820:	dc 01       	movw	r26, r24
    1822:	0d 92       	st	X+, r0
    1824:	cd 01       	movw	r24, r26
    1826:	21 50       	subi	r18, 0x01	; 1
    1828:	c1 f7       	brne	.-16     	; 0x181a <_fpadd_parts+0x52>
    182a:	db 01       	movw	r26, r22
    182c:	11 96       	adiw	r26, 0x01	; 1
    182e:	8c 91       	ld	r24, X
    1830:	11 97       	sbiw	r26, 0x01	; 1
    1832:	91 81       	ldd	r25, Z+1	; 0x01
    1834:	89 23       	and	r24, r25
    1836:	89 83       	std	Y+1, r24	; 0x01
    1838:	0a c1       	rjmp	.+532    	; 0x1a4e <_fpadd_parts+0x286>
    183a:	82 30       	cpi	r24, 0x02	; 2
    183c:	09 f4       	brne	.+2      	; 0x1840 <_fpadd_parts+0x78>
    183e:	05 c1       	rjmp	.+522    	; 0x1a4a <_fpadd_parts+0x282>
    1840:	c2 80       	ldd	r12, Z+2	; 0x02
    1842:	d3 80       	ldd	r13, Z+3	; 0x03
    1844:	db 01       	movw	r26, r22
    1846:	12 96       	adiw	r26, 0x02	; 2
    1848:	6d 90       	ld	r6, X+
    184a:	7c 90       	ld	r7, X
    184c:	13 97       	sbiw	r26, 0x03	; 3
    184e:	24 81       	ldd	r18, Z+4	; 0x04
    1850:	35 81       	ldd	r19, Z+5	; 0x05
    1852:	46 81       	ldd	r20, Z+6	; 0x06
    1854:	57 81       	ldd	r21, Z+7	; 0x07
    1856:	14 96       	adiw	r26, 0x04	; 4
    1858:	ed 90       	ld	r14, X+
    185a:	fd 90       	ld	r15, X+
    185c:	0d 91       	ld	r16, X+
    185e:	1c 91       	ld	r17, X
    1860:	17 97       	sbiw	r26, 0x07	; 7
    1862:	c6 01       	movw	r24, r12
    1864:	86 19       	sub	r24, r6
    1866:	97 09       	sbc	r25, r7
    1868:	5c 01       	movw	r10, r24
    186a:	97 ff       	sbrs	r25, 7
    186c:	04 c0       	rjmp	.+8      	; 0x1876 <_fpadd_parts+0xae>
    186e:	aa 24       	eor	r10, r10
    1870:	bb 24       	eor	r11, r11
    1872:	a8 1a       	sub	r10, r24
    1874:	b9 0a       	sbc	r11, r25
    1876:	b0 e2       	ldi	r27, 0x20	; 32
    1878:	ab 16       	cp	r10, r27
    187a:	b1 04       	cpc	r11, r1
    187c:	0c f0       	brlt	.+2      	; 0x1880 <_fpadd_parts+0xb8>
    187e:	61 c0       	rjmp	.+194    	; 0x1942 <_fpadd_parts+0x17a>
    1880:	18 16       	cp	r1, r24
    1882:	19 06       	cpc	r1, r25
    1884:	6c f5       	brge	.+90     	; 0x18e0 <_fpadd_parts+0x118>
    1886:	37 01       	movw	r6, r14
    1888:	48 01       	movw	r8, r16
    188a:	0a 2c       	mov	r0, r10
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <_fpadd_parts+0xce>
    188e:	96 94       	lsr	r9
    1890:	87 94       	ror	r8
    1892:	77 94       	ror	r7
    1894:	67 94       	ror	r6
    1896:	0a 94       	dec	r0
    1898:	d2 f7       	brpl	.-12     	; 0x188e <_fpadd_parts+0xc6>
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	a0 e0       	ldi	r26, 0x00	; 0
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	0a 2c       	mov	r0, r10
    18a4:	04 c0       	rjmp	.+8      	; 0x18ae <_fpadd_parts+0xe6>
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	aa 1f       	adc	r26, r26
    18ac:	bb 1f       	adc	r27, r27
    18ae:	0a 94       	dec	r0
    18b0:	d2 f7       	brpl	.-12     	; 0x18a6 <_fpadd_parts+0xde>
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	a1 09       	sbc	r26, r1
    18b6:	b1 09       	sbc	r27, r1
    18b8:	8e 21       	and	r24, r14
    18ba:	9f 21       	and	r25, r15
    18bc:	a0 23       	and	r26, r16
    18be:	b1 23       	and	r27, r17
    18c0:	ee 24       	eor	r14, r14
    18c2:	ff 24       	eor	r15, r15
    18c4:	87 01       	movw	r16, r14
    18c6:	e3 94       	inc	r14
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	a1 05       	cpc	r26, r1
    18cc:	b1 05       	cpc	r27, r1
    18ce:	19 f4       	brne	.+6      	; 0x18d6 <_fpadd_parts+0x10e>
    18d0:	ee 24       	eor	r14, r14
    18d2:	ff 24       	eor	r15, r15
    18d4:	87 01       	movw	r16, r14
    18d6:	e6 28       	or	r14, r6
    18d8:	f7 28       	or	r15, r7
    18da:	08 29       	or	r16, r8
    18dc:	19 29       	or	r17, r9
    18de:	3c c0       	rjmp	.+120    	; 0x1958 <_fpadd_parts+0x190>
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	d1 f1       	breq	.+116    	; 0x1958 <_fpadd_parts+0x190>
    18e4:	ca 0c       	add	r12, r10
    18e6:	db 1c       	adc	r13, r11
    18e8:	39 01       	movw	r6, r18
    18ea:	4a 01       	movw	r8, r20
    18ec:	0a 2c       	mov	r0, r10
    18ee:	04 c0       	rjmp	.+8      	; 0x18f8 <_fpadd_parts+0x130>
    18f0:	96 94       	lsr	r9
    18f2:	87 94       	ror	r8
    18f4:	77 94       	ror	r7
    18f6:	67 94       	ror	r6
    18f8:	0a 94       	dec	r0
    18fa:	d2 f7       	brpl	.-12     	; 0x18f0 <_fpadd_parts+0x128>
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	a0 e0       	ldi	r26, 0x00	; 0
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	0a 2c       	mov	r0, r10
    1906:	04 c0       	rjmp	.+8      	; 0x1910 <_fpadd_parts+0x148>
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	aa 1f       	adc	r26, r26
    190e:	bb 1f       	adc	r27, r27
    1910:	0a 94       	dec	r0
    1912:	d2 f7       	brpl	.-12     	; 0x1908 <_fpadd_parts+0x140>
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	a1 09       	sbc	r26, r1
    1918:	b1 09       	sbc	r27, r1
    191a:	82 23       	and	r24, r18
    191c:	93 23       	and	r25, r19
    191e:	a4 23       	and	r26, r20
    1920:	b5 23       	and	r27, r21
    1922:	21 e0       	ldi	r18, 0x01	; 1
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	a1 05       	cpc	r26, r1
    192e:	b1 05       	cpc	r27, r1
    1930:	19 f4       	brne	.+6      	; 0x1938 <_fpadd_parts+0x170>
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	a9 01       	movw	r20, r18
    1938:	26 29       	or	r18, r6
    193a:	37 29       	or	r19, r7
    193c:	48 29       	or	r20, r8
    193e:	59 29       	or	r21, r9
    1940:	0b c0       	rjmp	.+22     	; 0x1958 <_fpadd_parts+0x190>
    1942:	6c 14       	cp	r6, r12
    1944:	7d 04       	cpc	r7, r13
    1946:	24 f4       	brge	.+8      	; 0x1950 <_fpadd_parts+0x188>
    1948:	ee 24       	eor	r14, r14
    194a:	ff 24       	eor	r15, r15
    194c:	87 01       	movw	r16, r14
    194e:	04 c0       	rjmp	.+8      	; 0x1958 <_fpadd_parts+0x190>
    1950:	63 01       	movw	r12, r6
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	a9 01       	movw	r20, r18
    1958:	81 81       	ldd	r24, Z+1	; 0x01
    195a:	fb 01       	movw	r30, r22
    195c:	91 81       	ldd	r25, Z+1	; 0x01
    195e:	89 17       	cp	r24, r25
    1960:	09 f4       	brne	.+2      	; 0x1964 <_fpadd_parts+0x19c>
    1962:	45 c0       	rjmp	.+138    	; 0x19ee <_fpadd_parts+0x226>
    1964:	88 23       	and	r24, r24
    1966:	49 f0       	breq	.+18     	; 0x197a <_fpadd_parts+0x1b2>
    1968:	d8 01       	movw	r26, r16
    196a:	c7 01       	movw	r24, r14
    196c:	82 1b       	sub	r24, r18
    196e:	93 0b       	sbc	r25, r19
    1970:	a4 0b       	sbc	r26, r20
    1972:	b5 0b       	sbc	r27, r21
    1974:	9c 01       	movw	r18, r24
    1976:	ad 01       	movw	r20, r26
    1978:	04 c0       	rjmp	.+8      	; 0x1982 <_fpadd_parts+0x1ba>
    197a:	2e 19       	sub	r18, r14
    197c:	3f 09       	sbc	r19, r15
    197e:	40 0b       	sbc	r20, r16
    1980:	51 0b       	sbc	r21, r17
    1982:	57 fd       	sbrc	r21, 7
    1984:	04 c0       	rjmp	.+8      	; 0x198e <_fpadd_parts+0x1c6>
    1986:	19 82       	std	Y+1, r1	; 0x01
    1988:	db 82       	std	Y+3, r13	; 0x03
    198a:	ca 82       	std	Y+2, r12	; 0x02
    198c:	0b c0       	rjmp	.+22     	; 0x19a4 <_fpadd_parts+0x1dc>
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	89 83       	std	Y+1, r24	; 0x01
    1992:	db 82       	std	Y+3, r13	; 0x03
    1994:	ca 82       	std	Y+2, r12	; 0x02
    1996:	50 95       	com	r21
    1998:	40 95       	com	r20
    199a:	30 95       	com	r19
    199c:	21 95       	neg	r18
    199e:	3f 4f       	sbci	r19, 0xFF	; 255
    19a0:	4f 4f       	sbci	r20, 0xFF	; 255
    19a2:	5f 4f       	sbci	r21, 0xFF	; 255
    19a4:	2c 83       	std	Y+4, r18	; 0x04
    19a6:	3d 83       	std	Y+5, r19	; 0x05
    19a8:	4e 83       	std	Y+6, r20	; 0x06
    19aa:	5f 83       	std	Y+7, r21	; 0x07
    19ac:	0d c0       	rjmp	.+26     	; 0x19c8 <_fpadd_parts+0x200>
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	aa 1f       	adc	r26, r26
    19b4:	bb 1f       	adc	r27, r27
    19b6:	8c 83       	std	Y+4, r24	; 0x04
    19b8:	9d 83       	std	Y+5, r25	; 0x05
    19ba:	ae 83       	std	Y+6, r26	; 0x06
    19bc:	bf 83       	std	Y+7, r27	; 0x07
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	9b 81       	ldd	r25, Y+3	; 0x03
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	9b 83       	std	Y+3, r25	; 0x03
    19c6:	8a 83       	std	Y+2, r24	; 0x02
    19c8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ca:	9d 81       	ldd	r25, Y+5	; 0x05
    19cc:	ae 81       	ldd	r26, Y+6	; 0x06
    19ce:	bf 81       	ldd	r27, Y+7	; 0x07
    19d0:	9c 01       	movw	r18, r24
    19d2:	ad 01       	movw	r20, r26
    19d4:	21 50       	subi	r18, 0x01	; 1
    19d6:	30 40       	sbci	r19, 0x00	; 0
    19d8:	40 40       	sbci	r20, 0x00	; 0
    19da:	50 40       	sbci	r21, 0x00	; 0
    19dc:	2f 3f       	cpi	r18, 0xFF	; 255
    19de:	ef ef       	ldi	r30, 0xFF	; 255
    19e0:	3e 07       	cpc	r19, r30
    19e2:	ef ef       	ldi	r30, 0xFF	; 255
    19e4:	4e 07       	cpc	r20, r30
    19e6:	ef e3       	ldi	r30, 0x3F	; 63
    19e8:	5e 07       	cpc	r21, r30
    19ea:	08 f3       	brcs	.-62     	; 0x19ae <_fpadd_parts+0x1e6>
    19ec:	0b c0       	rjmp	.+22     	; 0x1a04 <_fpadd_parts+0x23c>
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	db 82       	std	Y+3, r13	; 0x03
    19f2:	ca 82       	std	Y+2, r12	; 0x02
    19f4:	2e 0d       	add	r18, r14
    19f6:	3f 1d       	adc	r19, r15
    19f8:	40 1f       	adc	r20, r16
    19fa:	51 1f       	adc	r21, r17
    19fc:	2c 83       	std	Y+4, r18	; 0x04
    19fe:	3d 83       	std	Y+5, r19	; 0x05
    1a00:	4e 83       	std	Y+6, r20	; 0x06
    1a02:	5f 83       	std	Y+7, r21	; 0x07
    1a04:	83 e0       	ldi	r24, 0x03	; 3
    1a06:	88 83       	st	Y, r24
    1a08:	2c 81       	ldd	r18, Y+4	; 0x04
    1a0a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a0c:	4e 81       	ldd	r20, Y+6	; 0x06
    1a0e:	5f 81       	ldd	r21, Y+7	; 0x07
    1a10:	57 ff       	sbrs	r21, 7
    1a12:	1d c0       	rjmp	.+58     	; 0x1a4e <_fpadd_parts+0x286>
    1a14:	da 01       	movw	r26, r20
    1a16:	c9 01       	movw	r24, r18
    1a18:	81 70       	andi	r24, 0x01	; 1
    1a1a:	90 70       	andi	r25, 0x00	; 0
    1a1c:	a0 70       	andi	r26, 0x00	; 0
    1a1e:	b0 70       	andi	r27, 0x00	; 0
    1a20:	56 95       	lsr	r21
    1a22:	47 95       	ror	r20
    1a24:	37 95       	ror	r19
    1a26:	27 95       	ror	r18
    1a28:	82 2b       	or	r24, r18
    1a2a:	93 2b       	or	r25, r19
    1a2c:	a4 2b       	or	r26, r20
    1a2e:	b5 2b       	or	r27, r21
    1a30:	8c 83       	std	Y+4, r24	; 0x04
    1a32:	9d 83       	std	Y+5, r25	; 0x05
    1a34:	ae 83       	std	Y+6, r26	; 0x06
    1a36:	bf 83       	std	Y+7, r27	; 0x07
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	9b 83       	std	Y+3, r25	; 0x03
    1a40:	8a 83       	std	Y+2, r24	; 0x02
    1a42:	05 c0       	rjmp	.+10     	; 0x1a4e <_fpadd_parts+0x286>
    1a44:	eb e2       	ldi	r30, 0x2B	; 43
    1a46:	f1 e0       	ldi	r31, 0x01	; 1
    1a48:	03 c0       	rjmp	.+6      	; 0x1a50 <_fpadd_parts+0x288>
    1a4a:	fb 01       	movw	r30, r22
    1a4c:	01 c0       	rjmp	.+2      	; 0x1a50 <_fpadd_parts+0x288>
    1a4e:	fe 01       	movw	r30, r28
    1a50:	cf 01       	movw	r24, r30
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	ee e0       	ldi	r30, 0x0E	; 14
    1a58:	0c 94 86 12 	jmp	0x250c	; 0x250c <__epilogue_restores__+0x8>

00001a5c <__addsf3>:
    1a5c:	a0 e2       	ldi	r26, 0x20	; 32
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e4 e3       	ldi	r30, 0x34	; 52
    1a62:	fd e0       	ldi	r31, 0x0D	; 13
    1a64:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__prologue_saves__+0x18>
    1a68:	69 83       	std	Y+1, r22	; 0x01
    1a6a:	7a 83       	std	Y+2, r23	; 0x02
    1a6c:	8b 83       	std	Y+3, r24	; 0x03
    1a6e:	9c 83       	std	Y+4, r25	; 0x04
    1a70:	2d 83       	std	Y+5, r18	; 0x05
    1a72:	3e 83       	std	Y+6, r19	; 0x06
    1a74:	4f 83       	std	Y+7, r20	; 0x07
    1a76:	58 87       	std	Y+8, r21	; 0x08
    1a78:	89 e0       	ldi	r24, 0x09	; 9
    1a7a:	e8 2e       	mov	r14, r24
    1a7c:	f1 2c       	mov	r15, r1
    1a7e:	ec 0e       	add	r14, r28
    1a80:	fd 1e       	adc	r15, r29
    1a82:	ce 01       	movw	r24, r28
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	b7 01       	movw	r22, r14
    1a88:	0e 94 98 11 	call	0x2330	; 0x2330 <__unpack_f>
    1a8c:	8e 01       	movw	r16, r28
    1a8e:	0f 5e       	subi	r16, 0xEF	; 239
    1a90:	1f 4f       	sbci	r17, 0xFF	; 255
    1a92:	ce 01       	movw	r24, r28
    1a94:	05 96       	adiw	r24, 0x05	; 5
    1a96:	b8 01       	movw	r22, r16
    1a98:	0e 94 98 11 	call	0x2330	; 0x2330 <__unpack_f>
    1a9c:	c7 01       	movw	r24, r14
    1a9e:	b8 01       	movw	r22, r16
    1aa0:	ae 01       	movw	r20, r28
    1aa2:	47 5e       	subi	r20, 0xE7	; 231
    1aa4:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa6:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_fpadd_parts>
    1aaa:	0e 94 ca 10 	call	0x2194	; 0x2194 <__pack_f>
    1aae:	a0 96       	adiw	r28, 0x20	; 32
    1ab0:	e6 e0       	ldi	r30, 0x06	; 6
    1ab2:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__epilogue_restores__+0x18>

00001ab6 <__subsf3>:
    1ab6:	a0 e2       	ldi	r26, 0x20	; 32
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e1 e6       	ldi	r30, 0x61	; 97
    1abc:	fd e0       	ldi	r31, 0x0D	; 13
    1abe:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__prologue_saves__+0x18>
    1ac2:	69 83       	std	Y+1, r22	; 0x01
    1ac4:	7a 83       	std	Y+2, r23	; 0x02
    1ac6:	8b 83       	std	Y+3, r24	; 0x03
    1ac8:	9c 83       	std	Y+4, r25	; 0x04
    1aca:	2d 83       	std	Y+5, r18	; 0x05
    1acc:	3e 83       	std	Y+6, r19	; 0x06
    1ace:	4f 83       	std	Y+7, r20	; 0x07
    1ad0:	58 87       	std	Y+8, r21	; 0x08
    1ad2:	8e 01       	movw	r16, r28
    1ad4:	07 5f       	subi	r16, 0xF7	; 247
    1ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad8:	ce 01       	movw	r24, r28
    1ada:	01 96       	adiw	r24, 0x01	; 1
    1adc:	b8 01       	movw	r22, r16
    1ade:	0e 94 98 11 	call	0x2330	; 0x2330 <__unpack_f>
    1ae2:	91 e1       	ldi	r25, 0x11	; 17
    1ae4:	e9 2e       	mov	r14, r25
    1ae6:	f1 2c       	mov	r15, r1
    1ae8:	ec 0e       	add	r14, r28
    1aea:	fd 1e       	adc	r15, r29
    1aec:	ce 01       	movw	r24, r28
    1aee:	05 96       	adiw	r24, 0x05	; 5
    1af0:	b7 01       	movw	r22, r14
    1af2:	0e 94 98 11 	call	0x2330	; 0x2330 <__unpack_f>
    1af6:	8a 89       	ldd	r24, Y+18	; 0x12
    1af8:	91 e0       	ldi	r25, 0x01	; 1
    1afa:	89 27       	eor	r24, r25
    1afc:	8a 8b       	std	Y+18, r24	; 0x12
    1afe:	c8 01       	movw	r24, r16
    1b00:	b7 01       	movw	r22, r14
    1b02:	ae 01       	movw	r20, r28
    1b04:	47 5e       	subi	r20, 0xE7	; 231
    1b06:	5f 4f       	sbci	r21, 0xFF	; 255
    1b08:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_fpadd_parts>
    1b0c:	0e 94 ca 10 	call	0x2194	; 0x2194 <__pack_f>
    1b10:	a0 96       	adiw	r28, 0x20	; 32
    1b12:	e6 e0       	ldi	r30, 0x06	; 6
    1b14:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__epilogue_restores__+0x18>

00001b18 <__mulsf3>:
    1b18:	a0 e2       	ldi	r26, 0x20	; 32
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e2 e9       	ldi	r30, 0x92	; 146
    1b1e:	fd e0       	ldi	r31, 0x0D	; 13
    1b20:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__prologue_saves__>
    1b24:	69 83       	std	Y+1, r22	; 0x01
    1b26:	7a 83       	std	Y+2, r23	; 0x02
    1b28:	8b 83       	std	Y+3, r24	; 0x03
    1b2a:	9c 83       	std	Y+4, r25	; 0x04
    1b2c:	2d 83       	std	Y+5, r18	; 0x05
    1b2e:	3e 83       	std	Y+6, r19	; 0x06
    1b30:	4f 83       	std	Y+7, r20	; 0x07
    1b32:	58 87       	std	Y+8, r21	; 0x08
    1b34:	ce 01       	movw	r24, r28
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	be 01       	movw	r22, r28
    1b3a:	67 5f       	subi	r22, 0xF7	; 247
    1b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3e:	0e 94 98 11 	call	0x2330	; 0x2330 <__unpack_f>
    1b42:	ce 01       	movw	r24, r28
    1b44:	05 96       	adiw	r24, 0x05	; 5
    1b46:	be 01       	movw	r22, r28
    1b48:	6f 5e       	subi	r22, 0xEF	; 239
    1b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4c:	0e 94 98 11 	call	0x2330	; 0x2330 <__unpack_f>
    1b50:	99 85       	ldd	r25, Y+9	; 0x09
    1b52:	92 30       	cpi	r25, 0x02	; 2
    1b54:	78 f0       	brcs	.+30     	; 0x1b74 <__mulsf3+0x5c>
    1b56:	89 89       	ldd	r24, Y+17	; 0x11
    1b58:	82 30       	cpi	r24, 0x02	; 2
    1b5a:	c0 f0       	brcs	.+48     	; 0x1b8c <__mulsf3+0x74>
    1b5c:	94 30       	cpi	r25, 0x04	; 4
    1b5e:	19 f4       	brne	.+6      	; 0x1b66 <__mulsf3+0x4e>
    1b60:	82 30       	cpi	r24, 0x02	; 2
    1b62:	41 f4       	brne	.+16     	; 0x1b74 <__mulsf3+0x5c>
    1b64:	cb c0       	rjmp	.+406    	; 0x1cfc <__mulsf3+0x1e4>
    1b66:	84 30       	cpi	r24, 0x04	; 4
    1b68:	19 f4       	brne	.+6      	; 0x1b70 <__mulsf3+0x58>
    1b6a:	92 30       	cpi	r25, 0x02	; 2
    1b6c:	79 f4       	brne	.+30     	; 0x1b8c <__mulsf3+0x74>
    1b6e:	c6 c0       	rjmp	.+396    	; 0x1cfc <__mulsf3+0x1e4>
    1b70:	92 30       	cpi	r25, 0x02	; 2
    1b72:	51 f4       	brne	.+20     	; 0x1b88 <__mulsf3+0x70>
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b78:	9a 89       	ldd	r25, Y+18	; 0x12
    1b7a:	29 17       	cp	r18, r25
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <__mulsf3+0x68>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	8a 87       	std	Y+10, r24	; 0x0a
    1b82:	ce 01       	movw	r24, r28
    1b84:	09 96       	adiw	r24, 0x09	; 9
    1b86:	bc c0       	rjmp	.+376    	; 0x1d00 <__mulsf3+0x1e8>
    1b88:	82 30       	cpi	r24, 0x02	; 2
    1b8a:	51 f4       	brne	.+20     	; 0x1ba0 <__mulsf3+0x88>
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b90:	9a 89       	ldd	r25, Y+18	; 0x12
    1b92:	29 17       	cp	r18, r25
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <__mulsf3+0x80>
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	8a 8b       	std	Y+18, r24	; 0x12
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	41 96       	adiw	r24, 0x11	; 17
    1b9e:	b0 c0       	rjmp	.+352    	; 0x1d00 <__mulsf3+0x1e8>
    1ba0:	6d 84       	ldd	r6, Y+13	; 0x0d
    1ba2:	7e 84       	ldd	r7, Y+14	; 0x0e
    1ba4:	8f 84       	ldd	r8, Y+15	; 0x0f
    1ba6:	98 88       	ldd	r9, Y+16	; 0x10
    1ba8:	ed 88       	ldd	r14, Y+21	; 0x15
    1baa:	fe 88       	ldd	r15, Y+22	; 0x16
    1bac:	0f 89       	ldd	r16, Y+23	; 0x17
    1bae:	18 8d       	ldd	r17, Y+24	; 0x18
    1bb0:	e0 e2       	ldi	r30, 0x20	; 32
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	dc 01       	movw	r26, r24
    1bba:	aa 24       	eor	r10, r10
    1bbc:	bb 24       	eor	r11, r11
    1bbe:	65 01       	movw	r12, r10
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	a9 01       	movw	r20, r18
    1bc6:	b3 01       	movw	r22, r6
    1bc8:	61 70       	andi	r22, 0x01	; 1
    1bca:	70 70       	andi	r23, 0x00	; 0
    1bcc:	61 15       	cp	r22, r1
    1bce:	71 05       	cpc	r23, r1
    1bd0:	d1 f0       	breq	.+52     	; 0x1c06 <__mulsf3+0xee>
    1bd2:	2e 0d       	add	r18, r14
    1bd4:	3f 1d       	adc	r19, r15
    1bd6:	40 1f       	adc	r20, r16
    1bd8:	51 1f       	adc	r21, r17
    1bda:	15 01       	movw	r2, r10
    1bdc:	26 01       	movw	r4, r12
    1bde:	28 0e       	add	r2, r24
    1be0:	39 1e       	adc	r3, r25
    1be2:	4a 1e       	adc	r4, r26
    1be4:	5b 1e       	adc	r5, r27
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a0 e0       	ldi	r26, 0x00	; 0
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	2e 15       	cp	r18, r14
    1bf0:	3f 05       	cpc	r19, r15
    1bf2:	40 07       	cpc	r20, r16
    1bf4:	51 07       	cpc	r21, r17
    1bf6:	18 f0       	brcs	.+6      	; 0x1bfe <__mulsf3+0xe6>
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	82 0d       	add	r24, r2
    1c00:	93 1d       	adc	r25, r3
    1c02:	a4 1d       	adc	r26, r4
    1c04:	b5 1d       	adc	r27, r5
    1c06:	aa 0c       	add	r10, r10
    1c08:	bb 1c       	adc	r11, r11
    1c0a:	cc 1c       	adc	r12, r12
    1c0c:	dd 1c       	adc	r13, r13
    1c0e:	17 ff       	sbrs	r17, 7
    1c10:	09 c0       	rjmp	.+18     	; 0x1c24 <__mulsf3+0x10c>
    1c12:	61 e0       	ldi	r22, 0x01	; 1
    1c14:	26 2e       	mov	r2, r22
    1c16:	31 2c       	mov	r3, r1
    1c18:	41 2c       	mov	r4, r1
    1c1a:	51 2c       	mov	r5, r1
    1c1c:	a2 28       	or	r10, r2
    1c1e:	b3 28       	or	r11, r3
    1c20:	c4 28       	or	r12, r4
    1c22:	d5 28       	or	r13, r5
    1c24:	31 97       	sbiw	r30, 0x01	; 1
    1c26:	49 f0       	breq	.+18     	; 0x1c3a <__mulsf3+0x122>
    1c28:	ee 0c       	add	r14, r14
    1c2a:	ff 1c       	adc	r15, r15
    1c2c:	00 1f       	adc	r16, r16
    1c2e:	11 1f       	adc	r17, r17
    1c30:	96 94       	lsr	r9
    1c32:	87 94       	ror	r8
    1c34:	77 94       	ror	r7
    1c36:	67 94       	ror	r6
    1c38:	c6 cf       	rjmp	.-116    	; 0x1bc6 <__mulsf3+0xae>
    1c3a:	6b 89       	ldd	r22, Y+19	; 0x13
    1c3c:	7c 89       	ldd	r23, Y+20	; 0x14
    1c3e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c40:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c42:	6e 0f       	add	r22, r30
    1c44:	7f 1f       	adc	r23, r31
    1c46:	6e 5f       	subi	r22, 0xFE	; 254
    1c48:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4a:	7c 8f       	std	Y+28, r23	; 0x1c
    1c4c:	6b 8f       	std	Y+27, r22	; 0x1b
    1c4e:	61 e0       	ldi	r22, 0x01	; 1
    1c50:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c52:	7a 89       	ldd	r23, Y+18	; 0x12
    1c54:	e7 17       	cp	r30, r23
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <__mulsf3+0x142>
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	6a 8f       	std	Y+26, r22	; 0x1a
    1c5c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1c5e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1c60:	10 c0       	rjmp	.+32     	; 0x1c82 <__mulsf3+0x16a>
    1c62:	fc 01       	movw	r30, r24
    1c64:	e1 70       	andi	r30, 0x01	; 1
    1c66:	f0 70       	andi	r31, 0x00	; 0
    1c68:	30 97       	sbiw	r30, 0x00	; 0
    1c6a:	29 f0       	breq	.+10     	; 0x1c76 <__mulsf3+0x15e>
    1c6c:	56 95       	lsr	r21
    1c6e:	47 95       	ror	r20
    1c70:	37 95       	ror	r19
    1c72:	27 95       	ror	r18
    1c74:	50 68       	ori	r21, 0x80	; 128
    1c76:	b6 95       	lsr	r27
    1c78:	a7 95       	ror	r26
    1c7a:	97 95       	ror	r25
    1c7c:	87 95       	ror	r24
    1c7e:	6f 5f       	subi	r22, 0xFF	; 255
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	b7 fd       	sbrc	r27, 7
    1c84:	ee cf       	rjmp	.-36     	; 0x1c62 <__mulsf3+0x14a>
    1c86:	0c c0       	rjmp	.+24     	; 0x1ca0 <__mulsf3+0x188>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	aa 1f       	adc	r26, r26
    1c8e:	bb 1f       	adc	r27, r27
    1c90:	57 fd       	sbrc	r21, 7
    1c92:	81 60       	ori	r24, 0x01	; 1
    1c94:	22 0f       	add	r18, r18
    1c96:	33 1f       	adc	r19, r19
    1c98:	44 1f       	adc	r20, r20
    1c9a:	55 1f       	adc	r21, r21
    1c9c:	61 50       	subi	r22, 0x01	; 1
    1c9e:	70 40       	sbci	r23, 0x00	; 0
    1ca0:	80 30       	cpi	r24, 0x00	; 0
    1ca2:	e0 e0       	ldi	r30, 0x00	; 0
    1ca4:	9e 07       	cpc	r25, r30
    1ca6:	e0 e0       	ldi	r30, 0x00	; 0
    1ca8:	ae 07       	cpc	r26, r30
    1caa:	e0 e4       	ldi	r30, 0x40	; 64
    1cac:	be 07       	cpc	r27, r30
    1cae:	60 f3       	brcs	.-40     	; 0x1c88 <__mulsf3+0x170>
    1cb0:	6b 8f       	std	Y+27, r22	; 0x1b
    1cb2:	7c 8f       	std	Y+28, r23	; 0x1c
    1cb4:	6f e7       	ldi	r22, 0x7F	; 127
    1cb6:	e6 2e       	mov	r14, r22
    1cb8:	f1 2c       	mov	r15, r1
    1cba:	01 2d       	mov	r16, r1
    1cbc:	11 2d       	mov	r17, r1
    1cbe:	e8 22       	and	r14, r24
    1cc0:	f9 22       	and	r15, r25
    1cc2:	0a 23       	and	r16, r26
    1cc4:	1b 23       	and	r17, r27
    1cc6:	60 e4       	ldi	r22, 0x40	; 64
    1cc8:	e6 16       	cp	r14, r22
    1cca:	f1 04       	cpc	r15, r1
    1ccc:	01 05       	cpc	r16, r1
    1cce:	11 05       	cpc	r17, r1
    1cd0:	61 f4       	brne	.+24     	; 0x1cea <__mulsf3+0x1d2>
    1cd2:	87 fd       	sbrc	r24, 7
    1cd4:	0a c0       	rjmp	.+20     	; 0x1cea <__mulsf3+0x1d2>
    1cd6:	21 15       	cp	r18, r1
    1cd8:	31 05       	cpc	r19, r1
    1cda:	41 05       	cpc	r20, r1
    1cdc:	51 05       	cpc	r21, r1
    1cde:	29 f0       	breq	.+10     	; 0x1cea <__mulsf3+0x1d2>
    1ce0:	80 5c       	subi	r24, 0xC0	; 192
    1ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce4:	af 4f       	sbci	r26, 0xFF	; 255
    1ce6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ce8:	80 78       	andi	r24, 0x80	; 128
    1cea:	8d 8f       	std	Y+29, r24	; 0x1d
    1cec:	9e 8f       	std	Y+30, r25	; 0x1e
    1cee:	af 8f       	std	Y+31, r26	; 0x1f
    1cf0:	b8 a3       	std	Y+32, r27	; 0x20
    1cf2:	83 e0       	ldi	r24, 0x03	; 3
    1cf4:	89 8f       	std	Y+25, r24	; 0x19
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	49 96       	adiw	r24, 0x19	; 25
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <__mulsf3+0x1e8>
    1cfc:	8b e2       	ldi	r24, 0x2B	; 43
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
    1d00:	0e 94 ca 10 	call	0x2194	; 0x2194 <__pack_f>
    1d04:	a0 96       	adiw	r28, 0x20	; 32
    1d06:	e2 e1       	ldi	r30, 0x12	; 18
    1d08:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__epilogue_restores__>

00001d0c <__gtsf2>:
    1d0c:	a8 e1       	ldi	r26, 0x18	; 24
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	ec e8       	ldi	r30, 0x8C	; 140
    1d12:	fe e0       	ldi	r31, 0x0E	; 14
    1d14:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__prologue_saves__+0x18>
    1d18:	69 83       	std	Y+1, r22	; 0x01
    1d1a:	7a 83       	std	Y+2, r23	; 0x02
    1d1c:	8b 83       	std	Y+3, r24	; 0x03
    1d1e:	9c 83       	std	Y+4, r25	; 0x04
    1d20:	2d 83       	std	Y+5, r18	; 0x05
    1d22:	3e 83       	std	Y+6, r19	; 0x06
    1d24:	4f 83       	std	Y+7, r20	; 0x07
    1d26:	58 87       	std	Y+8, r21	; 0x08
    1d28:	8e 01       	movw	r16, r28
    1d2a:	07 5f       	subi	r16, 0xF7	; 247
    1d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2e:	ce 01       	movw	r24, r28
    1d30:	01 96       	adiw	r24, 0x01	; 1
    1d32:	b8 01       	movw	r22, r16
    1d34:	0e 94 98 11 	call	0x2330	; 0x2330 <__unpack_f>
    1d38:	81 e1       	ldi	r24, 0x11	; 17
    1d3a:	e8 2e       	mov	r14, r24
    1d3c:	f1 2c       	mov	r15, r1
    1d3e:	ec 0e       	add	r14, r28
    1d40:	fd 1e       	adc	r15, r29
    1d42:	ce 01       	movw	r24, r28
    1d44:	05 96       	adiw	r24, 0x05	; 5
    1d46:	b7 01       	movw	r22, r14
    1d48:	0e 94 98 11 	call	0x2330	; 0x2330 <__unpack_f>
    1d4c:	89 85       	ldd	r24, Y+9	; 0x09
    1d4e:	82 30       	cpi	r24, 0x02	; 2
    1d50:	40 f0       	brcs	.+16     	; 0x1d62 <__gtsf2+0x56>
    1d52:	89 89       	ldd	r24, Y+17	; 0x11
    1d54:	82 30       	cpi	r24, 0x02	; 2
    1d56:	28 f0       	brcs	.+10     	; 0x1d62 <__gtsf2+0x56>
    1d58:	c8 01       	movw	r24, r16
    1d5a:	b7 01       	movw	r22, r14
    1d5c:	0e 94 01 12 	call	0x2402	; 0x2402 <__fpcmp_parts_f>
    1d60:	01 c0       	rjmp	.+2      	; 0x1d64 <__gtsf2+0x58>
    1d62:	8f ef       	ldi	r24, 0xFF	; 255
    1d64:	68 96       	adiw	r28, 0x18	; 24
    1d66:	e6 e0       	ldi	r30, 0x06	; 6
    1d68:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__epilogue_restores__+0x18>

00001d6c <__gesf2>:
    1d6c:	a8 e1       	ldi	r26, 0x18	; 24
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	ec eb       	ldi	r30, 0xBC	; 188
    1d72:	fe e0       	ldi	r31, 0x0E	; 14
    1d74:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__prologue_saves__+0x18>
    1d78:	69 83       	std	Y+1, r22	; 0x01
    1d7a:	7a 83       	std	Y+2, r23	; 0x02
    1d7c:	8b 83       	std	Y+3, r24	; 0x03
    1d7e:	9c 83       	std	Y+4, r25	; 0x04
    1d80:	2d 83       	std	Y+5, r18	; 0x05
    1d82:	3e 83       	std	Y+6, r19	; 0x06
    1d84:	4f 83       	std	Y+7, r20	; 0x07
    1d86:	58 87       	std	Y+8, r21	; 0x08
    1d88:	8e 01       	movw	r16, r28
    1d8a:	07 5f       	subi	r16, 0xF7	; 247
    1d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8e:	ce 01       	movw	r24, r28
    1d90:	01 96       	adiw	r24, 0x01	; 1
    1d92:	b8 01       	movw	r22, r16
    1d94:	0e 94 98 11 	call	0x2330	; 0x2330 <__unpack_f>
    1d98:	81 e1       	ldi	r24, 0x11	; 17
    1d9a:	e8 2e       	mov	r14, r24
    1d9c:	f1 2c       	mov	r15, r1
    1d9e:	ec 0e       	add	r14, r28
    1da0:	fd 1e       	adc	r15, r29
    1da2:	ce 01       	movw	r24, r28
    1da4:	05 96       	adiw	r24, 0x05	; 5
    1da6:	b7 01       	movw	r22, r14
    1da8:	0e 94 98 11 	call	0x2330	; 0x2330 <__unpack_f>
    1dac:	89 85       	ldd	r24, Y+9	; 0x09
    1dae:	82 30       	cpi	r24, 0x02	; 2
    1db0:	40 f0       	brcs	.+16     	; 0x1dc2 <__gesf2+0x56>
    1db2:	89 89       	ldd	r24, Y+17	; 0x11
    1db4:	82 30       	cpi	r24, 0x02	; 2
    1db6:	28 f0       	brcs	.+10     	; 0x1dc2 <__gesf2+0x56>
    1db8:	c8 01       	movw	r24, r16
    1dba:	b7 01       	movw	r22, r14
    1dbc:	0e 94 01 12 	call	0x2402	; 0x2402 <__fpcmp_parts_f>
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <__gesf2+0x58>
    1dc2:	8f ef       	ldi	r24, 0xFF	; 255
    1dc4:	68 96       	adiw	r28, 0x18	; 24
    1dc6:	e6 e0       	ldi	r30, 0x06	; 6
    1dc8:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__epilogue_restores__+0x18>

00001dcc <__ltsf2>:
    1dcc:	a8 e1       	ldi	r26, 0x18	; 24
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	ec ee       	ldi	r30, 0xEC	; 236
    1dd2:	fe e0       	ldi	r31, 0x0E	; 14
    1dd4:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__prologue_saves__+0x18>
    1dd8:	69 83       	std	Y+1, r22	; 0x01
    1dda:	7a 83       	std	Y+2, r23	; 0x02
    1ddc:	8b 83       	std	Y+3, r24	; 0x03
    1dde:	9c 83       	std	Y+4, r25	; 0x04
    1de0:	2d 83       	std	Y+5, r18	; 0x05
    1de2:	3e 83       	std	Y+6, r19	; 0x06
    1de4:	4f 83       	std	Y+7, r20	; 0x07
    1de6:	58 87       	std	Y+8, r21	; 0x08
    1de8:	8e 01       	movw	r16, r28
    1dea:	07 5f       	subi	r16, 0xF7	; 247
    1dec:	1f 4f       	sbci	r17, 0xFF	; 255
    1dee:	ce 01       	movw	r24, r28
    1df0:	01 96       	adiw	r24, 0x01	; 1
    1df2:	b8 01       	movw	r22, r16
    1df4:	0e 94 98 11 	call	0x2330	; 0x2330 <__unpack_f>
    1df8:	81 e1       	ldi	r24, 0x11	; 17
    1dfa:	e8 2e       	mov	r14, r24
    1dfc:	f1 2c       	mov	r15, r1
    1dfe:	ec 0e       	add	r14, r28
    1e00:	fd 1e       	adc	r15, r29
    1e02:	ce 01       	movw	r24, r28
    1e04:	05 96       	adiw	r24, 0x05	; 5
    1e06:	b7 01       	movw	r22, r14
    1e08:	0e 94 98 11 	call	0x2330	; 0x2330 <__unpack_f>
    1e0c:	89 85       	ldd	r24, Y+9	; 0x09
    1e0e:	82 30       	cpi	r24, 0x02	; 2
    1e10:	40 f0       	brcs	.+16     	; 0x1e22 <__ltsf2+0x56>
    1e12:	89 89       	ldd	r24, Y+17	; 0x11
    1e14:	82 30       	cpi	r24, 0x02	; 2
    1e16:	28 f0       	brcs	.+10     	; 0x1e22 <__ltsf2+0x56>
    1e18:	c8 01       	movw	r24, r16
    1e1a:	b7 01       	movw	r22, r14
    1e1c:	0e 94 01 12 	call	0x2402	; 0x2402 <__fpcmp_parts_f>
    1e20:	01 c0       	rjmp	.+2      	; 0x1e24 <__ltsf2+0x58>
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	68 96       	adiw	r28, 0x18	; 24
    1e26:	e6 e0       	ldi	r30, 0x06	; 6
    1e28:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__epilogue_restores__+0x18>

00001e2c <__lesf2>:
    1e2c:	a8 e1       	ldi	r26, 0x18	; 24
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	ec e1       	ldi	r30, 0x1C	; 28
    1e32:	ff e0       	ldi	r31, 0x0F	; 15
    1e34:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__prologue_saves__+0x18>
    1e38:	69 83       	std	Y+1, r22	; 0x01
    1e3a:	7a 83       	std	Y+2, r23	; 0x02
    1e3c:	8b 83       	std	Y+3, r24	; 0x03
    1e3e:	9c 83       	std	Y+4, r25	; 0x04
    1e40:	2d 83       	std	Y+5, r18	; 0x05
    1e42:	3e 83       	std	Y+6, r19	; 0x06
    1e44:	4f 83       	std	Y+7, r20	; 0x07
    1e46:	58 87       	std	Y+8, r21	; 0x08
    1e48:	8e 01       	movw	r16, r28
    1e4a:	07 5f       	subi	r16, 0xF7	; 247
    1e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4e:	ce 01       	movw	r24, r28
    1e50:	01 96       	adiw	r24, 0x01	; 1
    1e52:	b8 01       	movw	r22, r16
    1e54:	0e 94 98 11 	call	0x2330	; 0x2330 <__unpack_f>
    1e58:	81 e1       	ldi	r24, 0x11	; 17
    1e5a:	e8 2e       	mov	r14, r24
    1e5c:	f1 2c       	mov	r15, r1
    1e5e:	ec 0e       	add	r14, r28
    1e60:	fd 1e       	adc	r15, r29
    1e62:	ce 01       	movw	r24, r28
    1e64:	05 96       	adiw	r24, 0x05	; 5
    1e66:	b7 01       	movw	r22, r14
    1e68:	0e 94 98 11 	call	0x2330	; 0x2330 <__unpack_f>
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	82 30       	cpi	r24, 0x02	; 2
    1e70:	40 f0       	brcs	.+16     	; 0x1e82 <__lesf2+0x56>
    1e72:	89 89       	ldd	r24, Y+17	; 0x11
    1e74:	82 30       	cpi	r24, 0x02	; 2
    1e76:	28 f0       	brcs	.+10     	; 0x1e82 <__lesf2+0x56>
    1e78:	c8 01       	movw	r24, r16
    1e7a:	b7 01       	movw	r22, r14
    1e7c:	0e 94 01 12 	call	0x2402	; 0x2402 <__fpcmp_parts_f>
    1e80:	01 c0       	rjmp	.+2      	; 0x1e84 <__lesf2+0x58>
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	68 96       	adiw	r28, 0x18	; 24
    1e86:	e6 e0       	ldi	r30, 0x06	; 6
    1e88:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__epilogue_restores__+0x18>

00001e8c <__floatsisf>:
    1e8c:	a8 e0       	ldi	r26, 0x08	; 8
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	ec e4       	ldi	r30, 0x4C	; 76
    1e92:	ff e0       	ldi	r31, 0x0F	; 15
    1e94:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__prologue_saves__+0x18>
    1e98:	7b 01       	movw	r14, r22
    1e9a:	8c 01       	movw	r16, r24
    1e9c:	83 e0       	ldi	r24, 0x03	; 3
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	d8 01       	movw	r26, r16
    1ea2:	c7 01       	movw	r24, r14
    1ea4:	88 27       	eor	r24, r24
    1ea6:	b7 fd       	sbrc	r27, 7
    1ea8:	83 95       	inc	r24
    1eaa:	99 27       	eor	r25, r25
    1eac:	aa 27       	eor	r26, r26
    1eae:	bb 27       	eor	r27, r27
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	8a 83       	std	Y+2, r24	; 0x02
    1eb4:	e1 14       	cp	r14, r1
    1eb6:	f1 04       	cpc	r15, r1
    1eb8:	01 05       	cpc	r16, r1
    1eba:	11 05       	cpc	r17, r1
    1ebc:	19 f4       	brne	.+6      	; 0x1ec4 <__floatsisf+0x38>
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	37 c0       	rjmp	.+110    	; 0x1f32 <__floatsisf+0xa6>
    1ec4:	8e e1       	ldi	r24, 0x1E	; 30
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	9c 83       	std	Y+4, r25	; 0x04
    1eca:	8b 83       	std	Y+3, r24	; 0x03
    1ecc:	22 23       	and	r18, r18
    1ece:	89 f0       	breq	.+34     	; 0x1ef2 <__floatsisf+0x66>
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	e8 16       	cp	r14, r24
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	f8 06       	cpc	r15, r24
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	08 07       	cpc	r16, r24
    1edc:	80 e8       	ldi	r24, 0x80	; 128
    1ede:	18 07       	cpc	r17, r24
    1ee0:	69 f1       	breq	.+90     	; 0x1f3c <__floatsisf+0xb0>
    1ee2:	10 95       	com	r17
    1ee4:	00 95       	com	r16
    1ee6:	f0 94       	com	r15
    1ee8:	e0 94       	com	r14
    1eea:	e1 1c       	adc	r14, r1
    1eec:	f1 1c       	adc	r15, r1
    1eee:	01 1d       	adc	r16, r1
    1ef0:	11 1d       	adc	r17, r1
    1ef2:	ed 82       	std	Y+5, r14	; 0x05
    1ef4:	fe 82       	std	Y+6, r15	; 0x06
    1ef6:	0f 83       	std	Y+7, r16	; 0x07
    1ef8:	18 87       	std	Y+8, r17	; 0x08
    1efa:	c8 01       	movw	r24, r16
    1efc:	b7 01       	movw	r22, r14
    1efe:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__clzsi2>
    1f02:	9c 01       	movw	r18, r24
    1f04:	21 50       	subi	r18, 0x01	; 1
    1f06:	30 40       	sbci	r19, 0x00	; 0
    1f08:	12 16       	cp	r1, r18
    1f0a:	13 06       	cpc	r1, r19
    1f0c:	94 f4       	brge	.+36     	; 0x1f32 <__floatsisf+0xa6>
    1f0e:	02 2e       	mov	r0, r18
    1f10:	04 c0       	rjmp	.+8      	; 0x1f1a <__floatsisf+0x8e>
    1f12:	ee 0c       	add	r14, r14
    1f14:	ff 1c       	adc	r15, r15
    1f16:	00 1f       	adc	r16, r16
    1f18:	11 1f       	adc	r17, r17
    1f1a:	0a 94       	dec	r0
    1f1c:	d2 f7       	brpl	.-12     	; 0x1f12 <__floatsisf+0x86>
    1f1e:	ed 82       	std	Y+5, r14	; 0x05
    1f20:	fe 82       	std	Y+6, r15	; 0x06
    1f22:	0f 83       	std	Y+7, r16	; 0x07
    1f24:	18 87       	std	Y+8, r17	; 0x08
    1f26:	8e e1       	ldi	r24, 0x1E	; 30
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	82 1b       	sub	r24, r18
    1f2c:	93 0b       	sbc	r25, r19
    1f2e:	9c 83       	std	Y+4, r25	; 0x04
    1f30:	8b 83       	std	Y+3, r24	; 0x03
    1f32:	ce 01       	movw	r24, r28
    1f34:	01 96       	adiw	r24, 0x01	; 1
    1f36:	0e 94 ca 10 	call	0x2194	; 0x2194 <__pack_f>
    1f3a:	04 c0       	rjmp	.+8      	; 0x1f44 <__floatsisf+0xb8>
    1f3c:	60 e0       	ldi	r22, 0x00	; 0
    1f3e:	70 e0       	ldi	r23, 0x00	; 0
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	9f ec       	ldi	r25, 0xCF	; 207
    1f44:	28 96       	adiw	r28, 0x08	; 8
    1f46:	e6 e0       	ldi	r30, 0x06	; 6
    1f48:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__epilogue_restores__+0x18>

00001f4c <__fixsfsi>:
    1f4c:	ac e0       	ldi	r26, 0x0C	; 12
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	ec ea       	ldi	r30, 0xAC	; 172
    1f52:	ff e0       	ldi	r31, 0x0F	; 15
    1f54:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__prologue_saves__+0x20>
    1f58:	69 83       	std	Y+1, r22	; 0x01
    1f5a:	7a 83       	std	Y+2, r23	; 0x02
    1f5c:	8b 83       	std	Y+3, r24	; 0x03
    1f5e:	9c 83       	std	Y+4, r25	; 0x04
    1f60:	ce 01       	movw	r24, r28
    1f62:	01 96       	adiw	r24, 0x01	; 1
    1f64:	be 01       	movw	r22, r28
    1f66:	6b 5f       	subi	r22, 0xFB	; 251
    1f68:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6a:	0e 94 98 11 	call	0x2330	; 0x2330 <__unpack_f>
    1f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f70:	82 30       	cpi	r24, 0x02	; 2
    1f72:	81 f1       	breq	.+96     	; 0x1fd4 <__fixsfsi+0x88>
    1f74:	82 30       	cpi	r24, 0x02	; 2
    1f76:	70 f1       	brcs	.+92     	; 0x1fd4 <__fixsfsi+0x88>
    1f78:	84 30       	cpi	r24, 0x04	; 4
    1f7a:	21 f4       	brne	.+8      	; 0x1f84 <__fixsfsi+0x38>
    1f7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f7e:	88 23       	and	r24, r24
    1f80:	69 f1       	breq	.+90     	; 0x1fdc <__fixsfsi+0x90>
    1f82:	0a c0       	rjmp	.+20     	; 0x1f98 <__fixsfsi+0x4c>
    1f84:	2f 81       	ldd	r18, Y+7	; 0x07
    1f86:	38 85       	ldd	r19, Y+8	; 0x08
    1f88:	37 fd       	sbrc	r19, 7
    1f8a:	24 c0       	rjmp	.+72     	; 0x1fd4 <__fixsfsi+0x88>
    1f8c:	6e 81       	ldd	r22, Y+6	; 0x06
    1f8e:	2f 31       	cpi	r18, 0x1F	; 31
    1f90:	31 05       	cpc	r19, r1
    1f92:	3c f0       	brlt	.+14     	; 0x1fa2 <__fixsfsi+0x56>
    1f94:	66 23       	and	r22, r22
    1f96:	11 f1       	breq	.+68     	; 0x1fdc <__fixsfsi+0x90>
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	50 e8       	ldi	r21, 0x80	; 128
    1fa0:	21 c0       	rjmp	.+66     	; 0x1fe4 <__fixsfsi+0x98>
    1fa2:	8e e1       	ldi	r24, 0x1E	; 30
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	82 1b       	sub	r24, r18
    1fa8:	93 0b       	sbc	r25, r19
    1faa:	29 85       	ldd	r18, Y+9	; 0x09
    1fac:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fae:	4b 85       	ldd	r20, Y+11	; 0x0b
    1fb0:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fb2:	04 c0       	rjmp	.+8      	; 0x1fbc <__fixsfsi+0x70>
    1fb4:	56 95       	lsr	r21
    1fb6:	47 95       	ror	r20
    1fb8:	37 95       	ror	r19
    1fba:	27 95       	ror	r18
    1fbc:	8a 95       	dec	r24
    1fbe:	d2 f7       	brpl	.-12     	; 0x1fb4 <__fixsfsi+0x68>
    1fc0:	66 23       	and	r22, r22
    1fc2:	81 f0       	breq	.+32     	; 0x1fe4 <__fixsfsi+0x98>
    1fc4:	50 95       	com	r21
    1fc6:	40 95       	com	r20
    1fc8:	30 95       	com	r19
    1fca:	21 95       	neg	r18
    1fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fce:	4f 4f       	sbci	r20, 0xFF	; 255
    1fd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd2:	08 c0       	rjmp	.+16     	; 0x1fe4 <__fixsfsi+0x98>
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	a9 01       	movw	r20, r18
    1fda:	04 c0       	rjmp	.+8      	; 0x1fe4 <__fixsfsi+0x98>
    1fdc:	2f ef       	ldi	r18, 0xFF	; 255
    1fde:	3f ef       	ldi	r19, 0xFF	; 255
    1fe0:	4f ef       	ldi	r20, 0xFF	; 255
    1fe2:	5f e7       	ldi	r21, 0x7F	; 127
    1fe4:	b9 01       	movw	r22, r18
    1fe6:	ca 01       	movw	r24, r20
    1fe8:	2c 96       	adiw	r28, 0x0c	; 12
    1fea:	e2 e0       	ldi	r30, 0x02	; 2
    1fec:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__epilogue_restores__+0x20>

00001ff0 <__floatunsisf>:
    1ff0:	a8 e0       	ldi	r26, 0x08	; 8
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	ee ef       	ldi	r30, 0xFE	; 254
    1ff6:	ff e0       	ldi	r31, 0x0F	; 15
    1ff8:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <__prologue_saves__+0x14>
    1ffc:	7b 01       	movw	r14, r22
    1ffe:	8c 01       	movw	r16, r24
    2000:	1a 82       	std	Y+2, r1	; 0x02
    2002:	61 15       	cp	r22, r1
    2004:	71 05       	cpc	r23, r1
    2006:	81 05       	cpc	r24, r1
    2008:	91 05       	cpc	r25, r1
    200a:	19 f4       	brne	.+6      	; 0x2012 <__floatunsisf+0x22>
    200c:	82 e0       	ldi	r24, 0x02	; 2
    200e:	89 83       	std	Y+1, r24	; 0x01
    2010:	5f c0       	rjmp	.+190    	; 0x20d0 <__floatunsisf+0xe0>
    2012:	83 e0       	ldi	r24, 0x03	; 3
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	8e e1       	ldi	r24, 0x1E	; 30
    2018:	c8 2e       	mov	r12, r24
    201a:	d1 2c       	mov	r13, r1
    201c:	dc 82       	std	Y+4, r13	; 0x04
    201e:	cb 82       	std	Y+3, r12	; 0x03
    2020:	ed 82       	std	Y+5, r14	; 0x05
    2022:	fe 82       	std	Y+6, r15	; 0x06
    2024:	0f 83       	std	Y+7, r16	; 0x07
    2026:	18 87       	std	Y+8, r17	; 0x08
    2028:	c8 01       	movw	r24, r16
    202a:	b7 01       	movw	r22, r14
    202c:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__clzsi2>
    2030:	fc 01       	movw	r30, r24
    2032:	31 97       	sbiw	r30, 0x01	; 1
    2034:	f7 ff       	sbrs	r31, 7
    2036:	3a c0       	rjmp	.+116    	; 0x20ac <__floatunsisf+0xbc>
    2038:	aa 27       	eor	r26, r26
    203a:	bb 27       	eor	r27, r27
    203c:	ae 1b       	sub	r26, r30
    203e:	bf 0b       	sbc	r27, r31
    2040:	21 e0       	ldi	r18, 0x01	; 1
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	50 e0       	ldi	r21, 0x00	; 0
    2048:	0a 2e       	mov	r0, r26
    204a:	04 c0       	rjmp	.+8      	; 0x2054 <__floatunsisf+0x64>
    204c:	22 0f       	add	r18, r18
    204e:	33 1f       	adc	r19, r19
    2050:	44 1f       	adc	r20, r20
    2052:	55 1f       	adc	r21, r21
    2054:	0a 94       	dec	r0
    2056:	d2 f7       	brpl	.-12     	; 0x204c <__floatunsisf+0x5c>
    2058:	21 50       	subi	r18, 0x01	; 1
    205a:	30 40       	sbci	r19, 0x00	; 0
    205c:	40 40       	sbci	r20, 0x00	; 0
    205e:	50 40       	sbci	r21, 0x00	; 0
    2060:	2e 21       	and	r18, r14
    2062:	3f 21       	and	r19, r15
    2064:	40 23       	and	r20, r16
    2066:	51 23       	and	r21, r17
    2068:	61 e0       	ldi	r22, 0x01	; 1
    206a:	70 e0       	ldi	r23, 0x00	; 0
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	21 15       	cp	r18, r1
    2072:	31 05       	cpc	r19, r1
    2074:	41 05       	cpc	r20, r1
    2076:	51 05       	cpc	r21, r1
    2078:	19 f4       	brne	.+6      	; 0x2080 <__floatunsisf+0x90>
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	cb 01       	movw	r24, r22
    2080:	04 c0       	rjmp	.+8      	; 0x208a <__floatunsisf+0x9a>
    2082:	16 95       	lsr	r17
    2084:	07 95       	ror	r16
    2086:	f7 94       	ror	r15
    2088:	e7 94       	ror	r14
    208a:	aa 95       	dec	r26
    208c:	d2 f7       	brpl	.-12     	; 0x2082 <__floatunsisf+0x92>
    208e:	e6 2a       	or	r14, r22
    2090:	f7 2a       	or	r15, r23
    2092:	08 2b       	or	r16, r24
    2094:	19 2b       	or	r17, r25
    2096:	ed 82       	std	Y+5, r14	; 0x05
    2098:	fe 82       	std	Y+6, r15	; 0x06
    209a:	0f 83       	std	Y+7, r16	; 0x07
    209c:	18 87       	std	Y+8, r17	; 0x08
    209e:	8e e1       	ldi	r24, 0x1E	; 30
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	8e 1b       	sub	r24, r30
    20a4:	9f 0b       	sbc	r25, r31
    20a6:	9c 83       	std	Y+4, r25	; 0x04
    20a8:	8b 83       	std	Y+3, r24	; 0x03
    20aa:	12 c0       	rjmp	.+36     	; 0x20d0 <__floatunsisf+0xe0>
    20ac:	30 97       	sbiw	r30, 0x00	; 0
    20ae:	81 f0       	breq	.+32     	; 0x20d0 <__floatunsisf+0xe0>
    20b0:	0e 2e       	mov	r0, r30
    20b2:	04 c0       	rjmp	.+8      	; 0x20bc <__floatunsisf+0xcc>
    20b4:	ee 0c       	add	r14, r14
    20b6:	ff 1c       	adc	r15, r15
    20b8:	00 1f       	adc	r16, r16
    20ba:	11 1f       	adc	r17, r17
    20bc:	0a 94       	dec	r0
    20be:	d2 f7       	brpl	.-12     	; 0x20b4 <__floatunsisf+0xc4>
    20c0:	ed 82       	std	Y+5, r14	; 0x05
    20c2:	fe 82       	std	Y+6, r15	; 0x06
    20c4:	0f 83       	std	Y+7, r16	; 0x07
    20c6:	18 87       	std	Y+8, r17	; 0x08
    20c8:	ce 1a       	sub	r12, r30
    20ca:	df 0a       	sbc	r13, r31
    20cc:	dc 82       	std	Y+4, r13	; 0x04
    20ce:	cb 82       	std	Y+3, r12	; 0x03
    20d0:	ce 01       	movw	r24, r28
    20d2:	01 96       	adiw	r24, 0x01	; 1
    20d4:	0e 94 ca 10 	call	0x2194	; 0x2194 <__pack_f>
    20d8:	28 96       	adiw	r28, 0x08	; 8
    20da:	e8 e0       	ldi	r30, 0x08	; 8
    20dc:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <__epilogue_restores__+0x14>

000020e0 <__clzsi2>:
    20e0:	af 92       	push	r10
    20e2:	bf 92       	push	r11
    20e4:	cf 92       	push	r12
    20e6:	df 92       	push	r13
    20e8:	ef 92       	push	r14
    20ea:	ff 92       	push	r15
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	7b 01       	movw	r14, r22
    20f2:	8c 01       	movw	r16, r24
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	e8 16       	cp	r14, r24
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	f8 06       	cpc	r15, r24
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	08 07       	cpc	r16, r24
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	18 07       	cpc	r17, r24
    2104:	58 f4       	brcc	.+22     	; 0x211c <__clzsi2+0x3c>
    2106:	ef ef       	ldi	r30, 0xFF	; 255
    2108:	ee 16       	cp	r14, r30
    210a:	f1 04       	cpc	r15, r1
    210c:	01 05       	cpc	r16, r1
    210e:	11 05       	cpc	r17, r1
    2110:	09 f0       	breq	.+2      	; 0x2114 <__clzsi2+0x34>
    2112:	90 f4       	brcc	.+36     	; 0x2138 <__clzsi2+0x58>
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	dc 01       	movw	r26, r24
    211a:	17 c0       	rjmp	.+46     	; 0x214a <__clzsi2+0x6a>
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	ef 16       	cp	r14, r31
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	ff 06       	cpc	r15, r31
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	0f 07       	cpc	r16, r31
    2128:	f1 e0       	ldi	r31, 0x01	; 1
    212a:	1f 07       	cpc	r17, r31
    212c:	50 f4       	brcc	.+20     	; 0x2142 <__clzsi2+0x62>
    212e:	80 e1       	ldi	r24, 0x10	; 16
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a0 e0       	ldi	r26, 0x00	; 0
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	09 c0       	rjmp	.+18     	; 0x214a <__clzsi2+0x6a>
    2138:	88 e0       	ldi	r24, 0x08	; 8
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	a0 e0       	ldi	r26, 0x00	; 0
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	04 c0       	rjmp	.+8      	; 0x214a <__clzsi2+0x6a>
    2142:	88 e1       	ldi	r24, 0x18	; 24
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	a0 e0       	ldi	r26, 0x00	; 0
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	20 e2       	ldi	r18, 0x20	; 32
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e0       	ldi	r20, 0x00	; 0
    2150:	50 e0       	ldi	r21, 0x00	; 0
    2152:	28 1b       	sub	r18, r24
    2154:	39 0b       	sbc	r19, r25
    2156:	4a 0b       	sbc	r20, r26
    2158:	5b 0b       	sbc	r21, r27
    215a:	57 01       	movw	r10, r14
    215c:	68 01       	movw	r12, r16
    215e:	04 c0       	rjmp	.+8      	; 0x2168 <__clzsi2+0x88>
    2160:	d6 94       	lsr	r13
    2162:	c7 94       	ror	r12
    2164:	b7 94       	ror	r11
    2166:	a7 94       	ror	r10
    2168:	8a 95       	dec	r24
    216a:	d2 f7       	brpl	.-12     	; 0x2160 <__clzsi2+0x80>
    216c:	d6 01       	movw	r26, r12
    216e:	c5 01       	movw	r24, r10
    2170:	8d 5c       	subi	r24, 0xCD	; 205
    2172:	9e 4f       	sbci	r25, 0xFE	; 254
    2174:	fc 01       	movw	r30, r24
    2176:	80 81       	ld	r24, Z
    2178:	28 1b       	sub	r18, r24
    217a:	31 09       	sbc	r19, r1
    217c:	41 09       	sbc	r20, r1
    217e:	51 09       	sbc	r21, r1
    2180:	c9 01       	movw	r24, r18
    2182:	1f 91       	pop	r17
    2184:	0f 91       	pop	r16
    2186:	ff 90       	pop	r15
    2188:	ef 90       	pop	r14
    218a:	df 90       	pop	r13
    218c:	cf 90       	pop	r12
    218e:	bf 90       	pop	r11
    2190:	af 90       	pop	r10
    2192:	08 95       	ret

00002194 <__pack_f>:
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	fc 01       	movw	r30, r24
    21a2:	24 81       	ldd	r18, Z+4	; 0x04
    21a4:	35 81       	ldd	r19, Z+5	; 0x05
    21a6:	46 81       	ldd	r20, Z+6	; 0x06
    21a8:	57 81       	ldd	r21, Z+7	; 0x07
    21aa:	61 81       	ldd	r22, Z+1	; 0x01
    21ac:	80 81       	ld	r24, Z
    21ae:	82 30       	cpi	r24, 0x02	; 2
    21b0:	20 f4       	brcc	.+8      	; 0x21ba <__pack_f+0x26>
    21b2:	40 61       	ori	r20, 0x10	; 16
    21b4:	ef ef       	ldi	r30, 0xFF	; 255
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	a3 c0       	rjmp	.+326    	; 0x2300 <__pack_f+0x16c>
    21ba:	84 30       	cpi	r24, 0x04	; 4
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <__pack_f+0x2c>
    21be:	9b c0       	rjmp	.+310    	; 0x22f6 <__pack_f+0x162>
    21c0:	82 30       	cpi	r24, 0x02	; 2
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <__pack_f+0x32>
    21c4:	92 c0       	rjmp	.+292    	; 0x22ea <__pack_f+0x156>
    21c6:	21 15       	cp	r18, r1
    21c8:	31 05       	cpc	r19, r1
    21ca:	41 05       	cpc	r20, r1
    21cc:	51 05       	cpc	r21, r1
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <__pack_f+0x3e>
    21d0:	8f c0       	rjmp	.+286    	; 0x22f0 <__pack_f+0x15c>
    21d2:	02 80       	ldd	r0, Z+2	; 0x02
    21d4:	f3 81       	ldd	r31, Z+3	; 0x03
    21d6:	e0 2d       	mov	r30, r0
    21d8:	8f ef       	ldi	r24, 0xFF	; 255
    21da:	e2 38       	cpi	r30, 0x82	; 130
    21dc:	f8 07       	cpc	r31, r24
    21de:	0c f0       	brlt	.+2      	; 0x21e2 <__pack_f+0x4e>
    21e0:	5a c0       	rjmp	.+180    	; 0x2296 <__pack_f+0x102>
    21e2:	c2 e8       	ldi	r28, 0x82	; 130
    21e4:	df ef       	ldi	r29, 0xFF	; 255
    21e6:	ce 1b       	sub	r28, r30
    21e8:	df 0b       	sbc	r29, r31
    21ea:	ca 31       	cpi	r28, 0x1A	; 26
    21ec:	d1 05       	cpc	r29, r1
    21ee:	6c f5       	brge	.+90     	; 0x224a <__pack_f+0xb6>
    21f0:	79 01       	movw	r14, r18
    21f2:	8a 01       	movw	r16, r20
    21f4:	0c 2e       	mov	r0, r28
    21f6:	04 c0       	rjmp	.+8      	; 0x2200 <__pack_f+0x6c>
    21f8:	16 95       	lsr	r17
    21fa:	07 95       	ror	r16
    21fc:	f7 94       	ror	r15
    21fe:	e7 94       	ror	r14
    2200:	0a 94       	dec	r0
    2202:	d2 f7       	brpl	.-12     	; 0x21f8 <__pack_f+0x64>
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	a0 e0       	ldi	r26, 0x00	; 0
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	0c 2e       	mov	r0, r28
    220e:	04 c0       	rjmp	.+8      	; 0x2218 <__pack_f+0x84>
    2210:	88 0f       	add	r24, r24
    2212:	99 1f       	adc	r25, r25
    2214:	aa 1f       	adc	r26, r26
    2216:	bb 1f       	adc	r27, r27
    2218:	0a 94       	dec	r0
    221a:	d2 f7       	brpl	.-12     	; 0x2210 <__pack_f+0x7c>
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	a1 09       	sbc	r26, r1
    2220:	b1 09       	sbc	r27, r1
    2222:	82 23       	and	r24, r18
    2224:	93 23       	and	r25, r19
    2226:	a4 23       	and	r26, r20
    2228:	b5 23       	and	r27, r21
    222a:	21 e0       	ldi	r18, 0x01	; 1
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e0       	ldi	r20, 0x00	; 0
    2230:	50 e0       	ldi	r21, 0x00	; 0
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	a1 05       	cpc	r26, r1
    2236:	b1 05       	cpc	r27, r1
    2238:	19 f4       	brne	.+6      	; 0x2240 <__pack_f+0xac>
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	a9 01       	movw	r20, r18
    2240:	2e 29       	or	r18, r14
    2242:	3f 29       	or	r19, r15
    2244:	40 2b       	or	r20, r16
    2246:	51 2b       	or	r21, r17
    2248:	03 c0       	rjmp	.+6      	; 0x2250 <__pack_f+0xbc>
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	a9 01       	movw	r20, r18
    2250:	da 01       	movw	r26, r20
    2252:	c9 01       	movw	r24, r18
    2254:	8f 77       	andi	r24, 0x7F	; 127
    2256:	90 70       	andi	r25, 0x00	; 0
    2258:	a0 70       	andi	r26, 0x00	; 0
    225a:	b0 70       	andi	r27, 0x00	; 0
    225c:	80 34       	cpi	r24, 0x40	; 64
    225e:	91 05       	cpc	r25, r1
    2260:	a1 05       	cpc	r26, r1
    2262:	b1 05       	cpc	r27, r1
    2264:	39 f4       	brne	.+14     	; 0x2274 <__pack_f+0xe0>
    2266:	27 ff       	sbrs	r18, 7
    2268:	09 c0       	rjmp	.+18     	; 0x227c <__pack_f+0xe8>
    226a:	20 5c       	subi	r18, 0xC0	; 192
    226c:	3f 4f       	sbci	r19, 0xFF	; 255
    226e:	4f 4f       	sbci	r20, 0xFF	; 255
    2270:	5f 4f       	sbci	r21, 0xFF	; 255
    2272:	04 c0       	rjmp	.+8      	; 0x227c <__pack_f+0xe8>
    2274:	21 5c       	subi	r18, 0xC1	; 193
    2276:	3f 4f       	sbci	r19, 0xFF	; 255
    2278:	4f 4f       	sbci	r20, 0xFF	; 255
    227a:	5f 4f       	sbci	r21, 0xFF	; 255
    227c:	e1 e0       	ldi	r30, 0x01	; 1
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	20 30       	cpi	r18, 0x00	; 0
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	38 07       	cpc	r19, r24
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	48 07       	cpc	r20, r24
    228a:	80 e4       	ldi	r24, 0x40	; 64
    228c:	58 07       	cpc	r21, r24
    228e:	28 f5       	brcc	.+74     	; 0x22da <__pack_f+0x146>
    2290:	e0 e0       	ldi	r30, 0x00	; 0
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	22 c0       	rjmp	.+68     	; 0x22da <__pack_f+0x146>
    2296:	e0 38       	cpi	r30, 0x80	; 128
    2298:	f1 05       	cpc	r31, r1
    229a:	6c f5       	brge	.+90     	; 0x22f6 <__pack_f+0x162>
    229c:	e1 58       	subi	r30, 0x81	; 129
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	da 01       	movw	r26, r20
    22a2:	c9 01       	movw	r24, r18
    22a4:	8f 77       	andi	r24, 0x7F	; 127
    22a6:	90 70       	andi	r25, 0x00	; 0
    22a8:	a0 70       	andi	r26, 0x00	; 0
    22aa:	b0 70       	andi	r27, 0x00	; 0
    22ac:	80 34       	cpi	r24, 0x40	; 64
    22ae:	91 05       	cpc	r25, r1
    22b0:	a1 05       	cpc	r26, r1
    22b2:	b1 05       	cpc	r27, r1
    22b4:	39 f4       	brne	.+14     	; 0x22c4 <__pack_f+0x130>
    22b6:	27 ff       	sbrs	r18, 7
    22b8:	09 c0       	rjmp	.+18     	; 0x22cc <__pack_f+0x138>
    22ba:	20 5c       	subi	r18, 0xC0	; 192
    22bc:	3f 4f       	sbci	r19, 0xFF	; 255
    22be:	4f 4f       	sbci	r20, 0xFF	; 255
    22c0:	5f 4f       	sbci	r21, 0xFF	; 255
    22c2:	04 c0       	rjmp	.+8      	; 0x22cc <__pack_f+0x138>
    22c4:	21 5c       	subi	r18, 0xC1	; 193
    22c6:	3f 4f       	sbci	r19, 0xFF	; 255
    22c8:	4f 4f       	sbci	r20, 0xFF	; 255
    22ca:	5f 4f       	sbci	r21, 0xFF	; 255
    22cc:	57 ff       	sbrs	r21, 7
    22ce:	05 c0       	rjmp	.+10     	; 0x22da <__pack_f+0x146>
    22d0:	56 95       	lsr	r21
    22d2:	47 95       	ror	r20
    22d4:	37 95       	ror	r19
    22d6:	27 95       	ror	r18
    22d8:	31 96       	adiw	r30, 0x01	; 1
    22da:	87 e0       	ldi	r24, 0x07	; 7
    22dc:	56 95       	lsr	r21
    22de:	47 95       	ror	r20
    22e0:	37 95       	ror	r19
    22e2:	27 95       	ror	r18
    22e4:	8a 95       	dec	r24
    22e6:	d1 f7       	brne	.-12     	; 0x22dc <__pack_f+0x148>
    22e8:	0b c0       	rjmp	.+22     	; 0x2300 <__pack_f+0x16c>
    22ea:	e0 e0       	ldi	r30, 0x00	; 0
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	05 c0       	rjmp	.+10     	; 0x22fa <__pack_f+0x166>
    22f0:	e0 e0       	ldi	r30, 0x00	; 0
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	05 c0       	rjmp	.+10     	; 0x2300 <__pack_f+0x16c>
    22f6:	ef ef       	ldi	r30, 0xFF	; 255
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	a9 01       	movw	r20, r18
    2300:	8e 2f       	mov	r24, r30
    2302:	87 95       	ror	r24
    2304:	88 27       	eor	r24, r24
    2306:	87 95       	ror	r24
    2308:	94 2f       	mov	r25, r20
    230a:	9f 77       	andi	r25, 0x7F	; 127
    230c:	67 95       	ror	r22
    230e:	66 27       	eor	r22, r22
    2310:	67 95       	ror	r22
    2312:	e6 95       	lsr	r30
    2314:	e2 2e       	mov	r14, r18
    2316:	a9 2f       	mov	r26, r25
    2318:	a8 2b       	or	r26, r24
    231a:	fe 2f       	mov	r31, r30
    231c:	f6 2b       	or	r31, r22
    231e:	62 2f       	mov	r22, r18
    2320:	73 2f       	mov	r23, r19
    2322:	8a 2f       	mov	r24, r26
    2324:	9f 2f       	mov	r25, r31
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	e6 e0       	ldi	r30, 0x06	; 6
    232c:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__epilogue_restores__+0x18>

00002330 <__unpack_f>:
    2330:	dc 01       	movw	r26, r24
    2332:	fb 01       	movw	r30, r22
    2334:	2c 91       	ld	r18, X
    2336:	11 96       	adiw	r26, 0x01	; 1
    2338:	3c 91       	ld	r19, X
    233a:	11 97       	sbiw	r26, 0x01	; 1
    233c:	12 96       	adiw	r26, 0x02	; 2
    233e:	8c 91       	ld	r24, X
    2340:	12 97       	sbiw	r26, 0x02	; 2
    2342:	48 2f       	mov	r20, r24
    2344:	4f 77       	andi	r20, 0x7F	; 127
    2346:	50 e0       	ldi	r21, 0x00	; 0
    2348:	98 2f       	mov	r25, r24
    234a:	99 1f       	adc	r25, r25
    234c:	99 27       	eor	r25, r25
    234e:	99 1f       	adc	r25, r25
    2350:	13 96       	adiw	r26, 0x03	; 3
    2352:	6c 91       	ld	r22, X
    2354:	13 97       	sbiw	r26, 0x03	; 3
    2356:	86 2f       	mov	r24, r22
    2358:	88 0f       	add	r24, r24
    235a:	89 2b       	or	r24, r25
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	66 1f       	adc	r22, r22
    2360:	66 27       	eor	r22, r22
    2362:	66 1f       	adc	r22, r22
    2364:	61 83       	std	Z+1, r22	; 0x01
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	39 f5       	brne	.+78     	; 0x23b8 <__unpack_f+0x88>
    236a:	21 15       	cp	r18, r1
    236c:	31 05       	cpc	r19, r1
    236e:	41 05       	cpc	r20, r1
    2370:	51 05       	cpc	r21, r1
    2372:	11 f4       	brne	.+4      	; 0x2378 <__unpack_f+0x48>
    2374:	82 e0       	ldi	r24, 0x02	; 2
    2376:	29 c0       	rjmp	.+82     	; 0x23ca <__unpack_f+0x9a>
    2378:	82 e8       	ldi	r24, 0x82	; 130
    237a:	9f ef       	ldi	r25, 0xFF	; 255
    237c:	93 83       	std	Z+3, r25	; 0x03
    237e:	82 83       	std	Z+2, r24	; 0x02
    2380:	67 e0       	ldi	r22, 0x07	; 7
    2382:	22 0f       	add	r18, r18
    2384:	33 1f       	adc	r19, r19
    2386:	44 1f       	adc	r20, r20
    2388:	55 1f       	adc	r21, r21
    238a:	6a 95       	dec	r22
    238c:	d1 f7       	brne	.-12     	; 0x2382 <__unpack_f+0x52>
    238e:	83 e0       	ldi	r24, 0x03	; 3
    2390:	80 83       	st	Z, r24
    2392:	09 c0       	rjmp	.+18     	; 0x23a6 <__unpack_f+0x76>
    2394:	22 0f       	add	r18, r18
    2396:	33 1f       	adc	r19, r19
    2398:	44 1f       	adc	r20, r20
    239a:	55 1f       	adc	r21, r21
    239c:	82 81       	ldd	r24, Z+2	; 0x02
    239e:	93 81       	ldd	r25, Z+3	; 0x03
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	93 83       	std	Z+3, r25	; 0x03
    23a4:	82 83       	std	Z+2, r24	; 0x02
    23a6:	20 30       	cpi	r18, 0x00	; 0
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	38 07       	cpc	r19, r24
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	48 07       	cpc	r20, r24
    23b0:	80 e4       	ldi	r24, 0x40	; 64
    23b2:	58 07       	cpc	r21, r24
    23b4:	78 f3       	brcs	.-34     	; 0x2394 <__unpack_f+0x64>
    23b6:	20 c0       	rjmp	.+64     	; 0x23f8 <__unpack_f+0xc8>
    23b8:	8f 3f       	cpi	r24, 0xFF	; 255
    23ba:	91 05       	cpc	r25, r1
    23bc:	79 f4       	brne	.+30     	; 0x23dc <__unpack_f+0xac>
    23be:	21 15       	cp	r18, r1
    23c0:	31 05       	cpc	r19, r1
    23c2:	41 05       	cpc	r20, r1
    23c4:	51 05       	cpc	r21, r1
    23c6:	19 f4       	brne	.+6      	; 0x23ce <__unpack_f+0x9e>
    23c8:	84 e0       	ldi	r24, 0x04	; 4
    23ca:	80 83       	st	Z, r24
    23cc:	08 95       	ret
    23ce:	44 ff       	sbrs	r20, 4
    23d0:	03 c0       	rjmp	.+6      	; 0x23d8 <__unpack_f+0xa8>
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	80 83       	st	Z, r24
    23d6:	10 c0       	rjmp	.+32     	; 0x23f8 <__unpack_f+0xc8>
    23d8:	10 82       	st	Z, r1
    23da:	0e c0       	rjmp	.+28     	; 0x23f8 <__unpack_f+0xc8>
    23dc:	8f 57       	subi	r24, 0x7F	; 127
    23de:	90 40       	sbci	r25, 0x00	; 0
    23e0:	93 83       	std	Z+3, r25	; 0x03
    23e2:	82 83       	std	Z+2, r24	; 0x02
    23e4:	83 e0       	ldi	r24, 0x03	; 3
    23e6:	80 83       	st	Z, r24
    23e8:	87 e0       	ldi	r24, 0x07	; 7
    23ea:	22 0f       	add	r18, r18
    23ec:	33 1f       	adc	r19, r19
    23ee:	44 1f       	adc	r20, r20
    23f0:	55 1f       	adc	r21, r21
    23f2:	8a 95       	dec	r24
    23f4:	d1 f7       	brne	.-12     	; 0x23ea <__unpack_f+0xba>
    23f6:	50 64       	ori	r21, 0x40	; 64
    23f8:	24 83       	std	Z+4, r18	; 0x04
    23fa:	35 83       	std	Z+5, r19	; 0x05
    23fc:	46 83       	std	Z+6, r20	; 0x06
    23fe:	57 83       	std	Z+7, r21	; 0x07
    2400:	08 95       	ret

00002402 <__fpcmp_parts_f>:
    2402:	fc 01       	movw	r30, r24
    2404:	db 01       	movw	r26, r22
    2406:	90 81       	ld	r25, Z
    2408:	92 30       	cpi	r25, 0x02	; 2
    240a:	08 f4       	brcc	.+2      	; 0x240e <__fpcmp_parts_f+0xc>
    240c:	49 c0       	rjmp	.+146    	; 0x24a0 <__fpcmp_parts_f+0x9e>
    240e:	8c 91       	ld	r24, X
    2410:	82 30       	cpi	r24, 0x02	; 2
    2412:	08 f4       	brcc	.+2      	; 0x2416 <__fpcmp_parts_f+0x14>
    2414:	45 c0       	rjmp	.+138    	; 0x24a0 <__fpcmp_parts_f+0x9e>
    2416:	94 30       	cpi	r25, 0x04	; 4
    2418:	51 f4       	brne	.+20     	; 0x242e <__fpcmp_parts_f+0x2c>
    241a:	61 81       	ldd	r22, Z+1	; 0x01
    241c:	84 30       	cpi	r24, 0x04	; 4
    241e:	b1 f5       	brne	.+108    	; 0x248c <__fpcmp_parts_f+0x8a>
    2420:	11 96       	adiw	r26, 0x01	; 1
    2422:	2c 91       	ld	r18, X
    2424:	11 97       	sbiw	r26, 0x01	; 1
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	26 1b       	sub	r18, r22
    242a:	31 09       	sbc	r19, r1
    242c:	41 c0       	rjmp	.+130    	; 0x24b0 <__fpcmp_parts_f+0xae>
    242e:	84 30       	cpi	r24, 0x04	; 4
    2430:	21 f0       	breq	.+8      	; 0x243a <__fpcmp_parts_f+0x38>
    2432:	92 30       	cpi	r25, 0x02	; 2
    2434:	41 f4       	brne	.+16     	; 0x2446 <__fpcmp_parts_f+0x44>
    2436:	82 30       	cpi	r24, 0x02	; 2
    2438:	b1 f1       	breq	.+108    	; 0x24a6 <__fpcmp_parts_f+0xa4>
    243a:	11 96       	adiw	r26, 0x01	; 1
    243c:	8c 91       	ld	r24, X
    243e:	11 97       	sbiw	r26, 0x01	; 1
    2440:	88 23       	and	r24, r24
    2442:	a1 f1       	breq	.+104    	; 0x24ac <__fpcmp_parts_f+0xaa>
    2444:	2d c0       	rjmp	.+90     	; 0x24a0 <__fpcmp_parts_f+0x9e>
    2446:	61 81       	ldd	r22, Z+1	; 0x01
    2448:	82 30       	cpi	r24, 0x02	; 2
    244a:	01 f1       	breq	.+64     	; 0x248c <__fpcmp_parts_f+0x8a>
    244c:	11 96       	adiw	r26, 0x01	; 1
    244e:	8c 91       	ld	r24, X
    2450:	11 97       	sbiw	r26, 0x01	; 1
    2452:	68 17       	cp	r22, r24
    2454:	d9 f4       	brne	.+54     	; 0x248c <__fpcmp_parts_f+0x8a>
    2456:	22 81       	ldd	r18, Z+2	; 0x02
    2458:	33 81       	ldd	r19, Z+3	; 0x03
    245a:	12 96       	adiw	r26, 0x02	; 2
    245c:	8d 91       	ld	r24, X+
    245e:	9c 91       	ld	r25, X
    2460:	13 97       	sbiw	r26, 0x03	; 3
    2462:	82 17       	cp	r24, r18
    2464:	93 07       	cpc	r25, r19
    2466:	94 f0       	brlt	.+36     	; 0x248c <__fpcmp_parts_f+0x8a>
    2468:	28 17       	cp	r18, r24
    246a:	39 07       	cpc	r19, r25
    246c:	bc f0       	brlt	.+46     	; 0x249c <__fpcmp_parts_f+0x9a>
    246e:	24 81       	ldd	r18, Z+4	; 0x04
    2470:	35 81       	ldd	r19, Z+5	; 0x05
    2472:	46 81       	ldd	r20, Z+6	; 0x06
    2474:	57 81       	ldd	r21, Z+7	; 0x07
    2476:	14 96       	adiw	r26, 0x04	; 4
    2478:	8d 91       	ld	r24, X+
    247a:	9d 91       	ld	r25, X+
    247c:	0d 90       	ld	r0, X+
    247e:	bc 91       	ld	r27, X
    2480:	a0 2d       	mov	r26, r0
    2482:	82 17       	cp	r24, r18
    2484:	93 07       	cpc	r25, r19
    2486:	a4 07       	cpc	r26, r20
    2488:	b5 07       	cpc	r27, r21
    248a:	18 f4       	brcc	.+6      	; 0x2492 <__fpcmp_parts_f+0x90>
    248c:	66 23       	and	r22, r22
    248e:	41 f0       	breq	.+16     	; 0x24a0 <__fpcmp_parts_f+0x9e>
    2490:	0d c0       	rjmp	.+26     	; 0x24ac <__fpcmp_parts_f+0xaa>
    2492:	28 17       	cp	r18, r24
    2494:	39 07       	cpc	r19, r25
    2496:	4a 07       	cpc	r20, r26
    2498:	5b 07       	cpc	r21, r27
    249a:	28 f4       	brcc	.+10     	; 0x24a6 <__fpcmp_parts_f+0xa4>
    249c:	66 23       	and	r22, r22
    249e:	31 f0       	breq	.+12     	; 0x24ac <__fpcmp_parts_f+0xaa>
    24a0:	21 e0       	ldi	r18, 0x01	; 1
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	05 c0       	rjmp	.+10     	; 0x24b0 <__fpcmp_parts_f+0xae>
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <__fpcmp_parts_f+0xae>
    24ac:	2f ef       	ldi	r18, 0xFF	; 255
    24ae:	3f ef       	ldi	r19, 0xFF	; 255
    24b0:	c9 01       	movw	r24, r18
    24b2:	08 95       	ret

000024b4 <__udivmodqi4>:
    24b4:	99 1b       	sub	r25, r25
    24b6:	79 e0       	ldi	r23, 0x09	; 9
    24b8:	04 c0       	rjmp	.+8      	; 0x24c2 <__udivmodqi4_ep>

000024ba <__udivmodqi4_loop>:
    24ba:	99 1f       	adc	r25, r25
    24bc:	96 17       	cp	r25, r22
    24be:	08 f0       	brcs	.+2      	; 0x24c2 <__udivmodqi4_ep>
    24c0:	96 1b       	sub	r25, r22

000024c2 <__udivmodqi4_ep>:
    24c2:	88 1f       	adc	r24, r24
    24c4:	7a 95       	dec	r23
    24c6:	c9 f7       	brne	.-14     	; 0x24ba <__udivmodqi4_loop>
    24c8:	80 95       	com	r24
    24ca:	08 95       	ret

000024cc <__prologue_saves__>:
    24cc:	2f 92       	push	r2
    24ce:	3f 92       	push	r3
    24d0:	4f 92       	push	r4
    24d2:	5f 92       	push	r5
    24d4:	6f 92       	push	r6
    24d6:	7f 92       	push	r7
    24d8:	8f 92       	push	r8
    24da:	9f 92       	push	r9
    24dc:	af 92       	push	r10
    24de:	bf 92       	push	r11
    24e0:	cf 92       	push	r12
    24e2:	df 92       	push	r13
    24e4:	ef 92       	push	r14
    24e6:	ff 92       	push	r15
    24e8:	0f 93       	push	r16
    24ea:	1f 93       	push	r17
    24ec:	cf 93       	push	r28
    24ee:	df 93       	push	r29
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	ca 1b       	sub	r28, r26
    24f6:	db 0b       	sbc	r29, r27
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	de bf       	out	0x3e, r29	; 62
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	cd bf       	out	0x3d, r28	; 61
    2502:	09 94       	ijmp

00002504 <__epilogue_restores__>:
    2504:	2a 88       	ldd	r2, Y+18	; 0x12
    2506:	39 88       	ldd	r3, Y+17	; 0x11
    2508:	48 88       	ldd	r4, Y+16	; 0x10
    250a:	5f 84       	ldd	r5, Y+15	; 0x0f
    250c:	6e 84       	ldd	r6, Y+14	; 0x0e
    250e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2510:	8c 84       	ldd	r8, Y+12	; 0x0c
    2512:	9b 84       	ldd	r9, Y+11	; 0x0b
    2514:	aa 84       	ldd	r10, Y+10	; 0x0a
    2516:	b9 84       	ldd	r11, Y+9	; 0x09
    2518:	c8 84       	ldd	r12, Y+8	; 0x08
    251a:	df 80       	ldd	r13, Y+7	; 0x07
    251c:	ee 80       	ldd	r14, Y+6	; 0x06
    251e:	fd 80       	ldd	r15, Y+5	; 0x05
    2520:	0c 81       	ldd	r16, Y+4	; 0x04
    2522:	1b 81       	ldd	r17, Y+3	; 0x03
    2524:	aa 81       	ldd	r26, Y+2	; 0x02
    2526:	b9 81       	ldd	r27, Y+1	; 0x01
    2528:	ce 0f       	add	r28, r30
    252a:	d1 1d       	adc	r29, r1
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	cd bf       	out	0x3d, r28	; 61
    2536:	ed 01       	movw	r28, r26
    2538:	08 95       	ret

0000253a <cos>:
    253a:	03 d0       	rcall	.+6      	; 0x2542 <__fp_rempio2>
    253c:	e3 95       	inc	r30
    253e:	28 c0       	rjmp	.+80     	; 0x2590 <__fp_sinus>
    2540:	ce c0       	rjmp	.+412    	; 0x26de <__fp_nan>

00002542 <__fp_rempio2>:
    2542:	3f d0       	rcall	.+126    	; 0x25c2 <__fp_splitA>
    2544:	e8 f3       	brcs	.-6      	; 0x2540 <cos+0x6>
    2546:	e8 94       	clt
    2548:	e0 e0       	ldi	r30, 0x00	; 0
    254a:	bb 27       	eor	r27, r27
    254c:	9f 57       	subi	r25, 0x7F	; 127
    254e:	f0 f0       	brcs	.+60     	; 0x258c <__fp_rempio2+0x4a>
    2550:	2a ed       	ldi	r18, 0xDA	; 218
    2552:	3f e0       	ldi	r19, 0x0F	; 15
    2554:	49 ec       	ldi	r20, 0xC9	; 201
    2556:	06 c0       	rjmp	.+12     	; 0x2564 <__fp_rempio2+0x22>
    2558:	ee 0f       	add	r30, r30
    255a:	bb 0f       	add	r27, r27
    255c:	66 1f       	adc	r22, r22
    255e:	77 1f       	adc	r23, r23
    2560:	88 1f       	adc	r24, r24
    2562:	28 f0       	brcs	.+10     	; 0x256e <__fp_rempio2+0x2c>
    2564:	b2 3a       	cpi	r27, 0xA2	; 162
    2566:	62 07       	cpc	r22, r18
    2568:	73 07       	cpc	r23, r19
    256a:	84 07       	cpc	r24, r20
    256c:	28 f0       	brcs	.+10     	; 0x2578 <__fp_rempio2+0x36>
    256e:	b2 5a       	subi	r27, 0xA2	; 162
    2570:	62 0b       	sbc	r22, r18
    2572:	73 0b       	sbc	r23, r19
    2574:	84 0b       	sbc	r24, r20
    2576:	e3 95       	inc	r30
    2578:	9a 95       	dec	r25
    257a:	72 f7       	brpl	.-36     	; 0x2558 <__fp_rempio2+0x16>
    257c:	80 38       	cpi	r24, 0x80	; 128
    257e:	30 f4       	brcc	.+12     	; 0x258c <__fp_rempio2+0x4a>
    2580:	9a 95       	dec	r25
    2582:	bb 0f       	add	r27, r27
    2584:	66 1f       	adc	r22, r22
    2586:	77 1f       	adc	r23, r23
    2588:	88 1f       	adc	r24, r24
    258a:	d2 f7       	brpl	.-12     	; 0x2580 <__fp_rempio2+0x3e>
    258c:	90 48       	sbci	r25, 0x80	; 128
    258e:	9b c0       	rjmp	.+310    	; 0x26c6 <__fp_mpack_finite>

00002590 <__fp_sinus>:
    2590:	ef 93       	push	r30
    2592:	e0 ff       	sbrs	r30, 0
    2594:	06 c0       	rjmp	.+12     	; 0x25a2 <__fp_sinus+0x12>
    2596:	a2 ea       	ldi	r26, 0xA2	; 162
    2598:	2a ed       	ldi	r18, 0xDA	; 218
    259a:	3f e0       	ldi	r19, 0x0F	; 15
    259c:	49 ec       	ldi	r20, 0xC9	; 201
    259e:	5f eb       	ldi	r21, 0xBF	; 191
    25a0:	37 d0       	rcall	.+110    	; 0x2610 <__addsf3x>
    25a2:	bf d0       	rcall	.+382    	; 0x2722 <__fp_round>
    25a4:	0f 90       	pop	r0
    25a6:	03 94       	inc	r0
    25a8:	01 fc       	sbrc	r0, 1
    25aa:	90 58       	subi	r25, 0x80	; 128
    25ac:	ec e8       	ldi	r30, 0x8C	; 140
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	99 c0       	rjmp	.+306    	; 0x26e4 <__fp_powsodd>

000025b2 <__fp_split3>:
    25b2:	57 fd       	sbrc	r21, 7
    25b4:	90 58       	subi	r25, 0x80	; 128
    25b6:	44 0f       	add	r20, r20
    25b8:	55 1f       	adc	r21, r21
    25ba:	59 f0       	breq	.+22     	; 0x25d2 <__fp_splitA+0x10>
    25bc:	5f 3f       	cpi	r21, 0xFF	; 255
    25be:	71 f0       	breq	.+28     	; 0x25dc <__fp_splitA+0x1a>
    25c0:	47 95       	ror	r20

000025c2 <__fp_splitA>:
    25c2:	88 0f       	add	r24, r24
    25c4:	97 fb       	bst	r25, 7
    25c6:	99 1f       	adc	r25, r25
    25c8:	61 f0       	breq	.+24     	; 0x25e2 <__fp_splitA+0x20>
    25ca:	9f 3f       	cpi	r25, 0xFF	; 255
    25cc:	79 f0       	breq	.+30     	; 0x25ec <__fp_splitA+0x2a>
    25ce:	87 95       	ror	r24
    25d0:	08 95       	ret
    25d2:	12 16       	cp	r1, r18
    25d4:	13 06       	cpc	r1, r19
    25d6:	14 06       	cpc	r1, r20
    25d8:	55 1f       	adc	r21, r21
    25da:	f2 cf       	rjmp	.-28     	; 0x25c0 <__fp_split3+0xe>
    25dc:	46 95       	lsr	r20
    25de:	f1 df       	rcall	.-30     	; 0x25c2 <__fp_splitA>
    25e0:	08 c0       	rjmp	.+16     	; 0x25f2 <__fp_splitA+0x30>
    25e2:	16 16       	cp	r1, r22
    25e4:	17 06       	cpc	r1, r23
    25e6:	18 06       	cpc	r1, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	f1 cf       	rjmp	.-30     	; 0x25ce <__fp_splitA+0xc>
    25ec:	86 95       	lsr	r24
    25ee:	71 05       	cpc	r23, r1
    25f0:	61 05       	cpc	r22, r1
    25f2:	08 94       	sec
    25f4:	08 95       	ret
    25f6:	87 d0       	rcall	.+270    	; 0x2706 <__fp_pscA>
    25f8:	30 f0       	brcs	.+12     	; 0x2606 <__fp_splitA+0x44>
    25fa:	8c d0       	rcall	.+280    	; 0x2714 <__fp_pscB>
    25fc:	20 f0       	brcs	.+8      	; 0x2606 <__fp_splitA+0x44>
    25fe:	31 f4       	brne	.+12     	; 0x260c <__fp_splitA+0x4a>
    2600:	9f 3f       	cpi	r25, 0xFF	; 255
    2602:	11 f4       	brne	.+4      	; 0x2608 <__fp_splitA+0x46>
    2604:	1e f4       	brtc	.+6      	; 0x260c <__fp_splitA+0x4a>
    2606:	6b c0       	rjmp	.+214    	; 0x26de <__fp_nan>
    2608:	0e f4       	brtc	.+2      	; 0x260c <__fp_splitA+0x4a>
    260a:	e0 95       	com	r30
    260c:	e7 fb       	bst	r30, 7
    260e:	53 c0       	rjmp	.+166    	; 0x26b6 <__fp_inf>

00002610 <__addsf3x>:
    2610:	e9 2f       	mov	r30, r25
    2612:	cf df       	rcall	.-98     	; 0x25b2 <__fp_split3>
    2614:	80 f3       	brcs	.-32     	; 0x25f6 <__fp_splitA+0x34>
    2616:	ba 17       	cp	r27, r26
    2618:	62 07       	cpc	r22, r18
    261a:	73 07       	cpc	r23, r19
    261c:	84 07       	cpc	r24, r20
    261e:	95 07       	cpc	r25, r21
    2620:	18 f0       	brcs	.+6      	; 0x2628 <__addsf3x+0x18>
    2622:	71 f4       	brne	.+28     	; 0x2640 <__addsf3x+0x30>
    2624:	9e f5       	brtc	.+102    	; 0x268c <__addsf3x+0x7c>
    2626:	8e c0       	rjmp	.+284    	; 0x2744 <__fp_zero>
    2628:	0e f4       	brtc	.+2      	; 0x262c <__addsf3x+0x1c>
    262a:	e0 95       	com	r30
    262c:	0b 2e       	mov	r0, r27
    262e:	ba 2f       	mov	r27, r26
    2630:	a0 2d       	mov	r26, r0
    2632:	0b 01       	movw	r0, r22
    2634:	b9 01       	movw	r22, r18
    2636:	90 01       	movw	r18, r0
    2638:	0c 01       	movw	r0, r24
    263a:	ca 01       	movw	r24, r20
    263c:	a0 01       	movw	r20, r0
    263e:	11 24       	eor	r1, r1
    2640:	ff 27       	eor	r31, r31
    2642:	59 1b       	sub	r21, r25
    2644:	99 f0       	breq	.+38     	; 0x266c <__addsf3x+0x5c>
    2646:	59 3f       	cpi	r21, 0xF9	; 249
    2648:	50 f4       	brcc	.+20     	; 0x265e <__addsf3x+0x4e>
    264a:	50 3e       	cpi	r21, 0xE0	; 224
    264c:	68 f1       	brcs	.+90     	; 0x26a8 <__addsf3x+0x98>
    264e:	1a 16       	cp	r1, r26
    2650:	f0 40       	sbci	r31, 0x00	; 0
    2652:	a2 2f       	mov	r26, r18
    2654:	23 2f       	mov	r18, r19
    2656:	34 2f       	mov	r19, r20
    2658:	44 27       	eor	r20, r20
    265a:	58 5f       	subi	r21, 0xF8	; 248
    265c:	f3 cf       	rjmp	.-26     	; 0x2644 <__addsf3x+0x34>
    265e:	46 95       	lsr	r20
    2660:	37 95       	ror	r19
    2662:	27 95       	ror	r18
    2664:	a7 95       	ror	r26
    2666:	f0 40       	sbci	r31, 0x00	; 0
    2668:	53 95       	inc	r21
    266a:	c9 f7       	brne	.-14     	; 0x265e <__addsf3x+0x4e>
    266c:	7e f4       	brtc	.+30     	; 0x268c <__addsf3x+0x7c>
    266e:	1f 16       	cp	r1, r31
    2670:	ba 0b       	sbc	r27, r26
    2672:	62 0b       	sbc	r22, r18
    2674:	73 0b       	sbc	r23, r19
    2676:	84 0b       	sbc	r24, r20
    2678:	ba f0       	brmi	.+46     	; 0x26a8 <__addsf3x+0x98>
    267a:	91 50       	subi	r25, 0x01	; 1
    267c:	a1 f0       	breq	.+40     	; 0x26a6 <__addsf3x+0x96>
    267e:	ff 0f       	add	r31, r31
    2680:	bb 1f       	adc	r27, r27
    2682:	66 1f       	adc	r22, r22
    2684:	77 1f       	adc	r23, r23
    2686:	88 1f       	adc	r24, r24
    2688:	c2 f7       	brpl	.-16     	; 0x267a <__addsf3x+0x6a>
    268a:	0e c0       	rjmp	.+28     	; 0x26a8 <__addsf3x+0x98>
    268c:	ba 0f       	add	r27, r26
    268e:	62 1f       	adc	r22, r18
    2690:	73 1f       	adc	r23, r19
    2692:	84 1f       	adc	r24, r20
    2694:	48 f4       	brcc	.+18     	; 0x26a8 <__addsf3x+0x98>
    2696:	87 95       	ror	r24
    2698:	77 95       	ror	r23
    269a:	67 95       	ror	r22
    269c:	b7 95       	ror	r27
    269e:	f7 95       	ror	r31
    26a0:	9e 3f       	cpi	r25, 0xFE	; 254
    26a2:	08 f0       	brcs	.+2      	; 0x26a6 <__addsf3x+0x96>
    26a4:	b3 cf       	rjmp	.-154    	; 0x260c <__fp_splitA+0x4a>
    26a6:	93 95       	inc	r25
    26a8:	88 0f       	add	r24, r24
    26aa:	08 f0       	brcs	.+2      	; 0x26ae <__addsf3x+0x9e>
    26ac:	99 27       	eor	r25, r25
    26ae:	ee 0f       	add	r30, r30
    26b0:	97 95       	ror	r25
    26b2:	87 95       	ror	r24
    26b4:	08 95       	ret

000026b6 <__fp_inf>:
    26b6:	97 f9       	bld	r25, 7
    26b8:	9f 67       	ori	r25, 0x7F	; 127
    26ba:	80 e8       	ldi	r24, 0x80	; 128
    26bc:	70 e0       	ldi	r23, 0x00	; 0
    26be:	60 e0       	ldi	r22, 0x00	; 0
    26c0:	08 95       	ret

000026c2 <__fp_mpack>:
    26c2:	9f 3f       	cpi	r25, 0xFF	; 255
    26c4:	31 f0       	breq	.+12     	; 0x26d2 <__fp_mpack_finite+0xc>

000026c6 <__fp_mpack_finite>:
    26c6:	91 50       	subi	r25, 0x01	; 1
    26c8:	20 f4       	brcc	.+8      	; 0x26d2 <__fp_mpack_finite+0xc>
    26ca:	87 95       	ror	r24
    26cc:	77 95       	ror	r23
    26ce:	67 95       	ror	r22
    26d0:	b7 95       	ror	r27
    26d2:	88 0f       	add	r24, r24
    26d4:	91 1d       	adc	r25, r1
    26d6:	96 95       	lsr	r25
    26d8:	87 95       	ror	r24
    26da:	97 f9       	bld	r25, 7
    26dc:	08 95       	ret

000026de <__fp_nan>:
    26de:	9f ef       	ldi	r25, 0xFF	; 255
    26e0:	80 ec       	ldi	r24, 0xC0	; 192
    26e2:	08 95       	ret

000026e4 <__fp_powsodd>:
    26e4:	9f 93       	push	r25
    26e6:	8f 93       	push	r24
    26e8:	7f 93       	push	r23
    26ea:	6f 93       	push	r22
    26ec:	ff 93       	push	r31
    26ee:	ef 93       	push	r30
    26f0:	9b 01       	movw	r18, r22
    26f2:	ac 01       	movw	r20, r24
    26f4:	11 da       	rcall	.-3038   	; 0x1b18 <__mulsf3>
    26f6:	ef 91       	pop	r30
    26f8:	ff 91       	pop	r31
    26fa:	2b d0       	rcall	.+86     	; 0x2752 <__fp_powser>
    26fc:	2f 91       	pop	r18
    26fe:	3f 91       	pop	r19
    2700:	4f 91       	pop	r20
    2702:	5f 91       	pop	r21
    2704:	09 ca       	rjmp	.-3054   	; 0x1b18 <__mulsf3>

00002706 <__fp_pscA>:
    2706:	00 24       	eor	r0, r0
    2708:	0a 94       	dec	r0
    270a:	16 16       	cp	r1, r22
    270c:	17 06       	cpc	r1, r23
    270e:	18 06       	cpc	r1, r24
    2710:	09 06       	cpc	r0, r25
    2712:	08 95       	ret

00002714 <__fp_pscB>:
    2714:	00 24       	eor	r0, r0
    2716:	0a 94       	dec	r0
    2718:	12 16       	cp	r1, r18
    271a:	13 06       	cpc	r1, r19
    271c:	14 06       	cpc	r1, r20
    271e:	05 06       	cpc	r0, r21
    2720:	08 95       	ret

00002722 <__fp_round>:
    2722:	09 2e       	mov	r0, r25
    2724:	03 94       	inc	r0
    2726:	00 0c       	add	r0, r0
    2728:	11 f4       	brne	.+4      	; 0x272e <__fp_round+0xc>
    272a:	88 23       	and	r24, r24
    272c:	52 f0       	brmi	.+20     	; 0x2742 <__fp_round+0x20>
    272e:	bb 0f       	add	r27, r27
    2730:	40 f4       	brcc	.+16     	; 0x2742 <__fp_round+0x20>
    2732:	bf 2b       	or	r27, r31
    2734:	11 f4       	brne	.+4      	; 0x273a <__fp_round+0x18>
    2736:	60 ff       	sbrs	r22, 0
    2738:	04 c0       	rjmp	.+8      	; 0x2742 <__fp_round+0x20>
    273a:	6f 5f       	subi	r22, 0xFF	; 255
    273c:	7f 4f       	sbci	r23, 0xFF	; 255
    273e:	8f 4f       	sbci	r24, 0xFF	; 255
    2740:	9f 4f       	sbci	r25, 0xFF	; 255
    2742:	08 95       	ret

00002744 <__fp_zero>:
    2744:	e8 94       	clt

00002746 <__fp_szero>:
    2746:	bb 27       	eor	r27, r27
    2748:	66 27       	eor	r22, r22
    274a:	77 27       	eor	r23, r23
    274c:	cb 01       	movw	r24, r22
    274e:	97 f9       	bld	r25, 7
    2750:	08 95       	ret

00002752 <__fp_powser>:
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	1f 93       	push	r17
    2758:	0f 93       	push	r16
    275a:	ff 92       	push	r15
    275c:	ef 92       	push	r14
    275e:	df 92       	push	r13
    2760:	7b 01       	movw	r14, r22
    2762:	8c 01       	movw	r16, r24
    2764:	68 94       	set
    2766:	05 c0       	rjmp	.+10     	; 0x2772 <__fp_powser+0x20>
    2768:	da 2e       	mov	r13, r26
    276a:	ef 01       	movw	r28, r30
    276c:	21 d0       	rcall	.+66     	; 0x27b0 <__mulsf3x>
    276e:	fe 01       	movw	r30, r28
    2770:	e8 94       	clt
    2772:	a5 91       	lpm	r26, Z+
    2774:	25 91       	lpm	r18, Z+
    2776:	35 91       	lpm	r19, Z+
    2778:	45 91       	lpm	r20, Z+
    277a:	55 91       	lpm	r21, Z+
    277c:	ae f3       	brts	.-22     	; 0x2768 <__fp_powser+0x16>
    277e:	ef 01       	movw	r28, r30
    2780:	47 df       	rcall	.-370    	; 0x2610 <__addsf3x>
    2782:	fe 01       	movw	r30, r28
    2784:	97 01       	movw	r18, r14
    2786:	a8 01       	movw	r20, r16
    2788:	da 94       	dec	r13
    278a:	79 f7       	brne	.-34     	; 0x276a <__fp_powser+0x18>
    278c:	df 90       	pop	r13
    278e:	ef 90       	pop	r14
    2790:	ff 90       	pop	r15
    2792:	0f 91       	pop	r16
    2794:	1f 91       	pop	r17
    2796:	cf 91       	pop	r28
    2798:	df 91       	pop	r29
    279a:	08 95       	ret
    279c:	b4 df       	rcall	.-152    	; 0x2706 <__fp_pscA>
    279e:	28 f0       	brcs	.+10     	; 0x27aa <__fp_powser+0x58>
    27a0:	b9 df       	rcall	.-142    	; 0x2714 <__fp_pscB>
    27a2:	18 f0       	brcs	.+6      	; 0x27aa <__fp_powser+0x58>
    27a4:	95 23       	and	r25, r21
    27a6:	09 f0       	breq	.+2      	; 0x27aa <__fp_powser+0x58>
    27a8:	86 cf       	rjmp	.-244    	; 0x26b6 <__fp_inf>
    27aa:	99 cf       	rjmp	.-206    	; 0x26de <__fp_nan>
    27ac:	11 24       	eor	r1, r1
    27ae:	cb cf       	rjmp	.-106    	; 0x2746 <__fp_szero>

000027b0 <__mulsf3x>:
    27b0:	00 df       	rcall	.-512    	; 0x25b2 <__fp_split3>
    27b2:	a0 f3       	brcs	.-24     	; 0x279c <__fp_powser+0x4a>

000027b4 <__mulsf3_pse>:
    27b4:	95 9f       	mul	r25, r21
    27b6:	d1 f3       	breq	.-12     	; 0x27ac <__fp_powser+0x5a>
    27b8:	95 0f       	add	r25, r21
    27ba:	50 e0       	ldi	r21, 0x00	; 0
    27bc:	55 1f       	adc	r21, r21
    27be:	62 9f       	mul	r22, r18
    27c0:	f0 01       	movw	r30, r0
    27c2:	72 9f       	mul	r23, r18
    27c4:	bb 27       	eor	r27, r27
    27c6:	f0 0d       	add	r31, r0
    27c8:	b1 1d       	adc	r27, r1
    27ca:	63 9f       	mul	r22, r19
    27cc:	aa 27       	eor	r26, r26
    27ce:	f0 0d       	add	r31, r0
    27d0:	b1 1d       	adc	r27, r1
    27d2:	aa 1f       	adc	r26, r26
    27d4:	64 9f       	mul	r22, r20
    27d6:	66 27       	eor	r22, r22
    27d8:	b0 0d       	add	r27, r0
    27da:	a1 1d       	adc	r26, r1
    27dc:	66 1f       	adc	r22, r22
    27de:	82 9f       	mul	r24, r18
    27e0:	22 27       	eor	r18, r18
    27e2:	b0 0d       	add	r27, r0
    27e4:	a1 1d       	adc	r26, r1
    27e6:	62 1f       	adc	r22, r18
    27e8:	73 9f       	mul	r23, r19
    27ea:	b0 0d       	add	r27, r0
    27ec:	a1 1d       	adc	r26, r1
    27ee:	62 1f       	adc	r22, r18
    27f0:	83 9f       	mul	r24, r19
    27f2:	a0 0d       	add	r26, r0
    27f4:	61 1d       	adc	r22, r1
    27f6:	22 1f       	adc	r18, r18
    27f8:	74 9f       	mul	r23, r20
    27fa:	33 27       	eor	r19, r19
    27fc:	a0 0d       	add	r26, r0
    27fe:	61 1d       	adc	r22, r1
    2800:	23 1f       	adc	r18, r19
    2802:	84 9f       	mul	r24, r20
    2804:	60 0d       	add	r22, r0
    2806:	21 1d       	adc	r18, r1
    2808:	82 2f       	mov	r24, r18
    280a:	76 2f       	mov	r23, r22
    280c:	6a 2f       	mov	r22, r26
    280e:	11 24       	eor	r1, r1
    2810:	9f 57       	subi	r25, 0x7F	; 127
    2812:	50 40       	sbci	r21, 0x00	; 0
    2814:	8a f0       	brmi	.+34     	; 0x2838 <__mulsf3_pse+0x84>
    2816:	e1 f0       	breq	.+56     	; 0x2850 <__mulsf3_pse+0x9c>
    2818:	88 23       	and	r24, r24
    281a:	4a f0       	brmi	.+18     	; 0x282e <__mulsf3_pse+0x7a>
    281c:	ee 0f       	add	r30, r30
    281e:	ff 1f       	adc	r31, r31
    2820:	bb 1f       	adc	r27, r27
    2822:	66 1f       	adc	r22, r22
    2824:	77 1f       	adc	r23, r23
    2826:	88 1f       	adc	r24, r24
    2828:	91 50       	subi	r25, 0x01	; 1
    282a:	50 40       	sbci	r21, 0x00	; 0
    282c:	a9 f7       	brne	.-22     	; 0x2818 <__mulsf3_pse+0x64>
    282e:	9e 3f       	cpi	r25, 0xFE	; 254
    2830:	51 05       	cpc	r21, r1
    2832:	70 f0       	brcs	.+28     	; 0x2850 <__mulsf3_pse+0x9c>
    2834:	40 cf       	rjmp	.-384    	; 0x26b6 <__fp_inf>
    2836:	87 cf       	rjmp	.-242    	; 0x2746 <__fp_szero>
    2838:	5f 3f       	cpi	r21, 0xFF	; 255
    283a:	ec f3       	brlt	.-6      	; 0x2836 <__mulsf3_pse+0x82>
    283c:	98 3e       	cpi	r25, 0xE8	; 232
    283e:	dc f3       	brlt	.-10     	; 0x2836 <__mulsf3_pse+0x82>
    2840:	86 95       	lsr	r24
    2842:	77 95       	ror	r23
    2844:	67 95       	ror	r22
    2846:	b7 95       	ror	r27
    2848:	f7 95       	ror	r31
    284a:	e7 95       	ror	r30
    284c:	9f 5f       	subi	r25, 0xFF	; 255
    284e:	c1 f7       	brne	.-16     	; 0x2840 <__mulsf3_pse+0x8c>
    2850:	fe 2b       	or	r31, r30
    2852:	88 0f       	add	r24, r24
    2854:	91 1d       	adc	r25, r1
    2856:	96 95       	lsr	r25
    2858:	87 95       	ror	r24
    285a:	97 f9       	bld	r25, 7
    285c:	08 95       	ret

0000285e <_exit>:
    285e:	f8 94       	cli

00002860 <__stop_program>:
    2860:	ff cf       	rjmp	.-2      	; 0x2860 <__stop_program>
