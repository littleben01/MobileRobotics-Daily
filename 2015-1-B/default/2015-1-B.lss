
2015-1-B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b8  00800100  000036c6  0000375a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000036c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  008002b8  008002b8  00003912  2**0
                  ALLOC
  3 .stab         00001cc8  00000000  00000000  00003914  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000064a  00000000  00000000  000055dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00005c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000005bc  00000000  00000000  00005e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000378f  00000000  00000000  00006422  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a1f  00000000  00000000  00009bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002c63  00000000  00000000  0000b5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000470  00000000  00000000  0000e234  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000763  00000000  00000000  0000e6a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001c93  00000000  00000000  0000ee07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000007e1  00000000  00000000  00010a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  0001127b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__vector_14>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <__vector_18>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_30>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <Turn_and_Drive+0x2ac>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d0 e1       	ldi	r29, 0x10	; 16
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	12 e0       	ldi	r17, 0x02	; 2
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	e6 ec       	ldi	r30, 0xC6	; 198
      be:	f6 e3       	ldi	r31, 0x36	; 54
      c0:	00 e0       	ldi	r16, 0x00	; 0
      c2:	0b bf       	out	0x3b, r16	; 59
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
      c6:	07 90       	elpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a8 3b       	cpi	r26, 0xB8	; 184
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
      d0:	13 e0       	ldi	r17, 0x03	; 3
      d2:	a8 eb       	ldi	r26, 0xB8	; 184
      d4:	b2 e0       	ldi	r27, 0x02	; 2
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	a4 30       	cpi	r26, 0x04	; 4
      dc:	b1 07       	cpc	r27, r17
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	0e 94 6a 07 	call	0xed4	; 0xed4 <main>
      e4:	0c 94 61 1b 	jmp	0x36c2	; 0x36c2 <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <MCU_init>:
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART1 Receiver: On
	// USART1 Transmitter: On
	// USART1 Mode: Asynchronous
	// USART1 Baud Rate: 9600
	UCSR1A=0x00;
      ec:	10 92 9b 00 	sts	0x009B, r1
	UCSR1B=0x98;
      f0:	88 e9       	ldi	r24, 0x98	; 152
      f2:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C=0x06;
      f6:	86 e0       	ldi	r24, 0x06	; 6
      f8:	80 93 9d 00 	sts	0x009D, r24
	UBRR1H=0x00;
      fc:	10 92 98 00 	sts	0x0098, r1
	UBRR1L=0x07; //신형카메라 쓸려면 0x07 써야된다
     100:	87 e0       	ldi	r24, 0x07	; 7
     102:	80 93 99 00 	sts	0x0099, r24

	sei();
     106:	78 94       	sei
}
     108:	08 95       	ret

0000010a <__vector_30>:

ISR(USART1_RX_vect)
{
     10a:	1f 92       	push	r1
     10c:	0f 92       	push	r0
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	0f 92       	push	r0
     112:	11 24       	eor	r1, r1
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
	char data;
	
	data=UDR1;
     118:	90 91 9c 00 	lds	r25, 0x009C
	while(!(UCSR1A&0xB8)); //수신완료 및 에러 검출되지 않을시
     11c:	80 91 9b 00 	lds	r24, 0x009B
     120:	88 7b       	andi	r24, 0xB8	; 184
     122:	e1 f3       	breq	.-8      	; 0x11c <__vector_30+0x12>
	rx1_flg=1;              //수신완료 플레그 set
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	80 93 b8 02 	sts	0x02B8, r24
	rx1_buff=data;	
     12a:	90 93 b9 02 	sts	0x02B9, r25
}
     12e:	9f 91       	pop	r25
     130:	8f 91       	pop	r24
     132:	0f 90       	pop	r0
     134:	0f be       	out	0x3f, r0	; 63
     136:	0f 90       	pop	r0
     138:	1f 90       	pop	r1
     13a:	18 95       	reti

0000013c <getchar1>:

char getchar1(void)  //uart 수신하기
{
	char data;
	
	data=rx1_buff;
     13c:	80 91 b9 02 	lds	r24, 0x02B9
	rx1_buff=0;
     140:	10 92 b9 02 	sts	0x02B9, r1
	cli();           //글로벌 인터럽트 disable
     144:	f8 94       	cli
	rx1_flg=0;       //수신완료 플레그 reset
     146:	10 92 b8 02 	sts	0x02B8, r1
	sei();           //글로벌 인터럽트 enable          
     14a:	78 94       	sei
	return data;     //수신데이터 반환
}
     14c:	08 95       	ret

0000014e <putchar1>:

void putchar1(char data) //uart 송신화기
{
	while(!(UCSR1A&0x20));  //송신 준비 완료시
     14e:	90 91 9b 00 	lds	r25, 0x009B
     152:	95 ff       	sbrs	r25, 5
     154:	fc cf       	rjmp	.-8      	; 0x14e <putchar1>
	UDR1=data;              //송신 버퍼에 데이터 쓰기
     156:	80 93 9c 00 	sts	0x009C, r24
}
     15a:	08 95       	ret

0000015c <Interface_init>:
// Parameter : 없음
// Return    : 없음
void Interface_init(void)
{
    // LCD / EX I/O Expander
	TWDR = 0xFF;
     15c:	8f ef       	ldi	r24, 0xFF	; 255
     15e:	80 93 73 00 	sts	0x0073, r24
	TWBR = 0x48;
     162:	88 e4       	ldi	r24, 0x48	; 72
     164:	80 93 70 00 	sts	0x0070, r24
}
     168:	08 95       	ret

0000016a <lcd_write_data>:
//          data - 전송할 한바이트 데이터
// Return    : 없음
void lcd_write_data(unsigned char data)
{
	// 시작
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     16a:	94 ea       	ldi	r25, 0xA4	; 164
     16c:	90 93 74 00 	sts	0x0074, r25
	// 준비상태 체크
    while(!(TWCR & (1 << TWINT)));
     170:	90 91 74 00 	lds	r25, 0x0074
     174:	97 ff       	sbrs	r25, 7
     176:	fc cf       	rjmp	.-8      	; 0x170 <lcd_write_data+0x6>
	
	// 주소 전송
    TWDR = SLA << 1;
     178:	9e e0       	ldi	r25, 0x0E	; 14
     17a:	90 93 73 00 	sts	0x0073, r25
	
	TWCR = (1 << TWINT) | (1 << TWEN);
     17e:	94 e8       	ldi	r25, 0x84	; 132
     180:	90 93 74 00 	sts	0x0074, r25
	while(!(TWCR & (1 << TWINT)));
     184:	90 91 74 00 	lds	r25, 0x0074
     188:	97 ff       	sbrs	r25, 7
     18a:	fc cf       	rjmp	.-8      	; 0x184 <lcd_write_data+0x1a>
	
	TWDR = data;
     18c:	80 93 73 00 	sts	0x0073, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
     190:	84 e8       	ldi	r24, 0x84	; 132
     192:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1 << TWINT)));
     196:	80 91 74 00 	lds	r24, 0x0074
     19a:	87 ff       	sbrs	r24, 7
     19c:	fc cf       	rjmp	.-8      	; 0x196 <lcd_write_data+0x2c>
	
    // 정지
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     19e:	84 e9       	ldi	r24, 0x94	; 148
     1a0:	80 93 74 00 	sts	0x0074, r24
}
     1a4:	08 95       	ret

000001a6 <lcd_display_str>:
// Parameter :
//          line   - 출력할 라인번호(0~3)
//          string - 출력할 문자열(최대 20자)
// Return    : 없음
void lcd_display_str(unsigned char Y_line, unsigned char X_line,char *string) //lcd 스트링데이터 쓰기
{
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <lcd_display_str+0xe>
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	08 2f       	mov	r16, r24
     1ba:	16 2f       	mov	r17, r22
    int i=X_line;

	if((Y_line<4) && (X_line<20)){
     1bc:	84 30       	cpi	r24, 0x04	; 4
     1be:	70 f5       	brcc	.+92     	; 0x21c <lcd_display_str+0x76>
     1c0:	64 31       	cpi	r22, 0x14	; 20
     1c2:	60 f5       	brcc	.+88     	; 0x21c <lcd_display_str+0x76>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     1c4:	8b e1       	ldi	r24, 0x1B	; 27
     1c6:	49 83       	std	Y+1, r20	; 0x01
     1c8:	5a 83       	std	Y+2, r21	; 0x02
     1ca:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1ce:	8c e4       	ldi	r24, 0x4C	; 76
     1d0:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     1d4:	81 2f       	mov	r24, r17
     1d6:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1da:	80 2f       	mov	r24, r16
     1dc:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e0:	80 e7       	ldi	r24, 0x70	; 112
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	01 97       	sbiw	r24, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_display_str+0x3e>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_display_str+0x44>
     1ea:	e1 2e       	mov	r14, r17
     1ec:	ff 24       	eor	r15, r15
     1ee:	49 81       	ldd	r20, Y+1	; 0x01
     1f0:	5a 81       	ldd	r21, Y+2	; 0x02
     1f2:	04 2f       	mov	r16, r20
     1f4:	15 2f       	mov	r17, r21
     1f6:	06 c0       	rjmp	.+12     	; 0x204 <lcd_display_str+0x5e>
		_delay_us(100);
    	while(((i++)<20)&&*string){
        	lcd_write_data(*string++);
     1f8:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1fc:	94 ec       	ldi	r25, 0xC4	; 196
     1fe:	9a 95       	dec	r25
     200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_display_str+0x58>
     202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_display_str+0x5e>

	if((Y_line<4) && (X_line<20)){
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
		lcd_write_data(X_line); lcd_write_data(Y_line);
		_delay_us(100);
    	while(((i++)<20)&&*string){
     204:	e4 e1       	ldi	r30, 0x14	; 20
     206:	ee 16       	cp	r14, r30
     208:	f1 04       	cpc	r15, r1
     20a:	44 f4       	brge	.+16     	; 0x21c <lcd_display_str+0x76>
     20c:	f8 01       	movw	r30, r16
     20e:	81 91       	ld	r24, Z+
     210:	8f 01       	movw	r16, r30
     212:	08 94       	sec
     214:	e1 1c       	adc	r14, r1
     216:	f1 1c       	adc	r15, r1
     218:	88 23       	and	r24, r24
     21a:	71 f7       	brne	.-36     	; 0x1f8 <lcd_display_str+0x52>
        	lcd_write_data(*string++);
			_delay_us(40);
		}
    }
}
     21c:	0f 90       	pop	r0
     21e:	0f 90       	pop	r0
     220:	cf 91       	pop	r28
     222:	df 91       	pop	r29
     224:	1f 91       	pop	r17
     226:	0f 91       	pop	r16
     228:	ff 90       	pop	r15
     22a:	ef 90       	pop	r14
     22c:	08 95       	ret

0000022e <write_lcd_data>:

void write_lcd_data(unsigned char Y_line, unsigned char X_line, long data) //lcd데이터 쓰기
{
     22e:	1f 93       	push	r17
     230:	df 93       	push	r29
     232:	cf 93       	push	r28
     234:	00 d0       	rcall	.+0      	; 0x236 <write_lcd_data+0x8>
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	18 2f       	mov	r17, r24
    if(Y_line<4 && X_line<20){
     23c:	84 30       	cpi	r24, 0x04	; 4
     23e:	f0 f4       	brcc	.+60     	; 0x27c <write_lcd_data+0x4e>
     240:	64 31       	cpi	r22, 0x14	; 20
     242:	e0 f4       	brcc	.+56     	; 0x27c <write_lcd_data+0x4e>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     244:	8b e1       	ldi	r24, 0x1B	; 27
     246:	2a 83       	std	Y+2, r18	; 0x02
     248:	69 83       	std	Y+1, r22	; 0x01
     24a:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     24e:	8c e4       	ldi	r24, 0x4C	; 76
     250:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     254:	69 81       	ldd	r22, Y+1	; 0x01
     256:	86 2f       	mov	r24, r22
     258:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     25c:	81 2f       	mov	r24, r17
     25e:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     262:	80 e7       	ldi	r24, 0x70	; 112
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <write_lcd_data+0x38>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <write_lcd_data+0x3e>
		_delay_us(100);
		lcd_write_data(data);
     26c:	2a 81       	ldd	r18, Y+2	; 0x02
     26e:	82 2f       	mov	r24, r18
     270:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     274:	94 ec       	ldi	r25, 0xC4	; 196
     276:	9a 95       	dec	r25
     278:	f1 f7       	brne	.-4      	; 0x276 <write_lcd_data+0x48>
     27a:	00 c0       	rjmp	.+0      	; 0x27c <write_lcd_data+0x4e>
		_delay_us(40);
    }
}
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	cf 91       	pop	r28
     282:	df 91       	pop	r29
     284:	1f 91       	pop	r17
     286:	08 95       	ret

00000288 <lcd_clear_screen>:

void lcd_clear_screen(void){ lcd_write_data(0x1B); lcd_write_data(0x43); _delay_ms(20); } //lcd전체화면 클리어
     288:	8b e1       	ldi	r24, 0x1B	; 27
     28a:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     28e:	83 e4       	ldi	r24, 0x43	; 67
     290:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     294:	86 e6       	ldi	r24, 0x66	; 102
     296:	96 ee       	ldi	r25, 0xE6	; 230
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	81 50       	subi	r24, 0x01	; 1
     29c:	90 40       	sbci	r25, 0x00	; 0
     29e:	a0 40       	sbci	r26, 0x00	; 0
     2a0:	e1 f7       	brne	.-8      	; 0x29a <lcd_clear_screen+0x12>
     2a2:	08 95       	ret

000002a4 <display_char>:
void display_char(unsigned char line, unsigned char col, unsigned char data) ////lcd char 데이터 표시
{
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	18 2f       	mov	r17, r24
     2ae:	f6 2e       	mov	r15, r22
     2b0:	e4 2e       	mov	r14, r20
    unsigned char val=0, val_buff=0;

	val=data;   

	val_buff=val/100;             
     2b2:	84 2f       	mov	r24, r20
     2b4:	64 e6       	ldi	r22, 0x64	; 100
     2b6:	0e 94 8c 19 	call	0x3318	; 0x3318 <__udivmodqi4>
     2ba:	08 2f       	mov	r16, r24
	write_lcd_data(line, col, val_buff+'0' );
     2bc:	28 2f       	mov	r18, r24
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	20 5d       	subi	r18, 0xD0	; 208
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
     2c4:	44 27       	eor	r20, r20
     2c6:	37 fd       	sbrc	r19, 7
     2c8:	40 95       	com	r20
     2ca:	54 2f       	mov	r21, r20
     2cc:	81 2f       	mov	r24, r17
     2ce:	6f 2d       	mov	r22, r15
     2d0:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
	val=val-(100*val_buff);
     2d4:	8c e9       	ldi	r24, 0x9C	; 156
     2d6:	08 9f       	mul	r16, r24
     2d8:	00 2d       	mov	r16, r0
     2da:	11 24       	eor	r1, r1
     2dc:	0e 0d       	add	r16, r14

	val_buff=val/10;
     2de:	80 2f       	mov	r24, r16
     2e0:	6a e0       	ldi	r22, 0x0A	; 10
     2e2:	0e 94 8c 19 	call	0x3318	; 0x3318 <__udivmodqi4>
     2e6:	e8 2e       	mov	r14, r24
	write_lcd_data(line, 1+col, val_buff+'0' );
     2e8:	6f 2d       	mov	r22, r15
     2ea:	6f 5f       	subi	r22, 0xFF	; 255
     2ec:	28 2f       	mov	r18, r24
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	20 5d       	subi	r18, 0xD0	; 208
     2f2:	3f 4f       	sbci	r19, 0xFF	; 255
     2f4:	44 27       	eor	r20, r20
     2f6:	37 fd       	sbrc	r19, 7
     2f8:	40 95       	com	r20
     2fa:	54 2f       	mov	r21, r20
     2fc:	81 2f       	mov	r24, r17
     2fe:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
	val=val-(10*val_buff);

	write_lcd_data(line, 2+col, val+'0');
     302:	6f 2d       	mov	r22, r15
     304:	6e 5f       	subi	r22, 0xFE	; 254
	write_lcd_data(line, col, val_buff+'0' );
	val=val-(100*val_buff);

	val_buff=val/10;
	write_lcd_data(line, 1+col, val_buff+'0' );
	val=val-(10*val_buff);
     306:	26 ef       	ldi	r18, 0xF6	; 246
     308:	e2 9e       	mul	r14, r18
     30a:	20 2d       	mov	r18, r0
     30c:	11 24       	eor	r1, r1
     30e:	20 0f       	add	r18, r16

	write_lcd_data(line, 2+col, val+'0');
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	20 5d       	subi	r18, 0xD0	; 208
     314:	3f 4f       	sbci	r19, 0xFF	; 255
     316:	44 27       	eor	r20, r20
     318:	37 fd       	sbrc	r19, 7
     31a:	40 95       	com	r20
     31c:	54 2f       	mov	r21, r20
     31e:	81 2f       	mov	r24, r17
     320:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
}
     324:	1f 91       	pop	r17
     326:	0f 91       	pop	r16
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	08 95       	ret

0000032e <HolonomicW>:
	}
				
}


void HolonomicW(int f_agl, int f_speed, int fw_speed){
     32e:	2f 92       	push	r2
     330:	3f 92       	push	r3
     332:	4f 92       	push	r4
     334:	5f 92       	push	r5
     336:	6f 92       	push	r6
     338:	7f 92       	push	r7
     33a:	8f 92       	push	r8
     33c:	9f 92       	push	r9
     33e:	af 92       	push	r10
     340:	bf 92       	push	r11
     342:	cf 92       	push	r12
     344:	df 92       	push	r13
     346:	ef 92       	push	r14
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	df 93       	push	r29
     350:	cf 93       	push	r28
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	60 97       	sbiw	r28, 0x10	; 16
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	8c 01       	movw	r16, r24
     364:	7b 01       	movw	r14, r22
     366:	1a 01       	movw	r2, r20
	double V[3]={0,0,0};

	unsigned char i=0;

	// 좌표계 변환
	if(f_agl <= 180) DesiredDirection = 180 - f_agl;
     368:	85 3b       	cpi	r24, 0xB5	; 181
     36a:	91 05       	cpc	r25, r1
     36c:	1c f4       	brge	.+6      	; 0x374 <HolonomicW+0x46>
     36e:	64 eb       	ldi	r22, 0xB4	; 180
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	02 c0       	rjmp	.+4      	; 0x378 <HolonomicW+0x4a>
	else if(f_agl > 180) DesiredDirection = 540 - f_agl;
     374:	6c e1       	ldi	r22, 0x1C	; 28
     376:	72 e0       	ldi	r23, 0x02	; 2
     378:	60 1b       	sub	r22, r16
     37a:	71 0b       	sbc	r23, r17
	
	// 라디안 변환
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
     37c:	88 27       	eor	r24, r24
     37e:	77 fd       	sbrc	r23, 7
     380:	80 95       	com	r24
     382:	98 2f       	mov	r25, r24
     384:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
     388:	5b 01       	movw	r10, r22
     38a:	6c 01       	movw	r12, r24
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	84 e3       	ldi	r24, 0x34	; 52
     392:	93 e4       	ldi	r25, 0x43	; 67
     394:	a6 01       	movw	r20, r12
     396:	95 01       	movw	r18, r10
     398:	0e 94 8d 14 	call	0x291a	; 0x291a <__subsf3>
     39c:	28 e9       	ldi	r18, 0x98	; 152
     39e:	39 ef       	ldi	r19, 0xF9	; 249
     3a0:	4e e8       	ldi	r20, 0x8E	; 142
     3a2:	5c e3       	ldi	r21, 0x3C	; 60
     3a4:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
	radianB = (90-(double)DesiredDirection) * 0.017453;

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
     3a8:	0e 94 cf 19 	call	0x339e	; 0x339e <cos>
     3ac:	3b 01       	movw	r6, r22
     3ae:	4c 01       	movw	r8, r24
	if(f_agl <= 180) DesiredDirection = 180 - f_agl;
	else if(f_agl > 180) DesiredDirection = 540 - f_agl;
	
	// 라디안 변환
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
	radianB = (90-(double)DesiredDirection) * 0.017453;
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	84 eb       	ldi	r24, 0xB4	; 180
     3b6:	92 e4       	ldi	r25, 0x42	; 66
     3b8:	a6 01       	movw	r20, r12
     3ba:	95 01       	movw	r18, r10
     3bc:	0e 94 8d 14 	call	0x291a	; 0x291a <__subsf3>
     3c0:	28 e9       	ldi	r18, 0x98	; 152
     3c2:	39 ef       	ldi	r19, 0xF9	; 249
     3c4:	4e e8       	ldi	r20, 0x8E	; 142
     3c6:	5c e3       	ldi	r21, 0x3C	; 60
     3c8:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
	Fy = f_speed * cos(radianB);
     3cc:	0e 94 cf 19 	call	0x339e	; 0x339e <cos>
     3d0:	5b 01       	movw	r10, r22
     3d2:	6c 01       	movw	r12, r24
	Fw=fw_speed;

	if(f_agl<0 || f_agl>=360){
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	08 36       	cpi	r16, 0x68	; 104
     3d8:	18 07       	cpc	r17, r24
     3da:	28 f5       	brcc	.+74     	; 0x426 <HolonomicW+0xf8>
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
	radianB = (90-(double)DesiredDirection) * 0.017453;

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
     3dc:	b7 01       	movw	r22, r14
     3de:	88 27       	eor	r24, r24
     3e0:	77 fd       	sbrc	r23, 7
     3e2:	80 95       	com	r24
     3e4:	98 2f       	mov	r25, r24
     3e6:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
     3ea:	7b 01       	movw	r14, r22
     3ec:	8c 01       	movw	r16, r24
     3ee:	a4 01       	movw	r20, r8
     3f0:	93 01       	movw	r18, r6
     3f2:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
     3f6:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fixsfsi>
     3fa:	66 2e       	mov	r6, r22
     3fc:	77 2e       	mov	r7, r23
     3fe:	88 2e       	mov	r8, r24
     400:	99 2e       	mov	r9, r25
	Fy = f_speed * cos(radianB);
     402:	c8 01       	movw	r24, r16
     404:	b7 01       	movw	r22, r14
     406:	a6 01       	movw	r20, r12
     408:	95 01       	movw	r18, r10
     40a:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
     40e:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fixsfsi>
     412:	e6 2e       	mov	r14, r22
     414:	f7 2e       	mov	r15, r23
     416:	08 2f       	mov	r16, r24
     418:	19 2f       	mov	r17, r25
	Fw=fw_speed;
     41a:	51 01       	movw	r10, r2
     41c:	cc 24       	eor	r12, r12
     41e:	b7 fc       	sbrc	r11, 7
     420:	c0 94       	com	r12
     422:	dc 2c       	mov	r13, r12
     424:	11 c0       	rjmp	.+34     	; 0x448 <HolonomicW+0x11a>

	if(f_agl<0 || f_agl>=360){
		if(f_agl<0)Fw = -f_speed;
     426:	17 ff       	sbrs	r17, 7
     428:	04 c0       	rjmp	.+8      	; 0x432 <HolonomicW+0x104>
     42a:	f0 94       	com	r15
     42c:	e1 94       	neg	r14
     42e:	f1 08       	sbc	r15, r1
     430:	f3 94       	inc	r15
		else if(f_agl>=360)Fw = f_speed;
     432:	57 01       	movw	r10, r14
     434:	cc 24       	eor	r12, r12
     436:	b7 fc       	sbrc	r11, 7
     438:	c0 94       	com	r12
     43a:	dc 2c       	mov	r13, r12
		Fx=0;
		Fy=0;
     43c:	ee 24       	eor	r14, r14
     43e:	ff 24       	eor	r15, r15
     440:	87 01       	movw	r16, r14
	Fw=fw_speed;

	if(f_agl<0 || f_agl>=360){
		if(f_agl<0)Fw = -f_speed;
		else if(f_agl>=360)Fw = f_speed;
		Fx=0;
     442:	66 24       	eor	r6, r6
     444:	77 24       	eor	r7, r7
     446:	43 01       	movw	r8, r6
		Fy=0;
	}
		
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
     448:	c4 01       	movw	r24, r8
     44a:	b3 01       	movw	r22, r6
     44c:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
     450:	6d 87       	std	Y+13, r22	; 0x0d
     452:	7e 87       	std	Y+14, r23	; 0x0e
     454:	8f 87       	std	Y+15, r24	; 0x0f
     456:	98 8b       	std	Y+16, r25	; 0x10
     458:	c8 01       	movw	r24, r16
     45a:	b7 01       	movw	r22, r14
     45c:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
     460:	1b 01       	movw	r2, r22
     462:	2c 01       	movw	r4, r24
     464:	22 e0       	ldi	r18, 0x02	; 2
     466:	3b e2       	ldi	r19, 0x2B	; 43
     468:	47 e0       	ldi	r20, 0x07	; 7
     46a:	5d e3       	ldi	r21, 0x3D	; 61
     46c:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
     470:	16 2f       	mov	r17, r22
     472:	f7 2e       	mov	r15, r23
     474:	98 2e       	mov	r9, r24
     476:	89 2e       	mov	r8, r25
     478:	c6 01       	movw	r24, r12
     47a:	b5 01       	movw	r22, r10
     47c:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
     480:	2e e4       	ldi	r18, 0x4E	; 78
     482:	32 e6       	ldi	r19, 0x62	; 98
     484:	40 e1       	ldi	r20, 0x10	; 16
     486:	5e e3       	ldi	r21, 0x3E	; 62
     488:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
     48c:	a6 2e       	mov	r10, r22
     48e:	e7 2e       	mov	r14, r23
     490:	08 2f       	mov	r16, r24
     492:	69 2e       	mov	r6, r25
     494:	6d 85       	ldd	r22, Y+13	; 0x0d
     496:	7e 85       	ldd	r23, Y+14	; 0x0e
     498:	8f 85       	ldd	r24, Y+15	; 0x0f
     49a:	98 89       	ldd	r25, Y+16	; 0x10
     49c:	25 ed       	ldi	r18, 0xD5	; 213
     49e:	38 e7       	ldi	r19, 0x78	; 120
     4a0:	49 e6       	ldi	r20, 0x69	; 105
     4a2:	5d e3       	ldi	r21, 0x3D	; 61
     4a4:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
     4a8:	f4 01       	movw	r30, r8
     4aa:	21 2f       	mov	r18, r17
     4ac:	3f 2d       	mov	r19, r15
     4ae:	4f 2f       	mov	r20, r31
     4b0:	5e 2f       	mov	r21, r30
     4b2:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
     4b6:	2a 2d       	mov	r18, r10
     4b8:	3e 2d       	mov	r19, r14
     4ba:	40 2f       	mov	r20, r16
     4bc:	56 2d       	mov	r21, r6
     4be:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
     4c2:	69 83       	std	Y+1, r22	; 0x01
     4c4:	7a 83       	std	Y+2, r23	; 0x02
     4c6:	8b 83       	std	Y+3, r24	; 0x03
     4c8:	9c 83       	std	Y+4, r25	; 0x04
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
     4ca:	c2 01       	movw	r24, r4
     4cc:	b1 01       	movw	r22, r2
     4ce:	28 eb       	ldi	r18, 0xB8	; 184
     4d0:	3e e1       	ldi	r19, 0x1E	; 30
     4d2:	45 e8       	ldi	r20, 0x85	; 133
     4d4:	5d eb       	ldi	r21, 0xBD	; 189
     4d6:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
     4da:	2a 2d       	mov	r18, r10
     4dc:	3e 2d       	mov	r19, r14
     4de:	40 2f       	mov	r20, r16
     4e0:	56 2d       	mov	r21, r6
     4e2:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
     4e6:	6d 83       	std	Y+5, r22	; 0x05
     4e8:	7e 83       	std	Y+6, r23	; 0x06
     4ea:	8f 83       	std	Y+7, r24	; 0x07
     4ec:	98 87       	std	Y+8, r25	; 0x08
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
     4ee:	6d 85       	ldd	r22, Y+13	; 0x0d
     4f0:	7e 85       	ldd	r23, Y+14	; 0x0e
     4f2:	8f 85       	ldd	r24, Y+15	; 0x0f
     4f4:	98 89       	ldd	r25, Y+16	; 0x10
     4f6:	25 ed       	ldi	r18, 0xD5	; 213
     4f8:	38 e7       	ldi	r19, 0x78	; 120
     4fa:	49 e6       	ldi	r20, 0x69	; 105
     4fc:	5d eb       	ldi	r21, 0xBD	; 189
     4fe:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
     502:	f4 01       	movw	r30, r8
     504:	21 2f       	mov	r18, r17
     506:	3f 2d       	mov	r19, r15
     508:	4f 2f       	mov	r20, r31
     50a:	5e 2f       	mov	r21, r30
     50c:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
     510:	2a 2d       	mov	r18, r10
     512:	3e 2d       	mov	r19, r14
     514:	40 2f       	mov	r20, r16
     516:	56 2d       	mov	r21, r6
     518:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
     51c:	69 87       	std	Y+9, r22	; 0x09
     51e:	7a 87       	std	Y+10, r23	; 0x0a
     520:	8b 87       	std	Y+11, r24	; 0x0b
     522:	9c 87       	std	Y+12, r25	; 0x0c
     524:	8e 01       	movw	r16, r28
     526:	0f 5f       	subi	r16, 0xFF	; 255
     528:	1f 4f       	sbci	r17, 0xFF	; 255
	
    for(i=0;i<3;++i){
     52a:	ee 24       	eor	r14, r14
	}
				
}


void HolonomicW(int f_agl, int f_speed, int fw_speed){
     52c:	58 01       	movw	r10, r16
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
	
    for(i=0;i<3;++i){
		if(V[i]>=40)V[i]=40;
     52e:	f8 01       	movw	r30, r16
     530:	60 81       	ld	r22, Z
     532:	71 81       	ldd	r23, Z+1	; 0x01
     534:	82 81       	ldd	r24, Z+2	; 0x02
     536:	93 81       	ldd	r25, Z+3	; 0x03
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	40 e2       	ldi	r20, 0x20	; 32
     53e:	52 e4       	ldi	r21, 0x42	; 66
     540:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__gesf2>
     544:	87 fd       	sbrc	r24, 7
     546:	09 c0       	rjmp	.+18     	; 0x55a <HolonomicW+0x22c>
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	a0 e2       	ldi	r26, 0x20	; 32
     54e:	b2 e4       	ldi	r27, 0x42	; 66
     550:	f8 01       	movw	r30, r16
     552:	80 83       	st	Z, r24
     554:	91 83       	std	Z+1, r25	; 0x01
     556:	a2 83       	std	Z+2, r26	; 0x02
     558:	b3 83       	std	Z+3, r27	; 0x03
		if(V[i]<=(-40))V[i]=-40;
     55a:	f8 01       	movw	r30, r16
     55c:	60 81       	ld	r22, Z
     55e:	71 81       	ldd	r23, Z+1	; 0x01
     560:	82 81       	ldd	r24, Z+2	; 0x02
     562:	93 81       	ldd	r25, Z+3	; 0x03
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e2       	ldi	r20, 0x20	; 32
     56a:	52 ec       	ldi	r21, 0xC2	; 194
     56c:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__lesf2>
     570:	18 16       	cp	r1, r24
     572:	4c f0       	brlt	.+18     	; 0x586 <HolonomicW+0x258>
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	a0 e2       	ldi	r26, 0x20	; 32
     57a:	b2 ec       	ldi	r27, 0xC2	; 194
     57c:	f8 01       	movw	r30, r16
     57e:	80 83       	st	Z, r24
     580:	91 83       	std	Z+1, r25	; 0x01
     582:	a2 83       	std	Z+2, r26	; 0x02
     584:	b3 83       	std	Z+3, r27	; 0x03
     586:	0c 5f       	subi	r16, 0xFC	; 252
     588:	1f 4f       	sbci	r17, 0xFF	; 255
		SetVelocity(i, V[i]*65536);
     58a:	f5 01       	movw	r30, r10
     58c:	60 81       	ld	r22, Z
     58e:	71 81       	ldd	r23, Z+1	; 0x01
     590:	82 81       	ldd	r24, Z+2	; 0x02
     592:	93 81       	ldd	r25, Z+3	; 0x03
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	40 e8       	ldi	r20, 0x80	; 128
     59a:	57 e4       	ldi	r21, 0x47	; 71
     59c:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
     5a0:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fixsfsi>
     5a4:	ab 01       	movw	r20, r22
     5a6:	bc 01       	movw	r22, r24
     5a8:	8e 2d       	mov	r24, r14
     5aa:	0e 94 89 10 	call	0x2112	; 0x2112 <SetVelocity>
		
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
	
    for(i=0;i<3;++i){
     5ae:	e3 94       	inc	r14
     5b0:	fe 2d       	mov	r31, r14
     5b2:	f3 30       	cpi	r31, 0x03	; 3
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <HolonomicW+0x28a>
     5b6:	ba cf       	rjmp	.-140    	; 0x52c <HolonomicW+0x1fe>
		if(V[i]>=40)V[i]=40;
		if(V[i]<=(-40))V[i]=-40;
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
     5b8:	0e 94 b7 11 	call	0x236e	; 0x236e <StartMotion>
}
     5bc:	60 96       	adiw	r28, 0x10	; 16
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	cf 91       	pop	r28
     5ca:	df 91       	pop	r29
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	df 90       	pop	r13
     5d6:	cf 90       	pop	r12
     5d8:	bf 90       	pop	r11
     5da:	af 90       	pop	r10
     5dc:	9f 90       	pop	r9
     5de:	8f 90       	pop	r8
     5e0:	7f 90       	pop	r7
     5e2:	6f 90       	pop	r6
     5e4:	5f 90       	pop	r5
     5e6:	4f 90       	pop	r4
     5e8:	3f 90       	pop	r3
     5ea:	2f 90       	pop	r2
     5ec:	08 95       	ret

000005ee <Holonomic_distance>:
		if(flg0 && flg1)
			break;
	}
}

void Holonomic_distance(int f_agl,int f_speed,unsigned int distance,unsigned stop){
     5ee:	2f 92       	push	r2
     5f0:	3f 92       	push	r3
     5f2:	4f 92       	push	r4
     5f4:	5f 92       	push	r5
     5f6:	6f 92       	push	r6
     5f8:	7f 92       	push	r7
     5fa:	8f 92       	push	r8
     5fc:	9f 92       	push	r9
     5fe:	af 92       	push	r10
     600:	bf 92       	push	r11
     602:	cf 92       	push	r12
     604:	df 92       	push	r13
     606:	ef 92       	push	r14
     608:	ff 92       	push	r15
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	df 93       	push	r29
     610:	cf 93       	push	r28
     612:	00 d0       	rcall	.+0      	; 0x614 <Holonomic_distance+0x26>
     614:	cd b7       	in	r28, 0x3d	; 61
     616:	de b7       	in	r29, 0x3e	; 62
     618:	9a 83       	std	Y+2, r25	; 0x02
     61a:	89 83       	std	Y+1, r24	; 0x01
     61c:	1a 01       	movw	r2, r20
     61e:	79 01       	movw	r14, r18
//1.각도	2.속도	3.거리	4.감속지점	
	next_speed=f_speed;
     620:	88 27       	eor	r24, r24
     622:	77 fd       	sbrc	r23, 7
     624:	80 95       	com	r24
     626:	98 2f       	mov	r25, r24
     628:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
     62c:	60 93 c0 02 	sts	0x02C0, r22
     630:	70 93 c1 02 	sts	0x02C1, r23
     634:	80 93 c2 02 	sts	0x02C2, r24
     638:	90 93 c3 02 	sts	0x02C3, r25
	acc=5;
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	a0 ea       	ldi	r26, 0xA0	; 160
     642:	b0 e4       	ldi	r27, 0x40	; 64
     644:	80 93 00 01 	sts	0x0100, r24
     648:	90 93 01 01 	sts	0x0101, r25
     64c:	a0 93 02 01 	sts	0x0102, r26
     650:	b0 93 03 01 	sts	0x0103, r27
	TCNT1H=0xFF; TCNT1L=0x70;	//0.01초
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	8d bd       	out	0x2d, r24	; 45
     658:	80 e7       	ldi	r24, 0x70	; 112
     65a:	8c bd       	out	0x2c, r24	; 44
	sec=0;
     65c:	10 92 bb 02 	sts	0x02BB, r1
     660:	10 92 ba 02 	sts	0x02BA, r1
	disMD=0;	//거리 초기화
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	dc 01       	movw	r26, r24
     66a:	80 93 d8 02 	sts	0x02D8, r24
     66e:	90 93 d9 02 	sts	0x02D9, r25
     672:	a0 93 da 02 	sts	0x02DA, r26
     676:	b0 93 db 02 	sts	0x02DB, r27
	
	while(1){
	
		HolonomicW(f_agl,speed,0);
	
		if(disMD>=distance) break;
     67a:	44 24       	eor	r4, r4
     67c:	55 24       	eor	r5, r5
		else if(disMD>=stop) next_speed=50;
     67e:	57 01       	movw	r10, r14
     680:	cc 24       	eor	r12, r12
     682:	dd 24       	eor	r13, r13
     684:	0f 2e       	mov	r0, r31
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	6f 2e       	mov	r6, r31
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	7f 2e       	mov	r7, r31
     68e:	f8 e4       	ldi	r31, 0x48	; 72
     690:	8f 2e       	mov	r8, r31
     692:	f2 e4       	ldi	r31, 0x42	; 66
     694:	9f 2e       	mov	r9, r31
     696:	f0 2d       	mov	r31, r0
	sec=0;
	disMD=0;	//거리 초기화
	
	while(1){
	
		HolonomicW(f_agl,speed,0);
     698:	60 91 bc 02 	lds	r22, 0x02BC
     69c:	70 91 bd 02 	lds	r23, 0x02BD
     6a0:	80 91 be 02 	lds	r24, 0x02BE
     6a4:	90 91 bf 02 	lds	r25, 0x02BF
     6a8:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fixsfsi>
     6ac:	9b 01       	movw	r18, r22
     6ae:	ac 01       	movw	r20, r24
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	9a 81       	ldd	r25, Y+2	; 0x02
     6b4:	b9 01       	movw	r22, r18
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	0e 94 97 01 	call	0x32e	; 0x32e <HolonomicW>
	
		if(disMD>=distance) break;
     6be:	e0 90 d8 02 	lds	r14, 0x02D8
     6c2:	f0 90 d9 02 	lds	r15, 0x02D9
     6c6:	00 91 da 02 	lds	r16, 0x02DA
     6ca:	10 91 db 02 	lds	r17, 0x02DB
     6ce:	c2 01       	movw	r24, r4
     6d0:	b1 01       	movw	r22, r2
     6d2:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__floatunsisf>
     6d6:	9b 01       	movw	r18, r22
     6d8:	ac 01       	movw	r20, r24
     6da:	c8 01       	movw	r24, r16
     6dc:	b7 01       	movw	r22, r14
     6de:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__gesf2>
     6e2:	87 ff       	sbrs	r24, 7
     6e4:	1d c0       	rjmp	.+58     	; 0x720 <Holonomic_distance+0x132>
		else if(disMD>=stop) next_speed=50;
     6e6:	e0 90 d8 02 	lds	r14, 0x02D8
     6ea:	f0 90 d9 02 	lds	r15, 0x02D9
     6ee:	00 91 da 02 	lds	r16, 0x02DA
     6f2:	10 91 db 02 	lds	r17, 0x02DB
     6f6:	c6 01       	movw	r24, r12
     6f8:	b5 01       	movw	r22, r10
     6fa:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__floatunsisf>
     6fe:	9b 01       	movw	r18, r22
     700:	ac 01       	movw	r20, r24
     702:	c8 01       	movw	r24, r16
     704:	b7 01       	movw	r22, r14
     706:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__gesf2>
     70a:	87 fd       	sbrc	r24, 7
     70c:	c5 cf       	rjmp	.-118    	; 0x698 <Holonomic_distance+0xaa>
     70e:	60 92 c0 02 	sts	0x02C0, r6
     712:	70 92 c1 02 	sts	0x02C1, r7
     716:	80 92 c2 02 	sts	0x02C2, r8
     71a:	90 92 c3 02 	sts	0x02C3, r9
     71e:	bc cf       	rjmp	.-136    	; 0x698 <Holonomic_distance+0xaa>
	}
}
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	cf 91       	pop	r28
     726:	df 91       	pop	r29
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	df 90       	pop	r13
     732:	cf 90       	pop	r12
     734:	bf 90       	pop	r11
     736:	af 90       	pop	r10
     738:	9f 90       	pop	r9
     73a:	8f 90       	pop	r8
     73c:	7f 90       	pop	r7
     73e:	6f 90       	pop	r6
     740:	5f 90       	pop	r5
     742:	4f 90       	pop	r4
     744:	3f 90       	pop	r3
     746:	2f 90       	pop	r2
     748:	08 95       	ret

0000074a <Turn_and_Drive>:
//5. 회전이동거리 (회전 각도)
//6. 정지 시점
//7. 회전정지시점

void Turn_and_Drive(double f_agl, int f_speed, int fw_speed, unsigned int mm,int dgree, unsigned int stop, unsigned int wstop)
{
     74a:	2f 92       	push	r2
     74c:	3f 92       	push	r3
     74e:	4f 92       	push	r4
     750:	5f 92       	push	r5
     752:	6f 92       	push	r6
     754:	7f 92       	push	r7
     756:	8f 92       	push	r8
     758:	9f 92       	push	r9
     75a:	af 92       	push	r10
     75c:	bf 92       	push	r11
     75e:	cf 92       	push	r12
     760:	df 92       	push	r13
     762:	ef 92       	push	r14
     764:	ff 92       	push	r15
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	df 93       	push	r29
     76c:	cf 93       	push	r28
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	a6 97       	sbiw	r28, 0x26	; 38
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	f8 94       	cli
     778:	de bf       	out	0x3e, r29	; 62
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	cd bf       	out	0x3d, r28	; 61
     77e:	96 2e       	mov	r9, r22
     780:	87 2e       	mov	r8, r23
     782:	78 2e       	mov	r7, r24
     784:	69 2e       	mov	r6, r25
     786:	29 01       	movw	r4, r18
     788:	dc 86       	std	Y+12, r13	; 0x0c
     78a:	cb 86       	std	Y+11, r12	; 0x0b
     78c:	be 86       	std	Y+14, r11	; 0x0e
     78e:	ad 86       	std	Y+13, r10	; 0x0d
	double distance=0, distanceW=0;
	float S_distance=0, S_distanceW=0;
	unsigned char flg0=0, flg1=0;

	TCNT1H=0xFF; TCNT1L=0x70;
     790:	8f ef       	ldi	r24, 0xFF	; 255
     792:	8d bd       	out	0x2d, r24	; 45
     794:	80 e7       	ldi	r24, 0x70	; 112
     796:	8c bd       	out	0x2c, r24	; 44
	sec=1;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	90 93 bb 02 	sts	0x02BB, r25
     7a0:	80 93 ba 02 	sts	0x02BA, r24

	acc=5;	accW=3;
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	a0 ea       	ldi	r26, 0xA0	; 160
     7aa:	b0 e4       	ldi	r27, 0x40	; 64
     7ac:	80 93 00 01 	sts	0x0100, r24
     7b0:	90 93 01 01 	sts	0x0101, r25
     7b4:	a0 93 02 01 	sts	0x0102, r26
     7b8:	b0 93 03 01 	sts	0x0103, r27
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	a0 e4       	ldi	r26, 0x40	; 64
     7c2:	b0 e4       	ldi	r27, 0x40	; 64
     7c4:	80 93 04 01 	sts	0x0104, r24
     7c8:	90 93 05 01 	sts	0x0105, r25
     7cc:	a0 93 06 01 	sts	0x0106, r26
     7d0:	b0 93 07 01 	sts	0x0107, r27
	next_speed=f_speed;
     7d4:	ba 01       	movw	r22, r20
     7d6:	88 27       	eor	r24, r24
     7d8:	77 fd       	sbrc	r23, 7
     7da:	80 95       	com	r24
     7dc:	98 2f       	mov	r25, r24
     7de:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
     7e2:	60 93 c0 02 	sts	0x02C0, r22
     7e6:	70 93 c1 02 	sts	0x02C1, r23
     7ea:	80 93 c2 02 	sts	0x02C2, r24
     7ee:	90 93 c3 02 	sts	0x02C3, r25
	next_wspeed=fw_speed;
     7f2:	b2 01       	movw	r22, r4
     7f4:	88 27       	eor	r24, r24
     7f6:	77 fd       	sbrc	r23, 7
     7f8:	80 95       	com	r24
     7fa:	98 2f       	mov	r25, r24
     7fc:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
     800:	60 93 c8 02 	sts	0x02C8, r22
     804:	70 93 c9 02 	sts	0x02C9, r23
     808:	80 93 ca 02 	sts	0x02CA, r24
     80c:	90 93 cb 02 	sts	0x02CB, r25

void Turn_and_Drive(double f_agl, int f_speed, int fw_speed, unsigned int mm,int dgree, unsigned int stop, unsigned int wstop)
{
	double distance=0, distanceW=0;
	float S_distance=0, S_distanceW=0;
	unsigned char flg0=0, flg1=0;
     810:	1a 86       	std	Y+10, r1	; 0x0a
     812:	19 86       	std	Y+9, r1	; 0x09
//6. 정지 시점
//7. 회전정지시점

void Turn_and_Drive(double f_agl, int f_speed, int fw_speed, unsigned int mm,int dgree, unsigned int stop, unsigned int wstop)
{
	double distance=0, distanceW=0;
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	dc 01       	movw	r26, r24
     81a:	8d 83       	std	Y+5, r24	; 0x05
     81c:	9e 83       	std	Y+6, r25	; 0x06
     81e:	af 83       	std	Y+7, r26	; 0x07
     820:	b8 87       	std	Y+8, r27	; 0x08
     822:	89 83       	std	Y+1, r24	; 0x01
     824:	9a 83       	std	Y+2, r25	; 0x02
     826:	ab 83       	std	Y+3, r26	; 0x03
     828:	bc 83       	std	Y+4, r27	; 0x04

			HolonomicW((int)(f_agl),speed,wspeed);

			distance+=S_distance;
			distanceW+=S_distanceW;
			if(distance>=stop && stop!=0)next_speed=100;
     82a:	ab 85       	ldd	r26, Y+11	; 0x0b
     82c:	bc 85       	ldd	r27, Y+12	; 0x0c
     82e:	cd 01       	movw	r24, r26
     830:	a0 e0       	ldi	r26, 0x00	; 0
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	8f 8b       	std	Y+23, r24	; 0x17
     836:	98 8f       	std	Y+24, r25	; 0x18
     838:	a9 8f       	std	Y+25, r26	; 0x19
     83a:	ba 8f       	std	Y+26, r27	; 0x1a
			if(fabs(distanceW)>=wstop && wstop!=0){
     83c:	ad 85       	ldd	r26, Y+13	; 0x0d
     83e:	be 85       	ldd	r27, Y+14	; 0x0e
     840:	cd 01       	movw	r24, r26
     842:	a0 e0       	ldi	r26, 0x00	; 0
     844:	b0 e0       	ldi	r27, 0x00	; 0
     846:	8b 8f       	std	Y+27, r24	; 0x1b
     848:	9c 8f       	std	Y+28, r25	; 0x1c
     84a:	ad 8f       	std	Y+29, r26	; 0x1d
     84c:	be 8f       	std	Y+30, r27	; 0x1e
				next_wspeed=20;
				if(wspeed<=0)next_wspeed=-20;
			}

			if(distance>=mm || (distance*-1)>=mm){
     84e:	c8 01       	movw	r24, r16
     850:	a0 e0       	ldi	r26, 0x00	; 0
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	8f 8f       	std	Y+31, r24	; 0x1f
     856:	98 a3       	std	Y+32, r25	; 0x20
     858:	a9 a3       	std	Y+33, r26	; 0x21
     85a:	ba a3       	std	Y+34, r27	; 0x22
				flg0=1;
				next_speed=0;
				speed=0;
			}
			if(fabs(distanceW)>=dgree){
     85c:	c7 01       	movw	r24, r14
     85e:	aa 27       	eor	r26, r26
     860:	97 fd       	sbrc	r25, 7
     862:	a0 95       	com	r26
     864:	ba 2f       	mov	r27, r26
     866:	8b a3       	std	Y+35, r24	; 0x23
     868:	9c a3       	std	Y+36, r25	; 0x24
     86a:	ad a3       	std	Y+37, r26	; 0x25
     86c:	be a3       	std	Y+38, r27	; 0x26
	next_speed=f_speed;
	next_wspeed=fw_speed;

	while(1){

		if(sec){
     86e:	80 91 ba 02 	lds	r24, 0x02BA
     872:	90 91 bb 02 	lds	r25, 0x02BB
     876:	00 97       	sbiw	r24, 0x00	; 0
     878:	09 f4       	brne	.+2      	; 0x87c <Turn_and_Drive+0x132>
     87a:	82 c1       	rjmp	.+772    	; 0xb80 <Turn_and_Drive+0x436>
			sec=0;
     87c:	10 92 bb 02 	sts	0x02BB, r1
     880:	10 92 ba 02 	sts	0x02BA, r1

			S_distance=speed*0.01;	//0.01 순간 이동거리
     884:	60 91 bc 02 	lds	r22, 0x02BC
     888:	70 91 bd 02 	lds	r23, 0x02BD
     88c:	80 91 be 02 	lds	r24, 0x02BE
     890:	90 91 bf 02 	lds	r25, 0x02BF
     894:	2a e0       	ldi	r18, 0x0A	; 10
     896:	37 ed       	ldi	r19, 0xD7	; 215
     898:	43 e2       	ldi	r20, 0x23	; 35
     89a:	5c e3       	ldi	r21, 0x3C	; 60
     89c:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
     8a0:	6b 8b       	std	Y+19, r22	; 0x13
     8a2:	7c 8b       	std	Y+20, r23	; 0x14
     8a4:	8d 8b       	std	Y+21, r24	; 0x15
     8a6:	9e 8b       	std	Y+22, r25	; 0x16
			S_distanceW=wspeed*0.01;	//0.01 순간 이동거리 
     8a8:	60 91 c4 02 	lds	r22, 0x02C4
     8ac:	70 91 c5 02 	lds	r23, 0x02C5
     8b0:	80 91 c6 02 	lds	r24, 0x02C6
     8b4:	90 91 c7 02 	lds	r25, 0x02C7
     8b8:	2a e0       	ldi	r18, 0x0A	; 10
     8ba:	37 ed       	ldi	r19, 0xD7	; 215
     8bc:	43 e2       	ldi	r20, 0x23	; 35
     8be:	5c e3       	ldi	r21, 0x3C	; 60
     8c0:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
     8c4:	56 2e       	mov	r5, r22
     8c6:	47 2e       	mov	r4, r23
     8c8:	38 2e       	mov	r3, r24
     8ca:	29 2e       	mov	r2, r25

			f_agl=f_agl-S_distanceW;
     8cc:	a4 01       	movw	r20, r8
     8ce:	93 01       	movw	r18, r6
     8d0:	65 2f       	mov	r22, r21
     8d2:	78 2d       	mov	r23, r8
     8d4:	83 2f       	mov	r24, r19
     8d6:	96 2d       	mov	r25, r6
     8d8:	d2 01       	movw	r26, r4
     8da:	f1 01       	movw	r30, r2
     8dc:	2b 2f       	mov	r18, r27
     8de:	3a 2f       	mov	r19, r26
     8e0:	4f 2f       	mov	r20, r31
     8e2:	5e 2f       	mov	r21, r30
     8e4:	0e 94 8d 14 	call	0x291a	; 0x291a <__subsf3>
     8e8:	96 2e       	mov	r9, r22
     8ea:	87 2e       	mov	r8, r23
     8ec:	78 2e       	mov	r7, r24
     8ee:	69 2e       	mov	r6, r25

			if(f_agl<0)f_agl+=360;
     8f0:	a4 01       	movw	r20, r8
     8f2:	93 01       	movw	r18, r6
     8f4:	65 2f       	mov	r22, r21
     8f6:	74 2f       	mov	r23, r20
     8f8:	83 2f       	mov	r24, r19
     8fa:	92 2f       	mov	r25, r18
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	a9 01       	movw	r20, r18
     902:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__ltsf2>
     906:	87 ff       	sbrs	r24, 7
     908:	0d c0       	rjmp	.+26     	; 0x924 <Turn_and_Drive+0x1da>
     90a:	a4 01       	movw	r20, r8
     90c:	93 01       	movw	r18, r6
     90e:	65 2f       	mov	r22, r21
     910:	74 2f       	mov	r23, r20
     912:	83 2f       	mov	r24, r19
     914:	92 2f       	mov	r25, r18
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	44 eb       	ldi	r20, 0xB4	; 180
     91c:	53 e4       	ldi	r21, 0x43	; 67
     91e:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
     922:	1a c0       	rjmp	.+52     	; 0x958 <Turn_and_Drive+0x20e>
			else if(f_agl>=360)f_agl-=360;
     924:	a4 01       	movw	r20, r8
     926:	93 01       	movw	r18, r6
     928:	65 2f       	mov	r22, r21
     92a:	74 2f       	mov	r23, r20
     92c:	83 2f       	mov	r24, r19
     92e:	92 2f       	mov	r25, r18
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	44 eb       	ldi	r20, 0xB4	; 180
     936:	53 e4       	ldi	r21, 0x43	; 67
     938:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__gesf2>
     93c:	87 fd       	sbrc	r24, 7
     93e:	10 c0       	rjmp	.+32     	; 0x960 <Turn_and_Drive+0x216>
     940:	a4 01       	movw	r20, r8
     942:	93 01       	movw	r18, r6
     944:	65 2f       	mov	r22, r21
     946:	74 2f       	mov	r23, r20
     948:	83 2f       	mov	r24, r19
     94a:	92 2f       	mov	r25, r18
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	44 eb       	ldi	r20, 0xB4	; 180
     952:	53 e4       	ldi	r21, 0x43	; 67
     954:	0e 94 8d 14 	call	0x291a	; 0x291a <__subsf3>
     958:	96 2e       	mov	r9, r22
     95a:	87 2e       	mov	r8, r23
     95c:	78 2e       	mov	r7, r24
     95e:	69 2e       	mov	r6, r25

			HolonomicW((int)(f_agl),speed,wspeed);
     960:	e0 90 bc 02 	lds	r14, 0x02BC
     964:	f0 90 bd 02 	lds	r15, 0x02BD
     968:	00 91 be 02 	lds	r16, 0x02BE
     96c:	10 91 bf 02 	lds	r17, 0x02BF
     970:	a0 90 c4 02 	lds	r10, 0x02C4
     974:	b0 90 c5 02 	lds	r11, 0x02C5
     978:	c0 90 c6 02 	lds	r12, 0x02C6
     97c:	d0 90 c7 02 	lds	r13, 0x02C7
     980:	a4 01       	movw	r20, r8
     982:	93 01       	movw	r18, r6
     984:	65 2f       	mov	r22, r21
     986:	78 2d       	mov	r23, r8
     988:	83 2f       	mov	r24, r19
     98a:	96 2d       	mov	r25, r6
     98c:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fixsfsi>
     990:	6f 87       	std	Y+15, r22	; 0x0f
     992:	78 8b       	std	Y+16, r23	; 0x10
     994:	89 8b       	std	Y+17, r24	; 0x11
     996:	9a 8b       	std	Y+18, r25	; 0x12
     998:	c8 01       	movw	r24, r16
     99a:	b7 01       	movw	r22, r14
     99c:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fixsfsi>
     9a0:	7b 01       	movw	r14, r22
     9a2:	8c 01       	movw	r16, r24
     9a4:	c6 01       	movw	r24, r12
     9a6:	b5 01       	movw	r22, r10
     9a8:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fixsfsi>
     9ac:	9b 01       	movw	r18, r22
     9ae:	ac 01       	movw	r20, r24
     9b0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9b2:	98 89       	ldd	r25, Y+16	; 0x10
     9b4:	b7 01       	movw	r22, r14
     9b6:	a9 01       	movw	r20, r18
     9b8:	0e 94 97 01 	call	0x32e	; 0x32e <HolonomicW>

			distance+=S_distance;
     9bc:	69 81       	ldd	r22, Y+1	; 0x01
     9be:	7a 81       	ldd	r23, Y+2	; 0x02
     9c0:	8b 81       	ldd	r24, Y+3	; 0x03
     9c2:	9c 81       	ldd	r25, Y+4	; 0x04
     9c4:	bb 89       	ldd	r27, Y+19	; 0x13
     9c6:	ac 89       	ldd	r26, Y+20	; 0x14
     9c8:	1d 89       	ldd	r17, Y+21	; 0x15
     9ca:	0e 89       	ldd	r16, Y+22	; 0x16
     9cc:	2b 2f       	mov	r18, r27
     9ce:	3a 2f       	mov	r19, r26
     9d0:	41 2f       	mov	r20, r17
     9d2:	50 2f       	mov	r21, r16
     9d4:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
     9d8:	16 2f       	mov	r17, r22
     9da:	07 2f       	mov	r16, r23
     9dc:	e8 2e       	mov	r14, r24
     9de:	a9 2e       	mov	r10, r25
     9e0:	86 2f       	mov	r24, r22
     9e2:	90 2f       	mov	r25, r16
     9e4:	ae 2d       	mov	r26, r14
     9e6:	ba 2d       	mov	r27, r10
     9e8:	89 83       	std	Y+1, r24	; 0x01
     9ea:	9a 83       	std	Y+2, r25	; 0x02
     9ec:	ab 83       	std	Y+3, r26	; 0x03
     9ee:	bc 83       	std	Y+4, r27	; 0x04
			distanceW+=S_distanceW;
     9f0:	6d 81       	ldd	r22, Y+5	; 0x05
     9f2:	7e 81       	ldd	r23, Y+6	; 0x06
     9f4:	8f 81       	ldd	r24, Y+7	; 0x07
     9f6:	98 85       	ldd	r25, Y+8	; 0x08
     9f8:	d2 01       	movw	r26, r4
     9fa:	f1 01       	movw	r30, r2
     9fc:	2b 2f       	mov	r18, r27
     9fe:	34 2d       	mov	r19, r4
     a00:	4f 2f       	mov	r20, r31
     a02:	52 2d       	mov	r21, r2
     a04:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
     a08:	26 2f       	mov	r18, r22
     a0a:	37 2f       	mov	r19, r23
     a0c:	48 2f       	mov	r20, r24
     a0e:	59 2f       	mov	r21, r25
     a10:	2d 83       	std	Y+5, r18	; 0x05
     a12:	3e 83       	std	Y+6, r19	; 0x06
     a14:	4f 83       	std	Y+7, r20	; 0x07
     a16:	58 87       	std	Y+8, r21	; 0x08
			if(distance>=stop && stop!=0)next_speed=100;
     a18:	6f 89       	ldd	r22, Y+23	; 0x17
     a1a:	78 8d       	ldd	r23, Y+24	; 0x18
     a1c:	89 8d       	ldd	r24, Y+25	; 0x19
     a1e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a20:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__floatunsisf>
     a24:	9b 01       	movw	r18, r22
     a26:	ac 01       	movw	r20, r24
     a28:	61 2f       	mov	r22, r17
     a2a:	70 2f       	mov	r23, r16
     a2c:	8e 2d       	mov	r24, r14
     a2e:	9a 2d       	mov	r25, r10
     a30:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__gesf2>
     a34:	87 fd       	sbrc	r24, 7
     a36:	10 c0       	rjmp	.+32     	; 0xa58 <Turn_and_Drive+0x30e>
     a38:	ab 85       	ldd	r26, Y+11	; 0x0b
     a3a:	bc 85       	ldd	r27, Y+12	; 0x0c
     a3c:	10 97       	sbiw	r26, 0x00	; 0
     a3e:	61 f0       	breq	.+24     	; 0xa58 <Turn_and_Drive+0x30e>
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a8 ec       	ldi	r26, 0xC8	; 200
     a46:	b2 e4       	ldi	r27, 0x42	; 66
     a48:	80 93 c0 02 	sts	0x02C0, r24
     a4c:	90 93 c1 02 	sts	0x02C1, r25
     a50:	a0 93 c2 02 	sts	0x02C2, r26
     a54:	b0 93 c3 02 	sts	0x02C3, r27
			if(fabs(distanceW)>=wstop && wstop!=0){
     a58:	ad 80       	ldd	r10, Y+5	; 0x05
     a5a:	be 80       	ldd	r11, Y+6	; 0x06
     a5c:	cf 80       	ldd	r12, Y+7	; 0x07
     a5e:	d8 84       	ldd	r13, Y+8	; 0x08
     a60:	e8 94       	clt
     a62:	d7 f8       	bld	r13, 7
     a64:	6b 8d       	ldd	r22, Y+27	; 0x1b
     a66:	7c 8d       	ldd	r23, Y+28	; 0x1c
     a68:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a6c:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__floatunsisf>
     a70:	9b 01       	movw	r18, r22
     a72:	ac 01       	movw	r20, r24
     a74:	c6 01       	movw	r24, r12
     a76:	b5 01       	movw	r22, r10
     a78:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__gesf2>
     a7c:	87 fd       	sbrc	r24, 7
     a7e:	2b c0       	rjmp	.+86     	; 0xad6 <Turn_and_Drive+0x38c>
     a80:	ad 85       	ldd	r26, Y+13	; 0x0d
     a82:	be 85       	ldd	r27, Y+14	; 0x0e
     a84:	10 97       	sbiw	r26, 0x00	; 0
     a86:	39 f1       	breq	.+78     	; 0xad6 <Turn_and_Drive+0x38c>
				next_wspeed=20;
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 ea       	ldi	r26, 0xA0	; 160
     a8e:	b1 e4       	ldi	r27, 0x41	; 65
     a90:	80 93 c8 02 	sts	0x02C8, r24
     a94:	90 93 c9 02 	sts	0x02C9, r25
     a98:	a0 93 ca 02 	sts	0x02CA, r26
     a9c:	b0 93 cb 02 	sts	0x02CB, r27
				if(wspeed<=0)next_wspeed=-20;
     aa0:	60 91 c4 02 	lds	r22, 0x02C4
     aa4:	70 91 c5 02 	lds	r23, 0x02C5
     aa8:	80 91 c6 02 	lds	r24, 0x02C6
     aac:	90 91 c7 02 	lds	r25, 0x02C7
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	a9 01       	movw	r20, r18
     ab6:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__lesf2>
     aba:	18 16       	cp	r1, r24
     abc:	64 f0       	brlt	.+24     	; 0xad6 <Turn_and_Drive+0x38c>
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 ea       	ldi	r26, 0xA0	; 160
     ac4:	b1 ec       	ldi	r27, 0xC1	; 193
     ac6:	80 93 c8 02 	sts	0x02C8, r24
     aca:	90 93 c9 02 	sts	0x02C9, r25
     ace:	a0 93 ca 02 	sts	0x02CA, r26
     ad2:	b0 93 cb 02 	sts	0x02CB, r27
			}

			if(distance>=mm || (distance*-1)>=mm){
     ad6:	6f 8d       	ldd	r22, Y+31	; 0x1f
     ad8:	78 a1       	ldd	r23, Y+32	; 0x20
     ada:	89 a1       	ldd	r24, Y+33	; 0x21
     adc:	9a a1       	ldd	r25, Y+34	; 0x22
     ade:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__floatunsisf>
     ae2:	7b 01       	movw	r14, r22
     ae4:	8c 01       	movw	r16, r24
     ae6:	69 81       	ldd	r22, Y+1	; 0x01
     ae8:	7a 81       	ldd	r23, Y+2	; 0x02
     aea:	8b 81       	ldd	r24, Y+3	; 0x03
     aec:	9c 81       	ldd	r25, Y+4	; 0x04
     aee:	a8 01       	movw	r20, r16
     af0:	97 01       	movw	r18, r14
     af2:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__gesf2>
     af6:	87 ff       	sbrs	r24, 7
     af8:	0b c0       	rjmp	.+22     	; 0xb10 <Turn_and_Drive+0x3c6>
     afa:	69 81       	ldd	r22, Y+1	; 0x01
     afc:	7a 81       	ldd	r23, Y+2	; 0x02
     afe:	8b 81       	ldd	r24, Y+3	; 0x03
     b00:	9c 81       	ldd	r25, Y+4	; 0x04
     b02:	90 58       	subi	r25, 0x80	; 128
     b04:	a8 01       	movw	r20, r16
     b06:	97 01       	movw	r18, r14
     b08:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__gesf2>
     b0c:	87 fd       	sbrc	r24, 7
     b0e:	15 c0       	rjmp	.+42     	; 0xb3a <Turn_and_Drive+0x3f0>
				flg0=1;
				next_speed=0;
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	dc 01       	movw	r26, r24
     b16:	80 93 c0 02 	sts	0x02C0, r24
     b1a:	90 93 c1 02 	sts	0x02C1, r25
     b1e:	a0 93 c2 02 	sts	0x02C2, r26
     b22:	b0 93 c3 02 	sts	0x02C3, r27
				speed=0;
     b26:	80 93 bc 02 	sts	0x02BC, r24
     b2a:	90 93 bd 02 	sts	0x02BD, r25
     b2e:	a0 93 be 02 	sts	0x02BE, r26
     b32:	b0 93 bf 02 	sts	0x02BF, r27
				next_wspeed=20;
				if(wspeed<=0)next_wspeed=-20;
			}

			if(distance>=mm || (distance*-1)>=mm){
				flg0=1;
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	99 87       	std	Y+9, r25	; 0x09
				next_speed=0;
				speed=0;
			}
			if(fabs(distanceW)>=dgree){
     b3a:	6b a1       	ldd	r22, Y+35	; 0x23
     b3c:	7c a1       	ldd	r23, Y+36	; 0x24
     b3e:	8d a1       	ldd	r24, Y+37	; 0x25
     b40:	9e a1       	ldd	r25, Y+38	; 0x26
     b42:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
     b46:	9b 01       	movw	r18, r22
     b48:	ac 01       	movw	r20, r24
     b4a:	c6 01       	movw	r24, r12
     b4c:	b5 01       	movw	r22, r10
     b4e:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__gesf2>
     b52:	87 fd       	sbrc	r24, 7
     b54:	15 c0       	rjmp	.+42     	; 0xb80 <Turn_and_Drive+0x436>
				flg1=1;
				next_wspeed=0;
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	dc 01       	movw	r26, r24
     b5c:	80 93 c8 02 	sts	0x02C8, r24
     b60:	90 93 c9 02 	sts	0x02C9, r25
     b64:	a0 93 ca 02 	sts	0x02CA, r26
     b68:	b0 93 cb 02 	sts	0x02CB, r27
				wspeed=0;
     b6c:	80 93 c4 02 	sts	0x02C4, r24
     b70:	90 93 c5 02 	sts	0x02C5, r25
     b74:	a0 93 c6 02 	sts	0x02C6, r26
     b78:	b0 93 c7 02 	sts	0x02C7, r27
				flg0=1;
				next_speed=0;
				speed=0;
			}
			if(fabs(distanceW)>=dgree){
				flg1=1;
     b7c:	a1 e0       	ldi	r26, 0x01	; 1
     b7e:	aa 87       	std	Y+10, r26	; 0x0a
				next_wspeed=0;
				wspeed=0;
			}
		}
		if(flg0 && flg1)
     b80:	b9 85       	ldd	r27, Y+9	; 0x09
     b82:	bb 23       	and	r27, r27
     b84:	09 f4       	brne	.+2      	; 0xb88 <Turn_and_Drive+0x43e>
     b86:	73 ce       	rjmp	.-794    	; 0x86e <Turn_and_Drive+0x124>
     b88:	ea 85       	ldd	r30, Y+10	; 0x0a
     b8a:	ee 23       	and	r30, r30
     b8c:	09 f4       	brne	.+2      	; 0xb90 <Turn_and_Drive+0x446>
     b8e:	6f ce       	rjmp	.-802    	; 0x86e <Turn_and_Drive+0x124>
			break;
	}
}
     b90:	a6 96       	adiw	r28, 0x26	; 38
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	ff 90       	pop	r15
     ba6:	ef 90       	pop	r14
     ba8:	df 90       	pop	r13
     baa:	cf 90       	pop	r12
     bac:	bf 90       	pop	r11
     bae:	af 90       	pop	r10
     bb0:	9f 90       	pop	r9
     bb2:	8f 90       	pop	r8
     bb4:	7f 90       	pop	r7
     bb6:	6f 90       	pop	r6
     bb8:	5f 90       	pop	r5
     bba:	4f 90       	pop	r4
     bbc:	3f 90       	pop	r3
     bbe:	2f 90       	pop	r2
     bc0:	08 95       	ret

00000bc2 <non_Holonomic>:
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
}

void non_Holonomic(long Fx, long Fy, long Fw){
     bc2:	2f 92       	push	r2
     bc4:	3f 92       	push	r3
     bc6:	4f 92       	push	r4
     bc8:	5f 92       	push	r5
     bca:	6f 92       	push	r6
     bcc:	7f 92       	push	r7
     bce:	8f 92       	push	r8
     bd0:	9f 92       	push	r9
     bd2:	af 92       	push	r10
     bd4:	bf 92       	push	r11
     bd6:	cf 92       	push	r12
     bd8:	df 92       	push	r13
     bda:	ef 92       	push	r14
     bdc:	ff 92       	push	r15
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	2d 97       	sbiw	r28, 0x0d	; 13
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	3b 01       	movw	r6, r22
     bf8:	4c 01       	movw	r8, r24
     bfa:	59 01       	movw	r10, r18
     bfc:	6a 01       	movw	r12, r20

	unsigned char i=0;
	double V[3]={0,0,0};
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	dc 01       	movw	r26, r24
     c04:	89 83       	std	Y+1, r24	; 0x01
     c06:	9a 83       	std	Y+2, r25	; 0x02
     c08:	ab 83       	std	Y+3, r26	; 0x03
     c0a:	bc 83       	std	Y+4, r27	; 0x04
     c0c:	8d 83       	std	Y+5, r24	; 0x05
     c0e:	9e 83       	std	Y+6, r25	; 0x06
     c10:	af 83       	std	Y+7, r26	; 0x07
     c12:	b8 87       	std	Y+8, r27	; 0x08
     c14:	89 87       	std	Y+9, r24	; 0x09
     c16:	9a 87       	std	Y+10, r25	; 0x0a
     c18:	ab 87       	std	Y+11, r26	; 0x0b
     c1a:	bc 87       	std	Y+12, r27	; 0x0c

	if(Fx==0 && Fy==0 && Fw==0)StopMotion(STOP_ABRUPTLY);
     c1c:	61 14       	cp	r6, r1
     c1e:	71 04       	cpc	r7, r1
     c20:	81 04       	cpc	r8, r1
     c22:	91 04       	cpc	r9, r1
     c24:	71 f4       	brne	.+28     	; 0xc42 <non_Holonomic+0x80>
     c26:	21 15       	cp	r18, r1
     c28:	31 05       	cpc	r19, r1
     c2a:	41 05       	cpc	r20, r1
     c2c:	51 05       	cpc	r21, r1
     c2e:	49 f4       	brne	.+18     	; 0xc42 <non_Holonomic+0x80>
     c30:	e1 14       	cp	r14, r1
     c32:	f1 04       	cpc	r15, r1
     c34:	01 05       	cpc	r16, r1
     c36:	11 05       	cpc	r17, r1
     c38:	21 f4       	brne	.+8      	; 0xc42 <non_Holonomic+0x80>
     c3a:	89 e0       	ldi	r24, 0x09	; 9
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 c4 11 	call	0x2388	; 0x2388 <StopMotion>

	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
     c42:	c4 01       	movw	r24, r8
     c44:	b3 01       	movw	r22, r6
     c46:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
     c4a:	1b 01       	movw	r2, r22
     c4c:	2c 01       	movw	r4, r24
     c4e:	c6 01       	movw	r24, r12
     c50:	b5 01       	movw	r22, r10
     c52:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
     c56:	3b 01       	movw	r6, r22
     c58:	4c 01       	movw	r8, r24
     c5a:	22 e0       	ldi	r18, 0x02	; 2
     c5c:	3b e2       	ldi	r19, 0x2B	; 43
     c5e:	47 e0       	ldi	r20, 0x07	; 7
     c60:	5d e3       	ldi	r21, 0x3D	; 61
     c62:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
     c66:	d6 2e       	mov	r13, r22
     c68:	c7 2e       	mov	r12, r23
     c6a:	b8 2e       	mov	r11, r24
     c6c:	9d 87       	std	Y+13, r25	; 0x0d
     c6e:	c8 01       	movw	r24, r16
     c70:	b7 01       	movw	r22, r14
     c72:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
     c76:	29 e2       	ldi	r18, 0x29	; 41
     c78:	3c e5       	ldi	r19, 0x5C	; 92
     c7a:	4f e0       	ldi	r20, 0x0F	; 15
     c7c:	5e e3       	ldi	r21, 0x3E	; 62
     c7e:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
     c82:	a6 2e       	mov	r10, r22
     c84:	e7 2e       	mov	r14, r23
     c86:	8c 01       	movw	r16, r24
     c88:	c2 01       	movw	r24, r4
     c8a:	b1 01       	movw	r22, r2
     c8c:	22 e4       	ldi	r18, 0x42	; 66
     c8e:	30 e6       	ldi	r19, 0x60	; 96
     c90:	45 e6       	ldi	r20, 0x65	; 101
     c92:	5d e3       	ldi	r21, 0x3D	; 61
     c94:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
     c98:	d6 01       	movw	r26, r12
     c9a:	ed 85       	ldd	r30, Y+13	; 0x0d
     c9c:	2b 2f       	mov	r18, r27
     c9e:	3a 2f       	mov	r19, r26
     ca0:	4b 2d       	mov	r20, r11
     ca2:	5e 2f       	mov	r21, r30
     ca4:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
     ca8:	2a 2d       	mov	r18, r10
     caa:	3e 2d       	mov	r19, r14
     cac:	40 2f       	mov	r20, r16
     cae:	51 2f       	mov	r21, r17
     cb0:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
     cb4:	69 83       	std	Y+1, r22	; 0x01
     cb6:	7a 83       	std	Y+2, r23	; 0x02
     cb8:	8b 83       	std	Y+3, r24	; 0x03
     cba:	9c 83       	std	Y+4, r25	; 0x04
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
     cbc:	c4 01       	movw	r24, r8
     cbe:	b3 01       	movw	r22, r6
     cc0:	28 eb       	ldi	r18, 0xB8	; 184
     cc2:	3e e1       	ldi	r19, 0x1E	; 30
     cc4:	45 e8       	ldi	r20, 0x85	; 133
     cc6:	5d eb       	ldi	r21, 0xBD	; 189
     cc8:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
     ccc:	2a 2d       	mov	r18, r10
     cce:	3e 2d       	mov	r19, r14
     cd0:	40 2f       	mov	r20, r16
     cd2:	51 2f       	mov	r21, r17
     cd4:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
     cd8:	6d 83       	std	Y+5, r22	; 0x05
     cda:	7e 83       	std	Y+6, r23	; 0x06
     cdc:	8f 83       	std	Y+7, r24	; 0x07
     cde:	98 87       	std	Y+8, r25	; 0x08
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
     ce0:	c2 01       	movw	r24, r4
     ce2:	b1 01       	movw	r22, r2
     ce4:	22 e4       	ldi	r18, 0x42	; 66
     ce6:	30 e6       	ldi	r19, 0x60	; 96
     ce8:	45 e6       	ldi	r20, 0x65	; 101
     cea:	5d eb       	ldi	r21, 0xBD	; 189
     cec:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
     cf0:	d6 01       	movw	r26, r12
     cf2:	ed 85       	ldd	r30, Y+13	; 0x0d
     cf4:	2b 2f       	mov	r18, r27
     cf6:	3a 2f       	mov	r19, r26
     cf8:	4b 2d       	mov	r20, r11
     cfa:	5e 2f       	mov	r21, r30
     cfc:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
     d00:	2a 2d       	mov	r18, r10
     d02:	3e 2d       	mov	r19, r14
     d04:	40 2f       	mov	r20, r16
     d06:	51 2f       	mov	r21, r17
     d08:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
     d0c:	69 87       	std	Y+9, r22	; 0x09
     d0e:	7a 87       	std	Y+10, r23	; 0x0a
     d10:	8b 87       	std	Y+11, r24	; 0x0b
     d12:	9c 87       	std	Y+12, r25	; 0x0c
     d14:	8e 01       	movw	r16, r28
     d16:	0f 5f       	subi	r16, 0xFF	; 255
     d18:	1f 4f       	sbci	r17, 0xFF	; 255

	for(i=0;i<3;++i){
     d1a:	ee 24       	eor	r14, r14
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
}

void non_Holonomic(long Fx, long Fy, long Fw){
     d1c:	58 01       	movw	r10, r16
	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));

	for(i=0;i<3;++i){
		if(V[i]>=40)V[i]=40;
     d1e:	f8 01       	movw	r30, r16
     d20:	60 81       	ld	r22, Z
     d22:	71 81       	ldd	r23, Z+1	; 0x01
     d24:	82 81       	ldd	r24, Z+2	; 0x02
     d26:	93 81       	ldd	r25, Z+3	; 0x03
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	40 e2       	ldi	r20, 0x20	; 32
     d2e:	52 e4       	ldi	r21, 0x42	; 66
     d30:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__gesf2>
     d34:	87 fd       	sbrc	r24, 7
     d36:	09 c0       	rjmp	.+18     	; 0xd4a <non_Holonomic+0x188>
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e2       	ldi	r26, 0x20	; 32
     d3e:	b2 e4       	ldi	r27, 0x42	; 66
     d40:	f8 01       	movw	r30, r16
     d42:	80 83       	st	Z, r24
     d44:	91 83       	std	Z+1, r25	; 0x01
     d46:	a2 83       	std	Z+2, r26	; 0x02
     d48:	b3 83       	std	Z+3, r27	; 0x03
		if(V[i]<=(-40))V[i]=-40;
     d4a:	f8 01       	movw	r30, r16
     d4c:	60 81       	ld	r22, Z
     d4e:	71 81       	ldd	r23, Z+1	; 0x01
     d50:	82 81       	ldd	r24, Z+2	; 0x02
     d52:	93 81       	ldd	r25, Z+3	; 0x03
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e2       	ldi	r20, 0x20	; 32
     d5a:	52 ec       	ldi	r21, 0xC2	; 194
     d5c:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__lesf2>
     d60:	18 16       	cp	r1, r24
     d62:	4c f0       	brlt	.+18     	; 0xd76 <non_Holonomic+0x1b4>
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	a0 e2       	ldi	r26, 0x20	; 32
     d6a:	b2 ec       	ldi	r27, 0xC2	; 194
     d6c:	f8 01       	movw	r30, r16
     d6e:	80 83       	st	Z, r24
     d70:	91 83       	std	Z+1, r25	; 0x01
     d72:	a2 83       	std	Z+2, r26	; 0x02
     d74:	b3 83       	std	Z+3, r27	; 0x03
     d76:	0c 5f       	subi	r16, 0xFC	; 252
     d78:	1f 4f       	sbci	r17, 0xFF	; 255
		SetVelocity(i, V[i]*65536);
     d7a:	f5 01       	movw	r30, r10
     d7c:	60 81       	ld	r22, Z
     d7e:	71 81       	ldd	r23, Z+1	; 0x01
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	93 81       	ldd	r25, Z+3	; 0x03
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e8       	ldi	r20, 0x80	; 128
     d8a:	57 e4       	ldi	r21, 0x47	; 71
     d8c:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
     d90:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fixsfsi>
     d94:	ab 01       	movw	r20, r22
     d96:	bc 01       	movw	r22, r24
     d98:	8e 2d       	mov	r24, r14
     d9a:	0e 94 89 10 	call	0x2112	; 0x2112 <SetVelocity>

	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));

	for(i=0;i<3;++i){
     d9e:	e3 94       	inc	r14
     da0:	fe 2d       	mov	r31, r14
     da2:	f3 30       	cpi	r31, 0x03	; 3
     da4:	09 f0       	breq	.+2      	; 0xda8 <non_Holonomic+0x1e6>
     da6:	ba cf       	rjmp	.-140    	; 0xd1c <non_Holonomic+0x15a>
		if(V[i]>=40)V[i]=40;
		if(V[i]<=(-40))V[i]=-40;
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
     da8:	0e 94 b7 11 	call	0x236e	; 0x236e <StartMotion>
}
     dac:	2d 96       	adiw	r28, 0x0d	; 13
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	ff 90       	pop	r15
     dc2:	ef 90       	pop	r14
     dc4:	df 90       	pop	r13
     dc6:	cf 90       	pop	r12
     dc8:	bf 90       	pop	r11
     dca:	af 90       	pop	r10
     dcc:	9f 90       	pop	r9
     dce:	8f 90       	pop	r8
     dd0:	7f 90       	pop	r7
     dd2:	6f 90       	pop	r6
     dd4:	5f 90       	pop	r5
     dd6:	4f 90       	pop	r4
     dd8:	3f 90       	pop	r3
     dda:	2f 90       	pop	r2
     ddc:	08 95       	ret

00000dde <between_fix>:
		}
		non_Holonomic(0,0,0);
	}
}

void between_fix(){
     dde:	ef 92       	push	r14
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
	sec = 0;
     de6:	10 92 bb 02 	sts	0x02BB, r1
     dea:	10 92 ba 02 	sts	0x02BA, r1
	while(sec!=300){
     dee:	13 c0       	rjmp	.+38     	; 0xe16 <between_fix+0x38>
		non_Holonomic(0,psd_value[2]-psd_value[7],0);
     df0:	20 91 fc 02 	lds	r18, 0x02FC
     df4:	80 91 01 03 	lds	r24, 0x0301
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	28 1b       	sub	r18, r24
     dfc:	31 09       	sbc	r19, r1
     dfe:	44 27       	eor	r20, r20
     e00:	37 fd       	sbrc	r19, 7
     e02:	40 95       	com	r20
     e04:	54 2f       	mov	r21, r20
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	cb 01       	movw	r24, r22
     e0c:	ee 24       	eor	r14, r14
     e0e:	ff 24       	eor	r15, r15
     e10:	87 01       	movw	r16, r14
     e12:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>
	}
}

void between_fix(){
	sec = 0;
	while(sec!=300){
     e16:	80 91 ba 02 	lds	r24, 0x02BA
     e1a:	90 91 bb 02 	lds	r25, 0x02BB
     e1e:	21 e0       	ldi	r18, 0x01	; 1
     e20:	8c 32       	cpi	r24, 0x2C	; 44
     e22:	92 07       	cpc	r25, r18
     e24:	29 f7       	brne	.-54     	; 0xdf0 <between_fix+0x12>
		non_Holonomic(0,psd_value[2]-psd_value[7],0);
	}
}
     e26:	1f 91       	pop	r17
     e28:	0f 91       	pop	r16
     e2a:	ff 90       	pop	r15
     e2c:	ef 90       	pop	r14
     e2e:	08 95       	ret

00000e30 <wall_follow>:
		HolonomicW(0,speed,0);
	}
	non_Holonomic(0,0,0);
}

void wall_follow(int mode, int end){
     e30:	ef 92       	push	r14
     e32:	ff 92       	push	r15
     e34:	0f 93       	push	r16
     e36:	1f 93       	push	r17
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	eb 01       	movw	r28, r22
	if(mode==1){
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	91 05       	cpc	r25, r1
     e42:	d1 f4       	brne	.+52     	; 0xe78 <wall_follow+0x48>
		while(1){
			if(psd_value[0] > 80 && end == 1) break;
     e44:	80 91 fa 02 	lds	r24, 0x02FA
     e48:	81 35       	cpi	r24, 0x51	; 81
     e4a:	18 f0       	brcs	.+6      	; 0xe52 <wall_follow+0x22>
     e4c:	c1 30       	cpi	r28, 0x01	; 1
     e4e:	d1 05       	cpc	r29, r1
     e50:	79 f1       	breq	.+94     	; 0xeb0 <wall_follow+0x80>
			if(psd_value[1] < 90 && end == 2) break;
     e52:	80 91 fb 02 	lds	r24, 0x02FB
     e56:	8a 35       	cpi	r24, 0x5A	; 90
     e58:	18 f4       	brcc	.+6      	; 0xe60 <wall_follow+0x30>
     e5a:	c2 30       	cpi	r28, 0x02	; 2
     e5c:	d1 05       	cpc	r29, r1
     e5e:	41 f1       	breq	.+80     	; 0xeb0 <wall_follow+0x80>
			HolonomicW(0,200,psd_value[1]-130);
     e60:	40 91 fb 02 	lds	r20, 0x02FB
     e64:	50 e0       	ldi	r21, 0x00	; 0
     e66:	42 58       	subi	r20, 0x82	; 130
     e68:	50 40       	sbci	r21, 0x00	; 0
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	68 ec       	ldi	r22, 0xC8	; 200
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	0e 94 97 01 	call	0x32e	; 0x32e <HolonomicW>
		}
     e76:	e6 cf       	rjmp	.-52     	; 0xe44 <wall_follow+0x14>
		non_Holonomic(0,0,0);
	} else {
		while(1){
			if(psd_value[0] > 80 && end == 1) break;
			if(psd_value[8] < 100 && end == 2) break;
			HolonomicW(0,200,130-psd_value[8]);
     e78:	02 e8       	ldi	r16, 0x82	; 130
     e7a:	10 e0       	ldi	r17, 0x00	; 0
			HolonomicW(0,200,psd_value[1]-130);
		}
		non_Holonomic(0,0,0);
	} else {
		while(1){
			if(psd_value[0] > 80 && end == 1) break;
     e7c:	80 91 fa 02 	lds	r24, 0x02FA
     e80:	81 35       	cpi	r24, 0x51	; 81
     e82:	18 f0       	brcs	.+6      	; 0xe8a <wall_follow+0x5a>
     e84:	c1 30       	cpi	r28, 0x01	; 1
     e86:	d1 05       	cpc	r29, r1
     e88:	99 f0       	breq	.+38     	; 0xeb0 <wall_follow+0x80>
			if(psd_value[8] < 100 && end == 2) break;
     e8a:	80 91 02 03 	lds	r24, 0x0302
     e8e:	84 36       	cpi	r24, 0x64	; 100
     e90:	18 f4       	brcc	.+6      	; 0xe98 <wall_follow+0x68>
     e92:	c2 30       	cpi	r28, 0x02	; 2
     e94:	d1 05       	cpc	r29, r1
     e96:	61 f0       	breq	.+24     	; 0xeb0 <wall_follow+0x80>
			HolonomicW(0,200,130-psd_value[8]);
     e98:	80 91 02 03 	lds	r24, 0x0302
     e9c:	a8 01       	movw	r20, r16
     e9e:	48 1b       	sub	r20, r24
     ea0:	51 09       	sbc	r21, r1
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	68 ec       	ldi	r22, 0xC8	; 200
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	0e 94 97 01 	call	0x32e	; 0x32e <HolonomicW>
		}
     eae:	e6 cf       	rjmp	.-52     	; 0xe7c <wall_follow+0x4c>
		non_Holonomic(0,0,0);
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	cb 01       	movw	r24, r22
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	a9 01       	movw	r20, r18
     ebc:	ee 24       	eor	r14, r14
     ebe:	ff 24       	eor	r15, r15
     ec0:	87 01       	movw	r16, r14
     ec2:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>
	}
}
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	08 95       	ret

00000ed4 <main>:
		non_Holonomic(0,psd_value[2]-psd_value[7],0);
	}
}

int main(void)
{    
     ed4:	af 92       	push	r10
     ed6:	bf 92       	push	r11
     ed8:	cf 92       	push	r12
     eda:	df 92       	push	r13
     edc:	ef 92       	push	r14
     ede:	ff 92       	push	r15
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17

    Interface_init(); //인터페이스 초기화
     ee4:	0e 94 ae 00 	call	0x15c	; 0x15c <Interface_init>

	LM629_HW_Reset();
     ee8:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LM629_HW_Reset>
	MCU_init();	   // MCU 초기화
     eec:	0e 94 76 00 	call	0xec	; 0xec <MCU_init>
	Motor_init();  // Motor 드라이버 초기화
     ef0:	0e 94 58 10 	call	0x20b0	; 0x20b0 <Motor_init>

	Sensor_init();
     ef4:	0e 94 97 12 	call	0x252e	; 0x252e <Sensor_init>

	DDRB=0x0F;		//LED, BZ, SW
     ef8:	8f e0       	ldi	r24, 0x0F	; 15
     efa:	87 bb       	out	0x17, r24	; 23
	TCCR1A=0x00;	// Clock value: 14.400 kHz
     efc:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x05;
     efe:	85 e0       	ldi	r24, 0x05	; 5
     f00:	8e bd       	out	0x2e, r24	; 46

	TCNT1H=0xFF;	//0.01초
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	8d bd       	out	0x2d, r24	; 45
	TCNT1L=0x70;
     f06:	80 e7       	ldi	r24, 0x70	; 112
     f08:	8c bd       	out	0x2c, r24	; 44
	TIMSK=0x04;
     f0a:	84 e0       	ldi	r24, 0x04	; 4
     f0c:	87 bf       	out	0x37, r24	; 55

	sei();
     f0e:	78 94       	sei
//5. 회전이동거리 (회전 각도)
//6. 정지 시점
//7. 회전정지시점
int color = 0;
int camera = 0;
		if(SW1)
     f10:	b4 99       	sbic	0x16, 4	; 22
     f12:	2f c4       	rjmp	.+2142   	; 0x1772 <__stack+0x673>
		{
			
			wall_follow(2,1);
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	61 e0       	ldi	r22, 0x01	; 1
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	0e 94 18 07 	call	0xe30	; 0xe30 <wall_follow>
			Turn_and_Drive(0,150,-100,150,90,0,0);
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	cb 01       	movw	r24, r22
     f26:	46 e9       	ldi	r20, 0x96	; 150
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	2c e9       	ldi	r18, 0x9C	; 156
     f2c:	3f ef       	ldi	r19, 0xFF	; 255
     f2e:	06 e9       	ldi	r16, 0x96	; 150
     f30:	10 e0       	ldi	r17, 0x00	; 0
     f32:	ba e5       	ldi	r27, 0x5A	; 90
     f34:	eb 2e       	mov	r14, r27
     f36:	f1 2c       	mov	r15, r1
     f38:	cc 24       	eor	r12, r12
     f3a:	dd 24       	eor	r13, r13
     f3c:	aa 24       	eor	r10, r10
     f3e:	bb 24       	eor	r11, r11
     f40:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			non_Holonomic(0,0,0);
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	cb 01       	movw	r24, r22
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	a9 01       	movw	r20, r18
     f50:	ee 24       	eor	r14, r14
     f52:	ff 24       	eor	r15, r15
     f54:	87 01       	movw	r16, r14
     f56:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>
			wall_follow(2,1);
     f5a:	82 e0       	ldi	r24, 0x02	; 2
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	61 e0       	ldi	r22, 0x01	; 1
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	0e 94 18 07 	call	0xe30	; 0xe30 <wall_follow>
			if(Camera_Cmd(1,102)) 	color = 1;
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	66 e6       	ldi	r22, 0x66	; 102
     f6a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Camera_Cmd>
     f6e:	88 23       	and	r24, r24
     f70:	19 f0       	breq	.+6      	; 0xf78 <main+0xa4>
     f72:	41 e0       	ldi	r20, 0x01	; 1
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <main+0xa8>
			else 					color = 2;
     f78:	42 e0       	ldi	r20, 0x02	; 2
     f7a:	50 e0       	ldi	r21, 0x00	; 0
		
			display_char(1,5,color);
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	65 e0       	ldi	r22, 0x05	; 5
     f80:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
				
			Turn_and_Drive(-90,150,-100,100,90,0,0);
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	84 eb       	ldi	r24, 0xB4	; 180
     f8a:	92 ec       	ldi	r25, 0xC2	; 194
     f8c:	46 e9       	ldi	r20, 0x96	; 150
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	2c e9       	ldi	r18, 0x9C	; 156
     f92:	3f ef       	ldi	r19, 0xFF	; 255
     f94:	04 e6       	ldi	r16, 0x64	; 100
     f96:	10 e0       	ldi	r17, 0x00	; 0
     f98:	aa e5       	ldi	r26, 0x5A	; 90
     f9a:	ea 2e       	mov	r14, r26
     f9c:	f1 2c       	mov	r15, r1
     f9e:	cc 24       	eor	r12, r12
     fa0:	dd 24       	eor	r13, r13
     fa2:	aa 24       	eor	r10, r10
     fa4:	bb 24       	eor	r11, r11
     fa6:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>

			sec = 0;
     faa:	10 92 bb 02 	sts	0x02BB, r1
     fae:	10 92 ba 02 	sts	0x02BA, r1
			
			while(sec!=500){
     fb2:	26 c0       	rjmp	.+76     	; 0x1000 <main+0x12c>
				camera = Camera_Cmd(1,102);
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	66 e6       	ldi	r22, 0x66	; 102
     fb8:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Camera_Cmd>
     fbc:	d8 2e       	mov	r13, r24
     fbe:	68 2f       	mov	r22, r24
     fc0:	70 e0       	ldi	r23, 0x00	; 0
				non_Holonomic(0,(camera-128)*1.5,0);
     fc2:	60 58       	subi	r22, 0x80	; 128
     fc4:	70 40       	sbci	r23, 0x00	; 0
     fc6:	88 27       	eor	r24, r24
     fc8:	77 fd       	sbrc	r23, 7
     fca:	80 95       	com	r24
     fcc:	98 2f       	mov	r25, r24
     fce:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 ec       	ldi	r20, 0xC0	; 192
     fd8:	5f e3       	ldi	r21, 0x3F	; 63
     fda:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
     fde:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fixsfsi>
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	cb 01       	movw	r24, r22
     fec:	ee 24       	eor	r14, r14
     fee:	ff 24       	eor	r15, r15
     ff0:	87 01       	movw	r16, r14
     ff2:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>
				display_char(0,2,camera);
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	62 e0       	ldi	r22, 0x02	; 2
     ffa:	4d 2d       	mov	r20, r13
     ffc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
				
			Turn_and_Drive(-90,150,-100,100,90,0,0);

			sec = 0;
			
			while(sec!=500){
    1000:	80 91 ba 02 	lds	r24, 0x02BA
    1004:	90 91 bb 02 	lds	r25, 0x02BB
    1008:	21 e0       	ldi	r18, 0x01	; 1
    100a:	84 3f       	cpi	r24, 0xF4	; 244
    100c:	92 07       	cpc	r25, r18
    100e:	91 f6       	brne	.-92     	; 0xfb4 <main+0xe0>
				camera = Camera_Cmd(1,102);
				non_Holonomic(0,(camera-128)*1.5,0);
				display_char(0,2,camera);
			}

			Turn_and_Drive(0,150,0,225,0,0,0);
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	cb 01       	movw	r24, r22
    1016:	46 e9       	ldi	r20, 0x96	; 150
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	01 ee       	ldi	r16, 0xE1	; 225
    1020:	10 e0       	ldi	r17, 0x00	; 0
    1022:	ee 24       	eor	r14, r14
    1024:	ff 24       	eor	r15, r15
    1026:	cc 24       	eor	r12, r12
    1028:	dd 24       	eor	r13, r13
    102a:	aa 24       	eor	r10, r10
    102c:	bb 24       	eor	r11, r11
    102e:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(270,150,0,70,0,0,0);
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	87 e8       	ldi	r24, 0x87	; 135
    1038:	93 e4       	ldi	r25, 0x43	; 67
    103a:	46 e9       	ldi	r20, 0x96	; 150
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	06 e4       	ldi	r16, 0x46	; 70
    1044:	10 e0       	ldi	r17, 0x00	; 0
    1046:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(0,150,0,45,0,0,0);
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	cb 01       	movw	r24, r22
    1050:	46 e9       	ldi	r20, 0x96	; 150
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	0d e2       	ldi	r16, 0x2D	; 45
    105a:	10 e0       	ldi	r17, 0x00	; 0
    105c:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(90,150,0,130,0,0,0);
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	84 eb       	ldi	r24, 0xB4	; 180
    1066:	92 e4       	ldi	r25, 0x42	; 66
    1068:	46 e9       	ldi	r20, 0x96	; 150
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	02 e8       	ldi	r16, 0x82	; 130
    1072:	10 e0       	ldi	r17, 0x00	; 0
    1074:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(180,150,0,290,0,0,0);
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	84 e3       	ldi	r24, 0x34	; 52
    107e:	93 e4       	ldi	r25, 0x43	; 67
    1080:	46 e9       	ldi	r20, 0x96	; 150
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	02 e2       	ldi	r16, 0x22	; 34
    108a:	11 e0       	ldi	r17, 0x01	; 1
    108c:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			non_Holonomic(0,0,0);
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	cb 01       	movw	r24, r22
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	a9 01       	movw	r20, r18
    109c:	ee 24       	eor	r14, r14
    109e:	ff 24       	eor	r15, r15
    10a0:	87 01       	movw	r16, r14
    10a2:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>

			////////////////////////////////////////////////////
			
			Turn_and_Drive(90,150,0,250,0,0,0);
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	84 eb       	ldi	r24, 0xB4	; 180
    10ac:	92 e4       	ldi	r25, 0x42	; 66
    10ae:	46 e9       	ldi	r20, 0x96	; 150
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	0a ef       	ldi	r16, 0xFA	; 250
    10b8:	10 e0       	ldi	r17, 0x00	; 0
    10ba:	ee 24       	eor	r14, r14
    10bc:	ff 24       	eor	r15, r15
    10be:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(0,150,0,250,0,0,0);
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	cb 01       	movw	r24, r22
    10c8:	46 e9       	ldi	r20, 0x96	; 150
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(270,150,0,115,0,0,0);
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	87 e8       	ldi	r24, 0x87	; 135
    10da:	93 e4       	ldi	r25, 0x43	; 67
    10dc:	46 e9       	ldi	r20, 0x96	; 150
    10de:	50 e0       	ldi	r21, 0x00	; 0
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	03 e7       	ldi	r16, 0x73	; 115
    10e6:	10 e0       	ldi	r17, 0x00	; 0
    10e8:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(180,150,0,180,0,0,0);
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	84 e3       	ldi	r24, 0x34	; 52
    10f2:	93 e4       	ldi	r25, 0x43	; 67
    10f4:	46 e9       	ldi	r20, 0x96	; 150
    10f6:	50 e0       	ldi	r21, 0x00	; 0
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	04 eb       	ldi	r16, 0xB4	; 180
    10fe:	10 e0       	ldi	r17, 0x00	; 0
    1100:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>

			sec = 0;
    1104:	10 92 bb 02 	sts	0x02BB, r1
    1108:	10 92 ba 02 	sts	0x02BA, r1
			while(sec!=200){
    110c:	14 c0       	rjmp	.+40     	; 0x1136 <__stack+0x37>
				camera = Camera_Cmd(2,102);
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	66 e6       	ldi	r22, 0x66	; 102
    1112:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Camera_Cmd>
    1116:	90 e0       	ldi	r25, 0x00	; 0
				non_Holonomic(0,(camera-128),0);
    1118:	80 58       	subi	r24, 0x80	; 128
    111a:	90 40       	sbci	r25, 0x00	; 0
    111c:	9c 01       	movw	r18, r24
    111e:	44 27       	eor	r20, r20
    1120:	37 fd       	sbrc	r19, 7
    1122:	40 95       	com	r20
    1124:	54 2f       	mov	r21, r20
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	cb 01       	movw	r24, r22
    112c:	ee 24       	eor	r14, r14
    112e:	ff 24       	eor	r15, r15
    1130:	87 01       	movw	r16, r14
    1132:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>
			Turn_and_Drive(0,150,0,250,0,0,0);
			Turn_and_Drive(270,150,0,115,0,0,0);
			Turn_and_Drive(180,150,0,180,0,0,0);

			sec = 0;
			while(sec!=200){
    1136:	80 91 ba 02 	lds	r24, 0x02BA
    113a:	90 91 bb 02 	lds	r25, 0x02BB
    113e:	88 3c       	cpi	r24, 0xC8	; 200
    1140:	91 05       	cpc	r25, r1
    1142:	29 f7       	brne	.-54     	; 0x110e <__stack+0xf>
				camera = Camera_Cmd(2,102);
				non_Holonomic(0,(camera-128),0);
			}
			Turn_and_Drive(0,150,0,225,0,0,0);
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	cb 01       	movw	r24, r22
    114a:	46 e9       	ldi	r20, 0x96	; 150
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	01 ee       	ldi	r16, 0xE1	; 225
    1154:	10 e0       	ldi	r17, 0x00	; 0
    1156:	ee 24       	eor	r14, r14
    1158:	ff 24       	eor	r15, r15
    115a:	cc 24       	eor	r12, r12
    115c:	dd 24       	eor	r13, r13
    115e:	aa 24       	eor	r10, r10
    1160:	bb 24       	eor	r11, r11
    1162:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			non_Holonomic(0,0,0);
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	cb 01       	movw	r24, r22
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	a9 01       	movw	r20, r18
    1172:	07 c0       	rjmp	.+14     	; 0x1182 <__stack+0x83>
			//////////////////////////1츠응 /////////////////

			while(psd_value[8]<100){
				non_Holonomic(0,175,0);
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	cb 01       	movw	r24, r22
    117a:	2f ea       	ldi	r18, 0xAF	; 175
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	ee 24       	eor	r14, r14
    1184:	ff 24       	eor	r15, r15
    1186:	87 01       	movw	r16, r14
    1188:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>
			}
			Turn_and_Drive(0,150,0,225,0,0,0);
			non_Holonomic(0,0,0);
			//////////////////////////1츠응 /////////////////

			while(psd_value[8]<100){
    118c:	80 91 02 03 	lds	r24, 0x0302
    1190:	84 36       	cpi	r24, 0x64	; 100
    1192:	80 f3       	brcs	.-32     	; 0x1174 <__stack+0x75>
				non_Holonomic(0,175,0);
			}

			Turn_and_Drive(0,150,0,350,0,0,0);
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	cb 01       	movw	r24, r22
    119a:	46 e9       	ldi	r20, 0x96	; 150
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	0e e5       	ldi	r16, 0x5E	; 94
    11a4:	11 e0       	ldi	r17, 0x01	; 1
    11a6:	ee 24       	eor	r14, r14
    11a8:	ff 24       	eor	r15, r15
    11aa:	cc 24       	eor	r12, r12
    11ac:	dd 24       	eor	r13, r13
    11ae:	aa 24       	eor	r10, r10
    11b0:	bb 24       	eor	r11, r11
    11b2:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(0,150,40,330,90,0,0);
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	cb 01       	movw	r24, r22
    11bc:	46 e9       	ldi	r20, 0x96	; 150
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	28 e2       	ldi	r18, 0x28	; 40
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	0a e4       	ldi	r16, 0x4A	; 74
    11c6:	11 e0       	ldi	r17, 0x01	; 1
    11c8:	fa e5       	ldi	r31, 0x5A	; 90
    11ca:	ef 2e       	mov	r14, r31
    11cc:	f1 2c       	mov	r15, r1
    11ce:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(0,150,30,550,90,0,0);
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	cb 01       	movw	r24, r22
    11d8:	46 e9       	ldi	r20, 0x96	; 150
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	2e e1       	ldi	r18, 0x1E	; 30
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	06 e2       	ldi	r16, 0x26	; 38
    11e2:	12 e0       	ldi	r17, 0x02	; 2
    11e4:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			non_Holonomic(0,0,0);
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	cb 01       	movw	r24, r22
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	a9 01       	movw	r20, r18
    11f4:	ee 24       	eor	r14, r14
    11f6:	ff 24       	eor	r15, r15
    11f8:	87 01       	movw	r16, r14
    11fa:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>

			
			/////////////////////돌기 ////////////////////

			wall_follow(2,1);
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	0e 94 18 07 	call	0xe30	; 0xe30 <wall_follow>

			if(Camera_Cmd(2,102)) 	color = 2;
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	66 e6       	ldi	r22, 0x66	; 102
    120e:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Camera_Cmd>
    1212:	88 23       	and	r24, r24
    1214:	19 f0       	breq	.+6      	; 0x121c <__stack+0x11d>
    1216:	42 e0       	ldi	r20, 0x02	; 2
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <__stack+0x121>
			else 					color = 1;
    121c:	41 e0       	ldi	r20, 0x01	; 1
    121e:	50 e0       	ldi	r21, 0x00	; 0
			display_char(1,0,color);
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>

			Turn_and_Drive(180,150,-50,200,90,0,0);
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	84 e3       	ldi	r24, 0x34	; 52
    122e:	93 e4       	ldi	r25, 0x43	; 67
    1230:	46 e9       	ldi	r20, 0x96	; 150
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	2e ec       	ldi	r18, 0xCE	; 206
    1236:	3f ef       	ldi	r19, 0xFF	; 255
    1238:	08 ec       	ldi	r16, 0xC8	; 200
    123a:	10 e0       	ldi	r17, 0x00	; 0
    123c:	ea e5       	ldi	r30, 0x5A	; 90
    123e:	ee 2e       	mov	r14, r30
    1240:	f1 2c       	mov	r15, r1
    1242:	cc 24       	eor	r12, r12
    1244:	dd 24       	eor	r13, r13
    1246:	aa 24       	eor	r10, r10
    1248:	bb 24       	eor	r11, r11
    124a:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			sec = 0;
    124e:	10 92 bb 02 	sts	0x02BB, r1
    1252:	10 92 ba 02 	sts	0x02BA, r1
			while(sec!=500){
    1256:	26 c0       	rjmp	.+76     	; 0x12a4 <__stack+0x1a5>
				camera = Camera_Cmd(2,102);
    1258:	82 e0       	ldi	r24, 0x02	; 2
    125a:	66 e6       	ldi	r22, 0x66	; 102
    125c:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Camera_Cmd>
    1260:	d8 2e       	mov	r13, r24
    1262:	68 2f       	mov	r22, r24
    1264:	70 e0       	ldi	r23, 0x00	; 0
				non_Holonomic(0,(camera-128)*1.5,0);
    1266:	60 58       	subi	r22, 0x80	; 128
    1268:	70 40       	sbci	r23, 0x00	; 0
    126a:	88 27       	eor	r24, r24
    126c:	77 fd       	sbrc	r23, 7
    126e:	80 95       	com	r24
    1270:	98 2f       	mov	r25, r24
    1272:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 ec       	ldi	r20, 0xC0	; 192
    127c:	5f e3       	ldi	r21, 0x3F	; 63
    127e:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1282:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fixsfsi>
    1286:	9b 01       	movw	r18, r22
    1288:	ac 01       	movw	r20, r24
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	cb 01       	movw	r24, r22
    1290:	ee 24       	eor	r14, r14
    1292:	ff 24       	eor	r15, r15
    1294:	87 01       	movw	r16, r14
    1296:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>
				display_char(0,2,camera);
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	62 e0       	ldi	r22, 0x02	; 2
    129e:	4d 2d       	mov	r20, r13
    12a0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
			else 					color = 1;
			display_char(1,0,color);

			Turn_and_Drive(180,150,-50,200,90,0,0);
			sec = 0;
			while(sec!=500){
    12a4:	80 91 ba 02 	lds	r24, 0x02BA
    12a8:	90 91 bb 02 	lds	r25, 0x02BB
    12ac:	21 e0       	ldi	r18, 0x01	; 1
    12ae:	84 3f       	cpi	r24, 0xF4	; 244
    12b0:	92 07       	cpc	r25, r18
    12b2:	91 f6       	brne	.-92     	; 0x1258 <__stack+0x159>
				camera = Camera_Cmd(2,102);
				non_Holonomic(0,(camera-128)*1.5,0);
				display_char(0,2,camera);
			}
			
			Turn_and_Drive(0,150,0,325,0,0,0);
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	cb 01       	movw	r24, r22
    12ba:	46 e9       	ldi	r20, 0x96	; 150
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	05 e4       	ldi	r16, 0x45	; 69
    12c4:	11 e0       	ldi	r17, 0x01	; 1
    12c6:	ee 24       	eor	r14, r14
    12c8:	ff 24       	eor	r15, r15
    12ca:	cc 24       	eor	r12, r12
    12cc:	dd 24       	eor	r13, r13
    12ce:	aa 24       	eor	r10, r10
    12d0:	bb 24       	eor	r11, r11
    12d2:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(270,150,0,70,0,0,0);
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	87 e8       	ldi	r24, 0x87	; 135
    12dc:	93 e4       	ldi	r25, 0x43	; 67
    12de:	46 e9       	ldi	r20, 0x96	; 150
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	06 e4       	ldi	r16, 0x46	; 70
    12e8:	10 e0       	ldi	r17, 0x00	; 0
    12ea:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(0,150,0,45,0,0,0);
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	cb 01       	movw	r24, r22
    12f4:	46 e9       	ldi	r20, 0x96	; 150
    12f6:	50 e0       	ldi	r21, 0x00	; 0
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	0d e2       	ldi	r16, 0x2D	; 45
    12fe:	10 e0       	ldi	r17, 0x00	; 0
    1300:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(90,150,0,130,0,0,0);
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	70 e0       	ldi	r23, 0x00	; 0
    1308:	84 eb       	ldi	r24, 0xB4	; 180
    130a:	92 e4       	ldi	r25, 0x42	; 66
    130c:	46 e9       	ldi	r20, 0x96	; 150
    130e:	50 e0       	ldi	r21, 0x00	; 0
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	02 e8       	ldi	r16, 0x82	; 130
    1316:	10 e0       	ldi	r17, 0x00	; 0
    1318:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(180,150,0,290,0,0,0);
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	84 e3       	ldi	r24, 0x34	; 52
    1322:	93 e4       	ldi	r25, 0x43	; 67
    1324:	46 e9       	ldi	r20, 0x96	; 150
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	02 e2       	ldi	r16, 0x22	; 34
    132e:	11 e0       	ldi	r17, 0x01	; 1
    1330:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			
			while(sec!=500){
    1334:	26 c0       	rjmp	.+76     	; 0x1382 <__stack+0x283>
				camera = Camera_Cmd(1,102);
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	66 e6       	ldi	r22, 0x66	; 102
    133a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Camera_Cmd>
    133e:	d8 2e       	mov	r13, r24
    1340:	68 2f       	mov	r22, r24
    1342:	70 e0       	ldi	r23, 0x00	; 0
				non_Holonomic(0,(camera-128)*1.8,0);
    1344:	60 58       	subi	r22, 0x80	; 128
    1346:	70 40       	sbci	r23, 0x00	; 0
    1348:	88 27       	eor	r24, r24
    134a:	77 fd       	sbrc	r23, 7
    134c:	80 95       	com	r24
    134e:	98 2f       	mov	r25, r24
    1350:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
    1354:	26 e6       	ldi	r18, 0x66	; 102
    1356:	36 e6       	ldi	r19, 0x66	; 102
    1358:	46 ee       	ldi	r20, 0xE6	; 230
    135a:	5f e3       	ldi	r21, 0x3F	; 63
    135c:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1360:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fixsfsi>
    1364:	9b 01       	movw	r18, r22
    1366:	ac 01       	movw	r20, r24
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	cb 01       	movw	r24, r22
    136e:	ee 24       	eor	r14, r14
    1370:	ff 24       	eor	r15, r15
    1372:	87 01       	movw	r16, r14
    1374:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>
				display_char(0,2,camera);
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	62 e0       	ldi	r22, 0x02	; 2
    137c:	4d 2d       	mov	r20, r13
    137e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
			Turn_and_Drive(270,150,0,70,0,0,0);
			Turn_and_Drive(0,150,0,45,0,0,0);
			Turn_and_Drive(90,150,0,130,0,0,0);
			Turn_and_Drive(180,150,0,290,0,0,0);
			
			while(sec!=500){
    1382:	80 91 ba 02 	lds	r24, 0x02BA
    1386:	90 91 bb 02 	lds	r25, 0x02BB
    138a:	21 e0       	ldi	r18, 0x01	; 1
    138c:	84 3f       	cpi	r24, 0xF4	; 244
    138e:	92 07       	cpc	r25, r18
    1390:	91 f6       	brne	.-92     	; 0x1336 <__stack+0x237>
				camera = Camera_Cmd(1,102);
				non_Holonomic(0,(camera-128)*1.8,0);
				display_char(0,2,camera);
			}

			Turn_and_Drive(90,150,0,100,0,0,0);
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	84 eb       	ldi	r24, 0xB4	; 180
    1398:	92 e4       	ldi	r25, 0x42	; 66
    139a:	46 e9       	ldi	r20, 0x96	; 150
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	04 e6       	ldi	r16, 0x64	; 100
    13a4:	10 e0       	ldi	r17, 0x00	; 0
    13a6:	ee 24       	eor	r14, r14
    13a8:	ff 24       	eor	r15, r15
    13aa:	cc 24       	eor	r12, r12
    13ac:	dd 24       	eor	r13, r13
    13ae:	aa 24       	eor	r10, r10
    13b0:	bb 24       	eor	r11, r11
    13b2:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(0,150,0,300,0,0,0);
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	cb 01       	movw	r24, r22
    13bc:	46 e9       	ldi	r20, 0x96	; 150
    13be:	50 e0       	ldi	r21, 0x00	; 0
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	0c e2       	ldi	r16, 0x2C	; 44
    13c6:	11 e0       	ldi	r17, 0x01	; 1
    13c8:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(270,150,0,170,0,0,0);
    13cc:	60 e0       	ldi	r22, 0x00	; 0
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	87 e8       	ldi	r24, 0x87	; 135
    13d2:	93 e4       	ldi	r25, 0x43	; 67
    13d4:	46 e9       	ldi	r20, 0x96	; 150
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	0a ea       	ldi	r16, 0xAA	; 170
    13de:	10 e0       	ldi	r17, 0x00	; 0
    13e0:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(180,150,0,180,0,0,0);
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	84 e3       	ldi	r24, 0x34	; 52
    13ea:	93 e4       	ldi	r25, 0x43	; 67
    13ec:	46 e9       	ldi	r20, 0x96	; 150
    13ee:	50 e0       	ldi	r21, 0x00	; 0
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	04 eb       	ldi	r16, 0xB4	; 180
    13f6:	10 e0       	ldi	r17, 0x00	; 0
    13f8:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			while(sec!=500){
    13fc:	26 c0       	rjmp	.+76     	; 0x144a <__stack+0x34b>
				camera = Camera_Cmd(1,102);
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	66 e6       	ldi	r22, 0x66	; 102
    1402:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Camera_Cmd>
    1406:	d8 2e       	mov	r13, r24
    1408:	68 2f       	mov	r22, r24
    140a:	70 e0       	ldi	r23, 0x00	; 0
				non_Holonomic(0,(camera-128)*1.8,0);
    140c:	60 58       	subi	r22, 0x80	; 128
    140e:	70 40       	sbci	r23, 0x00	; 0
    1410:	88 27       	eor	r24, r24
    1412:	77 fd       	sbrc	r23, 7
    1414:	80 95       	com	r24
    1416:	98 2f       	mov	r25, r24
    1418:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
    141c:	26 e6       	ldi	r18, 0x66	; 102
    141e:	36 e6       	ldi	r19, 0x66	; 102
    1420:	46 ee       	ldi	r20, 0xE6	; 230
    1422:	5f e3       	ldi	r21, 0x3F	; 63
    1424:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1428:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fixsfsi>
    142c:	9b 01       	movw	r18, r22
    142e:	ac 01       	movw	r20, r24
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	cb 01       	movw	r24, r22
    1436:	ee 24       	eor	r14, r14
    1438:	ff 24       	eor	r15, r15
    143a:	87 01       	movw	r16, r14
    143c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>
				display_char(0,2,camera);
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	62 e0       	ldi	r22, 0x02	; 2
    1444:	4d 2d       	mov	r20, r13
    1446:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>

			Turn_and_Drive(90,150,0,100,0,0,0);
			Turn_and_Drive(0,150,0,300,0,0,0);
			Turn_and_Drive(270,150,0,170,0,0,0);
			Turn_and_Drive(180,150,0,180,0,0,0);
			while(sec!=500){
    144a:	80 91 ba 02 	lds	r24, 0x02BA
    144e:	90 91 bb 02 	lds	r25, 0x02BB
    1452:	21 e0       	ldi	r18, 0x01	; 1
    1454:	84 3f       	cpi	r24, 0xF4	; 244
    1456:	92 07       	cpc	r25, r18
    1458:	91 f6       	brne	.-92     	; 0x13fe <__stack+0x2ff>
				camera = Camera_Cmd(1,102);
				non_Holonomic(0,(camera-128)*1.8,0);
				display_char(0,2,camera);
			}
			Turn_and_Drive(0,150,0,175,0,0,0);
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	cb 01       	movw	r24, r22
    1460:	46 e9       	ldi	r20, 0x96	; 150
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	0f ea       	ldi	r16, 0xAF	; 175
    146a:	10 e0       	ldi	r17, 0x00	; 0
    146c:	ee 24       	eor	r14, r14
    146e:	ff 24       	eor	r15, r15
    1470:	cc 24       	eor	r12, r12
    1472:	dd 24       	eor	r13, r13
    1474:	aa 24       	eor	r10, r10
    1476:	bb 24       	eor	r11, r11
    1478:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>

			non_Holonomic(0,0,0);
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	cb 01       	movw	r24, r22
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	a9 01       	movw	r20, r18
    1488:	ee 24       	eor	r14, r14
    148a:	ff 24       	eor	r15, r15
    148c:	87 01       	movw	r16, r14
    148e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>
			
			////////////////////////////2버언///////////////////


			Turn_and_Drive(180,200,0,50,0,0,0);
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	84 e3       	ldi	r24, 0x34	; 52
    1498:	93 e4       	ldi	r25, 0x43	; 67
    149a:	48 ec       	ldi	r20, 0xC8	; 200
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	02 e3       	ldi	r16, 0x32	; 50
    14a4:	10 e0       	ldi	r17, 0x00	; 0
    14a6:	ee 24       	eor	r14, r14
    14a8:	ff 24       	eor	r15, r15
    14aa:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(180,200,-75,200,90,0,0);
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	84 e3       	ldi	r24, 0x34	; 52
    14b4:	93 e4       	ldi	r25, 0x43	; 67
    14b6:	48 ec       	ldi	r20, 0xC8	; 200
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	25 eb       	ldi	r18, 0xB5	; 181
    14bc:	3f ef       	ldi	r19, 0xFF	; 255
    14be:	08 ec       	ldi	r16, 0xC8	; 200
    14c0:	10 e0       	ldi	r17, 0x00	; 0
    14c2:	ba e5       	ldi	r27, 0x5A	; 90
    14c4:	eb 2e       	mov	r14, r27
    14c6:	f1 2c       	mov	r15, r1
    14c8:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(0,300,75,400,90,0,0);
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	cb 01       	movw	r24, r22
    14d2:	4c e2       	ldi	r20, 0x2C	; 44
    14d4:	51 e0       	ldi	r21, 0x01	; 1
    14d6:	2b e4       	ldi	r18, 0x4B	; 75
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	00 e9       	ldi	r16, 0x90	; 144
    14dc:	11 e0       	ldi	r17, 0x01	; 1
    14de:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			
			Turn_and_Drive(0,200,0,800,0,0,0);
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	cb 01       	movw	r24, r22
    14e8:	48 ec       	ldi	r20, 0xC8	; 200
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	00 e2       	ldi	r16, 0x20	; 32
    14f2:	13 e0       	ldi	r17, 0x03	; 3
    14f4:	ee 24       	eor	r14, r14
    14f6:	ff 24       	eor	r15, r15
    14f8:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			
			Turn_and_Drive(0,150,-55,500,90,0,0);
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	cb 01       	movw	r24, r22
    1502:	46 e9       	ldi	r20, 0x96	; 150
    1504:	50 e0       	ldi	r21, 0x00	; 0
    1506:	29 ec       	ldi	r18, 0xC9	; 201
    1508:	3f ef       	ldi	r19, 0xFF	; 255
    150a:	04 ef       	ldi	r16, 0xF4	; 244
    150c:	11 e0       	ldi	r17, 0x01	; 1
    150e:	aa e5       	ldi	r26, 0x5A	; 90
    1510:	ea 2e       	mov	r14, r26
    1512:	f1 2c       	mov	r15, r1
    1514:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(-30,150,0,200,0,0,0);
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	80 ef       	ldi	r24, 0xF0	; 240
    151e:	91 ec       	ldi	r25, 0xC1	; 193
    1520:	46 e9       	ldi	r20, 0x96	; 150
    1522:	50 e0       	ldi	r21, 0x00	; 0
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	08 ec       	ldi	r16, 0xC8	; 200
    152a:	10 e0       	ldi	r17, 0x00	; 0
    152c:	ee 24       	eor	r14, r14
    152e:	ff 24       	eor	r15, r15
    1530:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			wall_follow(1,1);
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	61 e0       	ldi	r22, 0x01	; 1
    153a:	70 e0       	ldi	r23, 0x00	; 0
    153c:	0e 94 18 07 	call	0xe30	; 0xe30 <wall_follow>
			
			if(Camera_Cmd(2,102)) 	color = 2;
    1540:	82 e0       	ldi	r24, 0x02	; 2
    1542:	66 e6       	ldi	r22, 0x66	; 102
    1544:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Camera_Cmd>
    1548:	88 23       	and	r24, r24
    154a:	19 f0       	breq	.+6      	; 0x1552 <__stack+0x453>
    154c:	42 e0       	ldi	r20, 0x02	; 2
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <__stack+0x457>
			else 					color = 1;
    1552:	41 e0       	ldi	r20, 0x01	; 1
    1554:	50 e0       	ldi	r21, 0x00	; 0
			display_char(1,0,color);
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>

			Turn_and_Drive(180,200,0,325,0,0,0);
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	84 e3       	ldi	r24, 0x34	; 52
    1564:	93 e4       	ldi	r25, 0x43	; 67
    1566:	48 ec       	ldi	r20, 0xC8	; 200
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	05 e4       	ldi	r16, 0x45	; 69
    1570:	11 e0       	ldi	r17, 0x01	; 1
    1572:	ee 24       	eor	r14, r14
    1574:	ff 24       	eor	r15, r15
    1576:	cc 24       	eor	r12, r12
    1578:	dd 24       	eor	r13, r13
    157a:	aa 24       	eor	r10, r10
    157c:	bb 24       	eor	r11, r11
    157e:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			
			between_fix();
    1582:	0e 94 ef 06 	call	0xdde	; 0xdde <between_fix>
			Turn_and_Drive(180,150,0,300,0,0,0);
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	84 e3       	ldi	r24, 0x34	; 52
    158c:	93 e4       	ldi	r25, 0x43	; 67
    158e:	46 e9       	ldi	r20, 0x96	; 150
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	0c e2       	ldi	r16, 0x2C	; 44
    1598:	11 e0       	ldi	r17, 0x01	; 1
    159a:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(90,150,0,385,0,0,0);
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	84 eb       	ldi	r24, 0xB4	; 180
    15a4:	92 e4       	ldi	r25, 0x42	; 66
    15a6:	46 e9       	ldi	r20, 0x96	; 150
    15a8:	50 e0       	ldi	r21, 0x00	; 0
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	01 e8       	ldi	r16, 0x81	; 129
    15b0:	11 e0       	ldi	r17, 0x01	; 1
    15b2:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(180,150,0,200,0,0,0);
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	84 e3       	ldi	r24, 0x34	; 52
    15bc:	93 e4       	ldi	r25, 0x43	; 67
    15be:	46 e9       	ldi	r20, 0x96	; 150
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	08 ec       	ldi	r16, 0xC8	; 200
    15c8:	10 e0       	ldi	r17, 0x00	; 0
    15ca:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Camera_Set(15);	
    15ce:	8f e0       	ldi	r24, 0x0F	; 15
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 94 76 12 	call	0x24ec	; 0x24ec <Camera_Set>
			sec = 0;
    15d6:	10 92 bb 02 	sts	0x02BB, r1
    15da:	10 92 ba 02 	sts	0x02BA, r1
			while(sec!=300){
    15de:	26 c0       	rjmp	.+76     	; 0x162c <__stack+0x52d>
				camera = Camera_Cmd(1,102);
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	66 e6       	ldi	r22, 0x66	; 102
    15e4:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Camera_Cmd>
    15e8:	d8 2e       	mov	r13, r24
    15ea:	68 2f       	mov	r22, r24
    15ec:	70 e0       	ldi	r23, 0x00	; 0
				non_Holonomic(0,(camera-128)*1.8,0);
    15ee:	60 58       	subi	r22, 0x80	; 128
    15f0:	70 40       	sbci	r23, 0x00	; 0
    15f2:	88 27       	eor	r24, r24
    15f4:	77 fd       	sbrc	r23, 7
    15f6:	80 95       	com	r24
    15f8:	98 2f       	mov	r25, r24
    15fa:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
    15fe:	26 e6       	ldi	r18, 0x66	; 102
    1600:	36 e6       	ldi	r19, 0x66	; 102
    1602:	46 ee       	ldi	r20, 0xE6	; 230
    1604:	5f e3       	ldi	r21, 0x3F	; 63
    1606:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    160a:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fixsfsi>
    160e:	9b 01       	movw	r18, r22
    1610:	ac 01       	movw	r20, r24
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	cb 01       	movw	r24, r22
    1618:	ee 24       	eor	r14, r14
    161a:	ff 24       	eor	r15, r15
    161c:	87 01       	movw	r16, r14
    161e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>
				display_char(0,2,camera);
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	62 e0       	ldi	r22, 0x02	; 2
    1626:	4d 2d       	mov	r20, r13
    1628:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
			Turn_and_Drive(180,150,0,300,0,0,0);
			Turn_and_Drive(90,150,0,385,0,0,0);
			Turn_and_Drive(180,150,0,200,0,0,0);
			Camera_Set(15);	
			sec = 0;
			while(sec!=300){
    162c:	80 91 ba 02 	lds	r24, 0x02BA
    1630:	90 91 bb 02 	lds	r25, 0x02BB
    1634:	21 e0       	ldi	r18, 0x01	; 1
    1636:	8c 32       	cpi	r24, 0x2C	; 44
    1638:	92 07       	cpc	r25, r18
    163a:	91 f6       	brne	.-92     	; 0x15e0 <__stack+0x4e1>
				camera = Camera_Cmd(1,102);
				non_Holonomic(0,(camera-128)*1.8,0);
				display_char(0,2,camera);
			}
			Turn_and_Drive(0,150,0,190,0,0,0);
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	cb 01       	movw	r24, r22
    1642:	46 e9       	ldi	r20, 0x96	; 150
    1644:	50 e0       	ldi	r21, 0x00	; 0
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	0e eb       	ldi	r16, 0xBE	; 190
    164c:	10 e0       	ldi	r17, 0x00	; 0
    164e:	ee 24       	eor	r14, r14
    1650:	ff 24       	eor	r15, r15
    1652:	cc 24       	eor	r12, r12
    1654:	dd 24       	eor	r13, r13
    1656:	aa 24       	eor	r10, r10
    1658:	bb 24       	eor	r11, r11
    165a:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(180,150,0,155,0,0,0);
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	84 e3       	ldi	r24, 0x34	; 52
    1664:	93 e4       	ldi	r25, 0x43	; 67
    1666:	46 e9       	ldi	r20, 0x96	; 150
    1668:	50 e0       	ldi	r21, 0x00	; 0
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	0b e9       	ldi	r16, 0x9B	; 155
    1670:	10 e0       	ldi	r17, 0x00	; 0
    1672:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(90,150,0,240,0,0,0);
    1676:	60 e0       	ldi	r22, 0x00	; 0
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	84 eb       	ldi	r24, 0xB4	; 180
    167c:	92 e4       	ldi	r25, 0x42	; 66
    167e:	46 e9       	ldi	r20, 0x96	; 150
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	00 ef       	ldi	r16, 0xF0	; 240
    1688:	10 e0       	ldi	r17, 0x00	; 0
    168a:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(0,150,0,125,0,0,0);
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	cb 01       	movw	r24, r22
    1694:	46 e9       	ldi	r20, 0x96	; 150
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	0d e7       	ldi	r16, 0x7D	; 125
    169e:	10 e0       	ldi	r17, 0x00	; 0
    16a0:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(270,150,0,150,0,0,0);
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	87 e8       	ldi	r24, 0x87	; 135
    16aa:	93 e4       	ldi	r25, 0x43	; 67
    16ac:	46 e9       	ldi	r20, 0x96	; 150
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	06 e9       	ldi	r16, 0x96	; 150
    16b6:	10 e0       	ldi	r17, 0x00	; 0
    16b8:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(180,150,0,100,0,0,0);
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	84 e3       	ldi	r24, 0x34	; 52
    16c2:	93 e4       	ldi	r25, 0x43	; 67
    16c4:	46 e9       	ldi	r20, 0x96	; 150
    16c6:	50 e0       	ldi	r21, 0x00	; 0
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	04 e6       	ldi	r16, 0x64	; 100
    16ce:	10 e0       	ldi	r17, 0x00	; 0
    16d0:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			
			sec = 0;
    16d4:	10 92 bb 02 	sts	0x02BB, r1
    16d8:	10 92 ba 02 	sts	0x02BA, r1
			while(sec!=300){
    16dc:	26 c0       	rjmp	.+76     	; 0x172a <__stack+0x62b>
				camera = Camera_Cmd(2,102);
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	66 e6       	ldi	r22, 0x66	; 102
    16e2:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Camera_Cmd>
    16e6:	d8 2e       	mov	r13, r24
    16e8:	68 2f       	mov	r22, r24
    16ea:	70 e0       	ldi	r23, 0x00	; 0
				non_Holonomic(0,(camera-128)*1.8,0);
    16ec:	60 58       	subi	r22, 0x80	; 128
    16ee:	70 40       	sbci	r23, 0x00	; 0
    16f0:	88 27       	eor	r24, r24
    16f2:	77 fd       	sbrc	r23, 7
    16f4:	80 95       	com	r24
    16f6:	98 2f       	mov	r25, r24
    16f8:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
    16fc:	26 e6       	ldi	r18, 0x66	; 102
    16fe:	36 e6       	ldi	r19, 0x66	; 102
    1700:	46 ee       	ldi	r20, 0xE6	; 230
    1702:	5f e3       	ldi	r21, 0x3F	; 63
    1704:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1708:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fixsfsi>
    170c:	9b 01       	movw	r18, r22
    170e:	ac 01       	movw	r20, r24
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	cb 01       	movw	r24, r22
    1716:	ee 24       	eor	r14, r14
    1718:	ff 24       	eor	r15, r15
    171a:	87 01       	movw	r16, r14
    171c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>
				display_char(0,2,camera);
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	62 e0       	ldi	r22, 0x02	; 2
    1724:	4d 2d       	mov	r20, r13
    1726:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
			Turn_and_Drive(0,150,0,125,0,0,0);
			Turn_and_Drive(270,150,0,150,0,0,0);
			Turn_and_Drive(180,150,0,100,0,0,0);
			
			sec = 0;
			while(sec!=300){
    172a:	80 91 ba 02 	lds	r24, 0x02BA
    172e:	90 91 bb 02 	lds	r25, 0x02BB
    1732:	21 e0       	ldi	r18, 0x01	; 1
    1734:	8c 32       	cpi	r24, 0x2C	; 44
    1736:	92 07       	cpc	r25, r18
    1738:	91 f6       	brne	.-92     	; 0x16de <__stack+0x5df>
				camera = Camera_Cmd(2,102);
				non_Holonomic(0,(camera-128)*1.8,0);
				display_char(0,2,camera);
			}
			Turn_and_Drive(0,150,0,220,0,0,0);
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	cb 01       	movw	r24, r22
    1740:	46 e9       	ldi	r20, 0x96	; 150
    1742:	50 e0       	ldi	r21, 0x00	; 0
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	0c ed       	ldi	r16, 0xDC	; 220
    174a:	10 e0       	ldi	r17, 0x00	; 0
    174c:	ee 24       	eor	r14, r14
    174e:	ff 24       	eor	r15, r15
    1750:	cc 24       	eor	r12, r12
    1752:	dd 24       	eor	r13, r13
    1754:	aa 24       	eor	r10, r10
    1756:	bb 24       	eor	r11, r11
    1758:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			non_Holonomic(0,0,0);
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	cb 01       	movw	r24, r22
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	a9 01       	movw	r20, r18
    1768:	ee 24       	eor	r14, r14
    176a:	ff 24       	eor	r15, r15
    176c:	87 01       	movw	r16, r14
    176e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>
//4. 이동거리
//5. 회전이동거리 (회전 각도)
//6. 정지 시점
//7. 회전정지시점

		if(SW2)
    1772:	b5 99       	sbic	0x16, 5	; 22
    1774:	07 c0       	rjmp	.+14     	; 0x1784 <__stack+0x685>
			wall_follow(2,1);
			non_Holonomic(0,0,0);
		*/	
			
			while(1){
				display_char(0,0,psd_value[0]);
    1776:	40 91 fa 02 	lds	r20, 0x02FA
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	60 e0       	ldi	r22, 0x00	; 0
    177e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
    1782:	f9 cf       	rjmp	.-14     	; 0x1776 <__stack+0x677>

		}
//1.각도	2.속도	3.거리	4.감속지점	
//////////////////////////////////////////////////

		if(SW3)
    1784:	b6 99       	sbic	0x16, 6	; 22
    1786:	c4 cb       	rjmp	.-2168   	; 0xf10 <main+0x3c>
//3. 회전이동속도 마이너스 일경우 왼쪽회전
//4. 이동거리
//5. 회전이동거리 (회전 각도)
//6. 정지 시점
//7. 회전정지시점
			Turn_and_Drive(180,200,0,50,0,0,0);
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	84 e3       	ldi	r24, 0x34	; 52
    178e:	93 e4       	ldi	r25, 0x43	; 67
    1790:	48 ec       	ldi	r20, 0xC8	; 200
    1792:	50 e0       	ldi	r21, 0x00	; 0
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	02 e3       	ldi	r16, 0x32	; 50
    179a:	10 e0       	ldi	r17, 0x00	; 0
    179c:	ee 24       	eor	r14, r14
    179e:	ff 24       	eor	r15, r15
    17a0:	cc 24       	eor	r12, r12
    17a2:	dd 24       	eor	r13, r13
    17a4:	aa 24       	eor	r10, r10
    17a6:	bb 24       	eor	r11, r11
    17a8:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(180,200,-75,200,90,0,0);
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	84 e3       	ldi	r24, 0x34	; 52
    17b2:	93 e4       	ldi	r25, 0x43	; 67
    17b4:	48 ec       	ldi	r20, 0xC8	; 200
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	25 eb       	ldi	r18, 0xB5	; 181
    17ba:	3f ef       	ldi	r19, 0xFF	; 255
    17bc:	08 ec       	ldi	r16, 0xC8	; 200
    17be:	10 e0       	ldi	r17, 0x00	; 0
    17c0:	fa e5       	ldi	r31, 0x5A	; 90
    17c2:	ef 2e       	mov	r14, r31
    17c4:	f1 2c       	mov	r15, r1
    17c6:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(0,300,75,400,90,0,0);
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	70 e0       	ldi	r23, 0x00	; 0
    17ce:	cb 01       	movw	r24, r22
    17d0:	4c e2       	ldi	r20, 0x2C	; 44
    17d2:	51 e0       	ldi	r21, 0x01	; 1
    17d4:	2b e4       	ldi	r18, 0x4B	; 75
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	00 e9       	ldi	r16, 0x90	; 144
    17da:	11 e0       	ldi	r17, 0x01	; 1
    17dc:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			
			Turn_and_Drive(0,200,0,800,0,0,0);
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	cb 01       	movw	r24, r22
    17e6:	48 ec       	ldi	r20, 0xC8	; 200
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	00 e2       	ldi	r16, 0x20	; 32
    17f0:	13 e0       	ldi	r17, 0x03	; 3
    17f2:	ee 24       	eor	r14, r14
    17f4:	ff 24       	eor	r15, r15
    17f6:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			
			Turn_and_Drive(0,150,-55,500,90,0,0);
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	cb 01       	movw	r24, r22
    1800:	46 e9       	ldi	r20, 0x96	; 150
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	29 ec       	ldi	r18, 0xC9	; 201
    1806:	3f ef       	ldi	r19, 0xFF	; 255
    1808:	04 ef       	ldi	r16, 0xF4	; 244
    180a:	11 e0       	ldi	r17, 0x01	; 1
    180c:	ea e5       	ldi	r30, 0x5A	; 90
    180e:	ee 2e       	mov	r14, r30
    1810:	f1 2c       	mov	r15, r1
    1812:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(-30,150,0,200,0,0,0);
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	80 ef       	ldi	r24, 0xF0	; 240
    181c:	91 ec       	ldi	r25, 0xC1	; 193
    181e:	46 e9       	ldi	r20, 0x96	; 150
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	08 ec       	ldi	r16, 0xC8	; 200
    1828:	10 e0       	ldi	r17, 0x00	; 0
    182a:	ee 24       	eor	r14, r14
    182c:	ff 24       	eor	r15, r15
    182e:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			wall_follow(1,1);
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	61 e0       	ldi	r22, 0x01	; 1
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	0e 94 18 07 	call	0xe30	; 0xe30 <wall_follow>
			
			if(Camera_Cmd(2,102)) 	color = 2;
    183e:	82 e0       	ldi	r24, 0x02	; 2
    1840:	66 e6       	ldi	r22, 0x66	; 102
    1842:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Camera_Cmd>
    1846:	88 23       	and	r24, r24
    1848:	19 f0       	breq	.+6      	; 0x1850 <__stack+0x751>
    184a:	42 e0       	ldi	r20, 0x02	; 2
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <__stack+0x755>
			else 					color = 1;
    1850:	41 e0       	ldi	r20, 0x01	; 1
    1852:	50 e0       	ldi	r21, 0x00	; 0
			display_char(1,0,color);
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>

			Turn_and_Drive(180,200,0,325,0,0,0);
    185c:	60 e0       	ldi	r22, 0x00	; 0
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	84 e3       	ldi	r24, 0x34	; 52
    1862:	93 e4       	ldi	r25, 0x43	; 67
    1864:	48 ec       	ldi	r20, 0xC8	; 200
    1866:	50 e0       	ldi	r21, 0x00	; 0
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	05 e4       	ldi	r16, 0x45	; 69
    186e:	11 e0       	ldi	r17, 0x01	; 1
    1870:	ee 24       	eor	r14, r14
    1872:	ff 24       	eor	r15, r15
    1874:	cc 24       	eor	r12, r12
    1876:	dd 24       	eor	r13, r13
    1878:	aa 24       	eor	r10, r10
    187a:	bb 24       	eor	r11, r11
    187c:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			
			between_fix();
    1880:	0e 94 ef 06 	call	0xdde	; 0xdde <between_fix>
			Turn_and_Drive(180,150,0,300,0,0,0);
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	84 e3       	ldi	r24, 0x34	; 52
    188a:	93 e4       	ldi	r25, 0x43	; 67
    188c:	46 e9       	ldi	r20, 0x96	; 150
    188e:	50 e0       	ldi	r21, 0x00	; 0
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	0c e2       	ldi	r16, 0x2C	; 44
    1896:	11 e0       	ldi	r17, 0x01	; 1
    1898:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(90,150,0,385,0,0,0);
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	84 eb       	ldi	r24, 0xB4	; 180
    18a2:	92 e4       	ldi	r25, 0x42	; 66
    18a4:	46 e9       	ldi	r20, 0x96	; 150
    18a6:	50 e0       	ldi	r21, 0x00	; 0
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	01 e8       	ldi	r16, 0x81	; 129
    18ae:	11 e0       	ldi	r17, 0x01	; 1
    18b0:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(180,150,0,200,0,0,0);
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	84 e3       	ldi	r24, 0x34	; 52
    18ba:	93 e4       	ldi	r25, 0x43	; 67
    18bc:	46 e9       	ldi	r20, 0x96	; 150
    18be:	50 e0       	ldi	r21, 0x00	; 0
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	08 ec       	ldi	r16, 0xC8	; 200
    18c6:	10 e0       	ldi	r17, 0x00	; 0
    18c8:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Camera_Set(15);	
    18cc:	8f e0       	ldi	r24, 0x0F	; 15
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0e 94 76 12 	call	0x24ec	; 0x24ec <Camera_Set>
			sec = 0;
    18d4:	10 92 bb 02 	sts	0x02BB, r1
    18d8:	10 92 ba 02 	sts	0x02BA, r1
			while(sec!=300){
    18dc:	26 c0       	rjmp	.+76     	; 0x192a <__stack+0x82b>
				camera = Camera_Cmd(1,102);
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	66 e6       	ldi	r22, 0x66	; 102
    18e2:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Camera_Cmd>
    18e6:	d8 2e       	mov	r13, r24
    18e8:	68 2f       	mov	r22, r24
    18ea:	70 e0       	ldi	r23, 0x00	; 0
				non_Holonomic(0,(camera-128)*1.8,0);
    18ec:	60 58       	subi	r22, 0x80	; 128
    18ee:	70 40       	sbci	r23, 0x00	; 0
    18f0:	88 27       	eor	r24, r24
    18f2:	77 fd       	sbrc	r23, 7
    18f4:	80 95       	com	r24
    18f6:	98 2f       	mov	r25, r24
    18f8:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
    18fc:	26 e6       	ldi	r18, 0x66	; 102
    18fe:	36 e6       	ldi	r19, 0x66	; 102
    1900:	46 ee       	ldi	r20, 0xE6	; 230
    1902:	5f e3       	ldi	r21, 0x3F	; 63
    1904:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1908:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fixsfsi>
    190c:	9b 01       	movw	r18, r22
    190e:	ac 01       	movw	r20, r24
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	cb 01       	movw	r24, r22
    1916:	ee 24       	eor	r14, r14
    1918:	ff 24       	eor	r15, r15
    191a:	87 01       	movw	r16, r14
    191c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>
				display_char(0,2,camera);
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	62 e0       	ldi	r22, 0x02	; 2
    1924:	4d 2d       	mov	r20, r13
    1926:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
			Turn_and_Drive(180,150,0,300,0,0,0);
			Turn_and_Drive(90,150,0,385,0,0,0);
			Turn_and_Drive(180,150,0,200,0,0,0);
			Camera_Set(15);	
			sec = 0;
			while(sec!=300){
    192a:	80 91 ba 02 	lds	r24, 0x02BA
    192e:	90 91 bb 02 	lds	r25, 0x02BB
    1932:	21 e0       	ldi	r18, 0x01	; 1
    1934:	8c 32       	cpi	r24, 0x2C	; 44
    1936:	92 07       	cpc	r25, r18
    1938:	91 f6       	brne	.-92     	; 0x18de <__stack+0x7df>
				camera = Camera_Cmd(1,102);
				non_Holonomic(0,(camera-128)*1.8,0);
				display_char(0,2,camera);
			}
			Turn_and_Drive(0,150,0,180,0,0,0);
    193a:	60 e0       	ldi	r22, 0x00	; 0
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	cb 01       	movw	r24, r22
    1940:	46 e9       	ldi	r20, 0x96	; 150
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	04 eb       	ldi	r16, 0xB4	; 180
    194a:	10 e0       	ldi	r17, 0x00	; 0
    194c:	ee 24       	eor	r14, r14
    194e:	ff 24       	eor	r15, r15
    1950:	cc 24       	eor	r12, r12
    1952:	dd 24       	eor	r13, r13
    1954:	aa 24       	eor	r10, r10
    1956:	bb 24       	eor	r11, r11
    1958:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(180,150,0,155,0,0,0);
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	84 e3       	ldi	r24, 0x34	; 52
    1962:	93 e4       	ldi	r25, 0x43	; 67
    1964:	46 e9       	ldi	r20, 0x96	; 150
    1966:	50 e0       	ldi	r21, 0x00	; 0
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	0b e9       	ldi	r16, 0x9B	; 155
    196e:	10 e0       	ldi	r17, 0x00	; 0
    1970:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(90,150,0,240,0,0,0);
    1974:	60 e0       	ldi	r22, 0x00	; 0
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	84 eb       	ldi	r24, 0xB4	; 180
    197a:	92 e4       	ldi	r25, 0x42	; 66
    197c:	46 e9       	ldi	r20, 0x96	; 150
    197e:	50 e0       	ldi	r21, 0x00	; 0
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	00 ef       	ldi	r16, 0xF0	; 240
    1986:	10 e0       	ldi	r17, 0x00	; 0
    1988:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(0,150,0,80,0,0,0);
    198c:	60 e0       	ldi	r22, 0x00	; 0
    198e:	70 e0       	ldi	r23, 0x00	; 0
    1990:	cb 01       	movw	r24, r22
    1992:	46 e9       	ldi	r20, 0x96	; 150
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	00 e5       	ldi	r16, 0x50	; 80
    199c:	10 e0       	ldi	r17, 0x00	; 0
    199e:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(270,150,0,150,0,0,0);
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	70 e0       	ldi	r23, 0x00	; 0
    19a6:	87 e8       	ldi	r24, 0x87	; 135
    19a8:	93 e4       	ldi	r25, 0x43	; 67
    19aa:	46 e9       	ldi	r20, 0x96	; 150
    19ac:	50 e0       	ldi	r21, 0x00	; 0
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	06 e9       	ldi	r16, 0x96	; 150
    19b4:	10 e0       	ldi	r17, 0x00	; 0
    19b6:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			Turn_and_Drive(180,150,0,80,0,0,0);
    19ba:	60 e0       	ldi	r22, 0x00	; 0
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	84 e3       	ldi	r24, 0x34	; 52
    19c0:	93 e4       	ldi	r25, 0x43	; 67
    19c2:	46 e9       	ldi	r20, 0x96	; 150
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	00 e5       	ldi	r16, 0x50	; 80
    19cc:	10 e0       	ldi	r17, 0x00	; 0
    19ce:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			
			sec = 0;
    19d2:	10 92 bb 02 	sts	0x02BB, r1
    19d6:	10 92 ba 02 	sts	0x02BA, r1
			while(sec!=300){
    19da:	26 c0       	rjmp	.+76     	; 0x1a28 <__stack+0x929>
				camera = Camera_Cmd(2,102);
    19dc:	82 e0       	ldi	r24, 0x02	; 2
    19de:	66 e6       	ldi	r22, 0x66	; 102
    19e0:	0e 94 79 12 	call	0x24f2	; 0x24f2 <Camera_Cmd>
    19e4:	d8 2e       	mov	r13, r24
    19e6:	68 2f       	mov	r22, r24
    19e8:	70 e0       	ldi	r23, 0x00	; 0
				non_Holonomic(0,(camera-128)*1.8,0);
    19ea:	60 58       	subi	r22, 0x80	; 128
    19ec:	70 40       	sbci	r23, 0x00	; 0
    19ee:	88 27       	eor	r24, r24
    19f0:	77 fd       	sbrc	r23, 7
    19f2:	80 95       	com	r24
    19f4:	98 2f       	mov	r25, r24
    19f6:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
    19fa:	26 e6       	ldi	r18, 0x66	; 102
    19fc:	36 e6       	ldi	r19, 0x66	; 102
    19fe:	46 ee       	ldi	r20, 0xE6	; 230
    1a00:	5f e3       	ldi	r21, 0x3F	; 63
    1a02:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1a06:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fixsfsi>
    1a0a:	9b 01       	movw	r18, r22
    1a0c:	ac 01       	movw	r20, r24
    1a0e:	60 e0       	ldi	r22, 0x00	; 0
    1a10:	70 e0       	ldi	r23, 0x00	; 0
    1a12:	cb 01       	movw	r24, r22
    1a14:	ee 24       	eor	r14, r14
    1a16:	ff 24       	eor	r15, r15
    1a18:	87 01       	movw	r16, r14
    1a1a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>
				display_char(0,2,camera);
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	62 e0       	ldi	r22, 0x02	; 2
    1a22:	4d 2d       	mov	r20, r13
    1a24:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
			Turn_and_Drive(0,150,0,80,0,0,0);
			Turn_and_Drive(270,150,0,150,0,0,0);
			Turn_and_Drive(180,150,0,80,0,0,0);
			
			sec = 0;
			while(sec!=300){
    1a28:	80 91 ba 02 	lds	r24, 0x02BA
    1a2c:	90 91 bb 02 	lds	r25, 0x02BB
    1a30:	21 e0       	ldi	r18, 0x01	; 1
    1a32:	8c 32       	cpi	r24, 0x2C	; 44
    1a34:	92 07       	cpc	r25, r18
    1a36:	91 f6       	brne	.-92     	; 0x19dc <__stack+0x8dd>
				camera = Camera_Cmd(2,102);
				non_Holonomic(0,(camera-128)*1.8,0);
				display_char(0,2,camera);
			}
			Turn_and_Drive(0,150,0,290,0,0,0);
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	46 e9       	ldi	r20, 0x96	; 150
    1a40:	50 e0       	ldi	r21, 0x00	; 0
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	02 e2       	ldi	r16, 0x22	; 34
    1a48:	11 e0       	ldi	r17, 0x01	; 1
    1a4a:	ee 24       	eor	r14, r14
    1a4c:	ff 24       	eor	r15, r15
    1a4e:	cc 24       	eor	r12, r12
    1a50:	dd 24       	eor	r13, r13
    1a52:	aa 24       	eor	r10, r10
    1a54:	bb 24       	eor	r11, r11
    1a56:	0e 94 a5 03 	call	0x74a	; 0x74a <Turn_and_Drive>
			non_Holonomic(0,0,0);
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	cb 01       	movw	r24, r22
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	a9 01       	movw	r20, r18
    1a66:	ee 24       	eor	r14, r14
    1a68:	ff 24       	eor	r15, r15
    1a6a:	87 01       	movw	r16, r14
    1a6c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>
    1a70:	4f ca       	rjmp	.-2914   	; 0xf10 <main+0x3c>

00001a72 <Holonomic_psd>:
		if(disMD>=distance) break;
		else if(disMD>=stop) next_speed=50;
	}
}

void Holonomic_psd(int sensor,int length,int speed){
    1a72:	ef 92       	push	r14
    1a74:	ff 92       	push	r15
    1a76:	0f 93       	push	r16
    1a78:	1f 93       	push	r17
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	eb 01       	movw	r28, r22
    1a80:	8a 01       	movw	r16, r20
	while(psd_value[sensor]<length){
    1a82:	2a ef       	ldi	r18, 0xFA	; 250
    1a84:	e2 2e       	mov	r14, r18
    1a86:	22 e0       	ldi	r18, 0x02	; 2
    1a88:	f2 2e       	mov	r15, r18
    1a8a:	e8 0e       	add	r14, r24
    1a8c:	f9 1e       	adc	r15, r25
    1a8e:	07 c0       	rjmp	.+14     	; 0x1a9e <Holonomic_psd+0x2c>
		HolonomicW(0,speed,0);
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	b8 01       	movw	r22, r16
    1a96:	40 e0       	ldi	r20, 0x00	; 0
    1a98:	50 e0       	ldi	r21, 0x00	; 0
    1a9a:	0e 94 97 01 	call	0x32e	; 0x32e <HolonomicW>
		else if(disMD>=stop) next_speed=50;
	}
}

void Holonomic_psd(int sensor,int length,int speed){
	while(psd_value[sensor]<length){
    1a9e:	f7 01       	movw	r30, r14
    1aa0:	80 81       	ld	r24, Z
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	8c 17       	cp	r24, r28
    1aa6:	9d 07       	cpc	r25, r29
    1aa8:	9c f3       	brlt	.-26     	; 0x1a90 <Holonomic_psd+0x1e>
		HolonomicW(0,speed,0);
	}
	non_Holonomic(0,0,0);
    1aaa:	60 e0       	ldi	r22, 0x00	; 0
    1aac:	70 e0       	ldi	r23, 0x00	; 0
    1aae:	cb 01       	movw	r24, r22
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	a9 01       	movw	r20, r18
    1ab6:	ee 24       	eor	r14, r14
    1ab8:	ff 24       	eor	r15, r15
    1aba:	87 01       	movw	r16, r14
    1abc:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <non_Holonomic>
}
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	1f 91       	pop	r17
    1ac6:	0f 91       	pop	r16
    1ac8:	ff 90       	pop	r15
    1aca:	ef 90       	pop	r14
    1acc:	08 95       	ret

00001ace <__vector_14>:
}



ISR (TIMER1_OVF_vect)
{
    1ace:	1f 92       	push	r1
    1ad0:	0f 92       	push	r0
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	0f 92       	push	r0
    1ad6:	0b b6       	in	r0, 0x3b	; 59
    1ad8:	0f 92       	push	r0
    1ada:	11 24       	eor	r1, r1
    1adc:	ef 92       	push	r14
    1ade:	ff 92       	push	r15
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	2f 93       	push	r18
    1ae6:	3f 93       	push	r19
    1ae8:	4f 93       	push	r20
    1aea:	5f 93       	push	r21
    1aec:	6f 93       	push	r22
    1aee:	7f 93       	push	r23
    1af0:	8f 93       	push	r24
    1af2:	9f 93       	push	r25
    1af4:	af 93       	push	r26
    1af6:	bf 93       	push	r27
    1af8:	ef 93       	push	r30
    1afa:	ff 93       	push	r31
	TCNT1H=0xFF; TCNT1L=0x70; //0.01초
    1afc:	8f ef       	ldi	r24, 0xFF	; 255
    1afe:	8d bd       	out	0x2d, r24	; 45
    1b00:	80 e7       	ldi	r24, 0x70	; 112
    1b02:	8c bd       	out	0x2c, r24	; 44
	++sec;
    1b04:	80 91 ba 02 	lds	r24, 0x02BA
    1b08:	90 91 bb 02 	lds	r25, 0x02BB
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	90 93 bb 02 	sts	0x02BB, r25
    1b12:	80 93 ba 02 	sts	0x02BA, r24
	
	disMD+=speed*0.01;
    1b16:	e0 90 d8 02 	lds	r14, 0x02D8
    1b1a:	f0 90 d9 02 	lds	r15, 0x02D9
    1b1e:	00 91 da 02 	lds	r16, 0x02DA
    1b22:	10 91 db 02 	lds	r17, 0x02DB
    1b26:	60 91 bc 02 	lds	r22, 0x02BC
    1b2a:	70 91 bd 02 	lds	r23, 0x02BD
    1b2e:	80 91 be 02 	lds	r24, 0x02BE
    1b32:	90 91 bf 02 	lds	r25, 0x02BF
    1b36:	2a e0       	ldi	r18, 0x0A	; 10
    1b38:	37 ed       	ldi	r19, 0xD7	; 215
    1b3a:	43 e2       	ldi	r20, 0x23	; 35
    1b3c:	5c e3       	ldi	r21, 0x3C	; 60
    1b3e:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1b42:	9b 01       	movw	r18, r22
    1b44:	ac 01       	movw	r20, r24
    1b46:	c8 01       	movw	r24, r16
    1b48:	b7 01       	movw	r22, r14
    1b4a:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
    1b4e:	9b 01       	movw	r18, r22
    1b50:	ac 01       	movw	r20, r24
    1b52:	20 93 d8 02 	sts	0x02D8, r18
    1b56:	30 93 d9 02 	sts	0x02D9, r19
    1b5a:	40 93 da 02 	sts	0x02DA, r20
    1b5e:	50 93 db 02 	sts	0x02DB, r21
	disW+=speedW*0.01;
    1b62:	e0 90 d4 02 	lds	r14, 0x02D4
    1b66:	f0 90 d5 02 	lds	r15, 0x02D5
    1b6a:	00 91 d6 02 	lds	r16, 0x02D6
    1b6e:	10 91 d7 02 	lds	r17, 0x02D7
    1b72:	60 91 e4 02 	lds	r22, 0x02E4
    1b76:	70 91 e5 02 	lds	r23, 0x02E5
    1b7a:	80 91 e6 02 	lds	r24, 0x02E6
    1b7e:	90 91 e7 02 	lds	r25, 0x02E7
    1b82:	2a e0       	ldi	r18, 0x0A	; 10
    1b84:	37 ed       	ldi	r19, 0xD7	; 215
    1b86:	43 e2       	ldi	r20, 0x23	; 35
    1b88:	5c e3       	ldi	r21, 0x3C	; 60
    1b8a:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1b8e:	9b 01       	movw	r18, r22
    1b90:	ac 01       	movw	r20, r24
    1b92:	c8 01       	movw	r24, r16
    1b94:	b7 01       	movw	r22, r14
    1b96:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
    1b9a:	9b 01       	movw	r18, r22
    1b9c:	ac 01       	movw	r20, r24
    1b9e:	20 93 d4 02 	sts	0x02D4, r18
    1ba2:	30 93 d5 02 	sts	0x02D5, r19
    1ba6:	40 93 d6 02 	sts	0x02D6, r20
    1baa:	50 93 d7 02 	sts	0x02D7, r21
	disX+=(speedX*0.01);
    1bae:	e0 90 cc 02 	lds	r14, 0x02CC
    1bb2:	f0 90 cd 02 	lds	r15, 0x02CD
    1bb6:	00 91 ce 02 	lds	r16, 0x02CE
    1bba:	10 91 cf 02 	lds	r17, 0x02CF
    1bbe:	60 91 dc 02 	lds	r22, 0x02DC
    1bc2:	70 91 dd 02 	lds	r23, 0x02DD
    1bc6:	80 91 de 02 	lds	r24, 0x02DE
    1bca:	90 91 df 02 	lds	r25, 0x02DF
    1bce:	2a e0       	ldi	r18, 0x0A	; 10
    1bd0:	37 ed       	ldi	r19, 0xD7	; 215
    1bd2:	43 e2       	ldi	r20, 0x23	; 35
    1bd4:	5c e3       	ldi	r21, 0x3C	; 60
    1bd6:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1bda:	9b 01       	movw	r18, r22
    1bdc:	ac 01       	movw	r20, r24
    1bde:	c8 01       	movw	r24, r16
    1be0:	b7 01       	movw	r22, r14
    1be2:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
    1be6:	9b 01       	movw	r18, r22
    1be8:	ac 01       	movw	r20, r24
    1bea:	20 93 cc 02 	sts	0x02CC, r18
    1bee:	30 93 cd 02 	sts	0x02CD, r19
    1bf2:	40 93 ce 02 	sts	0x02CE, r20
    1bf6:	50 93 cf 02 	sts	0x02CF, r21
	disY+=(speedY*0.01);
    1bfa:	e0 90 d0 02 	lds	r14, 0x02D0
    1bfe:	f0 90 d1 02 	lds	r15, 0x02D1
    1c02:	00 91 d2 02 	lds	r16, 0x02D2
    1c06:	10 91 d3 02 	lds	r17, 0x02D3
    1c0a:	60 91 e0 02 	lds	r22, 0x02E0
    1c0e:	70 91 e1 02 	lds	r23, 0x02E1
    1c12:	80 91 e2 02 	lds	r24, 0x02E2
    1c16:	90 91 e3 02 	lds	r25, 0x02E3
    1c1a:	2a e0       	ldi	r18, 0x0A	; 10
    1c1c:	37 ed       	ldi	r19, 0xD7	; 215
    1c1e:	43 e2       	ldi	r20, 0x23	; 35
    1c20:	5c e3       	ldi	r21, 0x3C	; 60
    1c22:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1c26:	9b 01       	movw	r18, r22
    1c28:	ac 01       	movw	r20, r24
    1c2a:	c8 01       	movw	r24, r16
    1c2c:	b7 01       	movw	r22, r14
    1c2e:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
    1c32:	9b 01       	movw	r18, r22
    1c34:	ac 01       	movw	r20, r24
    1c36:	20 93 d0 02 	sts	0x02D0, r18
    1c3a:	30 93 d1 02 	sts	0x02D1, r19
    1c3e:	40 93 d2 02 	sts	0x02D2, r20
    1c42:	50 93 d3 02 	sts	0x02D3, r21

	if(next_speed>speed){
    1c46:	60 91 c0 02 	lds	r22, 0x02C0
    1c4a:	70 91 c1 02 	lds	r23, 0x02C1
    1c4e:	80 91 c2 02 	lds	r24, 0x02C2
    1c52:	90 91 c3 02 	lds	r25, 0x02C3
    1c56:	20 91 bc 02 	lds	r18, 0x02BC
    1c5a:	30 91 bd 02 	lds	r19, 0x02BD
    1c5e:	40 91 be 02 	lds	r20, 0x02BE
    1c62:	50 91 bf 02 	lds	r21, 0x02BF
    1c66:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__gtsf2>
    1c6a:	18 16       	cp	r1, r24
    1c6c:	94 f5       	brge	.+100    	; 0x1cd2 <__vector_14+0x204>
		speed+=acc;
    1c6e:	60 91 bc 02 	lds	r22, 0x02BC
    1c72:	70 91 bd 02 	lds	r23, 0x02BD
    1c76:	80 91 be 02 	lds	r24, 0x02BE
    1c7a:	90 91 bf 02 	lds	r25, 0x02BF
    1c7e:	20 91 00 01 	lds	r18, 0x0100
    1c82:	30 91 01 01 	lds	r19, 0x0101
    1c86:	40 91 02 01 	lds	r20, 0x0102
    1c8a:	50 91 03 01 	lds	r21, 0x0103
    1c8e:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
    1c92:	9b 01       	movw	r18, r22
    1c94:	ac 01       	movw	r20, r24
    1c96:	20 93 bc 02 	sts	0x02BC, r18
    1c9a:	30 93 bd 02 	sts	0x02BD, r19
    1c9e:	40 93 be 02 	sts	0x02BE, r20
    1ca2:	50 93 bf 02 	sts	0x02BF, r21
		if(next_speed<=speed)speed=next_speed;
    1ca6:	60 91 c0 02 	lds	r22, 0x02C0
    1caa:	70 91 c1 02 	lds	r23, 0x02C1
    1cae:	80 91 c2 02 	lds	r24, 0x02C2
    1cb2:	90 91 c3 02 	lds	r25, 0x02C3
    1cb6:	20 91 bc 02 	lds	r18, 0x02BC
    1cba:	30 91 bd 02 	lds	r19, 0x02BD
    1cbe:	40 91 be 02 	lds	r20, 0x02BE
    1cc2:	50 91 bf 02 	lds	r21, 0x02BF
    1cc6:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__lesf2>
    1cca:	18 16       	cp	r1, r24
    1ccc:	0c f4       	brge	.+2      	; 0x1cd0 <__vector_14+0x202>
    1cce:	55 c0       	rjmp	.+170    	; 0x1d7a <__vector_14+0x2ac>
    1cd0:	44 c0       	rjmp	.+136    	; 0x1d5a <__vector_14+0x28c>
	}
	else if(next_speed<speed){
    1cd2:	60 91 c0 02 	lds	r22, 0x02C0
    1cd6:	70 91 c1 02 	lds	r23, 0x02C1
    1cda:	80 91 c2 02 	lds	r24, 0x02C2
    1cde:	90 91 c3 02 	lds	r25, 0x02C3
    1ce2:	20 91 bc 02 	lds	r18, 0x02BC
    1ce6:	30 91 bd 02 	lds	r19, 0x02BD
    1cea:	40 91 be 02 	lds	r20, 0x02BE
    1cee:	50 91 bf 02 	lds	r21, 0x02BF
    1cf2:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__ltsf2>
    1cf6:	87 ff       	sbrs	r24, 7
    1cf8:	40 c0       	rjmp	.+128    	; 0x1d7a <__vector_14+0x2ac>
		speed-=acc;
    1cfa:	60 91 bc 02 	lds	r22, 0x02BC
    1cfe:	70 91 bd 02 	lds	r23, 0x02BD
    1d02:	80 91 be 02 	lds	r24, 0x02BE
    1d06:	90 91 bf 02 	lds	r25, 0x02BF
    1d0a:	20 91 00 01 	lds	r18, 0x0100
    1d0e:	30 91 01 01 	lds	r19, 0x0101
    1d12:	40 91 02 01 	lds	r20, 0x0102
    1d16:	50 91 03 01 	lds	r21, 0x0103
    1d1a:	0e 94 8d 14 	call	0x291a	; 0x291a <__subsf3>
    1d1e:	9b 01       	movw	r18, r22
    1d20:	ac 01       	movw	r20, r24
    1d22:	20 93 bc 02 	sts	0x02BC, r18
    1d26:	30 93 bd 02 	sts	0x02BD, r19
    1d2a:	40 93 be 02 	sts	0x02BE, r20
    1d2e:	50 93 bf 02 	sts	0x02BF, r21
		if(next_speed>=speed)speed=next_speed;
    1d32:	60 91 c0 02 	lds	r22, 0x02C0
    1d36:	70 91 c1 02 	lds	r23, 0x02C1
    1d3a:	80 91 c2 02 	lds	r24, 0x02C2
    1d3e:	90 91 c3 02 	lds	r25, 0x02C3
    1d42:	20 91 bc 02 	lds	r18, 0x02BC
    1d46:	30 91 bd 02 	lds	r19, 0x02BD
    1d4a:	40 91 be 02 	lds	r20, 0x02BE
    1d4e:	50 91 bf 02 	lds	r21, 0x02BF
    1d52:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__gesf2>
    1d56:	87 fd       	sbrc	r24, 7
    1d58:	10 c0       	rjmp	.+32     	; 0x1d7a <__vector_14+0x2ac>
    1d5a:	80 91 c0 02 	lds	r24, 0x02C0
    1d5e:	90 91 c1 02 	lds	r25, 0x02C1
    1d62:	a0 91 c2 02 	lds	r26, 0x02C2
    1d66:	b0 91 c3 02 	lds	r27, 0x02C3
    1d6a:	80 93 bc 02 	sts	0x02BC, r24
    1d6e:	90 93 bd 02 	sts	0x02BD, r25
    1d72:	a0 93 be 02 	sts	0x02BE, r26
    1d76:	b0 93 bf 02 	sts	0x02BF, r27
	}
	if(next_wspeed>wspeed){
    1d7a:	60 91 c8 02 	lds	r22, 0x02C8
    1d7e:	70 91 c9 02 	lds	r23, 0x02C9
    1d82:	80 91 ca 02 	lds	r24, 0x02CA
    1d86:	90 91 cb 02 	lds	r25, 0x02CB
    1d8a:	20 91 c4 02 	lds	r18, 0x02C4
    1d8e:	30 91 c5 02 	lds	r19, 0x02C5
    1d92:	40 91 c6 02 	lds	r20, 0x02C6
    1d96:	50 91 c7 02 	lds	r21, 0x02C7
    1d9a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__gtsf2>
    1d9e:	18 16       	cp	r1, r24
    1da0:	94 f5       	brge	.+100    	; 0x1e06 <__vector_14+0x338>
		wspeed+=accW;
    1da2:	60 91 c4 02 	lds	r22, 0x02C4
    1da6:	70 91 c5 02 	lds	r23, 0x02C5
    1daa:	80 91 c6 02 	lds	r24, 0x02C6
    1dae:	90 91 c7 02 	lds	r25, 0x02C7
    1db2:	20 91 04 01 	lds	r18, 0x0104
    1db6:	30 91 05 01 	lds	r19, 0x0105
    1dba:	40 91 06 01 	lds	r20, 0x0106
    1dbe:	50 91 07 01 	lds	r21, 0x0107
    1dc2:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__addsf3>
    1dc6:	9b 01       	movw	r18, r22
    1dc8:	ac 01       	movw	r20, r24
    1dca:	20 93 c4 02 	sts	0x02C4, r18
    1dce:	30 93 c5 02 	sts	0x02C5, r19
    1dd2:	40 93 c6 02 	sts	0x02C6, r20
    1dd6:	50 93 c7 02 	sts	0x02C7, r21
		if(next_wspeed<=wspeed)wspeed=next_wspeed;
    1dda:	60 91 c8 02 	lds	r22, 0x02C8
    1dde:	70 91 c9 02 	lds	r23, 0x02C9
    1de2:	80 91 ca 02 	lds	r24, 0x02CA
    1de6:	90 91 cb 02 	lds	r25, 0x02CB
    1dea:	20 91 c4 02 	lds	r18, 0x02C4
    1dee:	30 91 c5 02 	lds	r19, 0x02C5
    1df2:	40 91 c6 02 	lds	r20, 0x02C6
    1df6:	50 91 c7 02 	lds	r21, 0x02C7
    1dfa:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__lesf2>
    1dfe:	18 16       	cp	r1, r24
    1e00:	0c f4       	brge	.+2      	; 0x1e04 <__vector_14+0x336>
    1e02:	55 c0       	rjmp	.+170    	; 0x1eae <__vector_14+0x3e0>
    1e04:	44 c0       	rjmp	.+136    	; 0x1e8e <__vector_14+0x3c0>
	}
	else if(next_wspeed<wspeed){
    1e06:	60 91 c8 02 	lds	r22, 0x02C8
    1e0a:	70 91 c9 02 	lds	r23, 0x02C9
    1e0e:	80 91 ca 02 	lds	r24, 0x02CA
    1e12:	90 91 cb 02 	lds	r25, 0x02CB
    1e16:	20 91 c4 02 	lds	r18, 0x02C4
    1e1a:	30 91 c5 02 	lds	r19, 0x02C5
    1e1e:	40 91 c6 02 	lds	r20, 0x02C6
    1e22:	50 91 c7 02 	lds	r21, 0x02C7
    1e26:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__ltsf2>
    1e2a:	87 ff       	sbrs	r24, 7
    1e2c:	40 c0       	rjmp	.+128    	; 0x1eae <__vector_14+0x3e0>
		wspeed-=accW;
    1e2e:	60 91 c4 02 	lds	r22, 0x02C4
    1e32:	70 91 c5 02 	lds	r23, 0x02C5
    1e36:	80 91 c6 02 	lds	r24, 0x02C6
    1e3a:	90 91 c7 02 	lds	r25, 0x02C7
    1e3e:	20 91 04 01 	lds	r18, 0x0104
    1e42:	30 91 05 01 	lds	r19, 0x0105
    1e46:	40 91 06 01 	lds	r20, 0x0106
    1e4a:	50 91 07 01 	lds	r21, 0x0107
    1e4e:	0e 94 8d 14 	call	0x291a	; 0x291a <__subsf3>
    1e52:	9b 01       	movw	r18, r22
    1e54:	ac 01       	movw	r20, r24
    1e56:	20 93 c4 02 	sts	0x02C4, r18
    1e5a:	30 93 c5 02 	sts	0x02C5, r19
    1e5e:	40 93 c6 02 	sts	0x02C6, r20
    1e62:	50 93 c7 02 	sts	0x02C7, r21
		if(next_wspeed>=wspeed)wspeed=next_wspeed;
    1e66:	60 91 c8 02 	lds	r22, 0x02C8
    1e6a:	70 91 c9 02 	lds	r23, 0x02C9
    1e6e:	80 91 ca 02 	lds	r24, 0x02CA
    1e72:	90 91 cb 02 	lds	r25, 0x02CB
    1e76:	20 91 c4 02 	lds	r18, 0x02C4
    1e7a:	30 91 c5 02 	lds	r19, 0x02C5
    1e7e:	40 91 c6 02 	lds	r20, 0x02C6
    1e82:	50 91 c7 02 	lds	r21, 0x02C7
    1e86:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__gesf2>
    1e8a:	87 fd       	sbrc	r24, 7
    1e8c:	10 c0       	rjmp	.+32     	; 0x1eae <__vector_14+0x3e0>
    1e8e:	80 91 c8 02 	lds	r24, 0x02C8
    1e92:	90 91 c9 02 	lds	r25, 0x02C9
    1e96:	a0 91 ca 02 	lds	r26, 0x02CA
    1e9a:	b0 91 cb 02 	lds	r27, 0x02CB
    1e9e:	80 93 c4 02 	sts	0x02C4, r24
    1ea2:	90 93 c5 02 	sts	0x02C5, r25
    1ea6:	a0 93 c6 02 	sts	0x02C6, r26
    1eaa:	b0 93 c7 02 	sts	0x02C7, r27
	}
}
    1eae:	ff 91       	pop	r31
    1eb0:	ef 91       	pop	r30
    1eb2:	bf 91       	pop	r27
    1eb4:	af 91       	pop	r26
    1eb6:	9f 91       	pop	r25
    1eb8:	8f 91       	pop	r24
    1eba:	7f 91       	pop	r23
    1ebc:	6f 91       	pop	r22
    1ebe:	5f 91       	pop	r21
    1ec0:	4f 91       	pop	r20
    1ec2:	3f 91       	pop	r19
    1ec4:	2f 91       	pop	r18
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	ff 90       	pop	r15
    1ecc:	ef 90       	pop	r14
    1ece:	0f 90       	pop	r0
    1ed0:	0b be       	out	0x3b, r0	; 59
    1ed2:	0f 90       	pop	r0
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	0f 90       	pop	r0
    1ed8:	1f 90       	pop	r1
    1eda:	18 95       	reti

00001edc <ReadData>:
unsigned char ReadData(unsigned char motor)
{
    unsigned char data;

    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	fc 01       	movw	r30, r24
    1ee0:	b0 96       	adiw	r30, 0x20	; 32
    1ee2:	fe 2f       	mov	r31, r30
    1ee4:	ee 27       	eor	r30, r30
    1ee6:	20 81       	ld	r18, Z
    1ee8:	20 93 f6 02 	sts	0x02F6, r18
    1eec:	20 fd       	sbrc	r18, 0
    1eee:	fb cf       	rjmp	.-10     	; 0x1ee6 <ReadData+0xa>
    // 데이터 입력
    data = MOTOR_DATA(motor);
    1ef0:	88 96       	adiw	r24, 0x28	; 40
    1ef2:	b8 2f       	mov	r27, r24
    1ef4:	aa 27       	eor	r26, r26
    1ef6:	8c 91       	ld	r24, X

	CHECK_BUSY(motor, status);
    1ef8:	90 81       	ld	r25, Z
    1efa:	90 93 f6 02 	sts	0x02F6, r25
    1efe:	90 fd       	sbrc	r25, 0
    1f00:	fb cf       	rjmp	.-10     	; 0x1ef8 <ReadData+0x1c>
    // 입력된 데이터 리턴
    return data;
}    
    1f02:	08 95       	ret

00001f04 <WriteCommand>:
// Return    : 없음

void WriteCommand(unsigned char motor, unsigned char cmd)
{
    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	80 96       	adiw	r24, 0x20	; 32
    1f08:	f8 2f       	mov	r31, r24
    1f0a:	ee 27       	eor	r30, r30
    1f0c:	80 81       	ld	r24, Z
    1f0e:	80 93 f6 02 	sts	0x02F6, r24
    1f12:	80 fd       	sbrc	r24, 0
    1f14:	fb cf       	rjmp	.-10     	; 0x1f0c <WriteCommand+0x8>
    // 커맨드 출력
    MOTOR_CMD(motor) = cmd;
    1f16:	60 83       	st	Z, r22

	CHECK_BUSY(motor, status);
    1f18:	80 81       	ld	r24, Z
    1f1a:	80 93 f6 02 	sts	0x02F6, r24
    1f1e:	80 fd       	sbrc	r24, 0
    1f20:	fb cf       	rjmp	.-10     	; 0x1f18 <WriteCommand+0x14>
}
    1f22:	08 95       	ret

00001f24 <WriteDataTwoByte>:
//      data  - 쓸 데이터
// Return    : 없음
void WriteDataTwoByte(unsigned char motor, int data)
{
    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
    1f24:	a8 2f       	mov	r26, r24
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	fd 01       	movw	r30, r26
    1f2a:	b0 96       	adiw	r30, 0x20	; 32
    1f2c:	fe 2f       	mov	r31, r30
    1f2e:	ee 27       	eor	r30, r30
    1f30:	80 81       	ld	r24, Z
    1f32:	80 93 f6 02 	sts	0x02F6, r24
    1f36:	80 fd       	sbrc	r24, 0
    1f38:	fb cf       	rjmp	.-10     	; 0x1f30 <WriteDataTwoByte+0xc>
    // 2 바이트 데이터 출력
    MOTOR_DATA(motor) = (uint8_t)((data >> 8)&0xFF);
    1f3a:	98 96       	adiw	r26, 0x28	; 40
    1f3c:	ba 2f       	mov	r27, r26
    1f3e:	aa 27       	eor	r26, r26
    1f40:	87 2f       	mov	r24, r23
    1f42:	99 27       	eor	r25, r25
    1f44:	87 fd       	sbrc	r24, 7
    1f46:	9a 95       	dec	r25
    1f48:	8c 93       	st	X, r24
	CHECK_BUSY(motor, status);
    1f4a:	80 81       	ld	r24, Z
    1f4c:	80 93 f6 02 	sts	0x02F6, r24
    1f50:	80 fd       	sbrc	r24, 0
    1f52:	fb cf       	rjmp	.-10     	; 0x1f4a <WriteDataTwoByte+0x26>
    MOTOR_DATA(motor) = (uint8_t)(data&0xFF);
    1f54:	6c 93       	st	X, r22
	CHECK_BUSY(motor, status);
    1f56:	80 81       	ld	r24, Z
    1f58:	80 93 f6 02 	sts	0x02F6, r24
    1f5c:	80 fd       	sbrc	r24, 0
    1f5e:	fb cf       	rjmp	.-10     	; 0x1f56 <WriteDataTwoByte+0x32>
}
    1f60:	08 95       	ret

00001f62 <WriteDataFourByte>:
// Parameter :
//      motor - 선택할 모터
//      data  - 쓸 데이터
// Return    : 없음
void WriteDataFourByte(unsigned char motor, long data)
{
    1f62:	df 92       	push	r13
    1f64:	ef 92       	push	r14
    1f66:	ff 92       	push	r15
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	d8 2e       	mov	r13, r24
    1f6e:	7a 01       	movw	r14, r20
    1f70:	8b 01       	movw	r16, r22
    // 4 바이트의 데이터를 둘로 나누어서 WriteDataTwoByte함수를 두번 호출
    WriteDataTwoByte(motor, (int16_t)(data >> 16));
    1f72:	9b 01       	movw	r18, r22
    1f74:	55 27       	eor	r21, r21
    1f76:	37 fd       	sbrc	r19, 7
    1f78:	50 95       	com	r21
    1f7a:	45 2f       	mov	r20, r21
    1f7c:	b9 01       	movw	r22, r18
    1f7e:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <WriteDataTwoByte>
    WriteDataTwoByte(motor, (int16_t)(data));
    1f82:	8d 2d       	mov	r24, r13
    1f84:	b7 01       	movw	r22, r14
    1f86:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <WriteDataTwoByte>
}
    1f8a:	1f 91       	pop	r17
    1f8c:	0f 91       	pop	r16
    1f8e:	ff 90       	pop	r15
    1f90:	ef 90       	pop	r14
    1f92:	df 90       	pop	r13
    1f94:	08 95       	ret

00001f96 <Motor_Reset>:
// Function  : LM629를 리셋한다.
// Parameter :
//      motor - 선택할 모터
// Return    : 없음
void Motor_Reset(uint8_t motor)
{
    1f96:	1f 93       	push	r17
    1f98:	18 2f       	mov	r17, r24
    // RESET 커맨드 출력
    WriteCommand(motor, RESET);
    1f9a:	60 e0       	ldi	r22, 0x00	; 0
    1f9c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <WriteCommand>
    1fa0:	8c ec       	ldi	r24, 0xCC	; 204
    1fa2:	9c e1       	ldi	r25, 0x1C	; 28
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	f1 f7       	brne	.-4      	; 0x1fa4 <Motor_Reset+0xe>
    1fa8:	00 c0       	rjmp	.+0      	; 0x1faa <Motor_Reset+0x14>
    1faa:	00 00       	nop
    // 리셋이 완료될 때까지 최소 1.5ms이상 대기
    _delay_ms(2);
	// Morot1 인터럽트 마스크 리셋
    WriteCommand(motor, RSTI);
    1fac:	81 2f       	mov	r24, r17
    1fae:	6d e1       	ldi	r22, 0x1D	; 29
    1fb0:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <WriteCommand>
    WriteDataTwoByte(motor, 0x0000);
    1fb4:	81 2f       	mov	r24, r17
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	70 e0       	ldi	r23, 0x00	; 0
    1fba:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <WriteDataTwoByte>
}
    1fbe:	1f 91       	pop	r17
    1fc0:	08 95       	ret

00001fc2 <SetGain>:
//      kp    - P값
//      ki    - I값
//      kd    - D값
// Return    : 없음
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
{
    1fc2:	af 92       	push	r10
    1fc4:	bf 92       	push	r11
    1fc6:	cf 92       	push	r12
    1fc8:	df 92       	push	r13
    1fca:	ef 92       	push	r14
    1fcc:	ff 92       	push	r15
    1fce:	0f 93       	push	r16
    1fd0:	1f 93       	push	r17
    1fd2:	cf 93       	push	r28
    1fd4:	df 93       	push	r29
    1fd6:	f8 2e       	mov	r15, r24
    1fd8:	6b 01       	movw	r12, r22
    1fda:	ea 01       	movw	r28, r20
    1fdc:	89 01       	movw	r16, r18
//      motor - 선택할 모터
//      kp    - P값
//      ki    - I값
//      kd    - D값
// Return    : 없음
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
    1fde:	aa 24       	eor	r10, r10
    1fe0:	a3 94       	inc	r10
    1fe2:	61 15       	cp	r22, r1
    1fe4:	71 05       	cpc	r23, r1
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <SetGain+0x28>
    1fe8:	aa 24       	eor	r10, r10
    1fea:	bb 24       	eor	r11, r11
    1fec:	b3 94       	inc	r11
    1fee:	20 97       	sbiw	r28, 0x00	; 0
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <SetGain+0x32>
    1ff2:	bb 24       	eor	r11, r11
    1ff4:	ee 24       	eor	r14, r14
    1ff6:	e3 94       	inc	r14
    1ff8:	01 15       	cp	r16, r1
    1ffa:	11 05       	cpc	r17, r1
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <SetGain+0x3e>
    1ffe:	ee 24       	eor	r14, r14
	if(ki)LD_ki=1;
	else LD_ki=0;
	if(kd)LD_kd=1;
	else LD_kd=0;
	// LFIL 커맨드 출력
    WriteCommand(motor, LFIL);
    2000:	8f 2d       	mov	r24, r15
    2002:	6e e1       	ldi	r22, 0x1E	; 30
    2004:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <WriteCommand>
    // 컨트롤 워드 출력, sampling interval은 341us 고정
    WriteDataTwoByte(motor, (0x0000) | (LD_kp << 3) | (LD_ki << 2) | (LD_kd << 1)  );
    2008:	6b 2d       	mov	r22, r11
    200a:	70 e0       	ldi	r23, 0x00	; 0
    200c:	66 0f       	add	r22, r22
    200e:	77 1f       	adc	r23, r23
    2010:	66 0f       	add	r22, r22
    2012:	77 1f       	adc	r23, r23
    2014:	8a 2d       	mov	r24, r10
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	43 e0       	ldi	r20, 0x03	; 3
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	4a 95       	dec	r20
    2020:	e1 f7       	brne	.-8      	; 0x201a <SetGain+0x58>
    2022:	68 2b       	or	r22, r24
    2024:	79 2b       	or	r23, r25
    2026:	8e 2d       	mov	r24, r14
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	88 0f       	add	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	68 2b       	or	r22, r24
    2030:	79 2b       	or	r23, r25
    2032:	8f 2d       	mov	r24, r15
    2034:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <WriteDataTwoByte>
    ////////////////////////////
	// P값 출력
	if(kp)WriteDataTwoByte(motor, kp);
    2038:	aa 20       	and	r10, r10
    203a:	21 f0       	breq	.+8      	; 0x2044 <SetGain+0x82>
    203c:	8f 2d       	mov	r24, r15
    203e:	b6 01       	movw	r22, r12
    2040:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <WriteDataTwoByte>
    // I값 출력
    if(ki)WriteDataTwoByte(motor, ki);
    2044:	bb 20       	and	r11, r11
    2046:	21 f0       	breq	.+8      	; 0x2050 <SetGain+0x8e>
    2048:	8f 2d       	mov	r24, r15
    204a:	be 01       	movw	r22, r28
    204c:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <WriteDataTwoByte>
    // D값 출력
    if(kd)WriteDataTwoByte(motor, kd);
    2050:	ee 20       	and	r14, r14
    2052:	21 f0       	breq	.+8      	; 0x205c <SetGain+0x9a>
    2054:	8f 2d       	mov	r24, r15
    2056:	b8 01       	movw	r22, r16
    2058:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <WriteDataTwoByte>
    // 필터 업데이트
    WriteCommand(motor, UDF);
    205c:	8f 2d       	mov	r24, r15
    205e:	64 e0       	ldi	r22, 0x04	; 4
    2060:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <WriteCommand>
}
    2064:	df 91       	pop	r29
    2066:	cf 91       	pop	r28
    2068:	1f 91       	pop	r17
    206a:	0f 91       	pop	r16
    206c:	ff 90       	pop	r15
    206e:	ef 90       	pop	r14
    2070:	df 90       	pop	r13
    2072:	cf 90       	pop	r12
    2074:	bf 90       	pop	r11
    2076:	af 90       	pop	r10
    2078:	08 95       	ret

0000207a <SetAcceleration>:
// Parameter :
//      motor - 선택할 모터
//      acc   - 가속도값
// Return    : 없음
void SetAcceleration(uint8_t motor, int32_t acc)
{
    207a:	df 92       	push	r13
    207c:	ef 92       	push	r14
    207e:	ff 92       	push	r15
    2080:	0f 93       	push	r16
    2082:	1f 93       	push	r17
    2084:	d8 2e       	mov	r13, r24
    2086:	7a 01       	movw	r14, r20
    2088:	8b 01       	movw	r16, r22
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);
    208a:	6f e1       	ldi	r22, 0x1F	; 31
    208c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(motor, (1 << ACC_LOAD));
    2090:	8d 2d       	mov	r24, r13
    2092:	60 e2       	ldi	r22, 0x20	; 32
    2094:	70 e0       	ldi	r23, 0x00	; 0
    2096:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <WriteDataTwoByte>
    // 가속도값 출력
    WriteDataFourByte(motor, acc);
    209a:	8d 2d       	mov	r24, r13
    209c:	b8 01       	movw	r22, r16
    209e:	a7 01       	movw	r20, r14
    20a0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <WriteDataFourByte>
}
    20a4:	1f 91       	pop	r17
    20a6:	0f 91       	pop	r16
    20a8:	ff 90       	pop	r15
    20aa:	ef 90       	pop	r14
    20ac:	df 90       	pop	r13
    20ae:	08 95       	ret

000020b0 <Motor_init>:
// Parameter : 없음
// Return    : 없음
void Motor_init(void)
{	
    // Motor1 게인 설정
    SetGain(MOTOR0, 7, 3, 1);
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	67 e0       	ldi	r22, 0x07	; 7
    20b4:	70 e0       	ldi	r23, 0x00	; 0
    20b6:	43 e0       	ldi	r20, 0x03	; 3
    20b8:	50 e0       	ldi	r21, 0x00	; 0
    20ba:	21 e0       	ldi	r18, 0x01	; 1
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <SetGain>
    // Motor2 게인 설정
    SetGain(MOTOR1, 7, 3, 1);
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	67 e0       	ldi	r22, 0x07	; 7
    20c6:	70 e0       	ldi	r23, 0x00	; 0
    20c8:	43 e0       	ldi	r20, 0x03	; 3
    20ca:	50 e0       	ldi	r21, 0x00	; 0
    20cc:	21 e0       	ldi	r18, 0x01	; 1
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <SetGain>
    // Motor3 게인 설정
    SetGain(MOTOR2, 7, 3, 1);
    20d4:	82 e0       	ldi	r24, 0x02	; 2
    20d6:	67 e0       	ldi	r22, 0x07	; 7
    20d8:	70 e0       	ldi	r23, 0x00	; 0
    20da:	43 e0       	ldi	r20, 0x03	; 3
    20dc:	50 e0       	ldi	r21, 0x00	; 0
    20de:	21 e0       	ldi	r18, 0x01	; 1
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <SetGain>

    SetAcceleration(MOTOR0, 0x3FFFFFFF);
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	4f ef       	ldi	r20, 0xFF	; 255
    20ea:	5f ef       	ldi	r21, 0xFF	; 255
    20ec:	6f ef       	ldi	r22, 0xFF	; 255
    20ee:	7f e3       	ldi	r23, 0x3F	; 63
    20f0:	0e 94 3d 10 	call	0x207a	; 0x207a <SetAcceleration>
    SetAcceleration(MOTOR1, 0x3FFFFFFF);
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	4f ef       	ldi	r20, 0xFF	; 255
    20f8:	5f ef       	ldi	r21, 0xFF	; 255
    20fa:	6f ef       	ldi	r22, 0xFF	; 255
    20fc:	7f e3       	ldi	r23, 0x3F	; 63
    20fe:	0e 94 3d 10 	call	0x207a	; 0x207a <SetAcceleration>
    SetAcceleration(MOTOR2, 0x3FFFFFFF);
    2102:	82 e0       	ldi	r24, 0x02	; 2
    2104:	4f ef       	ldi	r20, 0xFF	; 255
    2106:	5f ef       	ldi	r21, 0xFF	; 255
    2108:	6f ef       	ldi	r22, 0xFF	; 255
    210a:	7f e3       	ldi	r23, 0x3F	; 63
    210c:	0e 94 3d 10 	call	0x207a	; 0x207a <SetAcceleration>
}
    2110:	08 95       	ret

00002112 <SetVelocity>:
// Parameter :
//      motor    - 선택할 모터
//      velocity - 속도 설정  (0 ~ 1,073,741,823) 음수 입력시 역방향으로 회전
// Return    : 없음
void SetVelocity(uint8_t motor, int32_t velocity)
{
    2112:	df 92       	push	r13
    2114:	ef 92       	push	r14
    2116:	ff 92       	push	r15
    2118:	0f 93       	push	r16
    211a:	1f 93       	push	r17
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	0f 92       	push	r0
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	d8 2e       	mov	r13, r24
    2128:	7a 01       	movw	r14, r20
    212a:	8b 01       	movw	r16, r22
	unsigned char dir=1;

	if(velocity<0){
    212c:	77 ff       	sbrs	r23, 7
    212e:	0a c0       	rjmp	.+20     	; 0x2144 <SetVelocity+0x32>
		velocity*=(-1);
    2130:	10 95       	com	r17
    2132:	00 95       	com	r16
    2134:	f0 94       	com	r15
    2136:	e0 94       	com	r14
    2138:	e1 1c       	adc	r14, r1
    213a:	f1 1c       	adc	r15, r1
    213c:	01 1d       	adc	r16, r1
    213e:	11 1d       	adc	r17, r1
		dir=0;
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	01 c0       	rjmp	.+2      	; 0x2146 <SetVelocity+0x34>
//      motor    - 선택할 모터
//      velocity - 속도 설정  (0 ~ 1,073,741,823) 음수 입력시 역방향으로 회전
// Return    : 없음
void SetVelocity(uint8_t motor, int32_t velocity)
{
	unsigned char dir=1;
    2144:	91 e0       	ldi	r25, 0x01	; 1
	if(velocity<0){
		velocity*=(-1);
		dir=0;
	}
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);        
    2146:	8d 2d       	mov	r24, r13
    2148:	6f e1       	ldi	r22, 0x1F	; 31
    214a:	99 83       	std	Y+1, r25	; 0x01
    214c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <WriteCommand>
    // 컨트롤 워드 출력        
    WriteDataTwoByte(motor,  (dir << FORWARD_DIR) | (1 << VELOCITY_MODE) | (1 << VELOCITY_LOAD));
    2150:	99 81       	ldd	r25, Y+1	; 0x01
    2152:	79 2f       	mov	r23, r25
    2154:	72 95       	swap	r23
    2156:	70 7f       	andi	r23, 0xF0	; 240
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	68 60       	ori	r22, 0x08	; 8
    215c:	78 60       	ori	r23, 0x08	; 8
    215e:	8d 2d       	mov	r24, r13
    2160:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <WriteDataTwoByte>
    // 속도값 출력
    WriteDataFourByte(motor, velocity);
    2164:	8d 2d       	mov	r24, r13
    2166:	b8 01       	movw	r22, r16
    2168:	a7 01       	movw	r20, r14
    216a:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <WriteDataFourByte>
}
    216e:	0f 90       	pop	r0
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	1f 91       	pop	r17
    2176:	0f 91       	pop	r16
    2178:	ff 90       	pop	r15
    217a:	ef 90       	pop	r14
    217c:	df 90       	pop	r13
    217e:	08 95       	ret

00002180 <SetPosition>:
//		acc   - 가속도 설정  (0 ~ 1,073,741,823)
//   velocity - 속도 설정    (0 ~ 1,073,741,823)
//   position - 모터위치설정 (-1,073,741,824 ~ 1,073,741,823)counts
// Return    : 없음
void SetPosition(uint8_t motor, uint8_t mode, int32_t acc,int32_t velocity,int32_t position)
{
    2180:	4f 92       	push	r4
    2182:	5f 92       	push	r5
    2184:	6f 92       	push	r6
    2186:	7f 92       	push	r7
    2188:	8f 92       	push	r8
    218a:	9f 92       	push	r9
    218c:	af 92       	push	r10
    218e:	bf 92       	push	r11
    2190:	cf 92       	push	r12
    2192:	df 92       	push	r13
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	98 2e       	mov	r9, r24
    219e:	86 2e       	mov	r8, r22
    21a0:	29 01       	movw	r4, r18
    21a2:	3a 01       	movw	r6, r20
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);
    21a4:	6f e1       	ldi	r22, 0x1F	; 31
    21a6:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <WriteCommand>
    // 컨트롤 워드 출력
    // mode : 0 - Absolute Position, 1 - Relative Position
    // Position Mode로 설정
    
	WriteDataTwoByte(motor, (1 << ACC_LOAD) | (1 << VELOCITY_LOAD) | (1 << POSITION_LOAD) | (mode << POSITION_RELATIVE) );//WriteDataTwoByte(motor, 0x2A|mode);
    21aa:	68 2d       	mov	r22, r8
    21ac:	70 e0       	ldi	r23, 0x00	; 0
    21ae:	6a 62       	ori	r22, 0x2A	; 42
    21b0:	89 2d       	mov	r24, r9
    21b2:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <WriteDataTwoByte>
    // 위치값 출력
	WriteDataFourByte(motor, acc);    
    21b6:	89 2d       	mov	r24, r9
    21b8:	b3 01       	movw	r22, r6
    21ba:	a2 01       	movw	r20, r4
    21bc:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <WriteDataFourByte>
	WriteDataFourByte(motor, velocity);
    21c0:	89 2d       	mov	r24, r9
    21c2:	b8 01       	movw	r22, r16
    21c4:	a7 01       	movw	r20, r14
    21c6:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <WriteDataFourByte>
    WriteDataFourByte(motor, position);
    21ca:	89 2d       	mov	r24, r9
    21cc:	b6 01       	movw	r22, r12
    21ce:	a5 01       	movw	r20, r10
    21d0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <WriteDataFourByte>
}
    21d4:	1f 91       	pop	r17
    21d6:	0f 91       	pop	r16
    21d8:	ff 90       	pop	r15
    21da:	ef 90       	pop	r14
    21dc:	df 90       	pop	r13
    21de:	cf 90       	pop	r12
    21e0:	bf 90       	pop	r11
    21e2:	af 90       	pop	r10
    21e4:	9f 90       	pop	r9
    21e6:	8f 90       	pop	r8
    21e8:	7f 90       	pop	r7
    21ea:	6f 90       	pop	r6
    21ec:	5f 90       	pop	r5
    21ee:	4f 90       	pop	r4
    21f0:	08 95       	ret

000021f2 <LM629_HW_Reset>:

// Function  : LM629 H/W Reset. 최초 전원 인가시 반드시 실행해야한다.
// Parameter : 없음
// Return    : 없음
void LM629_HW_Reset(void){
    21f2:	8f 92       	push	r8
    21f4:	9f 92       	push	r9
    21f6:	af 92       	push	r10
    21f8:	bf 92       	push	r11
    21fa:	cf 92       	push	r12
    21fc:	df 92       	push	r13
    21fe:	ef 92       	push	r14
    2200:	ff 92       	push	r15
    2202:	0f 93       	push	r16
    2204:	1f 93       	push	r17
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	00 d0       	rcall	.+0      	; 0x220c <LM629_HW_Reset+0x1a>
    220c:	0f 92       	push	r0
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
	unsigned char status[3]={0, }, i=0, step=0;
	
	DDRA=0x00;
    2212:	1a ba       	out	0x1a, r1	; 26

	PORTC=0x00;
    2214:	15 ba       	out	0x15, r1	; 21
	DDRC=0xFF;
    2216:	8f ef       	ldi	r24, 0xFF	; 255
    2218:	84 bb       	out	0x14, r24	; 20

	PORTG=0x00;
    221a:	10 92 65 00 	sts	0x0065, r1
	DDRG=0x03;
    221e:	83 e0       	ldi	r24, 0x03	; 3
    2220:	80 93 64 00 	sts	0x0064, r24
			}
		}
		
		if(step==1){
			// SRE : 외부 데이터 메모리 영역 활성화
			MCUCR = (1 << SRE) | (0 << SRW10);
    2224:	e0 e8       	ldi	r30, 0x80	; 128
    2226:	9e 2e       	mov	r9, r30
		    // SRL(0) : Upper Sector로만 사용 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
    2228:	72 e0       	ldi	r23, 0x02	; 2
    222a:	a7 2e       	mov	r10, r23
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
    222c:	64 e8       	ldi	r22, 0x84	; 132
    222e:	b6 2e       	mov	r11, r22
    2230:	6e 01       	movw	r12, r28
    2232:	08 94       	sec
    2234:	c1 1c       	adc	r12, r1
    2236:	d1 1c       	adc	r13, r1
	DDRG=0x03;

	while(1){
		if(step==0){
			while(1){
				PORTC |= 0x05; //Hw Rst Hi(decoder = Low)
    2238:	85 b3       	in	r24, 0x15	; 21
    223a:	85 60       	ori	r24, 0x05	; 5
    223c:	85 bb       	out	0x15, r24	; 21
    223e:	83 e3       	ldi	r24, 0x33	; 51
    2240:	9b e2       	ldi	r25, 0x2B	; 43
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <LM629_HW_Reset+0x50>
				_delay_ms(3);
				PORTC &= ~0x05; //Hw Rst Low(decoder = Hi)
    2246:	85 b3       	in	r24, 0x15	; 21
    2248:	8a 7f       	andi	r24, 0xFA	; 250
    224a:	85 bb       	out	0x15, r24	; 21
    224c:	ec ec       	ldi	r30, 0xCC	; 204
    224e:	fc e1       	ldi	r31, 0x1C	; 28
    2250:	31 97       	sbiw	r30, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <LM629_HW_Reset+0x5e>
    2254:	00 c0       	rjmp	.+0      	; 0x2256 <LM629_HW_Reset+0x64>
    2256:	00 00       	nop
				_delay_ms(2);

				PORTG &= ~0x02; //RD low
    2258:	80 91 65 00 	lds	r24, 0x0065
    225c:	8d 7f       	andi	r24, 0xFD	; 253
    225e:	80 93 65 00 	sts	0x0065, r24
				PORTC &= ~0x08; //PS low
    2262:	ab 98       	cbi	0x15, 3	; 21
		
				PORTC &=~0x07;	//cs motor0
    2264:	85 b3       	in	r24, 0x15	; 21
    2266:	88 7f       	andi	r24, 0xF8	; 248
    2268:	85 bb       	out	0x15, r24	; 21
				status[0]=PINA; //Read status motor0
    226a:	29 b3       	in	r18, 0x19	; 25
    226c:	29 83       	std	Y+1, r18	; 0x01
				
				PORTC |=0x01;	//cs motor1
    226e:	a8 9a       	sbi	0x15, 0	; 21
				status[1]=PINA; //Read status motor0
    2270:	99 b3       	in	r25, 0x19	; 25
    2272:	9a 83       	std	Y+2, r25	; 0x02
				
				PORTC = (PORTC&0xF8)|0x02; 	//cs motor2
    2274:	85 b3       	in	r24, 0x15	; 21
    2276:	88 7f       	andi	r24, 0xF8	; 248
    2278:	82 60       	ori	r24, 0x02	; 2
    227a:	85 bb       	out	0x15, r24	; 21
				status[2]=PINA;  //Read status motor0
    227c:	89 b3       	in	r24, 0x19	; 25
    227e:	8b 83       	std	Y+3, r24	; 0x03

				if( (status[0]==0xC4||status[0]==0x84) && 
    2280:	24 3c       	cpi	r18, 0xC4	; 196
    2282:	11 f0       	breq	.+4      	; 0x2288 <LM629_HW_Reset+0x96>
    2284:	24 38       	cpi	r18, 0x84	; 132
    2286:	c1 f5       	brne	.+112    	; 0x22f8 <LM629_HW_Reset+0x106>
    2288:	94 3c       	cpi	r25, 0xC4	; 196
    228a:	11 f0       	breq	.+4      	; 0x2290 <LM629_HW_Reset+0x9e>
					(status[1]==0xC4||status[1]==0x84) && 
    228c:	94 38       	cpi	r25, 0x84	; 132
    228e:	a1 f5       	brne	.+104    	; 0x22f8 <LM629_HW_Reset+0x106>
    2290:	84 3c       	cpi	r24, 0xC4	; 196
    2292:	11 f0       	breq	.+4      	; 0x2298 <LM629_HW_Reset+0xa6>
					(status[2]==0xC4||status[2]==0x84) ){
    2294:	84 38       	cpi	r24, 0x84	; 132
    2296:	81 f5       	brne	.+96     	; 0x22f8 <LM629_HW_Reset+0x106>
			}
		}
		
		if(step==1){
			// SRE : 외부 데이터 메모리 영역 활성화
			MCUCR = (1 << SRE) | (0 << SRW10);
    2298:	95 be       	out	0x35, r9	; 53
		    // SRL(0) : Upper Sector로만 사용 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
    229a:	a0 92 6d 00 	sts	0x006D, r10
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
    229e:	b0 92 6c 00 	sts	0x006C, r11
    22a2:	76 01       	movw	r14, r12
    22a4:	00 e0       	ldi	r16, 0x00	; 0
    22a6:	10 e2       	ldi	r17, 0x20	; 32
    22a8:	8e 2c       	mov	r8, r14
    22aa:	8c 18       	sub	r8, r12
			while(1){
				for(i=0;i<3;++i){
		        	WriteCommand(i, RSTI);
    22ac:	88 2d       	mov	r24, r8
    22ae:	6d e1       	ldi	r22, 0x1D	; 29
    22b0:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <WriteCommand>
					WriteDataTwoByte(i, 0x0000);
    22b4:	88 2d       	mov	r24, r8
    22b6:	60 e0       	ldi	r22, 0x00	; 0
    22b8:	70 e0       	ldi	r23, 0x00	; 0
    22ba:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <WriteDataTwoByte>
					READ_STATUS(i, status[i]);
    22be:	f8 01       	movw	r30, r16
    22c0:	80 81       	ld	r24, Z
    22c2:	f7 01       	movw	r30, r14
    22c4:	81 93       	st	Z+, r24
    22c6:	7f 01       	movw	r14, r30
    22c8:	00 50       	subi	r16, 0x00	; 0
    22ca:	1f 4f       	sbci	r17, 0xFF	; 255
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
			while(1){
				for(i=0;i<3;++i){
    22cc:	f3 e2       	ldi	r31, 0x23	; 35
    22ce:	00 30       	cpi	r16, 0x00	; 0
    22d0:	1f 07       	cpc	r17, r31
    22d2:	51 f7       	brne	.-44     	; 0x22a8 <LM629_HW_Reset+0xb6>
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	80 3c       	cpi	r24, 0xC0	; 192
    22d8:	11 f0       	breq	.+4      	; 0x22de <LM629_HW_Reset+0xec>
    22da:	80 38       	cpi	r24, 0x80	; 128
    22dc:	51 f4       	brne	.+20     	; 0x22f2 <LM629_HW_Reset+0x100>
					(status[1]==0xC0||status[1]==0x80) && 
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
				for(i=0;i<3;++i){
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
    22e0:	80 3c       	cpi	r24, 0xC0	; 192
    22e2:	11 f0       	breq	.+4      	; 0x22e8 <LM629_HW_Reset+0xf6>
					(status[1]==0xC0||status[1]==0x80) && 
    22e4:	80 38       	cpi	r24, 0x80	; 128
    22e6:	29 f4       	brne	.+10     	; 0x22f2 <LM629_HW_Reset+0x100>
					(status[2]==0xC0||status[2]==0x80) ){
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
					(status[1]==0xC0||status[1]==0x80) && 
    22ea:	80 3c       	cpi	r24, 0xC0	; 192
    22ec:	69 f0       	breq	.+26     	; 0x2308 <LM629_HW_Reset+0x116>
					(status[2]==0xC0||status[2]==0x80) ){
    22ee:	80 38       	cpi	r24, 0x80	; 128
    22f0:	59 f0       	breq	.+22     	; 0x2308 <LM629_HW_Reset+0x116>
					break;
				}
				else{	//다시 처음부터 LM629초기화
					step=0;	
					// SRE : 외부 데이터 메모리 영역 비활성화
					MCUCR &= ~(1 << SRE) & ~(1 << SRW10);
    22f2:	85 b7       	in	r24, 0x35	; 53
    22f4:	8f 73       	andi	r24, 0x3F	; 63
    22f6:	85 bf       	out	0x35, r24	; 53
					PORTC=0x00;
    22f8:	15 ba       	out	0x15, r1	; 21
					lcd_display_str(0,0,"Error. Restart");
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	60 e0       	ldi	r22, 0x00	; 0
    22fe:	4c e8       	ldi	r20, 0x8C	; 140
    2300:	51 e0       	ldi	r21, 0x01	; 1
    2302:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_display_str>
    2306:	98 cf       	rjmp	.-208    	; 0x2238 <LM629_HW_Reset+0x46>
					break;
				}
			}
		}
		if(step==2){
			lcd_display_str(0,0,"Initialize success.");
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	4b e9       	ldi	r20, 0x9B	; 155
    230e:	51 e0       	ldi	r21, 0x01	; 1
    2310:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_display_str>
    2314:	83 e0       	ldi	r24, 0x03	; 3
			for(i=0;i<3;++i){
				PORTB|=0x07;
    2316:	98 b3       	in	r25, 0x18	; 24
    2318:	97 60       	ori	r25, 0x07	; 7
    231a:	98 bb       	out	0x18, r25	; 24
    231c:	2f ef       	ldi	r18, 0xFF	; 255
    231e:	3f eb       	ldi	r19, 0xBF	; 191
    2320:	46 e0       	ldi	r20, 0x06	; 6
    2322:	21 50       	subi	r18, 0x01	; 1
    2324:	30 40       	sbci	r19, 0x00	; 0
    2326:	40 40       	sbci	r20, 0x00	; 0
    2328:	e1 f7       	brne	.-8      	; 0x2322 <LM629_HW_Reset+0x130>
    232a:	00 c0       	rjmp	.+0      	; 0x232c <LM629_HW_Reset+0x13a>
    232c:	00 00       	nop
				_delay_ms(150);
				PORTB&=~0x07;
    232e:	98 b3       	in	r25, 0x18	; 24
    2330:	98 7f       	andi	r25, 0xF8	; 248
    2332:	98 bb       	out	0x18, r25	; 24
    2334:	2f ef       	ldi	r18, 0xFF	; 255
    2336:	3f eb       	ldi	r19, 0xBF	; 191
    2338:	46 e0       	ldi	r20, 0x06	; 6
    233a:	21 50       	subi	r18, 0x01	; 1
    233c:	30 40       	sbci	r19, 0x00	; 0
    233e:	40 40       	sbci	r20, 0x00	; 0
    2340:	e1 f7       	brne	.-8      	; 0x233a <LM629_HW_Reset+0x148>
    2342:	00 c0       	rjmp	.+0      	; 0x2344 <LM629_HW_Reset+0x152>
    2344:	00 00       	nop
    2346:	81 50       	subi	r24, 0x01	; 1
				}
			}
		}
		if(step==2){
			lcd_display_str(0,0,"Initialize success.");
			for(i=0;i<3;++i){
    2348:	31 f7       	brne	.-52     	; 0x2316 <LM629_HW_Reset+0x124>
				PORTB|=0x07;
				_delay_ms(150);
				PORTB&=~0x07;
				_delay_ms(150);
			}
			lcd_clear_screen();
    234a:	0e 94 44 01 	call	0x288	; 0x288 <lcd_clear_screen>
			break;
		}
	}
}
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	ff 90       	pop	r15
    235e:	ef 90       	pop	r14
    2360:	df 90       	pop	r13
    2362:	cf 90       	pop	r12
    2364:	bf 90       	pop	r11
    2366:	af 90       	pop	r10
    2368:	9f 90       	pop	r9
    236a:	8f 90       	pop	r8
    236c:	08 95       	ret

0000236e <StartMotion>:
// Function  : 모든 모터의 모션을 시작한다.
// Parameter : 없음
// Return    : 없음
void StartMotion(void)
{
    WriteCommand(MOTOR0, STT);
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	61 e0       	ldi	r22, 0x01	; 1
    2372:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <WriteCommand>
    WriteCommand(MOTOR1, STT);
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	61 e0       	ldi	r22, 0x01	; 1
    237a:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <WriteCommand>
    WriteCommand(MOTOR2, STT);
    237e:	82 e0       	ldi	r24, 0x02	; 2
    2380:	61 e0       	ldi	r22, 0x01	; 1
    2382:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <WriteCommand>
}
    2386:	08 95       	ret

00002388 <StopMotion>:

// Function  : 모든 모터의 모션을 정지한다.
// Parameter : 없음
// Return    : 없음
void StopMotion(uint16_t mode)
{
    2388:	1f 93       	push	r17
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
    238e:	18 2f       	mov	r17, r24
    // Motor1 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR0, LTRJ);
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	6f e1       	ldi	r22, 0x1F	; 31
    2394:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR0, (1 << mode));
    2398:	c1 e0       	ldi	r28, 0x01	; 1
    239a:	d0 e0       	ldi	r29, 0x00	; 0
    239c:	02 c0       	rjmp	.+4      	; 0x23a2 <StopMotion+0x1a>
    239e:	cc 0f       	add	r28, r28
    23a0:	dd 1f       	adc	r29, r29
    23a2:	1a 95       	dec	r17
    23a4:	e2 f7       	brpl	.-8      	; 0x239e <StopMotion+0x16>
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	be 01       	movw	r22, r28
    23aa:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <WriteDataTwoByte>

    // Motor2 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR1, LTRJ);
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	6f e1       	ldi	r22, 0x1F	; 31
    23b2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR1, (1 << mode));
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	be 01       	movw	r22, r28
    23ba:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <WriteDataTwoByte>

    // Motor3 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR2, LTRJ);
    23be:	82 e0       	ldi	r24, 0x02	; 2
    23c0:	6f e1       	ldi	r22, 0x1F	; 31
    23c2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR2, (1 << mode));
    23c6:	82 e0       	ldi	r24, 0x02	; 2
    23c8:	be 01       	movw	r22, r28
    23ca:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <WriteDataTwoByte>

    // 모션 정지
    WriteCommand(MOTOR0, STT);
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	61 e0       	ldi	r22, 0x01	; 1
    23d2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <WriteCommand>
    WriteCommand(MOTOR1, STT);
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	61 e0       	ldi	r22, 0x01	; 1
    23da:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <WriteCommand>
    WriteCommand(MOTOR2, STT);
    23de:	82 e0       	ldi	r24, 0x02	; 2
    23e0:	61 e0       	ldi	r22, 0x01	; 1
    23e2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <WriteCommand>
}
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	08 95       	ret

000023ee <MOTOR_CTR>:

void MOTOR_CTR(long MT0,long MT1,long MT2){
    23ee:	af 92       	push	r10
    23f0:	bf 92       	push	r11
    23f2:	cf 92       	push	r12
    23f4:	df 92       	push	r13
    23f6:	ef 92       	push	r14
    23f8:	ff 92       	push	r15
    23fa:	0f 93       	push	r16
    23fc:	1f 93       	push	r17
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	2c 97       	sbiw	r28, 0x0c	; 12
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	59 01       	movw	r10, r18
    2414:	6a 01       	movw	r12, r20
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};
    2416:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
    241a:	69 83       	std	Y+1, r22	; 0x01
    241c:	7a 83       	std	Y+2, r23	; 0x02
    241e:	8b 83       	std	Y+3, r24	; 0x03
    2420:	9c 83       	std	Y+4, r25	; 0x04
    2422:	c6 01       	movw	r24, r12
    2424:	b5 01       	movw	r22, r10
    2426:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
    242a:	6d 83       	std	Y+5, r22	; 0x05
    242c:	7e 83       	std	Y+6, r23	; 0x06
    242e:	8f 83       	std	Y+7, r24	; 0x07
    2430:	98 87       	std	Y+8, r25	; 0x08
    2432:	c8 01       	movw	r24, r16
    2434:	b7 01       	movw	r22, r14
    2436:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
    243a:	69 87       	std	Y+9, r22	; 0x09
    243c:	7a 87       	std	Y+10, r23	; 0x0a
    243e:	8b 87       	std	Y+11, r24	; 0x0b
    2440:	9c 87       	std	Y+12, r25	; 0x0c
    2442:	8e 01       	movw	r16, r28
    2444:	0f 5f       	subi	r16, 0xFF	; 255
    2446:	1f 4f       	sbci	r17, 0xFF	; 255

	for(i=0;i<3;++i){
    2448:	ee 24       	eor	r14, r14
		
		V[i]=V[i]*0.2728;
    244a:	f8 01       	movw	r30, r16
    244c:	60 81       	ld	r22, Z
    244e:	71 81       	ldd	r23, Z+1	; 0x01
    2450:	82 81       	ldd	r24, Z+2	; 0x02
    2452:	93 81       	ldd	r25, Z+3	; 0x03
    2454:	21 e7       	ldi	r18, 0x71	; 113
    2456:	3c ea       	ldi	r19, 0xAC	; 172
    2458:	4b e8       	ldi	r20, 0x8B	; 139
    245a:	5e e3       	ldi	r21, 0x3E	; 62
    245c:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    2460:	9b 01       	movw	r18, r22
    2462:	ac 01       	movw	r20, r24
    2464:	f8 01       	movw	r30, r16
    2466:	21 93       	st	Z+, r18
    2468:	31 93       	st	Z+, r19
    246a:	41 93       	st	Z+, r20
    246c:	51 93       	st	Z+, r21
    246e:	8f 01       	movw	r16, r30

		SetVelocity(i, V[i]*65536);
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e8       	ldi	r20, 0x80	; 128
    2476:	57 e4       	ldi	r21, 0x47	; 71
    2478:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    247c:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fixsfsi>
    2480:	ab 01       	movw	r20, r22
    2482:	bc 01       	movw	r22, r24
    2484:	8e 2d       	mov	r24, r14
    2486:	0e 94 89 10 	call	0x2112	; 0x2112 <SetVelocity>
void MOTOR_CTR(long MT0,long MT1,long MT2){
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};

	for(i=0;i<3;++i){
    248a:	e3 94       	inc	r14
    248c:	fe 2d       	mov	r31, r14
    248e:	f3 30       	cpi	r31, 0x03	; 3
    2490:	e1 f6       	brne	.-72     	; 0x244a <MOTOR_CTR+0x5c>
		
		V[i]=V[i]*0.2728;

		SetVelocity(i, V[i]*65536);
	}
	StartMotion();	
    2492:	0e 94 b7 11 	call	0x236e	; 0x236e <StartMotion>
}
    2496:	2c 96       	adiw	r28, 0x0c	; 12
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	cf 91       	pop	r28
    24a4:	df 91       	pop	r29
    24a6:	1f 91       	pop	r17
    24a8:	0f 91       	pop	r16
    24aa:	ff 90       	pop	r15
    24ac:	ef 90       	pop	r14
    24ae:	df 90       	pop	r13
    24b0:	cf 90       	pop	r12
    24b2:	bf 90       	pop	r11
    24b4:	af 90       	pop	r10
    24b6:	08 95       	ret

000024b8 <Camera_init>:


void Camera_init(void){
	unsigned char buff=0;
	while(1){	//우선순위 큰것부터
		putchar1(11);
    24b8:	8b e0       	ldi	r24, 0x0B	; 11
    24ba:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		while(!rx1_flg); 
    24be:	80 91 b8 02 	lds	r24, 0x02B8
    24c2:	88 23       	and	r24, r24
    24c4:	e1 f3       	breq	.-8      	; 0x24be <Camera_init+0x6>
		buff=getchar1();
    24c6:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
		if(buff){
    24ca:	88 23       	and	r24, r24
    24cc:	a9 f3       	breq	.-22     	; 0x24b8 <Camera_init>
			buff=0;
			break;
		}
	}
	while(1){	//추적 할 최소 픽셀수  255픽셀
		putchar1(17);
    24ce:	81 e1       	ldi	r24, 0x11	; 17
    24d0:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		putchar1(255);
    24d4:	8f ef       	ldi	r24, 0xFF	; 255
    24d6:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		while(!rx1_flg);
    24da:	80 91 b8 02 	lds	r24, 0x02B8
    24de:	88 23       	and	r24, r24
    24e0:	e1 f3       	breq	.-8      	; 0x24da <Camera_init+0x22>
		buff=getchar1();
    24e2:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
		if(buff)break;
    24e6:	88 23       	and	r24, r24
    24e8:	91 f3       	breq	.-28     	; 0x24ce <Camera_init+0x16>
	}
}
    24ea:	08 95       	ret

000024ec <Camera_Set>:

unsigned char Camera_Set(unsigned char cmd){
	
	putchar1(cmd);
    24ec:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
	
}
    24f0:	08 95       	ret

000024f2 <Camera_Cmd>:


unsigned char Camera_Cmd(unsigned char color, unsigned char cmd){
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <Camera_Cmd+0x6>
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
	
	volatile unsigned char buff=0, data=0;
    24fc:	19 82       	std	Y+1, r1	; 0x01
    24fe:	1a 82       	std	Y+2, r1	; 0x02
	
	data=cmd+(color*10);
    2500:	88 0f       	add	r24, r24
    2502:	98 2f       	mov	r25, r24
    2504:	99 0f       	add	r25, r25
    2506:	99 0f       	add	r25, r25
    2508:	98 0f       	add	r25, r24
    250a:	69 0f       	add	r22, r25
    250c:	6a 83       	std	Y+2, r22	; 0x02

	putchar1(data);
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
	while(!rx1_flg);
    2514:	80 91 b8 02 	lds	r24, 0x02B8
    2518:	88 23       	and	r24, r24
    251a:	e1 f3       	breq	.-8      	; 0x2514 <Camera_Cmd+0x22>
	buff=getchar1();
    251c:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
    2520:	89 83       	std	Y+1, r24	; 0x01
	
	return buff;
    2522:	89 81       	ldd	r24, Y+1	; 0x01
}
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <Sensor_init>:
// Function  : IR, PSD 센서를 초기화
// Parameter : 없음
// Return    : 없음
void Sensor_init(void)
{
    DDRE  &= ~0x1C;
    252e:	82 b1       	in	r24, 0x02	; 2
    2530:	83 7e       	andi	r24, 0xE3	; 227
    2532:	82 b9       	out	0x02, r24	; 2
    DDRG  &= ~0x18;
    2534:	e4 e6       	ldi	r30, 0x64	; 100
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	87 7e       	andi	r24, 0xE7	; 231
    253c:	80 83       	st	Z, r24

    UCSR0A = 0x00;
    253e:	1b b8       	out	0x0b, r1	; 11
    UCSR0B = 0x98;
    2540:	88 e9       	ldi	r24, 0x98	; 152
    2542:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = 0x06;
    2544:	86 e0       	ldi	r24, 0x06	; 6
    2546:	80 93 95 00 	sts	0x0095, r24
    UBRR0H = 0x00;
    254a:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 0x0F;
    254e:	8f e0       	ldi	r24, 0x0F	; 15
    2550:	89 b9       	out	0x09, r24	; 9

    sei();
    2552:	78 94       	sei
}
    2554:	08 95       	ret

00002556 <__vector_18>:

// Function  : USART를 통해 전송되는 PSD 센서값을 전역변수에 저장하는 ISR
// Parameter : 없음
// Return    : 없음
ISR(USART0_RX_vect)
{
    2556:	1f 92       	push	r1
    2558:	0f 92       	push	r0
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	0f 92       	push	r0
    255e:	0b b6       	in	r0, 0x3b	; 59
    2560:	0f 92       	push	r0
    2562:	11 24       	eor	r1, r1
    2564:	2f 93       	push	r18
    2566:	3f 93       	push	r19
    2568:	8f 93       	push	r24
    256a:	9f 93       	push	r25
    256c:	ef 93       	push	r30
    256e:	ff 93       	push	r31
    volatile static unsigned char rx_cnt = 0;
    volatile static unsigned char chksum = 0;
    volatile static unsigned char buf[11] = {0, };
    uint8_t rxbuf = 0, i;

    rxbuf = UDR0;
    2570:	9c b1       	in	r25, 0x0c	; 12
    //수신완료 및 에러 검출되지 않을시
    while(!(UCSR0A & 0xB8));
    2572:	8b b1       	in	r24, 0x0b	; 11
    2574:	88 7b       	andi	r24, 0xB8	; 184
    2576:	e9 f3       	breq	.-6      	; 0x2572 <__vector_18+0x1c>

    if(rxbuf == 0xFF)
    2578:	9f 3f       	cpi	r25, 0xFF	; 255
    257a:	21 f4       	brne	.+8      	; 0x2584 <__vector_18+0x2e>
    {
        //시작 버퍼 수신
        rx_en = 1;
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	80 93 f5 02 	sts	0x02F5, r24
    2582:	47 c0       	rjmp	.+142    	; 0x2612 <__vector_18+0xbc>
    }
    else if(rx_en == 1)
    2584:	80 91 f5 02 	lds	r24, 0x02F5
    2588:	81 30       	cpi	r24, 0x01	; 1
    258a:	09 f0       	breq	.+2      	; 0x258e <__vector_18+0x38>
    258c:	42 c0       	rjmp	.+132    	; 0x2612 <__vector_18+0xbc>
    {
        //데이터 받기
        //0번지부터 PSD0 저장
        buf[rx_cnt++] = rxbuf;
    258e:	80 91 f4 02 	lds	r24, 0x02F4
    2592:	e8 2f       	mov	r30, r24
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	e8 51       	subi	r30, 0x18	; 24
    2598:	fd 4f       	sbci	r31, 0xFD	; 253
    259a:	90 83       	st	Z, r25
    259c:	8f 5f       	subi	r24, 0xFF	; 255
    259e:	80 93 f4 02 	sts	0x02F4, r24

        if(rx_cnt > 10)
    25a2:	80 91 f4 02 	lds	r24, 0x02F4
    25a6:	8b 30       	cpi	r24, 0x0B	; 11
    25a8:	a0 f1       	brcs	.+104    	; 0x2612 <__vector_18+0xbc>
        {
            // PSD 10개, 체크섬 1개 수신 완료되면
            //플래그 리셋
            rx_en = rx_cnt = 0;
    25aa:	10 92 f4 02 	sts	0x02F4, r1
    25ae:	80 91 f4 02 	lds	r24, 0x02F4
    25b2:	80 93 f5 02 	sts	0x02F5, r24
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	90 e0       	ldi	r25, 0x00	; 0

            // 체크섬 계산
            for(i = 0 ; i < 10 ; i++)
                chksum += buf[i];
    25ba:	30 91 f3 02 	lds	r19, 0x02F3
    25be:	fc 01       	movw	r30, r24
    25c0:	e8 51       	subi	r30, 0x18	; 24
    25c2:	fd 4f       	sbci	r31, 0xFD	; 253
    25c4:	20 81       	ld	r18, Z
    25c6:	23 0f       	add	r18, r19
    25c8:	20 93 f3 02 	sts	0x02F3, r18
    25cc:	01 96       	adiw	r24, 0x01	; 1
            // PSD 10개, 체크섬 1개 수신 완료되면
            //플래그 리셋
            rx_en = rx_cnt = 0;

            // 체크섬 계산
            for(i = 0 ; i < 10 ; i++)
    25ce:	8a 30       	cpi	r24, 0x0A	; 10
    25d0:	91 05       	cpc	r25, r1
    25d2:	99 f7       	brne	.-26     	; 0x25ba <__vector_18+0x64>
                chksum += buf[i];

            //00~FE 이므로 FF나오면 +1 (오류방지)
            if(chksum == 0xFF)chksum++;
    25d4:	80 91 f3 02 	lds	r24, 0x02F3
    25d8:	8f 3f       	cpi	r24, 0xFF	; 255
    25da:	29 f4       	brne	.+10     	; 0x25e6 <__vector_18+0x90>
    25dc:	80 91 f3 02 	lds	r24, 0x02F3
    25e0:	8f 5f       	subi	r24, 0xFF	; 255
    25e2:	80 93 f3 02 	sts	0x02F3, r24

            // 체크섬이 올바른지 체크 후 맞으면 전역변수로 이동
            if(chksum == buf[10])
    25e6:	90 91 f3 02 	lds	r25, 0x02F3
    25ea:	80 91 f2 02 	lds	r24, 0x02F2
    25ee:	98 17       	cp	r25, r24
    25f0:	71 f4       	brne	.+28     	; 0x260e <__vector_18+0xb8>
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
                for(i = 0 ; i < 10 ; i++)
                    psd_value[i] = buf[i];
    25f6:	fc 01       	movw	r30, r24
    25f8:	e8 51       	subi	r30, 0x18	; 24
    25fa:	fd 4f       	sbci	r31, 0xFD	; 253
    25fc:	20 81       	ld	r18, Z
    25fe:	fc 01       	movw	r30, r24
    2600:	e6 50       	subi	r30, 0x06	; 6
    2602:	fd 4f       	sbci	r31, 0xFD	; 253
    2604:	20 83       	st	Z, r18
    2606:	01 96       	adiw	r24, 0x01	; 1
            //00~FE 이므로 FF나오면 +1 (오류방지)
            if(chksum == 0xFF)chksum++;

            // 체크섬이 올바른지 체크 후 맞으면 전역변수로 이동
            if(chksum == buf[10])
                for(i = 0 ; i < 10 ; i++)
    2608:	8a 30       	cpi	r24, 0x0A	; 10
    260a:	91 05       	cpc	r25, r1
    260c:	a1 f7       	brne	.-24     	; 0x25f6 <__vector_18+0xa0>
                    psd_value[i] = buf[i];

            //체크섬 리셋
            chksum = 0;
    260e:	10 92 f3 02 	sts	0x02F3, r1
    	}
    }
}
    2612:	ff 91       	pop	r31
    2614:	ef 91       	pop	r30
    2616:	9f 91       	pop	r25
    2618:	8f 91       	pop	r24
    261a:	3f 91       	pop	r19
    261c:	2f 91       	pop	r18
    261e:	0f 90       	pop	r0
    2620:	0b be       	out	0x3b, r0	; 59
    2622:	0f 90       	pop	r0
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	0f 90       	pop	r0
    2628:	1f 90       	pop	r1
    262a:	18 95       	reti

0000262c <_fpadd_parts>:
    262c:	a0 e0       	ldi	r26, 0x00	; 0
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	ec e1       	ldi	r30, 0x1C	; 28
    2632:	f3 e1       	ldi	r31, 0x13	; 19
    2634:	0c 94 9c 19 	jmp	0x3338	; 0x3338 <__prologue_saves__+0x8>
    2638:	fc 01       	movw	r30, r24
    263a:	ea 01       	movw	r28, r20
    263c:	80 81       	ld	r24, Z
    263e:	82 30       	cpi	r24, 0x02	; 2
    2640:	08 f4       	brcc	.+2      	; 0x2644 <_fpadd_parts+0x18>
    2642:	38 c1       	rjmp	.+624    	; 0x28b4 <_fpadd_parts+0x288>
    2644:	db 01       	movw	r26, r22
    2646:	9c 91       	ld	r25, X
    2648:	92 30       	cpi	r25, 0x02	; 2
    264a:	08 f4       	brcc	.+2      	; 0x264e <_fpadd_parts+0x22>
    264c:	30 c1       	rjmp	.+608    	; 0x28ae <_fpadd_parts+0x282>
    264e:	84 30       	cpi	r24, 0x04	; 4
    2650:	59 f4       	brne	.+22     	; 0x2668 <_fpadd_parts+0x3c>
    2652:	94 30       	cpi	r25, 0x04	; 4
    2654:	09 f0       	breq	.+2      	; 0x2658 <_fpadd_parts+0x2c>
    2656:	2e c1       	rjmp	.+604    	; 0x28b4 <_fpadd_parts+0x288>
    2658:	91 81       	ldd	r25, Z+1	; 0x01
    265a:	11 96       	adiw	r26, 0x01	; 1
    265c:	8c 91       	ld	r24, X
    265e:	11 97       	sbiw	r26, 0x01	; 1
    2660:	98 17       	cp	r25, r24
    2662:	09 f0       	breq	.+2      	; 0x2666 <_fpadd_parts+0x3a>
    2664:	21 c1       	rjmp	.+578    	; 0x28a8 <_fpadd_parts+0x27c>
    2666:	26 c1       	rjmp	.+588    	; 0x28b4 <_fpadd_parts+0x288>
    2668:	94 30       	cpi	r25, 0x04	; 4
    266a:	09 f4       	brne	.+2      	; 0x266e <_fpadd_parts+0x42>
    266c:	20 c1       	rjmp	.+576    	; 0x28ae <_fpadd_parts+0x282>
    266e:	92 30       	cpi	r25, 0x02	; 2
    2670:	b1 f4       	brne	.+44     	; 0x269e <_fpadd_parts+0x72>
    2672:	82 30       	cpi	r24, 0x02	; 2
    2674:	09 f0       	breq	.+2      	; 0x2678 <_fpadd_parts+0x4c>
    2676:	1e c1       	rjmp	.+572    	; 0x28b4 <_fpadd_parts+0x288>
    2678:	ca 01       	movw	r24, r20
    267a:	af 01       	movw	r20, r30
    267c:	28 e0       	ldi	r18, 0x08	; 8
    267e:	da 01       	movw	r26, r20
    2680:	0d 90       	ld	r0, X+
    2682:	ad 01       	movw	r20, r26
    2684:	dc 01       	movw	r26, r24
    2686:	0d 92       	st	X+, r0
    2688:	cd 01       	movw	r24, r26
    268a:	21 50       	subi	r18, 0x01	; 1
    268c:	c1 f7       	brne	.-16     	; 0x267e <_fpadd_parts+0x52>
    268e:	db 01       	movw	r26, r22
    2690:	11 96       	adiw	r26, 0x01	; 1
    2692:	8c 91       	ld	r24, X
    2694:	11 97       	sbiw	r26, 0x01	; 1
    2696:	91 81       	ldd	r25, Z+1	; 0x01
    2698:	89 23       	and	r24, r25
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	0a c1       	rjmp	.+532    	; 0x28b2 <_fpadd_parts+0x286>
    269e:	82 30       	cpi	r24, 0x02	; 2
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <_fpadd_parts+0x78>
    26a2:	05 c1       	rjmp	.+522    	; 0x28ae <_fpadd_parts+0x282>
    26a4:	c2 80       	ldd	r12, Z+2	; 0x02
    26a6:	d3 80       	ldd	r13, Z+3	; 0x03
    26a8:	db 01       	movw	r26, r22
    26aa:	12 96       	adiw	r26, 0x02	; 2
    26ac:	6d 90       	ld	r6, X+
    26ae:	7c 90       	ld	r7, X
    26b0:	13 97       	sbiw	r26, 0x03	; 3
    26b2:	24 81       	ldd	r18, Z+4	; 0x04
    26b4:	35 81       	ldd	r19, Z+5	; 0x05
    26b6:	46 81       	ldd	r20, Z+6	; 0x06
    26b8:	57 81       	ldd	r21, Z+7	; 0x07
    26ba:	14 96       	adiw	r26, 0x04	; 4
    26bc:	ed 90       	ld	r14, X+
    26be:	fd 90       	ld	r15, X+
    26c0:	0d 91       	ld	r16, X+
    26c2:	1c 91       	ld	r17, X
    26c4:	17 97       	sbiw	r26, 0x07	; 7
    26c6:	c6 01       	movw	r24, r12
    26c8:	86 19       	sub	r24, r6
    26ca:	97 09       	sbc	r25, r7
    26cc:	5c 01       	movw	r10, r24
    26ce:	97 ff       	sbrs	r25, 7
    26d0:	04 c0       	rjmp	.+8      	; 0x26da <_fpadd_parts+0xae>
    26d2:	aa 24       	eor	r10, r10
    26d4:	bb 24       	eor	r11, r11
    26d6:	a8 1a       	sub	r10, r24
    26d8:	b9 0a       	sbc	r11, r25
    26da:	b0 e2       	ldi	r27, 0x20	; 32
    26dc:	ab 16       	cp	r10, r27
    26de:	b1 04       	cpc	r11, r1
    26e0:	0c f0       	brlt	.+2      	; 0x26e4 <_fpadd_parts+0xb8>
    26e2:	61 c0       	rjmp	.+194    	; 0x27a6 <_fpadd_parts+0x17a>
    26e4:	18 16       	cp	r1, r24
    26e6:	19 06       	cpc	r1, r25
    26e8:	6c f5       	brge	.+90     	; 0x2744 <_fpadd_parts+0x118>
    26ea:	37 01       	movw	r6, r14
    26ec:	48 01       	movw	r8, r16
    26ee:	0a 2c       	mov	r0, r10
    26f0:	04 c0       	rjmp	.+8      	; 0x26fa <_fpadd_parts+0xce>
    26f2:	96 94       	lsr	r9
    26f4:	87 94       	ror	r8
    26f6:	77 94       	ror	r7
    26f8:	67 94       	ror	r6
    26fa:	0a 94       	dec	r0
    26fc:	d2 f7       	brpl	.-12     	; 0x26f2 <_fpadd_parts+0xc6>
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	a0 e0       	ldi	r26, 0x00	; 0
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	0a 2c       	mov	r0, r10
    2708:	04 c0       	rjmp	.+8      	; 0x2712 <_fpadd_parts+0xe6>
    270a:	88 0f       	add	r24, r24
    270c:	99 1f       	adc	r25, r25
    270e:	aa 1f       	adc	r26, r26
    2710:	bb 1f       	adc	r27, r27
    2712:	0a 94       	dec	r0
    2714:	d2 f7       	brpl	.-12     	; 0x270a <_fpadd_parts+0xde>
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	a1 09       	sbc	r26, r1
    271a:	b1 09       	sbc	r27, r1
    271c:	8e 21       	and	r24, r14
    271e:	9f 21       	and	r25, r15
    2720:	a0 23       	and	r26, r16
    2722:	b1 23       	and	r27, r17
    2724:	ee 24       	eor	r14, r14
    2726:	ff 24       	eor	r15, r15
    2728:	87 01       	movw	r16, r14
    272a:	e3 94       	inc	r14
    272c:	00 97       	sbiw	r24, 0x00	; 0
    272e:	a1 05       	cpc	r26, r1
    2730:	b1 05       	cpc	r27, r1
    2732:	19 f4       	brne	.+6      	; 0x273a <_fpadd_parts+0x10e>
    2734:	ee 24       	eor	r14, r14
    2736:	ff 24       	eor	r15, r15
    2738:	87 01       	movw	r16, r14
    273a:	e6 28       	or	r14, r6
    273c:	f7 28       	or	r15, r7
    273e:	08 29       	or	r16, r8
    2740:	19 29       	or	r17, r9
    2742:	3c c0       	rjmp	.+120    	; 0x27bc <_fpadd_parts+0x190>
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	d1 f1       	breq	.+116    	; 0x27bc <_fpadd_parts+0x190>
    2748:	ca 0c       	add	r12, r10
    274a:	db 1c       	adc	r13, r11
    274c:	39 01       	movw	r6, r18
    274e:	4a 01       	movw	r8, r20
    2750:	0a 2c       	mov	r0, r10
    2752:	04 c0       	rjmp	.+8      	; 0x275c <_fpadd_parts+0x130>
    2754:	96 94       	lsr	r9
    2756:	87 94       	ror	r8
    2758:	77 94       	ror	r7
    275a:	67 94       	ror	r6
    275c:	0a 94       	dec	r0
    275e:	d2 f7       	brpl	.-12     	; 0x2754 <_fpadd_parts+0x128>
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	a0 e0       	ldi	r26, 0x00	; 0
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	0a 2c       	mov	r0, r10
    276a:	04 c0       	rjmp	.+8      	; 0x2774 <_fpadd_parts+0x148>
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	aa 1f       	adc	r26, r26
    2772:	bb 1f       	adc	r27, r27
    2774:	0a 94       	dec	r0
    2776:	d2 f7       	brpl	.-12     	; 0x276c <_fpadd_parts+0x140>
    2778:	01 97       	sbiw	r24, 0x01	; 1
    277a:	a1 09       	sbc	r26, r1
    277c:	b1 09       	sbc	r27, r1
    277e:	82 23       	and	r24, r18
    2780:	93 23       	and	r25, r19
    2782:	a4 23       	and	r26, r20
    2784:	b5 23       	and	r27, r21
    2786:	21 e0       	ldi	r18, 0x01	; 1
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e0       	ldi	r20, 0x00	; 0
    278c:	50 e0       	ldi	r21, 0x00	; 0
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	a1 05       	cpc	r26, r1
    2792:	b1 05       	cpc	r27, r1
    2794:	19 f4       	brne	.+6      	; 0x279c <_fpadd_parts+0x170>
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	a9 01       	movw	r20, r18
    279c:	26 29       	or	r18, r6
    279e:	37 29       	or	r19, r7
    27a0:	48 29       	or	r20, r8
    27a2:	59 29       	or	r21, r9
    27a4:	0b c0       	rjmp	.+22     	; 0x27bc <_fpadd_parts+0x190>
    27a6:	6c 14       	cp	r6, r12
    27a8:	7d 04       	cpc	r7, r13
    27aa:	24 f4       	brge	.+8      	; 0x27b4 <_fpadd_parts+0x188>
    27ac:	ee 24       	eor	r14, r14
    27ae:	ff 24       	eor	r15, r15
    27b0:	87 01       	movw	r16, r14
    27b2:	04 c0       	rjmp	.+8      	; 0x27bc <_fpadd_parts+0x190>
    27b4:	63 01       	movw	r12, r6
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	a9 01       	movw	r20, r18
    27bc:	81 81       	ldd	r24, Z+1	; 0x01
    27be:	fb 01       	movw	r30, r22
    27c0:	91 81       	ldd	r25, Z+1	; 0x01
    27c2:	89 17       	cp	r24, r25
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <_fpadd_parts+0x19c>
    27c6:	45 c0       	rjmp	.+138    	; 0x2852 <_fpadd_parts+0x226>
    27c8:	88 23       	and	r24, r24
    27ca:	49 f0       	breq	.+18     	; 0x27de <_fpadd_parts+0x1b2>
    27cc:	d8 01       	movw	r26, r16
    27ce:	c7 01       	movw	r24, r14
    27d0:	82 1b       	sub	r24, r18
    27d2:	93 0b       	sbc	r25, r19
    27d4:	a4 0b       	sbc	r26, r20
    27d6:	b5 0b       	sbc	r27, r21
    27d8:	9c 01       	movw	r18, r24
    27da:	ad 01       	movw	r20, r26
    27dc:	04 c0       	rjmp	.+8      	; 0x27e6 <_fpadd_parts+0x1ba>
    27de:	2e 19       	sub	r18, r14
    27e0:	3f 09       	sbc	r19, r15
    27e2:	40 0b       	sbc	r20, r16
    27e4:	51 0b       	sbc	r21, r17
    27e6:	57 fd       	sbrc	r21, 7
    27e8:	04 c0       	rjmp	.+8      	; 0x27f2 <_fpadd_parts+0x1c6>
    27ea:	19 82       	std	Y+1, r1	; 0x01
    27ec:	db 82       	std	Y+3, r13	; 0x03
    27ee:	ca 82       	std	Y+2, r12	; 0x02
    27f0:	0b c0       	rjmp	.+22     	; 0x2808 <_fpadd_parts+0x1dc>
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	89 83       	std	Y+1, r24	; 0x01
    27f6:	db 82       	std	Y+3, r13	; 0x03
    27f8:	ca 82       	std	Y+2, r12	; 0x02
    27fa:	50 95       	com	r21
    27fc:	40 95       	com	r20
    27fe:	30 95       	com	r19
    2800:	21 95       	neg	r18
    2802:	3f 4f       	sbci	r19, 0xFF	; 255
    2804:	4f 4f       	sbci	r20, 0xFF	; 255
    2806:	5f 4f       	sbci	r21, 0xFF	; 255
    2808:	2c 83       	std	Y+4, r18	; 0x04
    280a:	3d 83       	std	Y+5, r19	; 0x05
    280c:	4e 83       	std	Y+6, r20	; 0x06
    280e:	5f 83       	std	Y+7, r21	; 0x07
    2810:	0d c0       	rjmp	.+26     	; 0x282c <_fpadd_parts+0x200>
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	aa 1f       	adc	r26, r26
    2818:	bb 1f       	adc	r27, r27
    281a:	8c 83       	std	Y+4, r24	; 0x04
    281c:	9d 83       	std	Y+5, r25	; 0x05
    281e:	ae 83       	std	Y+6, r26	; 0x06
    2820:	bf 83       	std	Y+7, r27	; 0x07
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	9b 81       	ldd	r25, Y+3	; 0x03
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	9b 83       	std	Y+3, r25	; 0x03
    282a:	8a 83       	std	Y+2, r24	; 0x02
    282c:	8c 81       	ldd	r24, Y+4	; 0x04
    282e:	9d 81       	ldd	r25, Y+5	; 0x05
    2830:	ae 81       	ldd	r26, Y+6	; 0x06
    2832:	bf 81       	ldd	r27, Y+7	; 0x07
    2834:	9c 01       	movw	r18, r24
    2836:	ad 01       	movw	r20, r26
    2838:	21 50       	subi	r18, 0x01	; 1
    283a:	30 40       	sbci	r19, 0x00	; 0
    283c:	40 40       	sbci	r20, 0x00	; 0
    283e:	50 40       	sbci	r21, 0x00	; 0
    2840:	2f 3f       	cpi	r18, 0xFF	; 255
    2842:	ef ef       	ldi	r30, 0xFF	; 255
    2844:	3e 07       	cpc	r19, r30
    2846:	ef ef       	ldi	r30, 0xFF	; 255
    2848:	4e 07       	cpc	r20, r30
    284a:	ef e3       	ldi	r30, 0x3F	; 63
    284c:	5e 07       	cpc	r21, r30
    284e:	08 f3       	brcs	.-62     	; 0x2812 <_fpadd_parts+0x1e6>
    2850:	0b c0       	rjmp	.+22     	; 0x2868 <_fpadd_parts+0x23c>
    2852:	89 83       	std	Y+1, r24	; 0x01
    2854:	db 82       	std	Y+3, r13	; 0x03
    2856:	ca 82       	std	Y+2, r12	; 0x02
    2858:	2e 0d       	add	r18, r14
    285a:	3f 1d       	adc	r19, r15
    285c:	40 1f       	adc	r20, r16
    285e:	51 1f       	adc	r21, r17
    2860:	2c 83       	std	Y+4, r18	; 0x04
    2862:	3d 83       	std	Y+5, r19	; 0x05
    2864:	4e 83       	std	Y+6, r20	; 0x06
    2866:	5f 83       	std	Y+7, r21	; 0x07
    2868:	83 e0       	ldi	r24, 0x03	; 3
    286a:	88 83       	st	Y, r24
    286c:	2c 81       	ldd	r18, Y+4	; 0x04
    286e:	3d 81       	ldd	r19, Y+5	; 0x05
    2870:	4e 81       	ldd	r20, Y+6	; 0x06
    2872:	5f 81       	ldd	r21, Y+7	; 0x07
    2874:	57 ff       	sbrs	r21, 7
    2876:	1d c0       	rjmp	.+58     	; 0x28b2 <_fpadd_parts+0x286>
    2878:	da 01       	movw	r26, r20
    287a:	c9 01       	movw	r24, r18
    287c:	81 70       	andi	r24, 0x01	; 1
    287e:	90 70       	andi	r25, 0x00	; 0
    2880:	a0 70       	andi	r26, 0x00	; 0
    2882:	b0 70       	andi	r27, 0x00	; 0
    2884:	56 95       	lsr	r21
    2886:	47 95       	ror	r20
    2888:	37 95       	ror	r19
    288a:	27 95       	ror	r18
    288c:	82 2b       	or	r24, r18
    288e:	93 2b       	or	r25, r19
    2890:	a4 2b       	or	r26, r20
    2892:	b5 2b       	or	r27, r21
    2894:	8c 83       	std	Y+4, r24	; 0x04
    2896:	9d 83       	std	Y+5, r25	; 0x05
    2898:	ae 83       	std	Y+6, r26	; 0x06
    289a:	bf 83       	std	Y+7, r27	; 0x07
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	9b 81       	ldd	r25, Y+3	; 0x03
    28a0:	01 96       	adiw	r24, 0x01	; 1
    28a2:	9b 83       	std	Y+3, r25	; 0x03
    28a4:	8a 83       	std	Y+2, r24	; 0x02
    28a6:	05 c0       	rjmp	.+10     	; 0x28b2 <_fpadd_parts+0x286>
    28a8:	ef ea       	ldi	r30, 0xAF	; 175
    28aa:	f1 e0       	ldi	r31, 0x01	; 1
    28ac:	03 c0       	rjmp	.+6      	; 0x28b4 <_fpadd_parts+0x288>
    28ae:	fb 01       	movw	r30, r22
    28b0:	01 c0       	rjmp	.+2      	; 0x28b4 <_fpadd_parts+0x288>
    28b2:	fe 01       	movw	r30, r28
    28b4:	cf 01       	movw	r24, r30
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
    28ba:	ee e0       	ldi	r30, 0x0E	; 14
    28bc:	0c 94 b8 19 	jmp	0x3370	; 0x3370 <__epilogue_restores__+0x8>

000028c0 <__addsf3>:
    28c0:	a0 e2       	ldi	r26, 0x20	; 32
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	e6 e6       	ldi	r30, 0x66	; 102
    28c6:	f4 e1       	ldi	r31, 0x14	; 20
    28c8:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__prologue_saves__+0x18>
    28cc:	69 83       	std	Y+1, r22	; 0x01
    28ce:	7a 83       	std	Y+2, r23	; 0x02
    28d0:	8b 83       	std	Y+3, r24	; 0x03
    28d2:	9c 83       	std	Y+4, r25	; 0x04
    28d4:	2d 83       	std	Y+5, r18	; 0x05
    28d6:	3e 83       	std	Y+6, r19	; 0x06
    28d8:	4f 83       	std	Y+7, r20	; 0x07
    28da:	58 87       	std	Y+8, r21	; 0x08
    28dc:	89 e0       	ldi	r24, 0x09	; 9
    28de:	e8 2e       	mov	r14, r24
    28e0:	f1 2c       	mov	r15, r1
    28e2:	ec 0e       	add	r14, r28
    28e4:	fd 1e       	adc	r15, r29
    28e6:	ce 01       	movw	r24, r28
    28e8:	01 96       	adiw	r24, 0x01	; 1
    28ea:	b7 01       	movw	r22, r14
    28ec:	0e 94 ca 18 	call	0x3194	; 0x3194 <__unpack_f>
    28f0:	8e 01       	movw	r16, r28
    28f2:	0f 5e       	subi	r16, 0xEF	; 239
    28f4:	1f 4f       	sbci	r17, 0xFF	; 255
    28f6:	ce 01       	movw	r24, r28
    28f8:	05 96       	adiw	r24, 0x05	; 5
    28fa:	b8 01       	movw	r22, r16
    28fc:	0e 94 ca 18 	call	0x3194	; 0x3194 <__unpack_f>
    2900:	c7 01       	movw	r24, r14
    2902:	b8 01       	movw	r22, r16
    2904:	ae 01       	movw	r20, r28
    2906:	47 5e       	subi	r20, 0xE7	; 231
    2908:	5f 4f       	sbci	r21, 0xFF	; 255
    290a:	0e 94 16 13 	call	0x262c	; 0x262c <_fpadd_parts>
    290e:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__pack_f>
    2912:	a0 96       	adiw	r28, 0x20	; 32
    2914:	e6 e0       	ldi	r30, 0x06	; 6
    2916:	0c 94 c0 19 	jmp	0x3380	; 0x3380 <__epilogue_restores__+0x18>

0000291a <__subsf3>:
    291a:	a0 e2       	ldi	r26, 0x20	; 32
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	e3 e9       	ldi	r30, 0x93	; 147
    2920:	f4 e1       	ldi	r31, 0x14	; 20
    2922:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__prologue_saves__+0x18>
    2926:	69 83       	std	Y+1, r22	; 0x01
    2928:	7a 83       	std	Y+2, r23	; 0x02
    292a:	8b 83       	std	Y+3, r24	; 0x03
    292c:	9c 83       	std	Y+4, r25	; 0x04
    292e:	2d 83       	std	Y+5, r18	; 0x05
    2930:	3e 83       	std	Y+6, r19	; 0x06
    2932:	4f 83       	std	Y+7, r20	; 0x07
    2934:	58 87       	std	Y+8, r21	; 0x08
    2936:	8e 01       	movw	r16, r28
    2938:	07 5f       	subi	r16, 0xF7	; 247
    293a:	1f 4f       	sbci	r17, 0xFF	; 255
    293c:	ce 01       	movw	r24, r28
    293e:	01 96       	adiw	r24, 0x01	; 1
    2940:	b8 01       	movw	r22, r16
    2942:	0e 94 ca 18 	call	0x3194	; 0x3194 <__unpack_f>
    2946:	91 e1       	ldi	r25, 0x11	; 17
    2948:	e9 2e       	mov	r14, r25
    294a:	f1 2c       	mov	r15, r1
    294c:	ec 0e       	add	r14, r28
    294e:	fd 1e       	adc	r15, r29
    2950:	ce 01       	movw	r24, r28
    2952:	05 96       	adiw	r24, 0x05	; 5
    2954:	b7 01       	movw	r22, r14
    2956:	0e 94 ca 18 	call	0x3194	; 0x3194 <__unpack_f>
    295a:	8a 89       	ldd	r24, Y+18	; 0x12
    295c:	91 e0       	ldi	r25, 0x01	; 1
    295e:	89 27       	eor	r24, r25
    2960:	8a 8b       	std	Y+18, r24	; 0x12
    2962:	c8 01       	movw	r24, r16
    2964:	b7 01       	movw	r22, r14
    2966:	ae 01       	movw	r20, r28
    2968:	47 5e       	subi	r20, 0xE7	; 231
    296a:	5f 4f       	sbci	r21, 0xFF	; 255
    296c:	0e 94 16 13 	call	0x262c	; 0x262c <_fpadd_parts>
    2970:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__pack_f>
    2974:	a0 96       	adiw	r28, 0x20	; 32
    2976:	e6 e0       	ldi	r30, 0x06	; 6
    2978:	0c 94 c0 19 	jmp	0x3380	; 0x3380 <__epilogue_restores__+0x18>

0000297c <__mulsf3>:
    297c:	a0 e2       	ldi	r26, 0x20	; 32
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	e4 ec       	ldi	r30, 0xC4	; 196
    2982:	f4 e1       	ldi	r31, 0x14	; 20
    2984:	0c 94 98 19 	jmp	0x3330	; 0x3330 <__prologue_saves__>
    2988:	69 83       	std	Y+1, r22	; 0x01
    298a:	7a 83       	std	Y+2, r23	; 0x02
    298c:	8b 83       	std	Y+3, r24	; 0x03
    298e:	9c 83       	std	Y+4, r25	; 0x04
    2990:	2d 83       	std	Y+5, r18	; 0x05
    2992:	3e 83       	std	Y+6, r19	; 0x06
    2994:	4f 83       	std	Y+7, r20	; 0x07
    2996:	58 87       	std	Y+8, r21	; 0x08
    2998:	ce 01       	movw	r24, r28
    299a:	01 96       	adiw	r24, 0x01	; 1
    299c:	be 01       	movw	r22, r28
    299e:	67 5f       	subi	r22, 0xF7	; 247
    29a0:	7f 4f       	sbci	r23, 0xFF	; 255
    29a2:	0e 94 ca 18 	call	0x3194	; 0x3194 <__unpack_f>
    29a6:	ce 01       	movw	r24, r28
    29a8:	05 96       	adiw	r24, 0x05	; 5
    29aa:	be 01       	movw	r22, r28
    29ac:	6f 5e       	subi	r22, 0xEF	; 239
    29ae:	7f 4f       	sbci	r23, 0xFF	; 255
    29b0:	0e 94 ca 18 	call	0x3194	; 0x3194 <__unpack_f>
    29b4:	99 85       	ldd	r25, Y+9	; 0x09
    29b6:	92 30       	cpi	r25, 0x02	; 2
    29b8:	78 f0       	brcs	.+30     	; 0x29d8 <__mulsf3+0x5c>
    29ba:	89 89       	ldd	r24, Y+17	; 0x11
    29bc:	82 30       	cpi	r24, 0x02	; 2
    29be:	c0 f0       	brcs	.+48     	; 0x29f0 <__mulsf3+0x74>
    29c0:	94 30       	cpi	r25, 0x04	; 4
    29c2:	19 f4       	brne	.+6      	; 0x29ca <__mulsf3+0x4e>
    29c4:	82 30       	cpi	r24, 0x02	; 2
    29c6:	41 f4       	brne	.+16     	; 0x29d8 <__mulsf3+0x5c>
    29c8:	cb c0       	rjmp	.+406    	; 0x2b60 <__mulsf3+0x1e4>
    29ca:	84 30       	cpi	r24, 0x04	; 4
    29cc:	19 f4       	brne	.+6      	; 0x29d4 <__mulsf3+0x58>
    29ce:	92 30       	cpi	r25, 0x02	; 2
    29d0:	79 f4       	brne	.+30     	; 0x29f0 <__mulsf3+0x74>
    29d2:	c6 c0       	rjmp	.+396    	; 0x2b60 <__mulsf3+0x1e4>
    29d4:	92 30       	cpi	r25, 0x02	; 2
    29d6:	51 f4       	brne	.+20     	; 0x29ec <__mulsf3+0x70>
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	2a 85       	ldd	r18, Y+10	; 0x0a
    29dc:	9a 89       	ldd	r25, Y+18	; 0x12
    29de:	29 17       	cp	r18, r25
    29e0:	09 f4       	brne	.+2      	; 0x29e4 <__mulsf3+0x68>
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	8a 87       	std	Y+10, r24	; 0x0a
    29e6:	ce 01       	movw	r24, r28
    29e8:	09 96       	adiw	r24, 0x09	; 9
    29ea:	bc c0       	rjmp	.+376    	; 0x2b64 <__mulsf3+0x1e8>
    29ec:	82 30       	cpi	r24, 0x02	; 2
    29ee:	51 f4       	brne	.+20     	; 0x2a04 <__mulsf3+0x88>
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	2a 85       	ldd	r18, Y+10	; 0x0a
    29f4:	9a 89       	ldd	r25, Y+18	; 0x12
    29f6:	29 17       	cp	r18, r25
    29f8:	09 f4       	brne	.+2      	; 0x29fc <__mulsf3+0x80>
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	8a 8b       	std	Y+18, r24	; 0x12
    29fe:	ce 01       	movw	r24, r28
    2a00:	41 96       	adiw	r24, 0x11	; 17
    2a02:	b0 c0       	rjmp	.+352    	; 0x2b64 <__mulsf3+0x1e8>
    2a04:	6d 84       	ldd	r6, Y+13	; 0x0d
    2a06:	7e 84       	ldd	r7, Y+14	; 0x0e
    2a08:	8f 84       	ldd	r8, Y+15	; 0x0f
    2a0a:	98 88       	ldd	r9, Y+16	; 0x10
    2a0c:	ed 88       	ldd	r14, Y+21	; 0x15
    2a0e:	fe 88       	ldd	r15, Y+22	; 0x16
    2a10:	0f 89       	ldd	r16, Y+23	; 0x17
    2a12:	18 8d       	ldd	r17, Y+24	; 0x18
    2a14:	e0 e2       	ldi	r30, 0x20	; 32
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	aa 24       	eor	r10, r10
    2a20:	bb 24       	eor	r11, r11
    2a22:	65 01       	movw	r12, r10
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	a9 01       	movw	r20, r18
    2a2a:	b3 01       	movw	r22, r6
    2a2c:	61 70       	andi	r22, 0x01	; 1
    2a2e:	70 70       	andi	r23, 0x00	; 0
    2a30:	61 15       	cp	r22, r1
    2a32:	71 05       	cpc	r23, r1
    2a34:	d1 f0       	breq	.+52     	; 0x2a6a <__mulsf3+0xee>
    2a36:	2e 0d       	add	r18, r14
    2a38:	3f 1d       	adc	r19, r15
    2a3a:	40 1f       	adc	r20, r16
    2a3c:	51 1f       	adc	r21, r17
    2a3e:	15 01       	movw	r2, r10
    2a40:	26 01       	movw	r4, r12
    2a42:	28 0e       	add	r2, r24
    2a44:	39 1e       	adc	r3, r25
    2a46:	4a 1e       	adc	r4, r26
    2a48:	5b 1e       	adc	r5, r27
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	a0 e0       	ldi	r26, 0x00	; 0
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	2e 15       	cp	r18, r14
    2a54:	3f 05       	cpc	r19, r15
    2a56:	40 07       	cpc	r20, r16
    2a58:	51 07       	cpc	r21, r17
    2a5a:	18 f0       	brcs	.+6      	; 0x2a62 <__mulsf3+0xe6>
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	dc 01       	movw	r26, r24
    2a62:	82 0d       	add	r24, r2
    2a64:	93 1d       	adc	r25, r3
    2a66:	a4 1d       	adc	r26, r4
    2a68:	b5 1d       	adc	r27, r5
    2a6a:	aa 0c       	add	r10, r10
    2a6c:	bb 1c       	adc	r11, r11
    2a6e:	cc 1c       	adc	r12, r12
    2a70:	dd 1c       	adc	r13, r13
    2a72:	17 ff       	sbrs	r17, 7
    2a74:	09 c0       	rjmp	.+18     	; 0x2a88 <__mulsf3+0x10c>
    2a76:	61 e0       	ldi	r22, 0x01	; 1
    2a78:	26 2e       	mov	r2, r22
    2a7a:	31 2c       	mov	r3, r1
    2a7c:	41 2c       	mov	r4, r1
    2a7e:	51 2c       	mov	r5, r1
    2a80:	a2 28       	or	r10, r2
    2a82:	b3 28       	or	r11, r3
    2a84:	c4 28       	or	r12, r4
    2a86:	d5 28       	or	r13, r5
    2a88:	31 97       	sbiw	r30, 0x01	; 1
    2a8a:	49 f0       	breq	.+18     	; 0x2a9e <__mulsf3+0x122>
    2a8c:	ee 0c       	add	r14, r14
    2a8e:	ff 1c       	adc	r15, r15
    2a90:	00 1f       	adc	r16, r16
    2a92:	11 1f       	adc	r17, r17
    2a94:	96 94       	lsr	r9
    2a96:	87 94       	ror	r8
    2a98:	77 94       	ror	r7
    2a9a:	67 94       	ror	r6
    2a9c:	c6 cf       	rjmp	.-116    	; 0x2a2a <__mulsf3+0xae>
    2a9e:	6b 89       	ldd	r22, Y+19	; 0x13
    2aa0:	7c 89       	ldd	r23, Y+20	; 0x14
    2aa2:	eb 85       	ldd	r30, Y+11	; 0x0b
    2aa4:	fc 85       	ldd	r31, Y+12	; 0x0c
    2aa6:	6e 0f       	add	r22, r30
    2aa8:	7f 1f       	adc	r23, r31
    2aaa:	6e 5f       	subi	r22, 0xFE	; 254
    2aac:	7f 4f       	sbci	r23, 0xFF	; 255
    2aae:	7c 8f       	std	Y+28, r23	; 0x1c
    2ab0:	6b 8f       	std	Y+27, r22	; 0x1b
    2ab2:	61 e0       	ldi	r22, 0x01	; 1
    2ab4:	ea 85       	ldd	r30, Y+10	; 0x0a
    2ab6:	7a 89       	ldd	r23, Y+18	; 0x12
    2ab8:	e7 17       	cp	r30, r23
    2aba:	09 f4       	brne	.+2      	; 0x2abe <__mulsf3+0x142>
    2abc:	60 e0       	ldi	r22, 0x00	; 0
    2abe:	6a 8f       	std	Y+26, r22	; 0x1a
    2ac0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2ac2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2ac4:	10 c0       	rjmp	.+32     	; 0x2ae6 <__mulsf3+0x16a>
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	e1 70       	andi	r30, 0x01	; 1
    2aca:	f0 70       	andi	r31, 0x00	; 0
    2acc:	30 97       	sbiw	r30, 0x00	; 0
    2ace:	29 f0       	breq	.+10     	; 0x2ada <__mulsf3+0x15e>
    2ad0:	56 95       	lsr	r21
    2ad2:	47 95       	ror	r20
    2ad4:	37 95       	ror	r19
    2ad6:	27 95       	ror	r18
    2ad8:	50 68       	ori	r21, 0x80	; 128
    2ada:	b6 95       	lsr	r27
    2adc:	a7 95       	ror	r26
    2ade:	97 95       	ror	r25
    2ae0:	87 95       	ror	r24
    2ae2:	6f 5f       	subi	r22, 0xFF	; 255
    2ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae6:	b7 fd       	sbrc	r27, 7
    2ae8:	ee cf       	rjmp	.-36     	; 0x2ac6 <__mulsf3+0x14a>
    2aea:	0c c0       	rjmp	.+24     	; 0x2b04 <__mulsf3+0x188>
    2aec:	88 0f       	add	r24, r24
    2aee:	99 1f       	adc	r25, r25
    2af0:	aa 1f       	adc	r26, r26
    2af2:	bb 1f       	adc	r27, r27
    2af4:	57 fd       	sbrc	r21, 7
    2af6:	81 60       	ori	r24, 0x01	; 1
    2af8:	22 0f       	add	r18, r18
    2afa:	33 1f       	adc	r19, r19
    2afc:	44 1f       	adc	r20, r20
    2afe:	55 1f       	adc	r21, r21
    2b00:	61 50       	subi	r22, 0x01	; 1
    2b02:	70 40       	sbci	r23, 0x00	; 0
    2b04:	80 30       	cpi	r24, 0x00	; 0
    2b06:	e0 e0       	ldi	r30, 0x00	; 0
    2b08:	9e 07       	cpc	r25, r30
    2b0a:	e0 e0       	ldi	r30, 0x00	; 0
    2b0c:	ae 07       	cpc	r26, r30
    2b0e:	e0 e4       	ldi	r30, 0x40	; 64
    2b10:	be 07       	cpc	r27, r30
    2b12:	60 f3       	brcs	.-40     	; 0x2aec <__mulsf3+0x170>
    2b14:	6b 8f       	std	Y+27, r22	; 0x1b
    2b16:	7c 8f       	std	Y+28, r23	; 0x1c
    2b18:	6f e7       	ldi	r22, 0x7F	; 127
    2b1a:	e6 2e       	mov	r14, r22
    2b1c:	f1 2c       	mov	r15, r1
    2b1e:	01 2d       	mov	r16, r1
    2b20:	11 2d       	mov	r17, r1
    2b22:	e8 22       	and	r14, r24
    2b24:	f9 22       	and	r15, r25
    2b26:	0a 23       	and	r16, r26
    2b28:	1b 23       	and	r17, r27
    2b2a:	60 e4       	ldi	r22, 0x40	; 64
    2b2c:	e6 16       	cp	r14, r22
    2b2e:	f1 04       	cpc	r15, r1
    2b30:	01 05       	cpc	r16, r1
    2b32:	11 05       	cpc	r17, r1
    2b34:	61 f4       	brne	.+24     	; 0x2b4e <__mulsf3+0x1d2>
    2b36:	87 fd       	sbrc	r24, 7
    2b38:	0a c0       	rjmp	.+20     	; 0x2b4e <__mulsf3+0x1d2>
    2b3a:	21 15       	cp	r18, r1
    2b3c:	31 05       	cpc	r19, r1
    2b3e:	41 05       	cpc	r20, r1
    2b40:	51 05       	cpc	r21, r1
    2b42:	29 f0       	breq	.+10     	; 0x2b4e <__mulsf3+0x1d2>
    2b44:	80 5c       	subi	r24, 0xC0	; 192
    2b46:	9f 4f       	sbci	r25, 0xFF	; 255
    2b48:	af 4f       	sbci	r26, 0xFF	; 255
    2b4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b4c:	80 78       	andi	r24, 0x80	; 128
    2b4e:	8d 8f       	std	Y+29, r24	; 0x1d
    2b50:	9e 8f       	std	Y+30, r25	; 0x1e
    2b52:	af 8f       	std	Y+31, r26	; 0x1f
    2b54:	b8 a3       	std	Y+32, r27	; 0x20
    2b56:	83 e0       	ldi	r24, 0x03	; 3
    2b58:	89 8f       	std	Y+25, r24	; 0x19
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	49 96       	adiw	r24, 0x19	; 25
    2b5e:	02 c0       	rjmp	.+4      	; 0x2b64 <__mulsf3+0x1e8>
    2b60:	8f ea       	ldi	r24, 0xAF	; 175
    2b62:	91 e0       	ldi	r25, 0x01	; 1
    2b64:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__pack_f>
    2b68:	a0 96       	adiw	r28, 0x20	; 32
    2b6a:	e2 e1       	ldi	r30, 0x12	; 18
    2b6c:	0c 94 b4 19 	jmp	0x3368	; 0x3368 <__epilogue_restores__>

00002b70 <__gtsf2>:
    2b70:	a8 e1       	ldi	r26, 0x18	; 24
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	ee eb       	ldi	r30, 0xBE	; 190
    2b76:	f5 e1       	ldi	r31, 0x15	; 21
    2b78:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__prologue_saves__+0x18>
    2b7c:	69 83       	std	Y+1, r22	; 0x01
    2b7e:	7a 83       	std	Y+2, r23	; 0x02
    2b80:	8b 83       	std	Y+3, r24	; 0x03
    2b82:	9c 83       	std	Y+4, r25	; 0x04
    2b84:	2d 83       	std	Y+5, r18	; 0x05
    2b86:	3e 83       	std	Y+6, r19	; 0x06
    2b88:	4f 83       	std	Y+7, r20	; 0x07
    2b8a:	58 87       	std	Y+8, r21	; 0x08
    2b8c:	8e 01       	movw	r16, r28
    2b8e:	07 5f       	subi	r16, 0xF7	; 247
    2b90:	1f 4f       	sbci	r17, 0xFF	; 255
    2b92:	ce 01       	movw	r24, r28
    2b94:	01 96       	adiw	r24, 0x01	; 1
    2b96:	b8 01       	movw	r22, r16
    2b98:	0e 94 ca 18 	call	0x3194	; 0x3194 <__unpack_f>
    2b9c:	81 e1       	ldi	r24, 0x11	; 17
    2b9e:	e8 2e       	mov	r14, r24
    2ba0:	f1 2c       	mov	r15, r1
    2ba2:	ec 0e       	add	r14, r28
    2ba4:	fd 1e       	adc	r15, r29
    2ba6:	ce 01       	movw	r24, r28
    2ba8:	05 96       	adiw	r24, 0x05	; 5
    2baa:	b7 01       	movw	r22, r14
    2bac:	0e 94 ca 18 	call	0x3194	; 0x3194 <__unpack_f>
    2bb0:	89 85       	ldd	r24, Y+9	; 0x09
    2bb2:	82 30       	cpi	r24, 0x02	; 2
    2bb4:	40 f0       	brcs	.+16     	; 0x2bc6 <__gtsf2+0x56>
    2bb6:	89 89       	ldd	r24, Y+17	; 0x11
    2bb8:	82 30       	cpi	r24, 0x02	; 2
    2bba:	28 f0       	brcs	.+10     	; 0x2bc6 <__gtsf2+0x56>
    2bbc:	c8 01       	movw	r24, r16
    2bbe:	b7 01       	movw	r22, r14
    2bc0:	0e 94 33 19 	call	0x3266	; 0x3266 <__fpcmp_parts_f>
    2bc4:	01 c0       	rjmp	.+2      	; 0x2bc8 <__gtsf2+0x58>
    2bc6:	8f ef       	ldi	r24, 0xFF	; 255
    2bc8:	68 96       	adiw	r28, 0x18	; 24
    2bca:	e6 e0       	ldi	r30, 0x06	; 6
    2bcc:	0c 94 c0 19 	jmp	0x3380	; 0x3380 <__epilogue_restores__+0x18>

00002bd0 <__gesf2>:
    2bd0:	a8 e1       	ldi	r26, 0x18	; 24
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	ee ee       	ldi	r30, 0xEE	; 238
    2bd6:	f5 e1       	ldi	r31, 0x15	; 21
    2bd8:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__prologue_saves__+0x18>
    2bdc:	69 83       	std	Y+1, r22	; 0x01
    2bde:	7a 83       	std	Y+2, r23	; 0x02
    2be0:	8b 83       	std	Y+3, r24	; 0x03
    2be2:	9c 83       	std	Y+4, r25	; 0x04
    2be4:	2d 83       	std	Y+5, r18	; 0x05
    2be6:	3e 83       	std	Y+6, r19	; 0x06
    2be8:	4f 83       	std	Y+7, r20	; 0x07
    2bea:	58 87       	std	Y+8, r21	; 0x08
    2bec:	8e 01       	movw	r16, r28
    2bee:	07 5f       	subi	r16, 0xF7	; 247
    2bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf2:	ce 01       	movw	r24, r28
    2bf4:	01 96       	adiw	r24, 0x01	; 1
    2bf6:	b8 01       	movw	r22, r16
    2bf8:	0e 94 ca 18 	call	0x3194	; 0x3194 <__unpack_f>
    2bfc:	81 e1       	ldi	r24, 0x11	; 17
    2bfe:	e8 2e       	mov	r14, r24
    2c00:	f1 2c       	mov	r15, r1
    2c02:	ec 0e       	add	r14, r28
    2c04:	fd 1e       	adc	r15, r29
    2c06:	ce 01       	movw	r24, r28
    2c08:	05 96       	adiw	r24, 0x05	; 5
    2c0a:	b7 01       	movw	r22, r14
    2c0c:	0e 94 ca 18 	call	0x3194	; 0x3194 <__unpack_f>
    2c10:	89 85       	ldd	r24, Y+9	; 0x09
    2c12:	82 30       	cpi	r24, 0x02	; 2
    2c14:	40 f0       	brcs	.+16     	; 0x2c26 <__gesf2+0x56>
    2c16:	89 89       	ldd	r24, Y+17	; 0x11
    2c18:	82 30       	cpi	r24, 0x02	; 2
    2c1a:	28 f0       	brcs	.+10     	; 0x2c26 <__gesf2+0x56>
    2c1c:	c8 01       	movw	r24, r16
    2c1e:	b7 01       	movw	r22, r14
    2c20:	0e 94 33 19 	call	0x3266	; 0x3266 <__fpcmp_parts_f>
    2c24:	01 c0       	rjmp	.+2      	; 0x2c28 <__gesf2+0x58>
    2c26:	8f ef       	ldi	r24, 0xFF	; 255
    2c28:	68 96       	adiw	r28, 0x18	; 24
    2c2a:	e6 e0       	ldi	r30, 0x06	; 6
    2c2c:	0c 94 c0 19 	jmp	0x3380	; 0x3380 <__epilogue_restores__+0x18>

00002c30 <__ltsf2>:
    2c30:	a8 e1       	ldi	r26, 0x18	; 24
    2c32:	b0 e0       	ldi	r27, 0x00	; 0
    2c34:	ee e1       	ldi	r30, 0x1E	; 30
    2c36:	f6 e1       	ldi	r31, 0x16	; 22
    2c38:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__prologue_saves__+0x18>
    2c3c:	69 83       	std	Y+1, r22	; 0x01
    2c3e:	7a 83       	std	Y+2, r23	; 0x02
    2c40:	8b 83       	std	Y+3, r24	; 0x03
    2c42:	9c 83       	std	Y+4, r25	; 0x04
    2c44:	2d 83       	std	Y+5, r18	; 0x05
    2c46:	3e 83       	std	Y+6, r19	; 0x06
    2c48:	4f 83       	std	Y+7, r20	; 0x07
    2c4a:	58 87       	std	Y+8, r21	; 0x08
    2c4c:	8e 01       	movw	r16, r28
    2c4e:	07 5f       	subi	r16, 0xF7	; 247
    2c50:	1f 4f       	sbci	r17, 0xFF	; 255
    2c52:	ce 01       	movw	r24, r28
    2c54:	01 96       	adiw	r24, 0x01	; 1
    2c56:	b8 01       	movw	r22, r16
    2c58:	0e 94 ca 18 	call	0x3194	; 0x3194 <__unpack_f>
    2c5c:	81 e1       	ldi	r24, 0x11	; 17
    2c5e:	e8 2e       	mov	r14, r24
    2c60:	f1 2c       	mov	r15, r1
    2c62:	ec 0e       	add	r14, r28
    2c64:	fd 1e       	adc	r15, r29
    2c66:	ce 01       	movw	r24, r28
    2c68:	05 96       	adiw	r24, 0x05	; 5
    2c6a:	b7 01       	movw	r22, r14
    2c6c:	0e 94 ca 18 	call	0x3194	; 0x3194 <__unpack_f>
    2c70:	89 85       	ldd	r24, Y+9	; 0x09
    2c72:	82 30       	cpi	r24, 0x02	; 2
    2c74:	40 f0       	brcs	.+16     	; 0x2c86 <__ltsf2+0x56>
    2c76:	89 89       	ldd	r24, Y+17	; 0x11
    2c78:	82 30       	cpi	r24, 0x02	; 2
    2c7a:	28 f0       	brcs	.+10     	; 0x2c86 <__ltsf2+0x56>
    2c7c:	c8 01       	movw	r24, r16
    2c7e:	b7 01       	movw	r22, r14
    2c80:	0e 94 33 19 	call	0x3266	; 0x3266 <__fpcmp_parts_f>
    2c84:	01 c0       	rjmp	.+2      	; 0x2c88 <__ltsf2+0x58>
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	68 96       	adiw	r28, 0x18	; 24
    2c8a:	e6 e0       	ldi	r30, 0x06	; 6
    2c8c:	0c 94 c0 19 	jmp	0x3380	; 0x3380 <__epilogue_restores__+0x18>

00002c90 <__lesf2>:
    2c90:	a8 e1       	ldi	r26, 0x18	; 24
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	ee e4       	ldi	r30, 0x4E	; 78
    2c96:	f6 e1       	ldi	r31, 0x16	; 22
    2c98:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__prologue_saves__+0x18>
    2c9c:	69 83       	std	Y+1, r22	; 0x01
    2c9e:	7a 83       	std	Y+2, r23	; 0x02
    2ca0:	8b 83       	std	Y+3, r24	; 0x03
    2ca2:	9c 83       	std	Y+4, r25	; 0x04
    2ca4:	2d 83       	std	Y+5, r18	; 0x05
    2ca6:	3e 83       	std	Y+6, r19	; 0x06
    2ca8:	4f 83       	std	Y+7, r20	; 0x07
    2caa:	58 87       	std	Y+8, r21	; 0x08
    2cac:	8e 01       	movw	r16, r28
    2cae:	07 5f       	subi	r16, 0xF7	; 247
    2cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb2:	ce 01       	movw	r24, r28
    2cb4:	01 96       	adiw	r24, 0x01	; 1
    2cb6:	b8 01       	movw	r22, r16
    2cb8:	0e 94 ca 18 	call	0x3194	; 0x3194 <__unpack_f>
    2cbc:	81 e1       	ldi	r24, 0x11	; 17
    2cbe:	e8 2e       	mov	r14, r24
    2cc0:	f1 2c       	mov	r15, r1
    2cc2:	ec 0e       	add	r14, r28
    2cc4:	fd 1e       	adc	r15, r29
    2cc6:	ce 01       	movw	r24, r28
    2cc8:	05 96       	adiw	r24, 0x05	; 5
    2cca:	b7 01       	movw	r22, r14
    2ccc:	0e 94 ca 18 	call	0x3194	; 0x3194 <__unpack_f>
    2cd0:	89 85       	ldd	r24, Y+9	; 0x09
    2cd2:	82 30       	cpi	r24, 0x02	; 2
    2cd4:	40 f0       	brcs	.+16     	; 0x2ce6 <__lesf2+0x56>
    2cd6:	89 89       	ldd	r24, Y+17	; 0x11
    2cd8:	82 30       	cpi	r24, 0x02	; 2
    2cda:	28 f0       	brcs	.+10     	; 0x2ce6 <__lesf2+0x56>
    2cdc:	c8 01       	movw	r24, r16
    2cde:	b7 01       	movw	r22, r14
    2ce0:	0e 94 33 19 	call	0x3266	; 0x3266 <__fpcmp_parts_f>
    2ce4:	01 c0       	rjmp	.+2      	; 0x2ce8 <__lesf2+0x58>
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	68 96       	adiw	r28, 0x18	; 24
    2cea:	e6 e0       	ldi	r30, 0x06	; 6
    2cec:	0c 94 c0 19 	jmp	0x3380	; 0x3380 <__epilogue_restores__+0x18>

00002cf0 <__floatsisf>:
    2cf0:	a8 e0       	ldi	r26, 0x08	; 8
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	ee e7       	ldi	r30, 0x7E	; 126
    2cf6:	f6 e1       	ldi	r31, 0x16	; 22
    2cf8:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__prologue_saves__+0x18>
    2cfc:	7b 01       	movw	r14, r22
    2cfe:	8c 01       	movw	r16, r24
    2d00:	83 e0       	ldi	r24, 0x03	; 3
    2d02:	89 83       	std	Y+1, r24	; 0x01
    2d04:	d8 01       	movw	r26, r16
    2d06:	c7 01       	movw	r24, r14
    2d08:	88 27       	eor	r24, r24
    2d0a:	b7 fd       	sbrc	r27, 7
    2d0c:	83 95       	inc	r24
    2d0e:	99 27       	eor	r25, r25
    2d10:	aa 27       	eor	r26, r26
    2d12:	bb 27       	eor	r27, r27
    2d14:	28 2f       	mov	r18, r24
    2d16:	8a 83       	std	Y+2, r24	; 0x02
    2d18:	e1 14       	cp	r14, r1
    2d1a:	f1 04       	cpc	r15, r1
    2d1c:	01 05       	cpc	r16, r1
    2d1e:	11 05       	cpc	r17, r1
    2d20:	19 f4       	brne	.+6      	; 0x2d28 <__floatsisf+0x38>
    2d22:	82 e0       	ldi	r24, 0x02	; 2
    2d24:	89 83       	std	Y+1, r24	; 0x01
    2d26:	37 c0       	rjmp	.+110    	; 0x2d96 <__floatsisf+0xa6>
    2d28:	8e e1       	ldi	r24, 0x1E	; 30
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	9c 83       	std	Y+4, r25	; 0x04
    2d2e:	8b 83       	std	Y+3, r24	; 0x03
    2d30:	22 23       	and	r18, r18
    2d32:	89 f0       	breq	.+34     	; 0x2d56 <__floatsisf+0x66>
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	e8 16       	cp	r14, r24
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	f8 06       	cpc	r15, r24
    2d3c:	80 e0       	ldi	r24, 0x00	; 0
    2d3e:	08 07       	cpc	r16, r24
    2d40:	80 e8       	ldi	r24, 0x80	; 128
    2d42:	18 07       	cpc	r17, r24
    2d44:	69 f1       	breq	.+90     	; 0x2da0 <__floatsisf+0xb0>
    2d46:	10 95       	com	r17
    2d48:	00 95       	com	r16
    2d4a:	f0 94       	com	r15
    2d4c:	e0 94       	com	r14
    2d4e:	e1 1c       	adc	r14, r1
    2d50:	f1 1c       	adc	r15, r1
    2d52:	01 1d       	adc	r16, r1
    2d54:	11 1d       	adc	r17, r1
    2d56:	ed 82       	std	Y+5, r14	; 0x05
    2d58:	fe 82       	std	Y+6, r15	; 0x06
    2d5a:	0f 83       	std	Y+7, r16	; 0x07
    2d5c:	18 87       	std	Y+8, r17	; 0x08
    2d5e:	c8 01       	movw	r24, r16
    2d60:	b7 01       	movw	r22, r14
    2d62:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__clzsi2>
    2d66:	9c 01       	movw	r18, r24
    2d68:	21 50       	subi	r18, 0x01	; 1
    2d6a:	30 40       	sbci	r19, 0x00	; 0
    2d6c:	12 16       	cp	r1, r18
    2d6e:	13 06       	cpc	r1, r19
    2d70:	94 f4       	brge	.+36     	; 0x2d96 <__floatsisf+0xa6>
    2d72:	02 2e       	mov	r0, r18
    2d74:	04 c0       	rjmp	.+8      	; 0x2d7e <__floatsisf+0x8e>
    2d76:	ee 0c       	add	r14, r14
    2d78:	ff 1c       	adc	r15, r15
    2d7a:	00 1f       	adc	r16, r16
    2d7c:	11 1f       	adc	r17, r17
    2d7e:	0a 94       	dec	r0
    2d80:	d2 f7       	brpl	.-12     	; 0x2d76 <__floatsisf+0x86>
    2d82:	ed 82       	std	Y+5, r14	; 0x05
    2d84:	fe 82       	std	Y+6, r15	; 0x06
    2d86:	0f 83       	std	Y+7, r16	; 0x07
    2d88:	18 87       	std	Y+8, r17	; 0x08
    2d8a:	8e e1       	ldi	r24, 0x1E	; 30
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	82 1b       	sub	r24, r18
    2d90:	93 0b       	sbc	r25, r19
    2d92:	9c 83       	std	Y+4, r25	; 0x04
    2d94:	8b 83       	std	Y+3, r24	; 0x03
    2d96:	ce 01       	movw	r24, r28
    2d98:	01 96       	adiw	r24, 0x01	; 1
    2d9a:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__pack_f>
    2d9e:	04 c0       	rjmp	.+8      	; 0x2da8 <__floatsisf+0xb8>
    2da0:	60 e0       	ldi	r22, 0x00	; 0
    2da2:	70 e0       	ldi	r23, 0x00	; 0
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	9f ec       	ldi	r25, 0xCF	; 207
    2da8:	28 96       	adiw	r28, 0x08	; 8
    2daa:	e6 e0       	ldi	r30, 0x06	; 6
    2dac:	0c 94 c0 19 	jmp	0x3380	; 0x3380 <__epilogue_restores__+0x18>

00002db0 <__fixsfsi>:
    2db0:	ac e0       	ldi	r26, 0x0C	; 12
    2db2:	b0 e0       	ldi	r27, 0x00	; 0
    2db4:	ee ed       	ldi	r30, 0xDE	; 222
    2db6:	f6 e1       	ldi	r31, 0x16	; 22
    2db8:	0c 94 a8 19 	jmp	0x3350	; 0x3350 <__prologue_saves__+0x20>
    2dbc:	69 83       	std	Y+1, r22	; 0x01
    2dbe:	7a 83       	std	Y+2, r23	; 0x02
    2dc0:	8b 83       	std	Y+3, r24	; 0x03
    2dc2:	9c 83       	std	Y+4, r25	; 0x04
    2dc4:	ce 01       	movw	r24, r28
    2dc6:	01 96       	adiw	r24, 0x01	; 1
    2dc8:	be 01       	movw	r22, r28
    2dca:	6b 5f       	subi	r22, 0xFB	; 251
    2dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dce:	0e 94 ca 18 	call	0x3194	; 0x3194 <__unpack_f>
    2dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd4:	82 30       	cpi	r24, 0x02	; 2
    2dd6:	81 f1       	breq	.+96     	; 0x2e38 <__fixsfsi+0x88>
    2dd8:	82 30       	cpi	r24, 0x02	; 2
    2dda:	70 f1       	brcs	.+92     	; 0x2e38 <__fixsfsi+0x88>
    2ddc:	84 30       	cpi	r24, 0x04	; 4
    2dde:	21 f4       	brne	.+8      	; 0x2de8 <__fixsfsi+0x38>
    2de0:	8e 81       	ldd	r24, Y+6	; 0x06
    2de2:	88 23       	and	r24, r24
    2de4:	69 f1       	breq	.+90     	; 0x2e40 <__fixsfsi+0x90>
    2de6:	0a c0       	rjmp	.+20     	; 0x2dfc <__fixsfsi+0x4c>
    2de8:	2f 81       	ldd	r18, Y+7	; 0x07
    2dea:	38 85       	ldd	r19, Y+8	; 0x08
    2dec:	37 fd       	sbrc	r19, 7
    2dee:	24 c0       	rjmp	.+72     	; 0x2e38 <__fixsfsi+0x88>
    2df0:	6e 81       	ldd	r22, Y+6	; 0x06
    2df2:	2f 31       	cpi	r18, 0x1F	; 31
    2df4:	31 05       	cpc	r19, r1
    2df6:	3c f0       	brlt	.+14     	; 0x2e06 <__fixsfsi+0x56>
    2df8:	66 23       	and	r22, r22
    2dfa:	11 f1       	breq	.+68     	; 0x2e40 <__fixsfsi+0x90>
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	40 e0       	ldi	r20, 0x00	; 0
    2e02:	50 e8       	ldi	r21, 0x80	; 128
    2e04:	21 c0       	rjmp	.+66     	; 0x2e48 <__fixsfsi+0x98>
    2e06:	8e e1       	ldi	r24, 0x1E	; 30
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	82 1b       	sub	r24, r18
    2e0c:	93 0b       	sbc	r25, r19
    2e0e:	29 85       	ldd	r18, Y+9	; 0x09
    2e10:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e12:	4b 85       	ldd	r20, Y+11	; 0x0b
    2e14:	5c 85       	ldd	r21, Y+12	; 0x0c
    2e16:	04 c0       	rjmp	.+8      	; 0x2e20 <__fixsfsi+0x70>
    2e18:	56 95       	lsr	r21
    2e1a:	47 95       	ror	r20
    2e1c:	37 95       	ror	r19
    2e1e:	27 95       	ror	r18
    2e20:	8a 95       	dec	r24
    2e22:	d2 f7       	brpl	.-12     	; 0x2e18 <__fixsfsi+0x68>
    2e24:	66 23       	and	r22, r22
    2e26:	81 f0       	breq	.+32     	; 0x2e48 <__fixsfsi+0x98>
    2e28:	50 95       	com	r21
    2e2a:	40 95       	com	r20
    2e2c:	30 95       	com	r19
    2e2e:	21 95       	neg	r18
    2e30:	3f 4f       	sbci	r19, 0xFF	; 255
    2e32:	4f 4f       	sbci	r20, 0xFF	; 255
    2e34:	5f 4f       	sbci	r21, 0xFF	; 255
    2e36:	08 c0       	rjmp	.+16     	; 0x2e48 <__fixsfsi+0x98>
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	a9 01       	movw	r20, r18
    2e3e:	04 c0       	rjmp	.+8      	; 0x2e48 <__fixsfsi+0x98>
    2e40:	2f ef       	ldi	r18, 0xFF	; 255
    2e42:	3f ef       	ldi	r19, 0xFF	; 255
    2e44:	4f ef       	ldi	r20, 0xFF	; 255
    2e46:	5f e7       	ldi	r21, 0x7F	; 127
    2e48:	b9 01       	movw	r22, r18
    2e4a:	ca 01       	movw	r24, r20
    2e4c:	2c 96       	adiw	r28, 0x0c	; 12
    2e4e:	e2 e0       	ldi	r30, 0x02	; 2
    2e50:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <__epilogue_restores__+0x20>

00002e54 <__floatunsisf>:
    2e54:	a8 e0       	ldi	r26, 0x08	; 8
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	e0 e3       	ldi	r30, 0x30	; 48
    2e5a:	f7 e1       	ldi	r31, 0x17	; 23
    2e5c:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <__prologue_saves__+0x14>
    2e60:	7b 01       	movw	r14, r22
    2e62:	8c 01       	movw	r16, r24
    2e64:	1a 82       	std	Y+2, r1	; 0x02
    2e66:	61 15       	cp	r22, r1
    2e68:	71 05       	cpc	r23, r1
    2e6a:	81 05       	cpc	r24, r1
    2e6c:	91 05       	cpc	r25, r1
    2e6e:	19 f4       	brne	.+6      	; 0x2e76 <__floatunsisf+0x22>
    2e70:	82 e0       	ldi	r24, 0x02	; 2
    2e72:	89 83       	std	Y+1, r24	; 0x01
    2e74:	5f c0       	rjmp	.+190    	; 0x2f34 <__floatunsisf+0xe0>
    2e76:	83 e0       	ldi	r24, 0x03	; 3
    2e78:	89 83       	std	Y+1, r24	; 0x01
    2e7a:	8e e1       	ldi	r24, 0x1E	; 30
    2e7c:	c8 2e       	mov	r12, r24
    2e7e:	d1 2c       	mov	r13, r1
    2e80:	dc 82       	std	Y+4, r13	; 0x04
    2e82:	cb 82       	std	Y+3, r12	; 0x03
    2e84:	ed 82       	std	Y+5, r14	; 0x05
    2e86:	fe 82       	std	Y+6, r15	; 0x06
    2e88:	0f 83       	std	Y+7, r16	; 0x07
    2e8a:	18 87       	std	Y+8, r17	; 0x08
    2e8c:	c8 01       	movw	r24, r16
    2e8e:	b7 01       	movw	r22, r14
    2e90:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__clzsi2>
    2e94:	fc 01       	movw	r30, r24
    2e96:	31 97       	sbiw	r30, 0x01	; 1
    2e98:	f7 ff       	sbrs	r31, 7
    2e9a:	3a c0       	rjmp	.+116    	; 0x2f10 <__floatunsisf+0xbc>
    2e9c:	aa 27       	eor	r26, r26
    2e9e:	bb 27       	eor	r27, r27
    2ea0:	ae 1b       	sub	r26, r30
    2ea2:	bf 0b       	sbc	r27, r31
    2ea4:	21 e0       	ldi	r18, 0x01	; 1
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e0       	ldi	r20, 0x00	; 0
    2eaa:	50 e0       	ldi	r21, 0x00	; 0
    2eac:	0a 2e       	mov	r0, r26
    2eae:	04 c0       	rjmp	.+8      	; 0x2eb8 <__floatunsisf+0x64>
    2eb0:	22 0f       	add	r18, r18
    2eb2:	33 1f       	adc	r19, r19
    2eb4:	44 1f       	adc	r20, r20
    2eb6:	55 1f       	adc	r21, r21
    2eb8:	0a 94       	dec	r0
    2eba:	d2 f7       	brpl	.-12     	; 0x2eb0 <__floatunsisf+0x5c>
    2ebc:	21 50       	subi	r18, 0x01	; 1
    2ebe:	30 40       	sbci	r19, 0x00	; 0
    2ec0:	40 40       	sbci	r20, 0x00	; 0
    2ec2:	50 40       	sbci	r21, 0x00	; 0
    2ec4:	2e 21       	and	r18, r14
    2ec6:	3f 21       	and	r19, r15
    2ec8:	40 23       	and	r20, r16
    2eca:	51 23       	and	r21, r17
    2ecc:	61 e0       	ldi	r22, 0x01	; 1
    2ece:	70 e0       	ldi	r23, 0x00	; 0
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	21 15       	cp	r18, r1
    2ed6:	31 05       	cpc	r19, r1
    2ed8:	41 05       	cpc	r20, r1
    2eda:	51 05       	cpc	r21, r1
    2edc:	19 f4       	brne	.+6      	; 0x2ee4 <__floatunsisf+0x90>
    2ede:	60 e0       	ldi	r22, 0x00	; 0
    2ee0:	70 e0       	ldi	r23, 0x00	; 0
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	04 c0       	rjmp	.+8      	; 0x2eee <__floatunsisf+0x9a>
    2ee6:	16 95       	lsr	r17
    2ee8:	07 95       	ror	r16
    2eea:	f7 94       	ror	r15
    2eec:	e7 94       	ror	r14
    2eee:	aa 95       	dec	r26
    2ef0:	d2 f7       	brpl	.-12     	; 0x2ee6 <__floatunsisf+0x92>
    2ef2:	e6 2a       	or	r14, r22
    2ef4:	f7 2a       	or	r15, r23
    2ef6:	08 2b       	or	r16, r24
    2ef8:	19 2b       	or	r17, r25
    2efa:	ed 82       	std	Y+5, r14	; 0x05
    2efc:	fe 82       	std	Y+6, r15	; 0x06
    2efe:	0f 83       	std	Y+7, r16	; 0x07
    2f00:	18 87       	std	Y+8, r17	; 0x08
    2f02:	8e e1       	ldi	r24, 0x1E	; 30
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	8e 1b       	sub	r24, r30
    2f08:	9f 0b       	sbc	r25, r31
    2f0a:	9c 83       	std	Y+4, r25	; 0x04
    2f0c:	8b 83       	std	Y+3, r24	; 0x03
    2f0e:	12 c0       	rjmp	.+36     	; 0x2f34 <__floatunsisf+0xe0>
    2f10:	30 97       	sbiw	r30, 0x00	; 0
    2f12:	81 f0       	breq	.+32     	; 0x2f34 <__floatunsisf+0xe0>
    2f14:	0e 2e       	mov	r0, r30
    2f16:	04 c0       	rjmp	.+8      	; 0x2f20 <__floatunsisf+0xcc>
    2f18:	ee 0c       	add	r14, r14
    2f1a:	ff 1c       	adc	r15, r15
    2f1c:	00 1f       	adc	r16, r16
    2f1e:	11 1f       	adc	r17, r17
    2f20:	0a 94       	dec	r0
    2f22:	d2 f7       	brpl	.-12     	; 0x2f18 <__floatunsisf+0xc4>
    2f24:	ed 82       	std	Y+5, r14	; 0x05
    2f26:	fe 82       	std	Y+6, r15	; 0x06
    2f28:	0f 83       	std	Y+7, r16	; 0x07
    2f2a:	18 87       	std	Y+8, r17	; 0x08
    2f2c:	ce 1a       	sub	r12, r30
    2f2e:	df 0a       	sbc	r13, r31
    2f30:	dc 82       	std	Y+4, r13	; 0x04
    2f32:	cb 82       	std	Y+3, r12	; 0x03
    2f34:	ce 01       	movw	r24, r28
    2f36:	01 96       	adiw	r24, 0x01	; 1
    2f38:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__pack_f>
    2f3c:	28 96       	adiw	r28, 0x08	; 8
    2f3e:	e8 e0       	ldi	r30, 0x08	; 8
    2f40:	0c 94 be 19 	jmp	0x337c	; 0x337c <__epilogue_restores__+0x14>

00002f44 <__clzsi2>:
    2f44:	af 92       	push	r10
    2f46:	bf 92       	push	r11
    2f48:	cf 92       	push	r12
    2f4a:	df 92       	push	r13
    2f4c:	ef 92       	push	r14
    2f4e:	ff 92       	push	r15
    2f50:	0f 93       	push	r16
    2f52:	1f 93       	push	r17
    2f54:	7b 01       	movw	r14, r22
    2f56:	8c 01       	movw	r16, r24
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	e8 16       	cp	r14, r24
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	f8 06       	cpc	r15, r24
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	08 07       	cpc	r16, r24
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	18 07       	cpc	r17, r24
    2f68:	58 f4       	brcc	.+22     	; 0x2f80 <__clzsi2+0x3c>
    2f6a:	ef ef       	ldi	r30, 0xFF	; 255
    2f6c:	ee 16       	cp	r14, r30
    2f6e:	f1 04       	cpc	r15, r1
    2f70:	01 05       	cpc	r16, r1
    2f72:	11 05       	cpc	r17, r1
    2f74:	09 f0       	breq	.+2      	; 0x2f78 <__clzsi2+0x34>
    2f76:	90 f4       	brcc	.+36     	; 0x2f9c <__clzsi2+0x58>
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	17 c0       	rjmp	.+46     	; 0x2fae <__clzsi2+0x6a>
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	ef 16       	cp	r14, r31
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	ff 06       	cpc	r15, r31
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	0f 07       	cpc	r16, r31
    2f8c:	f1 e0       	ldi	r31, 0x01	; 1
    2f8e:	1f 07       	cpc	r17, r31
    2f90:	50 f4       	brcc	.+20     	; 0x2fa6 <__clzsi2+0x62>
    2f92:	80 e1       	ldi	r24, 0x10	; 16
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	a0 e0       	ldi	r26, 0x00	; 0
    2f98:	b0 e0       	ldi	r27, 0x00	; 0
    2f9a:	09 c0       	rjmp	.+18     	; 0x2fae <__clzsi2+0x6a>
    2f9c:	88 e0       	ldi	r24, 0x08	; 8
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	a0 e0       	ldi	r26, 0x00	; 0
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	04 c0       	rjmp	.+8      	; 0x2fae <__clzsi2+0x6a>
    2fa6:	88 e1       	ldi	r24, 0x18	; 24
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	a0 e0       	ldi	r26, 0x00	; 0
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	20 e2       	ldi	r18, 0x20	; 32
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	40 e0       	ldi	r20, 0x00	; 0
    2fb4:	50 e0       	ldi	r21, 0x00	; 0
    2fb6:	28 1b       	sub	r18, r24
    2fb8:	39 0b       	sbc	r19, r25
    2fba:	4a 0b       	sbc	r20, r26
    2fbc:	5b 0b       	sbc	r21, r27
    2fbe:	57 01       	movw	r10, r14
    2fc0:	68 01       	movw	r12, r16
    2fc2:	04 c0       	rjmp	.+8      	; 0x2fcc <__clzsi2+0x88>
    2fc4:	d6 94       	lsr	r13
    2fc6:	c7 94       	ror	r12
    2fc8:	b7 94       	ror	r11
    2fca:	a7 94       	ror	r10
    2fcc:	8a 95       	dec	r24
    2fce:	d2 f7       	brpl	.-12     	; 0x2fc4 <__clzsi2+0x80>
    2fd0:	d6 01       	movw	r26, r12
    2fd2:	c5 01       	movw	r24, r10
    2fd4:	89 54       	subi	r24, 0x49	; 73
    2fd6:	9e 4f       	sbci	r25, 0xFE	; 254
    2fd8:	fc 01       	movw	r30, r24
    2fda:	80 81       	ld	r24, Z
    2fdc:	28 1b       	sub	r18, r24
    2fde:	31 09       	sbc	r19, r1
    2fe0:	41 09       	sbc	r20, r1
    2fe2:	51 09       	sbc	r21, r1
    2fe4:	c9 01       	movw	r24, r18
    2fe6:	1f 91       	pop	r17
    2fe8:	0f 91       	pop	r16
    2fea:	ff 90       	pop	r15
    2fec:	ef 90       	pop	r14
    2fee:	df 90       	pop	r13
    2ff0:	cf 90       	pop	r12
    2ff2:	bf 90       	pop	r11
    2ff4:	af 90       	pop	r10
    2ff6:	08 95       	ret

00002ff8 <__pack_f>:
    2ff8:	ef 92       	push	r14
    2ffa:	ff 92       	push	r15
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
    3000:	cf 93       	push	r28
    3002:	df 93       	push	r29
    3004:	fc 01       	movw	r30, r24
    3006:	24 81       	ldd	r18, Z+4	; 0x04
    3008:	35 81       	ldd	r19, Z+5	; 0x05
    300a:	46 81       	ldd	r20, Z+6	; 0x06
    300c:	57 81       	ldd	r21, Z+7	; 0x07
    300e:	61 81       	ldd	r22, Z+1	; 0x01
    3010:	80 81       	ld	r24, Z
    3012:	82 30       	cpi	r24, 0x02	; 2
    3014:	20 f4       	brcc	.+8      	; 0x301e <__pack_f+0x26>
    3016:	40 61       	ori	r20, 0x10	; 16
    3018:	ef ef       	ldi	r30, 0xFF	; 255
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	a3 c0       	rjmp	.+326    	; 0x3164 <__pack_f+0x16c>
    301e:	84 30       	cpi	r24, 0x04	; 4
    3020:	09 f4       	brne	.+2      	; 0x3024 <__pack_f+0x2c>
    3022:	9b c0       	rjmp	.+310    	; 0x315a <__pack_f+0x162>
    3024:	82 30       	cpi	r24, 0x02	; 2
    3026:	09 f4       	brne	.+2      	; 0x302a <__pack_f+0x32>
    3028:	92 c0       	rjmp	.+292    	; 0x314e <__pack_f+0x156>
    302a:	21 15       	cp	r18, r1
    302c:	31 05       	cpc	r19, r1
    302e:	41 05       	cpc	r20, r1
    3030:	51 05       	cpc	r21, r1
    3032:	09 f4       	brne	.+2      	; 0x3036 <__pack_f+0x3e>
    3034:	8f c0       	rjmp	.+286    	; 0x3154 <__pack_f+0x15c>
    3036:	02 80       	ldd	r0, Z+2	; 0x02
    3038:	f3 81       	ldd	r31, Z+3	; 0x03
    303a:	e0 2d       	mov	r30, r0
    303c:	8f ef       	ldi	r24, 0xFF	; 255
    303e:	e2 38       	cpi	r30, 0x82	; 130
    3040:	f8 07       	cpc	r31, r24
    3042:	0c f0       	brlt	.+2      	; 0x3046 <__pack_f+0x4e>
    3044:	5a c0       	rjmp	.+180    	; 0x30fa <__pack_f+0x102>
    3046:	c2 e8       	ldi	r28, 0x82	; 130
    3048:	df ef       	ldi	r29, 0xFF	; 255
    304a:	ce 1b       	sub	r28, r30
    304c:	df 0b       	sbc	r29, r31
    304e:	ca 31       	cpi	r28, 0x1A	; 26
    3050:	d1 05       	cpc	r29, r1
    3052:	6c f5       	brge	.+90     	; 0x30ae <__pack_f+0xb6>
    3054:	79 01       	movw	r14, r18
    3056:	8a 01       	movw	r16, r20
    3058:	0c 2e       	mov	r0, r28
    305a:	04 c0       	rjmp	.+8      	; 0x3064 <__pack_f+0x6c>
    305c:	16 95       	lsr	r17
    305e:	07 95       	ror	r16
    3060:	f7 94       	ror	r15
    3062:	e7 94       	ror	r14
    3064:	0a 94       	dec	r0
    3066:	d2 f7       	brpl	.-12     	; 0x305c <__pack_f+0x64>
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	a0 e0       	ldi	r26, 0x00	; 0
    306e:	b0 e0       	ldi	r27, 0x00	; 0
    3070:	0c 2e       	mov	r0, r28
    3072:	04 c0       	rjmp	.+8      	; 0x307c <__pack_f+0x84>
    3074:	88 0f       	add	r24, r24
    3076:	99 1f       	adc	r25, r25
    3078:	aa 1f       	adc	r26, r26
    307a:	bb 1f       	adc	r27, r27
    307c:	0a 94       	dec	r0
    307e:	d2 f7       	brpl	.-12     	; 0x3074 <__pack_f+0x7c>
    3080:	01 97       	sbiw	r24, 0x01	; 1
    3082:	a1 09       	sbc	r26, r1
    3084:	b1 09       	sbc	r27, r1
    3086:	82 23       	and	r24, r18
    3088:	93 23       	and	r25, r19
    308a:	a4 23       	and	r26, r20
    308c:	b5 23       	and	r27, r21
    308e:	21 e0       	ldi	r18, 0x01	; 1
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	40 e0       	ldi	r20, 0x00	; 0
    3094:	50 e0       	ldi	r21, 0x00	; 0
    3096:	00 97       	sbiw	r24, 0x00	; 0
    3098:	a1 05       	cpc	r26, r1
    309a:	b1 05       	cpc	r27, r1
    309c:	19 f4       	brne	.+6      	; 0x30a4 <__pack_f+0xac>
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	a9 01       	movw	r20, r18
    30a4:	2e 29       	or	r18, r14
    30a6:	3f 29       	or	r19, r15
    30a8:	40 2b       	or	r20, r16
    30aa:	51 2b       	or	r21, r17
    30ac:	03 c0       	rjmp	.+6      	; 0x30b4 <__pack_f+0xbc>
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	a9 01       	movw	r20, r18
    30b4:	da 01       	movw	r26, r20
    30b6:	c9 01       	movw	r24, r18
    30b8:	8f 77       	andi	r24, 0x7F	; 127
    30ba:	90 70       	andi	r25, 0x00	; 0
    30bc:	a0 70       	andi	r26, 0x00	; 0
    30be:	b0 70       	andi	r27, 0x00	; 0
    30c0:	80 34       	cpi	r24, 0x40	; 64
    30c2:	91 05       	cpc	r25, r1
    30c4:	a1 05       	cpc	r26, r1
    30c6:	b1 05       	cpc	r27, r1
    30c8:	39 f4       	brne	.+14     	; 0x30d8 <__pack_f+0xe0>
    30ca:	27 ff       	sbrs	r18, 7
    30cc:	09 c0       	rjmp	.+18     	; 0x30e0 <__pack_f+0xe8>
    30ce:	20 5c       	subi	r18, 0xC0	; 192
    30d0:	3f 4f       	sbci	r19, 0xFF	; 255
    30d2:	4f 4f       	sbci	r20, 0xFF	; 255
    30d4:	5f 4f       	sbci	r21, 0xFF	; 255
    30d6:	04 c0       	rjmp	.+8      	; 0x30e0 <__pack_f+0xe8>
    30d8:	21 5c       	subi	r18, 0xC1	; 193
    30da:	3f 4f       	sbci	r19, 0xFF	; 255
    30dc:	4f 4f       	sbci	r20, 0xFF	; 255
    30de:	5f 4f       	sbci	r21, 0xFF	; 255
    30e0:	e1 e0       	ldi	r30, 0x01	; 1
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	20 30       	cpi	r18, 0x00	; 0
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	38 07       	cpc	r19, r24
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	48 07       	cpc	r20, r24
    30ee:	80 e4       	ldi	r24, 0x40	; 64
    30f0:	58 07       	cpc	r21, r24
    30f2:	28 f5       	brcc	.+74     	; 0x313e <__pack_f+0x146>
    30f4:	e0 e0       	ldi	r30, 0x00	; 0
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	22 c0       	rjmp	.+68     	; 0x313e <__pack_f+0x146>
    30fa:	e0 38       	cpi	r30, 0x80	; 128
    30fc:	f1 05       	cpc	r31, r1
    30fe:	6c f5       	brge	.+90     	; 0x315a <__pack_f+0x162>
    3100:	e1 58       	subi	r30, 0x81	; 129
    3102:	ff 4f       	sbci	r31, 0xFF	; 255
    3104:	da 01       	movw	r26, r20
    3106:	c9 01       	movw	r24, r18
    3108:	8f 77       	andi	r24, 0x7F	; 127
    310a:	90 70       	andi	r25, 0x00	; 0
    310c:	a0 70       	andi	r26, 0x00	; 0
    310e:	b0 70       	andi	r27, 0x00	; 0
    3110:	80 34       	cpi	r24, 0x40	; 64
    3112:	91 05       	cpc	r25, r1
    3114:	a1 05       	cpc	r26, r1
    3116:	b1 05       	cpc	r27, r1
    3118:	39 f4       	brne	.+14     	; 0x3128 <__pack_f+0x130>
    311a:	27 ff       	sbrs	r18, 7
    311c:	09 c0       	rjmp	.+18     	; 0x3130 <__pack_f+0x138>
    311e:	20 5c       	subi	r18, 0xC0	; 192
    3120:	3f 4f       	sbci	r19, 0xFF	; 255
    3122:	4f 4f       	sbci	r20, 0xFF	; 255
    3124:	5f 4f       	sbci	r21, 0xFF	; 255
    3126:	04 c0       	rjmp	.+8      	; 0x3130 <__pack_f+0x138>
    3128:	21 5c       	subi	r18, 0xC1	; 193
    312a:	3f 4f       	sbci	r19, 0xFF	; 255
    312c:	4f 4f       	sbci	r20, 0xFF	; 255
    312e:	5f 4f       	sbci	r21, 0xFF	; 255
    3130:	57 ff       	sbrs	r21, 7
    3132:	05 c0       	rjmp	.+10     	; 0x313e <__pack_f+0x146>
    3134:	56 95       	lsr	r21
    3136:	47 95       	ror	r20
    3138:	37 95       	ror	r19
    313a:	27 95       	ror	r18
    313c:	31 96       	adiw	r30, 0x01	; 1
    313e:	87 e0       	ldi	r24, 0x07	; 7
    3140:	56 95       	lsr	r21
    3142:	47 95       	ror	r20
    3144:	37 95       	ror	r19
    3146:	27 95       	ror	r18
    3148:	8a 95       	dec	r24
    314a:	d1 f7       	brne	.-12     	; 0x3140 <__pack_f+0x148>
    314c:	0b c0       	rjmp	.+22     	; 0x3164 <__pack_f+0x16c>
    314e:	e0 e0       	ldi	r30, 0x00	; 0
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	05 c0       	rjmp	.+10     	; 0x315e <__pack_f+0x166>
    3154:	e0 e0       	ldi	r30, 0x00	; 0
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	05 c0       	rjmp	.+10     	; 0x3164 <__pack_f+0x16c>
    315a:	ef ef       	ldi	r30, 0xFF	; 255
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	a9 01       	movw	r20, r18
    3164:	8e 2f       	mov	r24, r30
    3166:	87 95       	ror	r24
    3168:	88 27       	eor	r24, r24
    316a:	87 95       	ror	r24
    316c:	94 2f       	mov	r25, r20
    316e:	9f 77       	andi	r25, 0x7F	; 127
    3170:	67 95       	ror	r22
    3172:	66 27       	eor	r22, r22
    3174:	67 95       	ror	r22
    3176:	e6 95       	lsr	r30
    3178:	e2 2e       	mov	r14, r18
    317a:	a9 2f       	mov	r26, r25
    317c:	a8 2b       	or	r26, r24
    317e:	fe 2f       	mov	r31, r30
    3180:	f6 2b       	or	r31, r22
    3182:	62 2f       	mov	r22, r18
    3184:	73 2f       	mov	r23, r19
    3186:	8a 2f       	mov	r24, r26
    3188:	9f 2f       	mov	r25, r31
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
    318e:	e6 e0       	ldi	r30, 0x06	; 6
    3190:	0c 94 c0 19 	jmp	0x3380	; 0x3380 <__epilogue_restores__+0x18>

00003194 <__unpack_f>:
    3194:	dc 01       	movw	r26, r24
    3196:	fb 01       	movw	r30, r22
    3198:	2c 91       	ld	r18, X
    319a:	11 96       	adiw	r26, 0x01	; 1
    319c:	3c 91       	ld	r19, X
    319e:	11 97       	sbiw	r26, 0x01	; 1
    31a0:	12 96       	adiw	r26, 0x02	; 2
    31a2:	8c 91       	ld	r24, X
    31a4:	12 97       	sbiw	r26, 0x02	; 2
    31a6:	48 2f       	mov	r20, r24
    31a8:	4f 77       	andi	r20, 0x7F	; 127
    31aa:	50 e0       	ldi	r21, 0x00	; 0
    31ac:	98 2f       	mov	r25, r24
    31ae:	99 1f       	adc	r25, r25
    31b0:	99 27       	eor	r25, r25
    31b2:	99 1f       	adc	r25, r25
    31b4:	13 96       	adiw	r26, 0x03	; 3
    31b6:	6c 91       	ld	r22, X
    31b8:	13 97       	sbiw	r26, 0x03	; 3
    31ba:	86 2f       	mov	r24, r22
    31bc:	88 0f       	add	r24, r24
    31be:	89 2b       	or	r24, r25
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	66 1f       	adc	r22, r22
    31c4:	66 27       	eor	r22, r22
    31c6:	66 1f       	adc	r22, r22
    31c8:	61 83       	std	Z+1, r22	; 0x01
    31ca:	00 97       	sbiw	r24, 0x00	; 0
    31cc:	39 f5       	brne	.+78     	; 0x321c <__unpack_f+0x88>
    31ce:	21 15       	cp	r18, r1
    31d0:	31 05       	cpc	r19, r1
    31d2:	41 05       	cpc	r20, r1
    31d4:	51 05       	cpc	r21, r1
    31d6:	11 f4       	brne	.+4      	; 0x31dc <__unpack_f+0x48>
    31d8:	82 e0       	ldi	r24, 0x02	; 2
    31da:	29 c0       	rjmp	.+82     	; 0x322e <__unpack_f+0x9a>
    31dc:	82 e8       	ldi	r24, 0x82	; 130
    31de:	9f ef       	ldi	r25, 0xFF	; 255
    31e0:	93 83       	std	Z+3, r25	; 0x03
    31e2:	82 83       	std	Z+2, r24	; 0x02
    31e4:	67 e0       	ldi	r22, 0x07	; 7
    31e6:	22 0f       	add	r18, r18
    31e8:	33 1f       	adc	r19, r19
    31ea:	44 1f       	adc	r20, r20
    31ec:	55 1f       	adc	r21, r21
    31ee:	6a 95       	dec	r22
    31f0:	d1 f7       	brne	.-12     	; 0x31e6 <__unpack_f+0x52>
    31f2:	83 e0       	ldi	r24, 0x03	; 3
    31f4:	80 83       	st	Z, r24
    31f6:	09 c0       	rjmp	.+18     	; 0x320a <__unpack_f+0x76>
    31f8:	22 0f       	add	r18, r18
    31fa:	33 1f       	adc	r19, r19
    31fc:	44 1f       	adc	r20, r20
    31fe:	55 1f       	adc	r21, r21
    3200:	82 81       	ldd	r24, Z+2	; 0x02
    3202:	93 81       	ldd	r25, Z+3	; 0x03
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	93 83       	std	Z+3, r25	; 0x03
    3208:	82 83       	std	Z+2, r24	; 0x02
    320a:	20 30       	cpi	r18, 0x00	; 0
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	38 07       	cpc	r19, r24
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	48 07       	cpc	r20, r24
    3214:	80 e4       	ldi	r24, 0x40	; 64
    3216:	58 07       	cpc	r21, r24
    3218:	78 f3       	brcs	.-34     	; 0x31f8 <__unpack_f+0x64>
    321a:	20 c0       	rjmp	.+64     	; 0x325c <__unpack_f+0xc8>
    321c:	8f 3f       	cpi	r24, 0xFF	; 255
    321e:	91 05       	cpc	r25, r1
    3220:	79 f4       	brne	.+30     	; 0x3240 <__unpack_f+0xac>
    3222:	21 15       	cp	r18, r1
    3224:	31 05       	cpc	r19, r1
    3226:	41 05       	cpc	r20, r1
    3228:	51 05       	cpc	r21, r1
    322a:	19 f4       	brne	.+6      	; 0x3232 <__unpack_f+0x9e>
    322c:	84 e0       	ldi	r24, 0x04	; 4
    322e:	80 83       	st	Z, r24
    3230:	08 95       	ret
    3232:	44 ff       	sbrs	r20, 4
    3234:	03 c0       	rjmp	.+6      	; 0x323c <__unpack_f+0xa8>
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	80 83       	st	Z, r24
    323a:	10 c0       	rjmp	.+32     	; 0x325c <__unpack_f+0xc8>
    323c:	10 82       	st	Z, r1
    323e:	0e c0       	rjmp	.+28     	; 0x325c <__unpack_f+0xc8>
    3240:	8f 57       	subi	r24, 0x7F	; 127
    3242:	90 40       	sbci	r25, 0x00	; 0
    3244:	93 83       	std	Z+3, r25	; 0x03
    3246:	82 83       	std	Z+2, r24	; 0x02
    3248:	83 e0       	ldi	r24, 0x03	; 3
    324a:	80 83       	st	Z, r24
    324c:	87 e0       	ldi	r24, 0x07	; 7
    324e:	22 0f       	add	r18, r18
    3250:	33 1f       	adc	r19, r19
    3252:	44 1f       	adc	r20, r20
    3254:	55 1f       	adc	r21, r21
    3256:	8a 95       	dec	r24
    3258:	d1 f7       	brne	.-12     	; 0x324e <__unpack_f+0xba>
    325a:	50 64       	ori	r21, 0x40	; 64
    325c:	24 83       	std	Z+4, r18	; 0x04
    325e:	35 83       	std	Z+5, r19	; 0x05
    3260:	46 83       	std	Z+6, r20	; 0x06
    3262:	57 83       	std	Z+7, r21	; 0x07
    3264:	08 95       	ret

00003266 <__fpcmp_parts_f>:
    3266:	fc 01       	movw	r30, r24
    3268:	db 01       	movw	r26, r22
    326a:	90 81       	ld	r25, Z
    326c:	92 30       	cpi	r25, 0x02	; 2
    326e:	08 f4       	brcc	.+2      	; 0x3272 <__fpcmp_parts_f+0xc>
    3270:	49 c0       	rjmp	.+146    	; 0x3304 <__fpcmp_parts_f+0x9e>
    3272:	8c 91       	ld	r24, X
    3274:	82 30       	cpi	r24, 0x02	; 2
    3276:	08 f4       	brcc	.+2      	; 0x327a <__fpcmp_parts_f+0x14>
    3278:	45 c0       	rjmp	.+138    	; 0x3304 <__fpcmp_parts_f+0x9e>
    327a:	94 30       	cpi	r25, 0x04	; 4
    327c:	51 f4       	brne	.+20     	; 0x3292 <__fpcmp_parts_f+0x2c>
    327e:	61 81       	ldd	r22, Z+1	; 0x01
    3280:	84 30       	cpi	r24, 0x04	; 4
    3282:	b1 f5       	brne	.+108    	; 0x32f0 <__fpcmp_parts_f+0x8a>
    3284:	11 96       	adiw	r26, 0x01	; 1
    3286:	2c 91       	ld	r18, X
    3288:	11 97       	sbiw	r26, 0x01	; 1
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	26 1b       	sub	r18, r22
    328e:	31 09       	sbc	r19, r1
    3290:	41 c0       	rjmp	.+130    	; 0x3314 <__fpcmp_parts_f+0xae>
    3292:	84 30       	cpi	r24, 0x04	; 4
    3294:	21 f0       	breq	.+8      	; 0x329e <__fpcmp_parts_f+0x38>
    3296:	92 30       	cpi	r25, 0x02	; 2
    3298:	41 f4       	brne	.+16     	; 0x32aa <__fpcmp_parts_f+0x44>
    329a:	82 30       	cpi	r24, 0x02	; 2
    329c:	b1 f1       	breq	.+108    	; 0x330a <__fpcmp_parts_f+0xa4>
    329e:	11 96       	adiw	r26, 0x01	; 1
    32a0:	8c 91       	ld	r24, X
    32a2:	11 97       	sbiw	r26, 0x01	; 1
    32a4:	88 23       	and	r24, r24
    32a6:	a1 f1       	breq	.+104    	; 0x3310 <__fpcmp_parts_f+0xaa>
    32a8:	2d c0       	rjmp	.+90     	; 0x3304 <__fpcmp_parts_f+0x9e>
    32aa:	61 81       	ldd	r22, Z+1	; 0x01
    32ac:	82 30       	cpi	r24, 0x02	; 2
    32ae:	01 f1       	breq	.+64     	; 0x32f0 <__fpcmp_parts_f+0x8a>
    32b0:	11 96       	adiw	r26, 0x01	; 1
    32b2:	8c 91       	ld	r24, X
    32b4:	11 97       	sbiw	r26, 0x01	; 1
    32b6:	68 17       	cp	r22, r24
    32b8:	d9 f4       	brne	.+54     	; 0x32f0 <__fpcmp_parts_f+0x8a>
    32ba:	22 81       	ldd	r18, Z+2	; 0x02
    32bc:	33 81       	ldd	r19, Z+3	; 0x03
    32be:	12 96       	adiw	r26, 0x02	; 2
    32c0:	8d 91       	ld	r24, X+
    32c2:	9c 91       	ld	r25, X
    32c4:	13 97       	sbiw	r26, 0x03	; 3
    32c6:	82 17       	cp	r24, r18
    32c8:	93 07       	cpc	r25, r19
    32ca:	94 f0       	brlt	.+36     	; 0x32f0 <__fpcmp_parts_f+0x8a>
    32cc:	28 17       	cp	r18, r24
    32ce:	39 07       	cpc	r19, r25
    32d0:	bc f0       	brlt	.+46     	; 0x3300 <__fpcmp_parts_f+0x9a>
    32d2:	24 81       	ldd	r18, Z+4	; 0x04
    32d4:	35 81       	ldd	r19, Z+5	; 0x05
    32d6:	46 81       	ldd	r20, Z+6	; 0x06
    32d8:	57 81       	ldd	r21, Z+7	; 0x07
    32da:	14 96       	adiw	r26, 0x04	; 4
    32dc:	8d 91       	ld	r24, X+
    32de:	9d 91       	ld	r25, X+
    32e0:	0d 90       	ld	r0, X+
    32e2:	bc 91       	ld	r27, X
    32e4:	a0 2d       	mov	r26, r0
    32e6:	82 17       	cp	r24, r18
    32e8:	93 07       	cpc	r25, r19
    32ea:	a4 07       	cpc	r26, r20
    32ec:	b5 07       	cpc	r27, r21
    32ee:	18 f4       	brcc	.+6      	; 0x32f6 <__fpcmp_parts_f+0x90>
    32f0:	66 23       	and	r22, r22
    32f2:	41 f0       	breq	.+16     	; 0x3304 <__fpcmp_parts_f+0x9e>
    32f4:	0d c0       	rjmp	.+26     	; 0x3310 <__fpcmp_parts_f+0xaa>
    32f6:	28 17       	cp	r18, r24
    32f8:	39 07       	cpc	r19, r25
    32fa:	4a 07       	cpc	r20, r26
    32fc:	5b 07       	cpc	r21, r27
    32fe:	28 f4       	brcc	.+10     	; 0x330a <__fpcmp_parts_f+0xa4>
    3300:	66 23       	and	r22, r22
    3302:	31 f0       	breq	.+12     	; 0x3310 <__fpcmp_parts_f+0xaa>
    3304:	21 e0       	ldi	r18, 0x01	; 1
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	05 c0       	rjmp	.+10     	; 0x3314 <__fpcmp_parts_f+0xae>
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	02 c0       	rjmp	.+4      	; 0x3314 <__fpcmp_parts_f+0xae>
    3310:	2f ef       	ldi	r18, 0xFF	; 255
    3312:	3f ef       	ldi	r19, 0xFF	; 255
    3314:	c9 01       	movw	r24, r18
    3316:	08 95       	ret

00003318 <__udivmodqi4>:
    3318:	99 1b       	sub	r25, r25
    331a:	79 e0       	ldi	r23, 0x09	; 9
    331c:	04 c0       	rjmp	.+8      	; 0x3326 <__udivmodqi4_ep>

0000331e <__udivmodqi4_loop>:
    331e:	99 1f       	adc	r25, r25
    3320:	96 17       	cp	r25, r22
    3322:	08 f0       	brcs	.+2      	; 0x3326 <__udivmodqi4_ep>
    3324:	96 1b       	sub	r25, r22

00003326 <__udivmodqi4_ep>:
    3326:	88 1f       	adc	r24, r24
    3328:	7a 95       	dec	r23
    332a:	c9 f7       	brne	.-14     	; 0x331e <__udivmodqi4_loop>
    332c:	80 95       	com	r24
    332e:	08 95       	ret

00003330 <__prologue_saves__>:
    3330:	2f 92       	push	r2
    3332:	3f 92       	push	r3
    3334:	4f 92       	push	r4
    3336:	5f 92       	push	r5
    3338:	6f 92       	push	r6
    333a:	7f 92       	push	r7
    333c:	8f 92       	push	r8
    333e:	9f 92       	push	r9
    3340:	af 92       	push	r10
    3342:	bf 92       	push	r11
    3344:	cf 92       	push	r12
    3346:	df 92       	push	r13
    3348:	ef 92       	push	r14
    334a:	ff 92       	push	r15
    334c:	0f 93       	push	r16
    334e:	1f 93       	push	r17
    3350:	cf 93       	push	r28
    3352:	df 93       	push	r29
    3354:	cd b7       	in	r28, 0x3d	; 61
    3356:	de b7       	in	r29, 0x3e	; 62
    3358:	ca 1b       	sub	r28, r26
    335a:	db 0b       	sbc	r29, r27
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	de bf       	out	0x3e, r29	; 62
    3362:	0f be       	out	0x3f, r0	; 63
    3364:	cd bf       	out	0x3d, r28	; 61
    3366:	09 94       	ijmp

00003368 <__epilogue_restores__>:
    3368:	2a 88       	ldd	r2, Y+18	; 0x12
    336a:	39 88       	ldd	r3, Y+17	; 0x11
    336c:	48 88       	ldd	r4, Y+16	; 0x10
    336e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3370:	6e 84       	ldd	r6, Y+14	; 0x0e
    3372:	7d 84       	ldd	r7, Y+13	; 0x0d
    3374:	8c 84       	ldd	r8, Y+12	; 0x0c
    3376:	9b 84       	ldd	r9, Y+11	; 0x0b
    3378:	aa 84       	ldd	r10, Y+10	; 0x0a
    337a:	b9 84       	ldd	r11, Y+9	; 0x09
    337c:	c8 84       	ldd	r12, Y+8	; 0x08
    337e:	df 80       	ldd	r13, Y+7	; 0x07
    3380:	ee 80       	ldd	r14, Y+6	; 0x06
    3382:	fd 80       	ldd	r15, Y+5	; 0x05
    3384:	0c 81       	ldd	r16, Y+4	; 0x04
    3386:	1b 81       	ldd	r17, Y+3	; 0x03
    3388:	aa 81       	ldd	r26, Y+2	; 0x02
    338a:	b9 81       	ldd	r27, Y+1	; 0x01
    338c:	ce 0f       	add	r28, r30
    338e:	d1 1d       	adc	r29, r1
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	f8 94       	cli
    3394:	de bf       	out	0x3e, r29	; 62
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	cd bf       	out	0x3d, r28	; 61
    339a:	ed 01       	movw	r28, r26
    339c:	08 95       	ret

0000339e <cos>:
    339e:	03 d0       	rcall	.+6      	; 0x33a6 <__fp_rempio2>
    33a0:	e3 95       	inc	r30
    33a2:	28 c0       	rjmp	.+80     	; 0x33f4 <__fp_sinus>
    33a4:	ce c0       	rjmp	.+412    	; 0x3542 <__fp_nan>

000033a6 <__fp_rempio2>:
    33a6:	3f d0       	rcall	.+126    	; 0x3426 <__fp_splitA>
    33a8:	e8 f3       	brcs	.-6      	; 0x33a4 <cos+0x6>
    33aa:	e8 94       	clt
    33ac:	e0 e0       	ldi	r30, 0x00	; 0
    33ae:	bb 27       	eor	r27, r27
    33b0:	9f 57       	subi	r25, 0x7F	; 127
    33b2:	f0 f0       	brcs	.+60     	; 0x33f0 <__fp_rempio2+0x4a>
    33b4:	2a ed       	ldi	r18, 0xDA	; 218
    33b6:	3f e0       	ldi	r19, 0x0F	; 15
    33b8:	49 ec       	ldi	r20, 0xC9	; 201
    33ba:	06 c0       	rjmp	.+12     	; 0x33c8 <__fp_rempio2+0x22>
    33bc:	ee 0f       	add	r30, r30
    33be:	bb 0f       	add	r27, r27
    33c0:	66 1f       	adc	r22, r22
    33c2:	77 1f       	adc	r23, r23
    33c4:	88 1f       	adc	r24, r24
    33c6:	28 f0       	brcs	.+10     	; 0x33d2 <__fp_rempio2+0x2c>
    33c8:	b2 3a       	cpi	r27, 0xA2	; 162
    33ca:	62 07       	cpc	r22, r18
    33cc:	73 07       	cpc	r23, r19
    33ce:	84 07       	cpc	r24, r20
    33d0:	28 f0       	brcs	.+10     	; 0x33dc <__fp_rempio2+0x36>
    33d2:	b2 5a       	subi	r27, 0xA2	; 162
    33d4:	62 0b       	sbc	r22, r18
    33d6:	73 0b       	sbc	r23, r19
    33d8:	84 0b       	sbc	r24, r20
    33da:	e3 95       	inc	r30
    33dc:	9a 95       	dec	r25
    33de:	72 f7       	brpl	.-36     	; 0x33bc <__fp_rempio2+0x16>
    33e0:	80 38       	cpi	r24, 0x80	; 128
    33e2:	30 f4       	brcc	.+12     	; 0x33f0 <__fp_rempio2+0x4a>
    33e4:	9a 95       	dec	r25
    33e6:	bb 0f       	add	r27, r27
    33e8:	66 1f       	adc	r22, r22
    33ea:	77 1f       	adc	r23, r23
    33ec:	88 1f       	adc	r24, r24
    33ee:	d2 f7       	brpl	.-12     	; 0x33e4 <__fp_rempio2+0x3e>
    33f0:	90 48       	sbci	r25, 0x80	; 128
    33f2:	9b c0       	rjmp	.+310    	; 0x352a <__fp_mpack_finite>

000033f4 <__fp_sinus>:
    33f4:	ef 93       	push	r30
    33f6:	e0 ff       	sbrs	r30, 0
    33f8:	06 c0       	rjmp	.+12     	; 0x3406 <__fp_sinus+0x12>
    33fa:	a2 ea       	ldi	r26, 0xA2	; 162
    33fc:	2a ed       	ldi	r18, 0xDA	; 218
    33fe:	3f e0       	ldi	r19, 0x0F	; 15
    3400:	49 ec       	ldi	r20, 0xC9	; 201
    3402:	5f eb       	ldi	r21, 0xBF	; 191
    3404:	37 d0       	rcall	.+110    	; 0x3474 <__addsf3x>
    3406:	bf d0       	rcall	.+382    	; 0x3586 <__fp_round>
    3408:	0f 90       	pop	r0
    340a:	03 94       	inc	r0
    340c:	01 fc       	sbrc	r0, 1
    340e:	90 58       	subi	r25, 0x80	; 128
    3410:	ec e8       	ldi	r30, 0x8C	; 140
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	99 c0       	rjmp	.+306    	; 0x3548 <__fp_powsodd>

00003416 <__fp_split3>:
    3416:	57 fd       	sbrc	r21, 7
    3418:	90 58       	subi	r25, 0x80	; 128
    341a:	44 0f       	add	r20, r20
    341c:	55 1f       	adc	r21, r21
    341e:	59 f0       	breq	.+22     	; 0x3436 <__fp_splitA+0x10>
    3420:	5f 3f       	cpi	r21, 0xFF	; 255
    3422:	71 f0       	breq	.+28     	; 0x3440 <__fp_splitA+0x1a>
    3424:	47 95       	ror	r20

00003426 <__fp_splitA>:
    3426:	88 0f       	add	r24, r24
    3428:	97 fb       	bst	r25, 7
    342a:	99 1f       	adc	r25, r25
    342c:	61 f0       	breq	.+24     	; 0x3446 <__fp_splitA+0x20>
    342e:	9f 3f       	cpi	r25, 0xFF	; 255
    3430:	79 f0       	breq	.+30     	; 0x3450 <__fp_splitA+0x2a>
    3432:	87 95       	ror	r24
    3434:	08 95       	ret
    3436:	12 16       	cp	r1, r18
    3438:	13 06       	cpc	r1, r19
    343a:	14 06       	cpc	r1, r20
    343c:	55 1f       	adc	r21, r21
    343e:	f2 cf       	rjmp	.-28     	; 0x3424 <__fp_split3+0xe>
    3440:	46 95       	lsr	r20
    3442:	f1 df       	rcall	.-30     	; 0x3426 <__fp_splitA>
    3444:	08 c0       	rjmp	.+16     	; 0x3456 <__fp_splitA+0x30>
    3446:	16 16       	cp	r1, r22
    3448:	17 06       	cpc	r1, r23
    344a:	18 06       	cpc	r1, r24
    344c:	99 1f       	adc	r25, r25
    344e:	f1 cf       	rjmp	.-30     	; 0x3432 <__fp_splitA+0xc>
    3450:	86 95       	lsr	r24
    3452:	71 05       	cpc	r23, r1
    3454:	61 05       	cpc	r22, r1
    3456:	08 94       	sec
    3458:	08 95       	ret
    345a:	87 d0       	rcall	.+270    	; 0x356a <__fp_pscA>
    345c:	30 f0       	brcs	.+12     	; 0x346a <__fp_splitA+0x44>
    345e:	8c d0       	rcall	.+280    	; 0x3578 <__fp_pscB>
    3460:	20 f0       	brcs	.+8      	; 0x346a <__fp_splitA+0x44>
    3462:	31 f4       	brne	.+12     	; 0x3470 <__fp_splitA+0x4a>
    3464:	9f 3f       	cpi	r25, 0xFF	; 255
    3466:	11 f4       	brne	.+4      	; 0x346c <__fp_splitA+0x46>
    3468:	1e f4       	brtc	.+6      	; 0x3470 <__fp_splitA+0x4a>
    346a:	6b c0       	rjmp	.+214    	; 0x3542 <__fp_nan>
    346c:	0e f4       	brtc	.+2      	; 0x3470 <__fp_splitA+0x4a>
    346e:	e0 95       	com	r30
    3470:	e7 fb       	bst	r30, 7
    3472:	53 c0       	rjmp	.+166    	; 0x351a <__fp_inf>

00003474 <__addsf3x>:
    3474:	e9 2f       	mov	r30, r25
    3476:	cf df       	rcall	.-98     	; 0x3416 <__fp_split3>
    3478:	80 f3       	brcs	.-32     	; 0x345a <__fp_splitA+0x34>
    347a:	ba 17       	cp	r27, r26
    347c:	62 07       	cpc	r22, r18
    347e:	73 07       	cpc	r23, r19
    3480:	84 07       	cpc	r24, r20
    3482:	95 07       	cpc	r25, r21
    3484:	18 f0       	brcs	.+6      	; 0x348c <__addsf3x+0x18>
    3486:	71 f4       	brne	.+28     	; 0x34a4 <__addsf3x+0x30>
    3488:	9e f5       	brtc	.+102    	; 0x34f0 <__addsf3x+0x7c>
    348a:	8e c0       	rjmp	.+284    	; 0x35a8 <__fp_zero>
    348c:	0e f4       	brtc	.+2      	; 0x3490 <__addsf3x+0x1c>
    348e:	e0 95       	com	r30
    3490:	0b 2e       	mov	r0, r27
    3492:	ba 2f       	mov	r27, r26
    3494:	a0 2d       	mov	r26, r0
    3496:	0b 01       	movw	r0, r22
    3498:	b9 01       	movw	r22, r18
    349a:	90 01       	movw	r18, r0
    349c:	0c 01       	movw	r0, r24
    349e:	ca 01       	movw	r24, r20
    34a0:	a0 01       	movw	r20, r0
    34a2:	11 24       	eor	r1, r1
    34a4:	ff 27       	eor	r31, r31
    34a6:	59 1b       	sub	r21, r25
    34a8:	99 f0       	breq	.+38     	; 0x34d0 <__addsf3x+0x5c>
    34aa:	59 3f       	cpi	r21, 0xF9	; 249
    34ac:	50 f4       	brcc	.+20     	; 0x34c2 <__addsf3x+0x4e>
    34ae:	50 3e       	cpi	r21, 0xE0	; 224
    34b0:	68 f1       	brcs	.+90     	; 0x350c <__addsf3x+0x98>
    34b2:	1a 16       	cp	r1, r26
    34b4:	f0 40       	sbci	r31, 0x00	; 0
    34b6:	a2 2f       	mov	r26, r18
    34b8:	23 2f       	mov	r18, r19
    34ba:	34 2f       	mov	r19, r20
    34bc:	44 27       	eor	r20, r20
    34be:	58 5f       	subi	r21, 0xF8	; 248
    34c0:	f3 cf       	rjmp	.-26     	; 0x34a8 <__addsf3x+0x34>
    34c2:	46 95       	lsr	r20
    34c4:	37 95       	ror	r19
    34c6:	27 95       	ror	r18
    34c8:	a7 95       	ror	r26
    34ca:	f0 40       	sbci	r31, 0x00	; 0
    34cc:	53 95       	inc	r21
    34ce:	c9 f7       	brne	.-14     	; 0x34c2 <__addsf3x+0x4e>
    34d0:	7e f4       	brtc	.+30     	; 0x34f0 <__addsf3x+0x7c>
    34d2:	1f 16       	cp	r1, r31
    34d4:	ba 0b       	sbc	r27, r26
    34d6:	62 0b       	sbc	r22, r18
    34d8:	73 0b       	sbc	r23, r19
    34da:	84 0b       	sbc	r24, r20
    34dc:	ba f0       	brmi	.+46     	; 0x350c <__addsf3x+0x98>
    34de:	91 50       	subi	r25, 0x01	; 1
    34e0:	a1 f0       	breq	.+40     	; 0x350a <__addsf3x+0x96>
    34e2:	ff 0f       	add	r31, r31
    34e4:	bb 1f       	adc	r27, r27
    34e6:	66 1f       	adc	r22, r22
    34e8:	77 1f       	adc	r23, r23
    34ea:	88 1f       	adc	r24, r24
    34ec:	c2 f7       	brpl	.-16     	; 0x34de <__addsf3x+0x6a>
    34ee:	0e c0       	rjmp	.+28     	; 0x350c <__addsf3x+0x98>
    34f0:	ba 0f       	add	r27, r26
    34f2:	62 1f       	adc	r22, r18
    34f4:	73 1f       	adc	r23, r19
    34f6:	84 1f       	adc	r24, r20
    34f8:	48 f4       	brcc	.+18     	; 0x350c <__addsf3x+0x98>
    34fa:	87 95       	ror	r24
    34fc:	77 95       	ror	r23
    34fe:	67 95       	ror	r22
    3500:	b7 95       	ror	r27
    3502:	f7 95       	ror	r31
    3504:	9e 3f       	cpi	r25, 0xFE	; 254
    3506:	08 f0       	brcs	.+2      	; 0x350a <__addsf3x+0x96>
    3508:	b3 cf       	rjmp	.-154    	; 0x3470 <__fp_splitA+0x4a>
    350a:	93 95       	inc	r25
    350c:	88 0f       	add	r24, r24
    350e:	08 f0       	brcs	.+2      	; 0x3512 <__addsf3x+0x9e>
    3510:	99 27       	eor	r25, r25
    3512:	ee 0f       	add	r30, r30
    3514:	97 95       	ror	r25
    3516:	87 95       	ror	r24
    3518:	08 95       	ret

0000351a <__fp_inf>:
    351a:	97 f9       	bld	r25, 7
    351c:	9f 67       	ori	r25, 0x7F	; 127
    351e:	80 e8       	ldi	r24, 0x80	; 128
    3520:	70 e0       	ldi	r23, 0x00	; 0
    3522:	60 e0       	ldi	r22, 0x00	; 0
    3524:	08 95       	ret

00003526 <__fp_mpack>:
    3526:	9f 3f       	cpi	r25, 0xFF	; 255
    3528:	31 f0       	breq	.+12     	; 0x3536 <__fp_mpack_finite+0xc>

0000352a <__fp_mpack_finite>:
    352a:	91 50       	subi	r25, 0x01	; 1
    352c:	20 f4       	brcc	.+8      	; 0x3536 <__fp_mpack_finite+0xc>
    352e:	87 95       	ror	r24
    3530:	77 95       	ror	r23
    3532:	67 95       	ror	r22
    3534:	b7 95       	ror	r27
    3536:	88 0f       	add	r24, r24
    3538:	91 1d       	adc	r25, r1
    353a:	96 95       	lsr	r25
    353c:	87 95       	ror	r24
    353e:	97 f9       	bld	r25, 7
    3540:	08 95       	ret

00003542 <__fp_nan>:
    3542:	9f ef       	ldi	r25, 0xFF	; 255
    3544:	80 ec       	ldi	r24, 0xC0	; 192
    3546:	08 95       	ret

00003548 <__fp_powsodd>:
    3548:	9f 93       	push	r25
    354a:	8f 93       	push	r24
    354c:	7f 93       	push	r23
    354e:	6f 93       	push	r22
    3550:	ff 93       	push	r31
    3552:	ef 93       	push	r30
    3554:	9b 01       	movw	r18, r22
    3556:	ac 01       	movw	r20, r24
    3558:	11 da       	rcall	.-3038   	; 0x297c <__mulsf3>
    355a:	ef 91       	pop	r30
    355c:	ff 91       	pop	r31
    355e:	2b d0       	rcall	.+86     	; 0x35b6 <__fp_powser>
    3560:	2f 91       	pop	r18
    3562:	3f 91       	pop	r19
    3564:	4f 91       	pop	r20
    3566:	5f 91       	pop	r21
    3568:	09 ca       	rjmp	.-3054   	; 0x297c <__mulsf3>

0000356a <__fp_pscA>:
    356a:	00 24       	eor	r0, r0
    356c:	0a 94       	dec	r0
    356e:	16 16       	cp	r1, r22
    3570:	17 06       	cpc	r1, r23
    3572:	18 06       	cpc	r1, r24
    3574:	09 06       	cpc	r0, r25
    3576:	08 95       	ret

00003578 <__fp_pscB>:
    3578:	00 24       	eor	r0, r0
    357a:	0a 94       	dec	r0
    357c:	12 16       	cp	r1, r18
    357e:	13 06       	cpc	r1, r19
    3580:	14 06       	cpc	r1, r20
    3582:	05 06       	cpc	r0, r21
    3584:	08 95       	ret

00003586 <__fp_round>:
    3586:	09 2e       	mov	r0, r25
    3588:	03 94       	inc	r0
    358a:	00 0c       	add	r0, r0
    358c:	11 f4       	brne	.+4      	; 0x3592 <__fp_round+0xc>
    358e:	88 23       	and	r24, r24
    3590:	52 f0       	brmi	.+20     	; 0x35a6 <__fp_round+0x20>
    3592:	bb 0f       	add	r27, r27
    3594:	40 f4       	brcc	.+16     	; 0x35a6 <__fp_round+0x20>
    3596:	bf 2b       	or	r27, r31
    3598:	11 f4       	brne	.+4      	; 0x359e <__fp_round+0x18>
    359a:	60 ff       	sbrs	r22, 0
    359c:	04 c0       	rjmp	.+8      	; 0x35a6 <__fp_round+0x20>
    359e:	6f 5f       	subi	r22, 0xFF	; 255
    35a0:	7f 4f       	sbci	r23, 0xFF	; 255
    35a2:	8f 4f       	sbci	r24, 0xFF	; 255
    35a4:	9f 4f       	sbci	r25, 0xFF	; 255
    35a6:	08 95       	ret

000035a8 <__fp_zero>:
    35a8:	e8 94       	clt

000035aa <__fp_szero>:
    35aa:	bb 27       	eor	r27, r27
    35ac:	66 27       	eor	r22, r22
    35ae:	77 27       	eor	r23, r23
    35b0:	cb 01       	movw	r24, r22
    35b2:	97 f9       	bld	r25, 7
    35b4:	08 95       	ret

000035b6 <__fp_powser>:
    35b6:	df 93       	push	r29
    35b8:	cf 93       	push	r28
    35ba:	1f 93       	push	r17
    35bc:	0f 93       	push	r16
    35be:	ff 92       	push	r15
    35c0:	ef 92       	push	r14
    35c2:	df 92       	push	r13
    35c4:	7b 01       	movw	r14, r22
    35c6:	8c 01       	movw	r16, r24
    35c8:	68 94       	set
    35ca:	05 c0       	rjmp	.+10     	; 0x35d6 <__fp_powser+0x20>
    35cc:	da 2e       	mov	r13, r26
    35ce:	ef 01       	movw	r28, r30
    35d0:	21 d0       	rcall	.+66     	; 0x3614 <__mulsf3x>
    35d2:	fe 01       	movw	r30, r28
    35d4:	e8 94       	clt
    35d6:	a5 91       	lpm	r26, Z+
    35d8:	25 91       	lpm	r18, Z+
    35da:	35 91       	lpm	r19, Z+
    35dc:	45 91       	lpm	r20, Z+
    35de:	55 91       	lpm	r21, Z+
    35e0:	ae f3       	brts	.-22     	; 0x35cc <__fp_powser+0x16>
    35e2:	ef 01       	movw	r28, r30
    35e4:	47 df       	rcall	.-370    	; 0x3474 <__addsf3x>
    35e6:	fe 01       	movw	r30, r28
    35e8:	97 01       	movw	r18, r14
    35ea:	a8 01       	movw	r20, r16
    35ec:	da 94       	dec	r13
    35ee:	79 f7       	brne	.-34     	; 0x35ce <__fp_powser+0x18>
    35f0:	df 90       	pop	r13
    35f2:	ef 90       	pop	r14
    35f4:	ff 90       	pop	r15
    35f6:	0f 91       	pop	r16
    35f8:	1f 91       	pop	r17
    35fa:	cf 91       	pop	r28
    35fc:	df 91       	pop	r29
    35fe:	08 95       	ret
    3600:	b4 df       	rcall	.-152    	; 0x356a <__fp_pscA>
    3602:	28 f0       	brcs	.+10     	; 0x360e <__fp_powser+0x58>
    3604:	b9 df       	rcall	.-142    	; 0x3578 <__fp_pscB>
    3606:	18 f0       	brcs	.+6      	; 0x360e <__fp_powser+0x58>
    3608:	95 23       	and	r25, r21
    360a:	09 f0       	breq	.+2      	; 0x360e <__fp_powser+0x58>
    360c:	86 cf       	rjmp	.-244    	; 0x351a <__fp_inf>
    360e:	99 cf       	rjmp	.-206    	; 0x3542 <__fp_nan>
    3610:	11 24       	eor	r1, r1
    3612:	cb cf       	rjmp	.-106    	; 0x35aa <__fp_szero>

00003614 <__mulsf3x>:
    3614:	00 df       	rcall	.-512    	; 0x3416 <__fp_split3>
    3616:	a0 f3       	brcs	.-24     	; 0x3600 <__fp_powser+0x4a>

00003618 <__mulsf3_pse>:
    3618:	95 9f       	mul	r25, r21
    361a:	d1 f3       	breq	.-12     	; 0x3610 <__fp_powser+0x5a>
    361c:	95 0f       	add	r25, r21
    361e:	50 e0       	ldi	r21, 0x00	; 0
    3620:	55 1f       	adc	r21, r21
    3622:	62 9f       	mul	r22, r18
    3624:	f0 01       	movw	r30, r0
    3626:	72 9f       	mul	r23, r18
    3628:	bb 27       	eor	r27, r27
    362a:	f0 0d       	add	r31, r0
    362c:	b1 1d       	adc	r27, r1
    362e:	63 9f       	mul	r22, r19
    3630:	aa 27       	eor	r26, r26
    3632:	f0 0d       	add	r31, r0
    3634:	b1 1d       	adc	r27, r1
    3636:	aa 1f       	adc	r26, r26
    3638:	64 9f       	mul	r22, r20
    363a:	66 27       	eor	r22, r22
    363c:	b0 0d       	add	r27, r0
    363e:	a1 1d       	adc	r26, r1
    3640:	66 1f       	adc	r22, r22
    3642:	82 9f       	mul	r24, r18
    3644:	22 27       	eor	r18, r18
    3646:	b0 0d       	add	r27, r0
    3648:	a1 1d       	adc	r26, r1
    364a:	62 1f       	adc	r22, r18
    364c:	73 9f       	mul	r23, r19
    364e:	b0 0d       	add	r27, r0
    3650:	a1 1d       	adc	r26, r1
    3652:	62 1f       	adc	r22, r18
    3654:	83 9f       	mul	r24, r19
    3656:	a0 0d       	add	r26, r0
    3658:	61 1d       	adc	r22, r1
    365a:	22 1f       	adc	r18, r18
    365c:	74 9f       	mul	r23, r20
    365e:	33 27       	eor	r19, r19
    3660:	a0 0d       	add	r26, r0
    3662:	61 1d       	adc	r22, r1
    3664:	23 1f       	adc	r18, r19
    3666:	84 9f       	mul	r24, r20
    3668:	60 0d       	add	r22, r0
    366a:	21 1d       	adc	r18, r1
    366c:	82 2f       	mov	r24, r18
    366e:	76 2f       	mov	r23, r22
    3670:	6a 2f       	mov	r22, r26
    3672:	11 24       	eor	r1, r1
    3674:	9f 57       	subi	r25, 0x7F	; 127
    3676:	50 40       	sbci	r21, 0x00	; 0
    3678:	8a f0       	brmi	.+34     	; 0x369c <__mulsf3_pse+0x84>
    367a:	e1 f0       	breq	.+56     	; 0x36b4 <__mulsf3_pse+0x9c>
    367c:	88 23       	and	r24, r24
    367e:	4a f0       	brmi	.+18     	; 0x3692 <__mulsf3_pse+0x7a>
    3680:	ee 0f       	add	r30, r30
    3682:	ff 1f       	adc	r31, r31
    3684:	bb 1f       	adc	r27, r27
    3686:	66 1f       	adc	r22, r22
    3688:	77 1f       	adc	r23, r23
    368a:	88 1f       	adc	r24, r24
    368c:	91 50       	subi	r25, 0x01	; 1
    368e:	50 40       	sbci	r21, 0x00	; 0
    3690:	a9 f7       	brne	.-22     	; 0x367c <__mulsf3_pse+0x64>
    3692:	9e 3f       	cpi	r25, 0xFE	; 254
    3694:	51 05       	cpc	r21, r1
    3696:	70 f0       	brcs	.+28     	; 0x36b4 <__mulsf3_pse+0x9c>
    3698:	40 cf       	rjmp	.-384    	; 0x351a <__fp_inf>
    369a:	87 cf       	rjmp	.-242    	; 0x35aa <__fp_szero>
    369c:	5f 3f       	cpi	r21, 0xFF	; 255
    369e:	ec f3       	brlt	.-6      	; 0x369a <__mulsf3_pse+0x82>
    36a0:	98 3e       	cpi	r25, 0xE8	; 232
    36a2:	dc f3       	brlt	.-10     	; 0x369a <__mulsf3_pse+0x82>
    36a4:	86 95       	lsr	r24
    36a6:	77 95       	ror	r23
    36a8:	67 95       	ror	r22
    36aa:	b7 95       	ror	r27
    36ac:	f7 95       	ror	r31
    36ae:	e7 95       	ror	r30
    36b0:	9f 5f       	subi	r25, 0xFF	; 255
    36b2:	c1 f7       	brne	.-16     	; 0x36a4 <__mulsf3_pse+0x8c>
    36b4:	fe 2b       	or	r31, r30
    36b6:	88 0f       	add	r24, r24
    36b8:	91 1d       	adc	r25, r1
    36ba:	96 95       	lsr	r25
    36bc:	87 95       	ror	r24
    36be:	97 f9       	bld	r25, 7
    36c0:	08 95       	ret

000036c2 <_exit>:
    36c2:	f8 94       	cli

000036c4 <__stop_program>:
    36c4:	ff cf       	rjmp	.-2      	; 0x36c4 <__stop_program>
