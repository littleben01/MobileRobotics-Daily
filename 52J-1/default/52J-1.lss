
52J-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800100  00003090  00003124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003090  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  00800234  00800234  00003258  2**0
                  ALLOC
  3 .stab         00001cc8  00000000  00000000  00003258  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000064a  00000000  00000000  00004f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  0000556a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000005c5  00000000  00000000  000057aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000037a5  00000000  00000000  00005d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001aa8  00000000  00000000  00009514  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002b1e  00000000  00000000  0000afbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000490  00000000  00000000  0000dadc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000757  00000000  00000000  0000df6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001b6d  00000000  00000000  0000e6c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000007fb  00000000  00000000  00010230  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  00010a2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__vector_14>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <__vector_18>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_30>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <Turn_and_Drive+0x16e>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d0 e1       	ldi	r29, 0x10	; 16
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	12 e0       	ldi	r17, 0x02	; 2
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	e0 e9       	ldi	r30, 0x90	; 144
      be:	f0 e3       	ldi	r31, 0x30	; 48
      c0:	00 e0       	ldi	r16, 0x00	; 0
      c2:	0b bf       	out	0x3b, r16	; 59
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
      c6:	07 90       	elpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a4 33       	cpi	r26, 0x34	; 52
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
      d0:	12 e0       	ldi	r17, 0x02	; 2
      d2:	a4 e3       	ldi	r26, 0x34	; 52
      d4:	b2 e0       	ldi	r27, 0x02	; 2
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	a2 38       	cpi	r26, 0x82	; 130
      dc:	b1 07       	cpc	r27, r17
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	0e 94 39 08 	call	0x1072	; 0x1072 <main>
      e4:	0c 94 46 18 	jmp	0x308c	; 0x308c <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <MCU_init>:
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART1 Receiver: On
	// USART1 Transmitter: On
	// USART1 Mode: Asynchronous
	// USART1 Baud Rate: 9600
	UCSR1A=0x00;
      ec:	10 92 9b 00 	sts	0x009B, r1
	UCSR1B=0x98;
      f0:	88 e9       	ldi	r24, 0x98	; 152
      f2:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C=0x06;
      f6:	86 e0       	ldi	r24, 0x06	; 6
      f8:	80 93 9d 00 	sts	0x009D, r24
	UBRR1H=0x00;
      fc:	10 92 98 00 	sts	0x0098, r1
	UBRR1L=0x5F;
     100:	8f e5       	ldi	r24, 0x5F	; 95
     102:	80 93 99 00 	sts	0x0099, r24

	sei();
     106:	78 94       	sei
}
     108:	08 95       	ret

0000010a <__vector_30>:

ISR(USART1_RX_vect)
{
     10a:	1f 92       	push	r1
     10c:	0f 92       	push	r0
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	0f 92       	push	r0
     112:	11 24       	eor	r1, r1
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
	char data;
	
	data=UDR1;
     118:	90 91 9c 00 	lds	r25, 0x009C
	while(!(UCSR1A&0xB8)); //수신완료 및 에러 검출되지 않을시
     11c:	80 91 9b 00 	lds	r24, 0x009B
     120:	88 7b       	andi	r24, 0xB8	; 184
     122:	e1 f3       	breq	.-8      	; 0x11c <__vector_30+0x12>
	rx1_flg=1;              //수신완료 플레그 set
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	80 93 34 02 	sts	0x0234, r24
	rx1_buff=data;	
     12a:	90 93 35 02 	sts	0x0235, r25
}
     12e:	9f 91       	pop	r25
     130:	8f 91       	pop	r24
     132:	0f 90       	pop	r0
     134:	0f be       	out	0x3f, r0	; 63
     136:	0f 90       	pop	r0
     138:	1f 90       	pop	r1
     13a:	18 95       	reti

0000013c <getchar1>:

char getchar1(void)  //uart 수신하기
{
	char data;
	
	data=rx1_buff;
     13c:	80 91 35 02 	lds	r24, 0x0235
	rx1_buff=0;
     140:	10 92 35 02 	sts	0x0235, r1
	cli();           //글로벌 인터럽트 disable
     144:	f8 94       	cli
	rx1_flg=0;       //수신완료 플레그 reset
     146:	10 92 34 02 	sts	0x0234, r1
	sei();           //글로벌 인터럽트 enable          
     14a:	78 94       	sei
	return data;     //수신데이터 반환
}
     14c:	08 95       	ret

0000014e <putchar1>:

void putchar1(char data) //uart 송신화기
{
	while(!(UCSR1A&0x20));  //송신 준비 완료시
     14e:	90 91 9b 00 	lds	r25, 0x009B
     152:	95 ff       	sbrs	r25, 5
     154:	fc cf       	rjmp	.-8      	; 0x14e <putchar1>
	UDR1=data;              //송신 버퍼에 데이터 쓰기
     156:	80 93 9c 00 	sts	0x009C, r24
}
     15a:	08 95       	ret

0000015c <Interface_init>:
// Parameter : 없음
// Return    : 없음
void Interface_init(void)
{
    // LCD / EX I/O Expander
	TWDR = 0xFF;
     15c:	8f ef       	ldi	r24, 0xFF	; 255
     15e:	80 93 73 00 	sts	0x0073, r24
	TWBR = 0x48;
     162:	88 e4       	ldi	r24, 0x48	; 72
     164:	80 93 70 00 	sts	0x0070, r24
}
     168:	08 95       	ret

0000016a <lcd_write_data>:
//          data - 전송할 한바이트 데이터
// Return    : 없음
void lcd_write_data(unsigned char data)
{
	// 시작
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     16a:	94 ea       	ldi	r25, 0xA4	; 164
     16c:	90 93 74 00 	sts	0x0074, r25
	// 준비상태 체크
    while(!(TWCR & (1 << TWINT)));
     170:	90 91 74 00 	lds	r25, 0x0074
     174:	97 ff       	sbrs	r25, 7
     176:	fc cf       	rjmp	.-8      	; 0x170 <lcd_write_data+0x6>
	
	// 주소 전송
    TWDR = SLA << 1;
     178:	9e e0       	ldi	r25, 0x0E	; 14
     17a:	90 93 73 00 	sts	0x0073, r25
	
	TWCR = (1 << TWINT) | (1 << TWEN);
     17e:	94 e8       	ldi	r25, 0x84	; 132
     180:	90 93 74 00 	sts	0x0074, r25
	while(!(TWCR & (1 << TWINT)));
     184:	90 91 74 00 	lds	r25, 0x0074
     188:	97 ff       	sbrs	r25, 7
     18a:	fc cf       	rjmp	.-8      	; 0x184 <lcd_write_data+0x1a>
	
	TWDR = data;
     18c:	80 93 73 00 	sts	0x0073, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
     190:	84 e8       	ldi	r24, 0x84	; 132
     192:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1 << TWINT)));
     196:	80 91 74 00 	lds	r24, 0x0074
     19a:	87 ff       	sbrs	r24, 7
     19c:	fc cf       	rjmp	.-8      	; 0x196 <lcd_write_data+0x2c>
	
    // 정지
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     19e:	84 e9       	ldi	r24, 0x94	; 148
     1a0:	80 93 74 00 	sts	0x0074, r24
}
     1a4:	08 95       	ret

000001a6 <lcd_display_str>:
// Parameter :
//          line   - 출력할 라인번호(0~3)
//          string - 출력할 문자열(최대 20자)
// Return    : 없음
void lcd_display_str(unsigned char Y_line, unsigned char X_line,char *string) //lcd 스트링데이터 쓰기
{
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <lcd_display_str+0xe>
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	08 2f       	mov	r16, r24
     1ba:	16 2f       	mov	r17, r22
    int i=X_line;

	if((Y_line<4) && (X_line<20)){
     1bc:	84 30       	cpi	r24, 0x04	; 4
     1be:	70 f5       	brcc	.+92     	; 0x21c <lcd_display_str+0x76>
     1c0:	64 31       	cpi	r22, 0x14	; 20
     1c2:	60 f5       	brcc	.+88     	; 0x21c <lcd_display_str+0x76>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     1c4:	8b e1       	ldi	r24, 0x1B	; 27
     1c6:	49 83       	std	Y+1, r20	; 0x01
     1c8:	5a 83       	std	Y+2, r21	; 0x02
     1ca:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1ce:	8c e4       	ldi	r24, 0x4C	; 76
     1d0:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     1d4:	81 2f       	mov	r24, r17
     1d6:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1da:	80 2f       	mov	r24, r16
     1dc:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e0:	80 e7       	ldi	r24, 0x70	; 112
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	01 97       	sbiw	r24, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_display_str+0x3e>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_display_str+0x44>
     1ea:	e1 2e       	mov	r14, r17
     1ec:	ff 24       	eor	r15, r15
     1ee:	49 81       	ldd	r20, Y+1	; 0x01
     1f0:	5a 81       	ldd	r21, Y+2	; 0x02
     1f2:	04 2f       	mov	r16, r20
     1f4:	15 2f       	mov	r17, r21
     1f6:	06 c0       	rjmp	.+12     	; 0x204 <lcd_display_str+0x5e>
		_delay_us(100);
    	while(((i++)<20)&&*string){
        	lcd_write_data(*string++);
     1f8:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     1fc:	94 ec       	ldi	r25, 0xC4	; 196
     1fe:	9a 95       	dec	r25
     200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_display_str+0x58>
     202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_display_str+0x5e>

	if((Y_line<4) && (X_line<20)){
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
		lcd_write_data(X_line); lcd_write_data(Y_line);
		_delay_us(100);
    	while(((i++)<20)&&*string){
     204:	e4 e1       	ldi	r30, 0x14	; 20
     206:	ee 16       	cp	r14, r30
     208:	f1 04       	cpc	r15, r1
     20a:	44 f4       	brge	.+16     	; 0x21c <lcd_display_str+0x76>
     20c:	f8 01       	movw	r30, r16
     20e:	81 91       	ld	r24, Z+
     210:	8f 01       	movw	r16, r30
     212:	08 94       	sec
     214:	e1 1c       	adc	r14, r1
     216:	f1 1c       	adc	r15, r1
     218:	88 23       	and	r24, r24
     21a:	71 f7       	brne	.-36     	; 0x1f8 <lcd_display_str+0x52>
        	lcd_write_data(*string++);
			_delay_us(40);
		}
    }
}
     21c:	0f 90       	pop	r0
     21e:	0f 90       	pop	r0
     220:	cf 91       	pop	r28
     222:	df 91       	pop	r29
     224:	1f 91       	pop	r17
     226:	0f 91       	pop	r16
     228:	ff 90       	pop	r15
     22a:	ef 90       	pop	r14
     22c:	08 95       	ret

0000022e <write_lcd_data>:

void write_lcd_data(unsigned char Y_line, unsigned char X_line, long data) //lcd데이터 쓰기
{
     22e:	1f 93       	push	r17
     230:	df 93       	push	r29
     232:	cf 93       	push	r28
     234:	00 d0       	rcall	.+0      	; 0x236 <write_lcd_data+0x8>
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	18 2f       	mov	r17, r24
    if(Y_line<4 && X_line<20){
     23c:	84 30       	cpi	r24, 0x04	; 4
     23e:	f0 f4       	brcc	.+60     	; 0x27c <write_lcd_data+0x4e>
     240:	64 31       	cpi	r22, 0x14	; 20
     242:	e0 f4       	brcc	.+56     	; 0x27c <write_lcd_data+0x4e>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     244:	8b e1       	ldi	r24, 0x1B	; 27
     246:	2a 83       	std	Y+2, r18	; 0x02
     248:	69 83       	std	Y+1, r22	; 0x01
     24a:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     24e:	8c e4       	ldi	r24, 0x4C	; 76
     250:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     254:	69 81       	ldd	r22, Y+1	; 0x01
     256:	86 2f       	mov	r24, r22
     258:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     25c:	81 2f       	mov	r24, r17
     25e:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     262:	80 e7       	ldi	r24, 0x70	; 112
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <write_lcd_data+0x38>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <write_lcd_data+0x3e>
		_delay_us(100);
		lcd_write_data(data);
     26c:	2a 81       	ldd	r18, Y+2	; 0x02
     26e:	82 2f       	mov	r24, r18
     270:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     274:	94 ec       	ldi	r25, 0xC4	; 196
     276:	9a 95       	dec	r25
     278:	f1 f7       	brne	.-4      	; 0x276 <write_lcd_data+0x48>
     27a:	00 c0       	rjmp	.+0      	; 0x27c <write_lcd_data+0x4e>
		_delay_us(40);
    }
}
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	cf 91       	pop	r28
     282:	df 91       	pop	r29
     284:	1f 91       	pop	r17
     286:	08 95       	ret

00000288 <lcd_clear_screen>:

void lcd_clear_screen(void){ lcd_write_data(0x1B); lcd_write_data(0x43); _delay_ms(20); } //lcd전체화면 클리어
     288:	8b e1       	ldi	r24, 0x1B	; 27
     28a:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
     28e:	83 e4       	ldi	r24, 0x43	; 67
     290:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     294:	86 e6       	ldi	r24, 0x66	; 102
     296:	96 ee       	ldi	r25, 0xE6	; 230
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	81 50       	subi	r24, 0x01	; 1
     29c:	90 40       	sbci	r25, 0x00	; 0
     29e:	a0 40       	sbci	r26, 0x00	; 0
     2a0:	e1 f7       	brne	.-8      	; 0x29a <lcd_clear_screen+0x12>
     2a2:	08 95       	ret

000002a4 <display_char>:
void display_char(unsigned char line, unsigned char col, unsigned char data) ////lcd char 데이터 표시
{
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	18 2f       	mov	r17, r24
     2ae:	f6 2e       	mov	r15, r22
     2b0:	e4 2e       	mov	r14, r20
    unsigned char val=0, val_buff=0;

	val=data;   

	val_buff=val/100;             
     2b2:	84 2f       	mov	r24, r20
     2b4:	64 e6       	ldi	r22, 0x64	; 100
     2b6:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__udivmodqi4>
     2ba:	08 2f       	mov	r16, r24
	write_lcd_data(line, col, val_buff+'0' );
     2bc:	28 2f       	mov	r18, r24
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	20 5d       	subi	r18, 0xD0	; 208
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
     2c4:	44 27       	eor	r20, r20
     2c6:	37 fd       	sbrc	r19, 7
     2c8:	40 95       	com	r20
     2ca:	54 2f       	mov	r21, r20
     2cc:	81 2f       	mov	r24, r17
     2ce:	6f 2d       	mov	r22, r15
     2d0:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
	val=val-(100*val_buff);
     2d4:	8c e9       	ldi	r24, 0x9C	; 156
     2d6:	08 9f       	mul	r16, r24
     2d8:	00 2d       	mov	r16, r0
     2da:	11 24       	eor	r1, r1
     2dc:	0e 0d       	add	r16, r14

	val_buff=val/10;
     2de:	80 2f       	mov	r24, r16
     2e0:	6a e0       	ldi	r22, 0x0A	; 10
     2e2:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__udivmodqi4>
     2e6:	e8 2e       	mov	r14, r24
	write_lcd_data(line, 1+col, val_buff+'0' );
     2e8:	6f 2d       	mov	r22, r15
     2ea:	6f 5f       	subi	r22, 0xFF	; 255
     2ec:	28 2f       	mov	r18, r24
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	20 5d       	subi	r18, 0xD0	; 208
     2f2:	3f 4f       	sbci	r19, 0xFF	; 255
     2f4:	44 27       	eor	r20, r20
     2f6:	37 fd       	sbrc	r19, 7
     2f8:	40 95       	com	r20
     2fa:	54 2f       	mov	r21, r20
     2fc:	81 2f       	mov	r24, r17
     2fe:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
	val=val-(10*val_buff);

	write_lcd_data(line, 2+col, val+'0');
     302:	6f 2d       	mov	r22, r15
     304:	6e 5f       	subi	r22, 0xFE	; 254
	write_lcd_data(line, col, val_buff+'0' );
	val=val-(100*val_buff);

	val_buff=val/10;
	write_lcd_data(line, 1+col, val_buff+'0' );
	val=val-(10*val_buff);
     306:	26 ef       	ldi	r18, 0xF6	; 246
     308:	e2 9e       	mul	r14, r18
     30a:	20 2d       	mov	r18, r0
     30c:	11 24       	eor	r1, r1
     30e:	20 0f       	add	r18, r16

	write_lcd_data(line, 2+col, val+'0');
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	20 5d       	subi	r18, 0xD0	; 208
     314:	3f 4f       	sbci	r19, 0xFF	; 255
     316:	44 27       	eor	r20, r20
     318:	37 fd       	sbrc	r19, 7
     31a:	40 95       	com	r20
     31c:	54 2f       	mov	r21, r20
     31e:	81 2f       	mov	r24, r17
     320:	0e 94 17 01 	call	0x22e	; 0x22e <write_lcd_data>
}
     324:	1f 91       	pop	r17
     326:	0f 91       	pop	r16
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	08 95       	ret

0000032e <display_sensor>:
	}
}

void display_sensor(){
while(1){
				display_char(0,3,psd_value[0]);
     32e:	40 91 78 02 	lds	r20, 0x0278
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	63 e0       	ldi	r22, 0x03	; 3
     336:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
				display_char(1,1,psd_value[1]);
     33a:	40 91 79 02 	lds	r20, 0x0279
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	61 e0       	ldi	r22, 0x01	; 1
     342:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
				display_char(2,1,psd_value[2]);
     346:	40 91 7a 02 	lds	r20, 0x027A
     34a:	82 e0       	ldi	r24, 0x02	; 2
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
				display_char(3,1,psd_value[3]);
     352:	40 91 7b 02 	lds	r20, 0x027B
     356:	83 e0       	ldi	r24, 0x03	; 3
     358:	61 e0       	ldi	r22, 0x01	; 1
     35a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
				display_char(3,5,psd_value[4]);
     35e:	40 91 7c 02 	lds	r20, 0x027C
     362:	83 e0       	ldi	r24, 0x03	; 3
     364:	65 e0       	ldi	r22, 0x05	; 5
     366:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
				display_char(3,10,psd_value[5]);
     36a:	40 91 7d 02 	lds	r20, 0x027D
     36e:	83 e0       	ldi	r24, 0x03	; 3
     370:	6a e0       	ldi	r22, 0x0A	; 10
     372:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
     376:	db cf       	rjmp	.-74     	; 0x32e <display_sensor>

00000378 <HolonomicW>:
	}
				
}


void HolonomicW(int f_agl, int f_speed, int fw_speed){
     378:	2f 92       	push	r2
     37a:	3f 92       	push	r3
     37c:	4f 92       	push	r4
     37e:	5f 92       	push	r5
     380:	6f 92       	push	r6
     382:	7f 92       	push	r7
     384:	8f 92       	push	r8
     386:	9f 92       	push	r9
     388:	af 92       	push	r10
     38a:	bf 92       	push	r11
     38c:	cf 92       	push	r12
     38e:	df 92       	push	r13
     390:	ef 92       	push	r14
     392:	ff 92       	push	r15
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	df 93       	push	r29
     39a:	cf 93       	push	r28
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
     3a0:	60 97       	sbiw	r28, 0x10	; 16
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	8c 01       	movw	r16, r24
     3ae:	7b 01       	movw	r14, r22
     3b0:	1a 01       	movw	r2, r20
	double V[3]={0,0,0};

	unsigned char i=0;

	// 좌표계 변환
	if(f_agl <= 180) DesiredDirection = 180 - f_agl;
     3b2:	85 3b       	cpi	r24, 0xB5	; 181
     3b4:	91 05       	cpc	r25, r1
     3b6:	1c f4       	brge	.+6      	; 0x3be <HolonomicW+0x46>
     3b8:	64 eb       	ldi	r22, 0xB4	; 180
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <HolonomicW+0x4a>
	else if(f_agl > 180) DesiredDirection = 540 - f_agl;
     3be:	6c e1       	ldi	r22, 0x1C	; 28
     3c0:	72 e0       	ldi	r23, 0x02	; 2
     3c2:	60 1b       	sub	r22, r16
     3c4:	71 0b       	sbc	r23, r17
	
	// 라디안 변환
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
     3c6:	88 27       	eor	r24, r24
     3c8:	77 fd       	sbrc	r23, 7
     3ca:	80 95       	com	r24
     3cc:	98 2f       	mov	r25, r24
     3ce:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__floatsisf>
     3d2:	5b 01       	movw	r10, r22
     3d4:	6c 01       	movw	r12, r24
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	84 e3       	ldi	r24, 0x34	; 52
     3dc:	93 e4       	ldi	r25, 0x43	; 67
     3de:	a6 01       	movw	r20, r12
     3e0:	95 01       	movw	r18, r10
     3e2:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__subsf3>
     3e6:	28 e9       	ldi	r18, 0x98	; 152
     3e8:	39 ef       	ldi	r19, 0xF9	; 249
     3ea:	4e e8       	ldi	r20, 0x8E	; 142
     3ec:	5c e3       	ldi	r21, 0x3C	; 60
     3ee:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
	radianB = (90-(double)DesiredDirection) * 0.017453;

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
     3f2:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <cos>
     3f6:	3b 01       	movw	r6, r22
     3f8:	4c 01       	movw	r8, r24
	if(f_agl <= 180) DesiredDirection = 180 - f_agl;
	else if(f_agl > 180) DesiredDirection = 540 - f_agl;
	
	// 라디안 변환
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
	radianB = (90-(double)DesiredDirection) * 0.017453;
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	84 eb       	ldi	r24, 0xB4	; 180
     400:	92 e4       	ldi	r25, 0x42	; 66
     402:	a6 01       	movw	r20, r12
     404:	95 01       	movw	r18, r10
     406:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__subsf3>
     40a:	28 e9       	ldi	r18, 0x98	; 152
     40c:	39 ef       	ldi	r19, 0xF9	; 249
     40e:	4e e8       	ldi	r20, 0x8E	; 142
     410:	5c e3       	ldi	r21, 0x3C	; 60
     412:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
	Fy = f_speed * cos(radianB);
     416:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <cos>
     41a:	5b 01       	movw	r10, r22
     41c:	6c 01       	movw	r12, r24
	Fw=fw_speed;

	if(f_agl<0 || f_agl>=360){
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	08 36       	cpi	r16, 0x68	; 104
     422:	18 07       	cpc	r17, r24
     424:	28 f5       	brcc	.+74     	; 0x470 <HolonomicW+0xf8>
	radianA = (180-(double)DesiredDirection) * 0.017453; // 0.017453 = 3.141592 / 180
	radianB = (90-(double)DesiredDirection) * 0.017453;

	
	// 120도 방향 간격의 휠 방향으로 작용하는 힘의 벡터합을 구하기 위한 각 wheel의 Motor contribution 구하기.. 
	Fx = f_speed * cos(radianA);
     426:	b7 01       	movw	r22, r14
     428:	88 27       	eor	r24, r24
     42a:	77 fd       	sbrc	r23, 7
     42c:	80 95       	com	r24
     42e:	98 2f       	mov	r25, r24
     430:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__floatsisf>
     434:	7b 01       	movw	r14, r22
     436:	8c 01       	movw	r16, r24
     438:	a4 01       	movw	r20, r8
     43a:	93 01       	movw	r18, r6
     43c:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
     440:	0e 94 bd 13 	call	0x277a	; 0x277a <__fixsfsi>
     444:	66 2e       	mov	r6, r22
     446:	77 2e       	mov	r7, r23
     448:	88 2e       	mov	r8, r24
     44a:	99 2e       	mov	r9, r25
	Fy = f_speed * cos(radianB);
     44c:	c8 01       	movw	r24, r16
     44e:	b7 01       	movw	r22, r14
     450:	a6 01       	movw	r20, r12
     452:	95 01       	movw	r18, r10
     454:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
     458:	0e 94 bd 13 	call	0x277a	; 0x277a <__fixsfsi>
     45c:	e6 2e       	mov	r14, r22
     45e:	f7 2e       	mov	r15, r23
     460:	08 2f       	mov	r16, r24
     462:	19 2f       	mov	r17, r25
	Fw=fw_speed;
     464:	51 01       	movw	r10, r2
     466:	cc 24       	eor	r12, r12
     468:	b7 fc       	sbrc	r11, 7
     46a:	c0 94       	com	r12
     46c:	dc 2c       	mov	r13, r12
     46e:	11 c0       	rjmp	.+34     	; 0x492 <HolonomicW+0x11a>

	if(f_agl<0 || f_agl>=360){
		if(f_agl<0)Fw = -f_speed;
     470:	17 ff       	sbrs	r17, 7
     472:	04 c0       	rjmp	.+8      	; 0x47c <HolonomicW+0x104>
     474:	f0 94       	com	r15
     476:	e1 94       	neg	r14
     478:	f1 08       	sbc	r15, r1
     47a:	f3 94       	inc	r15
		else if(f_agl>=360)Fw = f_speed;
     47c:	57 01       	movw	r10, r14
     47e:	cc 24       	eor	r12, r12
     480:	b7 fc       	sbrc	r11, 7
     482:	c0 94       	com	r12
     484:	dc 2c       	mov	r13, r12
		Fx=0;
		Fy=0;
     486:	ee 24       	eor	r14, r14
     488:	ff 24       	eor	r15, r15
     48a:	87 01       	movw	r16, r14
	Fw=fw_speed;

	if(f_agl<0 || f_agl>=360){
		if(f_agl<0)Fw = -f_speed;
		else if(f_agl>=360)Fw = f_speed;
		Fx=0;
     48c:	66 24       	eor	r6, r6
     48e:	77 24       	eor	r7, r7
     490:	43 01       	movw	r8, r6
		Fy=0;
	}
		
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
     492:	c4 01       	movw	r24, r8
     494:	b3 01       	movw	r22, r6
     496:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__floatsisf>
     49a:	6d 87       	std	Y+13, r22	; 0x0d
     49c:	7e 87       	std	Y+14, r23	; 0x0e
     49e:	8f 87       	std	Y+15, r24	; 0x0f
     4a0:	98 8b       	std	Y+16, r25	; 0x10
     4a2:	c8 01       	movw	r24, r16
     4a4:	b7 01       	movw	r22, r14
     4a6:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__floatsisf>
     4aa:	1b 01       	movw	r2, r22
     4ac:	2c 01       	movw	r4, r24
     4ae:	22 e0       	ldi	r18, 0x02	; 2
     4b0:	3b e2       	ldi	r19, 0x2B	; 43
     4b2:	47 e0       	ldi	r20, 0x07	; 7
     4b4:	5d e3       	ldi	r21, 0x3D	; 61
     4b6:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
     4ba:	16 2f       	mov	r17, r22
     4bc:	f7 2e       	mov	r15, r23
     4be:	98 2e       	mov	r9, r24
     4c0:	89 2e       	mov	r8, r25
     4c2:	c6 01       	movw	r24, r12
     4c4:	b5 01       	movw	r22, r10
     4c6:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__floatsisf>
     4ca:	2e e4       	ldi	r18, 0x4E	; 78
     4cc:	32 e6       	ldi	r19, 0x62	; 98
     4ce:	40 e1       	ldi	r20, 0x10	; 16
     4d0:	5e e3       	ldi	r21, 0x3E	; 62
     4d2:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
     4d6:	a6 2e       	mov	r10, r22
     4d8:	e7 2e       	mov	r14, r23
     4da:	08 2f       	mov	r16, r24
     4dc:	69 2e       	mov	r6, r25
     4de:	6d 85       	ldd	r22, Y+13	; 0x0d
     4e0:	7e 85       	ldd	r23, Y+14	; 0x0e
     4e2:	8f 85       	ldd	r24, Y+15	; 0x0f
     4e4:	98 89       	ldd	r25, Y+16	; 0x10
     4e6:	25 ed       	ldi	r18, 0xD5	; 213
     4e8:	38 e7       	ldi	r19, 0x78	; 120
     4ea:	49 e6       	ldi	r20, 0x69	; 105
     4ec:	5d e3       	ldi	r21, 0x3D	; 61
     4ee:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
     4f2:	f4 01       	movw	r30, r8
     4f4:	21 2f       	mov	r18, r17
     4f6:	3f 2d       	mov	r19, r15
     4f8:	4f 2f       	mov	r20, r31
     4fa:	5e 2f       	mov	r21, r30
     4fc:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
     500:	2a 2d       	mov	r18, r10
     502:	3e 2d       	mov	r19, r14
     504:	40 2f       	mov	r20, r16
     506:	56 2d       	mov	r21, r6
     508:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
     50c:	69 83       	std	Y+1, r22	; 0x01
     50e:	7a 83       	std	Y+2, r23	; 0x02
     510:	8b 83       	std	Y+3, r24	; 0x03
     512:	9c 83       	std	Y+4, r25	; 0x04
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
     514:	c2 01       	movw	r24, r4
     516:	b1 01       	movw	r22, r2
     518:	28 eb       	ldi	r18, 0xB8	; 184
     51a:	3e e1       	ldi	r19, 0x1E	; 30
     51c:	45 e8       	ldi	r20, 0x85	; 133
     51e:	5d eb       	ldi	r21, 0xBD	; 189
     520:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
     524:	2a 2d       	mov	r18, r10
     526:	3e 2d       	mov	r19, r14
     528:	40 2f       	mov	r20, r16
     52a:	56 2d       	mov	r21, r6
     52c:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
     530:	6d 83       	std	Y+5, r22	; 0x05
     532:	7e 83       	std	Y+6, r23	; 0x06
     534:	8f 83       	std	Y+7, r24	; 0x07
     536:	98 87       	std	Y+8, r25	; 0x08
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
     538:	6d 85       	ldd	r22, Y+13	; 0x0d
     53a:	7e 85       	ldd	r23, Y+14	; 0x0e
     53c:	8f 85       	ldd	r24, Y+15	; 0x0f
     53e:	98 89       	ldd	r25, Y+16	; 0x10
     540:	25 ed       	ldi	r18, 0xD5	; 213
     542:	38 e7       	ldi	r19, 0x78	; 120
     544:	49 e6       	ldi	r20, 0x69	; 105
     546:	5d eb       	ldi	r21, 0xBD	; 189
     548:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
     54c:	f4 01       	movw	r30, r8
     54e:	21 2f       	mov	r18, r17
     550:	3f 2d       	mov	r19, r15
     552:	4f 2f       	mov	r20, r31
     554:	5e 2f       	mov	r21, r30
     556:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
     55a:	2a 2d       	mov	r18, r10
     55c:	3e 2d       	mov	r19, r14
     55e:	40 2f       	mov	r20, r16
     560:	56 2d       	mov	r21, r6
     562:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
     566:	69 87       	std	Y+9, r22	; 0x09
     568:	7a 87       	std	Y+10, r23	; 0x0a
     56a:	8b 87       	std	Y+11, r24	; 0x0b
     56c:	9c 87       	std	Y+12, r25	; 0x0c
     56e:	8e 01       	movw	r16, r28
     570:	0f 5f       	subi	r16, 0xFF	; 255
     572:	1f 4f       	sbci	r17, 0xFF	; 255
	
    for(i=0;i<3;++i){
     574:	ee 24       	eor	r14, r14
	}
				
}


void HolonomicW(int f_agl, int f_speed, int fw_speed){
     576:	58 01       	movw	r10, r16
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
	
    for(i=0;i<3;++i){
		if(V[i]>=40)V[i]=40;
     578:	f8 01       	movw	r30, r16
     57a:	60 81       	ld	r22, Z
     57c:	71 81       	ldd	r23, Z+1	; 0x01
     57e:	82 81       	ldd	r24, Z+2	; 0x02
     580:	93 81       	ldd	r25, Z+3	; 0x03
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	40 e2       	ldi	r20, 0x20	; 32
     588:	52 e4       	ldi	r21, 0x42	; 66
     58a:	0e 94 cd 12 	call	0x259a	; 0x259a <__gesf2>
     58e:	87 fd       	sbrc	r24, 7
     590:	09 c0       	rjmp	.+18     	; 0x5a4 <HolonomicW+0x22c>
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	a0 e2       	ldi	r26, 0x20	; 32
     598:	b2 e4       	ldi	r27, 0x42	; 66
     59a:	f8 01       	movw	r30, r16
     59c:	80 83       	st	Z, r24
     59e:	91 83       	std	Z+1, r25	; 0x01
     5a0:	a2 83       	std	Z+2, r26	; 0x02
     5a2:	b3 83       	std	Z+3, r27	; 0x03
		if(V[i]<=(-40))V[i]=-40;
     5a4:	f8 01       	movw	r30, r16
     5a6:	60 81       	ld	r22, Z
     5a8:	71 81       	ldd	r23, Z+1	; 0x01
     5aa:	82 81       	ldd	r24, Z+2	; 0x02
     5ac:	93 81       	ldd	r25, Z+3	; 0x03
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	40 e2       	ldi	r20, 0x20	; 32
     5b4:	52 ec       	ldi	r21, 0xC2	; 194
     5b6:	0e 94 2d 13 	call	0x265a	; 0x265a <__lesf2>
     5ba:	18 16       	cp	r1, r24
     5bc:	4c f0       	brlt	.+18     	; 0x5d0 <HolonomicW+0x258>
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	a0 e2       	ldi	r26, 0x20	; 32
     5c4:	b2 ec       	ldi	r27, 0xC2	; 194
     5c6:	f8 01       	movw	r30, r16
     5c8:	80 83       	st	Z, r24
     5ca:	91 83       	std	Z+1, r25	; 0x01
     5cc:	a2 83       	std	Z+2, r26	; 0x02
     5ce:	b3 83       	std	Z+3, r27	; 0x03
     5d0:	0c 5f       	subi	r16, 0xFC	; 252
     5d2:	1f 4f       	sbci	r17, 0xFF	; 255
		SetVelocity(i, V[i]*65536);
     5d4:	f5 01       	movw	r30, r10
     5d6:	60 81       	ld	r22, Z
     5d8:	71 81       	ldd	r23, Z+1	; 0x01
     5da:	82 81       	ldd	r24, Z+2	; 0x02
     5dc:	93 81       	ldd	r25, Z+3	; 0x03
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 e8       	ldi	r20, 0x80	; 128
     5e4:	57 e4       	ldi	r21, 0x47	; 71
     5e6:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
     5ea:	0e 94 bd 13 	call	0x277a	; 0x277a <__fixsfsi>
     5ee:	ab 01       	movw	r20, r22
     5f0:	bc 01       	movw	r22, r24
     5f2:	8e 2d       	mov	r24, r14
     5f4:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <SetVelocity>
		
	V[0]=((( 0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1		?
	V[1]=(((-0.065*Fy)+(0.141*Fw)));				//200 1 100 1       ?
	V[2]=(((-0.057*Fx)+(0.033*Fy)+(0.141*Fw)));		//100 1 100 1
	
    for(i=0;i<3;++i){
     5f8:	e3 94       	inc	r14
     5fa:	fe 2d       	mov	r31, r14
     5fc:	f3 30       	cpi	r31, 0x03	; 3
     5fe:	09 f0       	breq	.+2      	; 0x602 <HolonomicW+0x28a>
     600:	ba cf       	rjmp	.-140    	; 0x576 <HolonomicW+0x1fe>
		if(V[i]>=40)V[i]=40;
		if(V[i]<=(-40))V[i]=-40;
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
     602:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <StartMotion>
}
     606:	60 96       	adiw	r28, 0x10	; 16
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	cd bf       	out	0x3d, r28	; 61
     612:	cf 91       	pop	r28
     614:	df 91       	pop	r29
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	ff 90       	pop	r15
     61c:	ef 90       	pop	r14
     61e:	df 90       	pop	r13
     620:	cf 90       	pop	r12
     622:	bf 90       	pop	r11
     624:	af 90       	pop	r10
     626:	9f 90       	pop	r9
     628:	8f 90       	pop	r8
     62a:	7f 90       	pop	r7
     62c:	6f 90       	pop	r6
     62e:	5f 90       	pop	r5
     630:	4f 90       	pop	r4
     632:	3f 90       	pop	r3
     634:	2f 90       	pop	r2
     636:	08 95       	ret

00000638 <find_way>:
}




unsigned int find_way(){
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29

	while(1){
			if(psd_value[0] > 90 ) return 1;
			if(psd_value[1] < 50 && psd_value[2] < 50) return 2;
			if(READ_SENSOR()&0x08){
			tape = 1;
     644:	01 e0       	ldi	r16, 0x01	; 1
     646:	10 e0       	ldi	r17, 0x00	; 0
				while(READ_SENSOR()&0x08){
					HolonomicW(0,200,135-psd_value[8]);
     648:	c7 e8       	ldi	r28, 0x87	; 135
     64a:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
			if(READ_SENSOR()&0x01){
			tape = 2;
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	e8 2e       	mov	r14, r24
     650:	f1 2c       	mov	r15, r1


unsigned int find_way(){

	while(1){
			if(psd_value[0] > 90 ) return 1;
     652:	80 91 78 02 	lds	r24, 0x0278
     656:	8b 35       	cpi	r24, 0x5B	; 91
     658:	08 f0       	brcs	.+2      	; 0x65c <find_way+0x24>
     65a:	5b c0       	rjmp	.+182    	; 0x712 <find_way+0xda>
			if(psd_value[1] < 50 && psd_value[2] < 50) return 2;
     65c:	80 91 79 02 	lds	r24, 0x0279
     660:	82 33       	cpi	r24, 0x32	; 50
     662:	28 f4       	brcc	.+10     	; 0x66e <find_way+0x36>
     664:	80 91 7a 02 	lds	r24, 0x027A
     668:	82 33       	cpi	r24, 0x32	; 50
     66a:	08 f4       	brcc	.+2      	; 0x66e <find_way+0x36>
     66c:	55 c0       	rjmp	.+170    	; 0x718 <find_way+0xe0>
			if(READ_SENSOR()&0x08){
     66e:	80 91 63 00 	lds	r24, 0x0063
     672:	81 b1       	in	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	80 95       	com	r24
     678:	90 95       	com	r25
     67a:	83 ff       	sbrs	r24, 3
     67c:	18 c0       	rjmp	.+48     	; 0x6ae <find_way+0x76>
			tape = 1;
     67e:	10 93 65 02 	sts	0x0265, r17
     682:	00 93 64 02 	sts	0x0264, r16
				while(READ_SENSOR()&0x08){
     686:	0b c0       	rjmp	.+22     	; 0x69e <find_way+0x66>
					HolonomicW(0,200,135-psd_value[8]);
     688:	80 91 80 02 	lds	r24, 0x0280
     68c:	ae 01       	movw	r20, r28
     68e:	48 1b       	sub	r20, r24
     690:	51 09       	sbc	r21, r1
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	68 ec       	ldi	r22, 0xC8	; 200
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	0e 94 bc 01 	call	0x378	; 0x378 <HolonomicW>
	while(1){
			if(psd_value[0] > 90 ) return 1;
			if(psd_value[1] < 50 && psd_value[2] < 50) return 2;
			if(READ_SENSOR()&0x08){
			tape = 1;
				while(READ_SENSOR()&0x08){
     69e:	80 91 63 00 	lds	r24, 0x0063
     6a2:	81 b1       	in	r24, 0x01	; 1
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	80 95       	com	r24
     6a8:	90 95       	com	r25
     6aa:	83 fd       	sbrc	r24, 3
     6ac:	ed cf       	rjmp	.-38     	; 0x688 <find_way+0x50>
					HolonomicW(0,200,135-psd_value[8]);
				}
			}
			if(READ_SENSOR()&0x01){
     6ae:	80 91 63 00 	lds	r24, 0x0063
     6b2:	91 b1       	in	r25, 0x01	; 1
     6b4:	86 95       	lsr	r24
     6b6:	86 95       	lsr	r24
     6b8:	86 95       	lsr	r24
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	80 95       	com	r24
     6be:	90 95       	com	r25
     6c0:	80 ff       	sbrs	r24, 0
     6c2:	1b c0       	rjmp	.+54     	; 0x6fa <find_way+0xc2>
			tape = 2;
     6c4:	f0 92 65 02 	sts	0x0265, r15
     6c8:	e0 92 64 02 	sts	0x0264, r14
				while(READ_SENSOR()&0x01){
     6cc:	0b c0       	rjmp	.+22     	; 0x6e4 <find_way+0xac>
					HolonomicW(0,200,135-psd_value[8]);
     6ce:	80 91 80 02 	lds	r24, 0x0280
     6d2:	ae 01       	movw	r20, r28
     6d4:	48 1b       	sub	r20, r24
     6d6:	51 09       	sbc	r21, r1
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	68 ec       	ldi	r22, 0xC8	; 200
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	0e 94 bc 01 	call	0x378	; 0x378 <HolonomicW>
					HolonomicW(0,200,135-psd_value[8]);
				}
			}
			if(READ_SENSOR()&0x01){
			tape = 2;
				while(READ_SENSOR()&0x01){
     6e4:	80 91 63 00 	lds	r24, 0x0063
     6e8:	91 b1       	in	r25, 0x01	; 1
     6ea:	86 95       	lsr	r24
     6ec:	86 95       	lsr	r24
     6ee:	86 95       	lsr	r24
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	80 95       	com	r24
     6f4:	90 95       	com	r25
     6f6:	80 fd       	sbrc	r24, 0
     6f8:	ea cf       	rjmp	.-44     	; 0x6ce <find_way+0x96>
					HolonomicW(0,200,135-psd_value[8]);
				}
			}
			HolonomicW(0,200,135-psd_value[8]);
     6fa:	80 91 80 02 	lds	r24, 0x0280
     6fe:	ae 01       	movw	r20, r28
     700:	48 1b       	sub	r20, r24
     702:	51 09       	sbc	r21, r1
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	68 ec       	ldi	r22, 0xC8	; 200
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	0e 94 bc 01 	call	0x378	; 0x378 <HolonomicW>
		}
     710:	a0 cf       	rjmp	.-192    	; 0x652 <find_way+0x1a>


unsigned int find_way(){

	while(1){
			if(psd_value[0] > 90 ) return 1;
     712:	21 e0       	ldi	r18, 0x01	; 1
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	02 c0       	rjmp	.+4      	; 0x71c <find_way+0xe4>
			if(psd_value[1] < 50 && psd_value[2] < 50) return 2;
     718:	22 e0       	ldi	r18, 0x02	; 2
     71a:	30 e0       	ldi	r19, 0x00	; 0
				}
			}
			HolonomicW(0,200,135-psd_value[8]);
		}
		non_Holonomic(0,0,0);
}
     71c:	c9 01       	movw	r24, r18
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	08 95       	ret

0000072c <Holonomic_distance>:
		if(flg0 && flg1)
			break;
	}
}

void Holonomic_distance(int f_agl,int f_speed,unsigned int distance,unsigned stop){
     72c:	2f 92       	push	r2
     72e:	3f 92       	push	r3
     730:	4f 92       	push	r4
     732:	5f 92       	push	r5
     734:	6f 92       	push	r6
     736:	7f 92       	push	r7
     738:	8f 92       	push	r8
     73a:	9f 92       	push	r9
     73c:	af 92       	push	r10
     73e:	bf 92       	push	r11
     740:	cf 92       	push	r12
     742:	df 92       	push	r13
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	df 93       	push	r29
     74e:	cf 93       	push	r28
     750:	00 d0       	rcall	.+0      	; 0x752 <Holonomic_distance+0x26>
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	9a 83       	std	Y+2, r25	; 0x02
     758:	89 83       	std	Y+1, r24	; 0x01
     75a:	1a 01       	movw	r2, r20
     75c:	79 01       	movw	r14, r18
//1.각도	2.속도	3.거리	4.감속지점	
	next_speed=f_speed;
     75e:	88 27       	eor	r24, r24
     760:	77 fd       	sbrc	r23, 7
     762:	80 95       	com	r24
     764:	98 2f       	mov	r25, r24
     766:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__floatsisf>
     76a:	60 93 3c 02 	sts	0x023C, r22
     76e:	70 93 3d 02 	sts	0x023D, r23
     772:	80 93 3e 02 	sts	0x023E, r24
     776:	90 93 3f 02 	sts	0x023F, r25
	acc=5;
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	a0 ea       	ldi	r26, 0xA0	; 160
     780:	b0 e4       	ldi	r27, 0x40	; 64
     782:	80 93 00 01 	sts	0x0100, r24
     786:	90 93 01 01 	sts	0x0101, r25
     78a:	a0 93 02 01 	sts	0x0102, r26
     78e:	b0 93 03 01 	sts	0x0103, r27
	TCNT1H=0xFF; TCNT1L=0x70;	//0.01초
     792:	8f ef       	ldi	r24, 0xFF	; 255
     794:	8d bd       	out	0x2d, r24	; 45
     796:	80 e7       	ldi	r24, 0x70	; 112
     798:	8c bd       	out	0x2c, r24	; 44
	sec=0;
     79a:	10 92 37 02 	sts	0x0237, r1
     79e:	10 92 36 02 	sts	0x0236, r1
	disMD=0;	//거리 초기화
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	dc 01       	movw	r26, r24
     7a8:	80 93 54 02 	sts	0x0254, r24
     7ac:	90 93 55 02 	sts	0x0255, r25
     7b0:	a0 93 56 02 	sts	0x0256, r26
     7b4:	b0 93 57 02 	sts	0x0257, r27
	
	while(1){
	
		HolonomicW(f_agl,speed,0);
	
		if(disMD>=distance) break;
     7b8:	44 24       	eor	r4, r4
     7ba:	55 24       	eor	r5, r5
		else if(disMD>=stop) next_speed=50;
     7bc:	57 01       	movw	r10, r14
     7be:	cc 24       	eor	r12, r12
     7c0:	dd 24       	eor	r13, r13
     7c2:	0f 2e       	mov	r0, r31
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	6f 2e       	mov	r6, r31
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	7f 2e       	mov	r7, r31
     7cc:	f8 e4       	ldi	r31, 0x48	; 72
     7ce:	8f 2e       	mov	r8, r31
     7d0:	f2 e4       	ldi	r31, 0x42	; 66
     7d2:	9f 2e       	mov	r9, r31
     7d4:	f0 2d       	mov	r31, r0
	sec=0;
	disMD=0;	//거리 초기화
	
	while(1){
	
		HolonomicW(f_agl,speed,0);
     7d6:	60 91 38 02 	lds	r22, 0x0238
     7da:	70 91 39 02 	lds	r23, 0x0239
     7de:	80 91 3a 02 	lds	r24, 0x023A
     7e2:	90 91 3b 02 	lds	r25, 0x023B
     7e6:	0e 94 bd 13 	call	0x277a	; 0x277a <__fixsfsi>
     7ea:	9b 01       	movw	r18, r22
     7ec:	ac 01       	movw	r20, r24
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	9a 81       	ldd	r25, Y+2	; 0x02
     7f2:	b9 01       	movw	r22, r18
     7f4:	40 e0       	ldi	r20, 0x00	; 0
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	0e 94 bc 01 	call	0x378	; 0x378 <HolonomicW>
	
		if(disMD>=distance) break;
     7fc:	e0 90 54 02 	lds	r14, 0x0254
     800:	f0 90 55 02 	lds	r15, 0x0255
     804:	00 91 56 02 	lds	r16, 0x0256
     808:	10 91 57 02 	lds	r17, 0x0257
     80c:	c2 01       	movw	r24, r4
     80e:	b1 01       	movw	r22, r2
     810:	0e 94 0f 14 	call	0x281e	; 0x281e <__floatunsisf>
     814:	9b 01       	movw	r18, r22
     816:	ac 01       	movw	r20, r24
     818:	c8 01       	movw	r24, r16
     81a:	b7 01       	movw	r22, r14
     81c:	0e 94 cd 12 	call	0x259a	; 0x259a <__gesf2>
     820:	87 ff       	sbrs	r24, 7
     822:	1d c0       	rjmp	.+58     	; 0x85e <Holonomic_distance+0x132>
		else if(disMD>=stop) next_speed=50;
     824:	e0 90 54 02 	lds	r14, 0x0254
     828:	f0 90 55 02 	lds	r15, 0x0255
     82c:	00 91 56 02 	lds	r16, 0x0256
     830:	10 91 57 02 	lds	r17, 0x0257
     834:	c6 01       	movw	r24, r12
     836:	b5 01       	movw	r22, r10
     838:	0e 94 0f 14 	call	0x281e	; 0x281e <__floatunsisf>
     83c:	9b 01       	movw	r18, r22
     83e:	ac 01       	movw	r20, r24
     840:	c8 01       	movw	r24, r16
     842:	b7 01       	movw	r22, r14
     844:	0e 94 cd 12 	call	0x259a	; 0x259a <__gesf2>
     848:	87 fd       	sbrc	r24, 7
     84a:	c5 cf       	rjmp	.-118    	; 0x7d6 <Holonomic_distance+0xaa>
     84c:	60 92 3c 02 	sts	0x023C, r6
     850:	70 92 3d 02 	sts	0x023D, r7
     854:	80 92 3e 02 	sts	0x023E, r8
     858:	90 92 3f 02 	sts	0x023F, r9
     85c:	bc cf       	rjmp	.-136    	; 0x7d6 <Holonomic_distance+0xaa>
	}
}
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	cf 91       	pop	r28
     864:	df 91       	pop	r29
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	ef 90       	pop	r14
     86e:	df 90       	pop	r13
     870:	cf 90       	pop	r12
     872:	bf 90       	pop	r11
     874:	af 90       	pop	r10
     876:	9f 90       	pop	r9
     878:	8f 90       	pop	r8
     87a:	7f 90       	pop	r7
     87c:	6f 90       	pop	r6
     87e:	5f 90       	pop	r5
     880:	4f 90       	pop	r4
     882:	3f 90       	pop	r3
     884:	2f 90       	pop	r2
     886:	08 95       	ret

00000888 <Turn_and_Drive>:
//5. 회전이동거리 (회전 각도)
//6. 정지 시점
//7. 회전정지시점

void Turn_and_Drive(double f_agl, int f_speed, int fw_speed, unsigned int mm,int dgree, unsigned int stop, unsigned int wstop)
{
     888:	2f 92       	push	r2
     88a:	3f 92       	push	r3
     88c:	4f 92       	push	r4
     88e:	5f 92       	push	r5
     890:	6f 92       	push	r6
     892:	7f 92       	push	r7
     894:	8f 92       	push	r8
     896:	9f 92       	push	r9
     898:	af 92       	push	r10
     89a:	bf 92       	push	r11
     89c:	cf 92       	push	r12
     89e:	df 92       	push	r13
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	df 93       	push	r29
     8aa:	cf 93       	push	r28
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
     8b0:	a6 97       	sbiw	r28, 0x26	; 38
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	de bf       	out	0x3e, r29	; 62
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	cd bf       	out	0x3d, r28	; 61
     8bc:	96 2e       	mov	r9, r22
     8be:	87 2e       	mov	r8, r23
     8c0:	78 2e       	mov	r7, r24
     8c2:	69 2e       	mov	r6, r25
     8c4:	29 01       	movw	r4, r18
     8c6:	dc 86       	std	Y+12, r13	; 0x0c
     8c8:	cb 86       	std	Y+11, r12	; 0x0b
     8ca:	be 86       	std	Y+14, r11	; 0x0e
     8cc:	ad 86       	std	Y+13, r10	; 0x0d
	double distance=0, distanceW=0;
	float S_distance=0, S_distanceW=0;
	unsigned char flg0=0, flg1=0;

	TCNT1H=0xFF; TCNT1L=0x70;
     8ce:	8f ef       	ldi	r24, 0xFF	; 255
     8d0:	8d bd       	out	0x2d, r24	; 45
     8d2:	80 e7       	ldi	r24, 0x70	; 112
     8d4:	8c bd       	out	0x2c, r24	; 44
	sec=1;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	90 93 37 02 	sts	0x0237, r25
     8de:	80 93 36 02 	sts	0x0236, r24

	acc=5;	accW=3;
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 ea       	ldi	r26, 0xA0	; 160
     8e8:	b0 e4       	ldi	r27, 0x40	; 64
     8ea:	80 93 00 01 	sts	0x0100, r24
     8ee:	90 93 01 01 	sts	0x0101, r25
     8f2:	a0 93 02 01 	sts	0x0102, r26
     8f6:	b0 93 03 01 	sts	0x0103, r27
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	b0 e4       	ldi	r27, 0x40	; 64
     902:	80 93 04 01 	sts	0x0104, r24
     906:	90 93 05 01 	sts	0x0105, r25
     90a:	a0 93 06 01 	sts	0x0106, r26
     90e:	b0 93 07 01 	sts	0x0107, r27
	next_speed=f_speed;
     912:	ba 01       	movw	r22, r20
     914:	88 27       	eor	r24, r24
     916:	77 fd       	sbrc	r23, 7
     918:	80 95       	com	r24
     91a:	98 2f       	mov	r25, r24
     91c:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__floatsisf>
     920:	60 93 3c 02 	sts	0x023C, r22
     924:	70 93 3d 02 	sts	0x023D, r23
     928:	80 93 3e 02 	sts	0x023E, r24
     92c:	90 93 3f 02 	sts	0x023F, r25
	next_wspeed=fw_speed;
     930:	b2 01       	movw	r22, r4
     932:	88 27       	eor	r24, r24
     934:	77 fd       	sbrc	r23, 7
     936:	80 95       	com	r24
     938:	98 2f       	mov	r25, r24
     93a:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__floatsisf>
     93e:	60 93 44 02 	sts	0x0244, r22
     942:	70 93 45 02 	sts	0x0245, r23
     946:	80 93 46 02 	sts	0x0246, r24
     94a:	90 93 47 02 	sts	0x0247, r25

void Turn_and_Drive(double f_agl, int f_speed, int fw_speed, unsigned int mm,int dgree, unsigned int stop, unsigned int wstop)
{
	double distance=0, distanceW=0;
	float S_distance=0, S_distanceW=0;
	unsigned char flg0=0, flg1=0;
     94e:	1a 86       	std	Y+10, r1	; 0x0a
     950:	19 86       	std	Y+9, r1	; 0x09
//6. 정지 시점
//7. 회전정지시점

void Turn_and_Drive(double f_agl, int f_speed, int fw_speed, unsigned int mm,int dgree, unsigned int stop, unsigned int wstop)
{
	double distance=0, distanceW=0;
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	dc 01       	movw	r26, r24
     958:	8d 83       	std	Y+5, r24	; 0x05
     95a:	9e 83       	std	Y+6, r25	; 0x06
     95c:	af 83       	std	Y+7, r26	; 0x07
     95e:	b8 87       	std	Y+8, r27	; 0x08
     960:	89 83       	std	Y+1, r24	; 0x01
     962:	9a 83       	std	Y+2, r25	; 0x02
     964:	ab 83       	std	Y+3, r26	; 0x03
     966:	bc 83       	std	Y+4, r27	; 0x04

			HolonomicW((int)(f_agl),speed,wspeed);

			distance+=S_distance;
			distanceW+=S_distanceW;
			if(distance>=stop && stop!=0)next_speed=100;
     968:	ab 85       	ldd	r26, Y+11	; 0x0b
     96a:	bc 85       	ldd	r27, Y+12	; 0x0c
     96c:	cd 01       	movw	r24, r26
     96e:	a0 e0       	ldi	r26, 0x00	; 0
     970:	b0 e0       	ldi	r27, 0x00	; 0
     972:	8f 8b       	std	Y+23, r24	; 0x17
     974:	98 8f       	std	Y+24, r25	; 0x18
     976:	a9 8f       	std	Y+25, r26	; 0x19
     978:	ba 8f       	std	Y+26, r27	; 0x1a
			if(fabs(distanceW)>=wstop && wstop!=0){
     97a:	ad 85       	ldd	r26, Y+13	; 0x0d
     97c:	be 85       	ldd	r27, Y+14	; 0x0e
     97e:	cd 01       	movw	r24, r26
     980:	a0 e0       	ldi	r26, 0x00	; 0
     982:	b0 e0       	ldi	r27, 0x00	; 0
     984:	8b 8f       	std	Y+27, r24	; 0x1b
     986:	9c 8f       	std	Y+28, r25	; 0x1c
     988:	ad 8f       	std	Y+29, r26	; 0x1d
     98a:	be 8f       	std	Y+30, r27	; 0x1e
				next_wspeed=20;
				if(wspeed<=0)next_wspeed=-20;
			}

			if(distance>=mm || (distance*-1)>=mm){
     98c:	c8 01       	movw	r24, r16
     98e:	a0 e0       	ldi	r26, 0x00	; 0
     990:	b0 e0       	ldi	r27, 0x00	; 0
     992:	8f 8f       	std	Y+31, r24	; 0x1f
     994:	98 a3       	std	Y+32, r25	; 0x20
     996:	a9 a3       	std	Y+33, r26	; 0x21
     998:	ba a3       	std	Y+34, r27	; 0x22
				flg0=1;
				next_speed=0;
				speed=0;
			}
			if(fabs(distanceW)>=dgree){
     99a:	c7 01       	movw	r24, r14
     99c:	aa 27       	eor	r26, r26
     99e:	97 fd       	sbrc	r25, 7
     9a0:	a0 95       	com	r26
     9a2:	ba 2f       	mov	r27, r26
     9a4:	8b a3       	std	Y+35, r24	; 0x23
     9a6:	9c a3       	std	Y+36, r25	; 0x24
     9a8:	ad a3       	std	Y+37, r26	; 0x25
     9aa:	be a3       	std	Y+38, r27	; 0x26
	next_speed=f_speed;
	next_wspeed=fw_speed;

	while(1){

		if(sec){
     9ac:	80 91 36 02 	lds	r24, 0x0236
     9b0:	90 91 37 02 	lds	r25, 0x0237
     9b4:	00 97       	sbiw	r24, 0x00	; 0
     9b6:	09 f4       	brne	.+2      	; 0x9ba <Turn_and_Drive+0x132>
     9b8:	82 c1       	rjmp	.+772    	; 0xcbe <Turn_and_Drive+0x436>
			sec=0;
     9ba:	10 92 37 02 	sts	0x0237, r1
     9be:	10 92 36 02 	sts	0x0236, r1

			S_distance=speed*0.01;	//0.01 순간 이동거리
     9c2:	60 91 38 02 	lds	r22, 0x0238
     9c6:	70 91 39 02 	lds	r23, 0x0239
     9ca:	80 91 3a 02 	lds	r24, 0x023A
     9ce:	90 91 3b 02 	lds	r25, 0x023B
     9d2:	2a e0       	ldi	r18, 0x0A	; 10
     9d4:	37 ed       	ldi	r19, 0xD7	; 215
     9d6:	43 e2       	ldi	r20, 0x23	; 35
     9d8:	5c e3       	ldi	r21, 0x3C	; 60
     9da:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
     9de:	6b 8b       	std	Y+19, r22	; 0x13
     9e0:	7c 8b       	std	Y+20, r23	; 0x14
     9e2:	8d 8b       	std	Y+21, r24	; 0x15
     9e4:	9e 8b       	std	Y+22, r25	; 0x16
			S_distanceW=wspeed*0.01;	//0.01 순간 이동거리 
     9e6:	60 91 40 02 	lds	r22, 0x0240
     9ea:	70 91 41 02 	lds	r23, 0x0241
     9ee:	80 91 42 02 	lds	r24, 0x0242
     9f2:	90 91 43 02 	lds	r25, 0x0243
     9f6:	2a e0       	ldi	r18, 0x0A	; 10
     9f8:	37 ed       	ldi	r19, 0xD7	; 215
     9fa:	43 e2       	ldi	r20, 0x23	; 35
     9fc:	5c e3       	ldi	r21, 0x3C	; 60
     9fe:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
     a02:	56 2e       	mov	r5, r22
     a04:	47 2e       	mov	r4, r23
     a06:	38 2e       	mov	r3, r24
     a08:	29 2e       	mov	r2, r25

			f_agl=f_agl-S_distanceW;
     a0a:	a4 01       	movw	r20, r8
     a0c:	93 01       	movw	r18, r6
     a0e:	65 2f       	mov	r22, r21
     a10:	78 2d       	mov	r23, r8
     a12:	83 2f       	mov	r24, r19
     a14:	96 2d       	mov	r25, r6
     a16:	d2 01       	movw	r26, r4
     a18:	f1 01       	movw	r30, r2
     a1a:	2b 2f       	mov	r18, r27
     a1c:	3a 2f       	mov	r19, r26
     a1e:	4f 2f       	mov	r20, r31
     a20:	5e 2f       	mov	r21, r30
     a22:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__subsf3>
     a26:	96 2e       	mov	r9, r22
     a28:	87 2e       	mov	r8, r23
     a2a:	78 2e       	mov	r7, r24
     a2c:	69 2e       	mov	r6, r25

			if(f_agl<0)f_agl+=360;
     a2e:	a4 01       	movw	r20, r8
     a30:	93 01       	movw	r18, r6
     a32:	65 2f       	mov	r22, r21
     a34:	74 2f       	mov	r23, r20
     a36:	83 2f       	mov	r24, r19
     a38:	92 2f       	mov	r25, r18
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	a9 01       	movw	r20, r18
     a40:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__ltsf2>
     a44:	87 ff       	sbrs	r24, 7
     a46:	0d c0       	rjmp	.+26     	; 0xa62 <Turn_and_Drive+0x1da>
     a48:	a4 01       	movw	r20, r8
     a4a:	93 01       	movw	r18, r6
     a4c:	65 2f       	mov	r22, r21
     a4e:	74 2f       	mov	r23, r20
     a50:	83 2f       	mov	r24, r19
     a52:	92 2f       	mov	r25, r18
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	44 eb       	ldi	r20, 0xB4	; 180
     a5a:	53 e4       	ldi	r21, 0x43	; 67
     a5c:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
     a60:	1a c0       	rjmp	.+52     	; 0xa96 <Turn_and_Drive+0x20e>
			else if(f_agl>=360)f_agl-=360;
     a62:	a4 01       	movw	r20, r8
     a64:	93 01       	movw	r18, r6
     a66:	65 2f       	mov	r22, r21
     a68:	74 2f       	mov	r23, r20
     a6a:	83 2f       	mov	r24, r19
     a6c:	92 2f       	mov	r25, r18
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	44 eb       	ldi	r20, 0xB4	; 180
     a74:	53 e4       	ldi	r21, 0x43	; 67
     a76:	0e 94 cd 12 	call	0x259a	; 0x259a <__gesf2>
     a7a:	87 fd       	sbrc	r24, 7
     a7c:	10 c0       	rjmp	.+32     	; 0xa9e <Turn_and_Drive+0x216>
     a7e:	a4 01       	movw	r20, r8
     a80:	93 01       	movw	r18, r6
     a82:	65 2f       	mov	r22, r21
     a84:	74 2f       	mov	r23, r20
     a86:	83 2f       	mov	r24, r19
     a88:	92 2f       	mov	r25, r18
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	44 eb       	ldi	r20, 0xB4	; 180
     a90:	53 e4       	ldi	r21, 0x43	; 67
     a92:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__subsf3>
     a96:	96 2e       	mov	r9, r22
     a98:	87 2e       	mov	r8, r23
     a9a:	78 2e       	mov	r7, r24
     a9c:	69 2e       	mov	r6, r25

			HolonomicW((int)(f_agl),speed,wspeed);
     a9e:	e0 90 38 02 	lds	r14, 0x0238
     aa2:	f0 90 39 02 	lds	r15, 0x0239
     aa6:	00 91 3a 02 	lds	r16, 0x023A
     aaa:	10 91 3b 02 	lds	r17, 0x023B
     aae:	a0 90 40 02 	lds	r10, 0x0240
     ab2:	b0 90 41 02 	lds	r11, 0x0241
     ab6:	c0 90 42 02 	lds	r12, 0x0242
     aba:	d0 90 43 02 	lds	r13, 0x0243
     abe:	a4 01       	movw	r20, r8
     ac0:	93 01       	movw	r18, r6
     ac2:	65 2f       	mov	r22, r21
     ac4:	78 2d       	mov	r23, r8
     ac6:	83 2f       	mov	r24, r19
     ac8:	96 2d       	mov	r25, r6
     aca:	0e 94 bd 13 	call	0x277a	; 0x277a <__fixsfsi>
     ace:	6f 87       	std	Y+15, r22	; 0x0f
     ad0:	78 8b       	std	Y+16, r23	; 0x10
     ad2:	89 8b       	std	Y+17, r24	; 0x11
     ad4:	9a 8b       	std	Y+18, r25	; 0x12
     ad6:	c8 01       	movw	r24, r16
     ad8:	b7 01       	movw	r22, r14
     ada:	0e 94 bd 13 	call	0x277a	; 0x277a <__fixsfsi>
     ade:	7b 01       	movw	r14, r22
     ae0:	8c 01       	movw	r16, r24
     ae2:	c6 01       	movw	r24, r12
     ae4:	b5 01       	movw	r22, r10
     ae6:	0e 94 bd 13 	call	0x277a	; 0x277a <__fixsfsi>
     aea:	9b 01       	movw	r18, r22
     aec:	ac 01       	movw	r20, r24
     aee:	8f 85       	ldd	r24, Y+15	; 0x0f
     af0:	98 89       	ldd	r25, Y+16	; 0x10
     af2:	b7 01       	movw	r22, r14
     af4:	a9 01       	movw	r20, r18
     af6:	0e 94 bc 01 	call	0x378	; 0x378 <HolonomicW>

			distance+=S_distance;
     afa:	69 81       	ldd	r22, Y+1	; 0x01
     afc:	7a 81       	ldd	r23, Y+2	; 0x02
     afe:	8b 81       	ldd	r24, Y+3	; 0x03
     b00:	9c 81       	ldd	r25, Y+4	; 0x04
     b02:	bb 89       	ldd	r27, Y+19	; 0x13
     b04:	ac 89       	ldd	r26, Y+20	; 0x14
     b06:	1d 89       	ldd	r17, Y+21	; 0x15
     b08:	0e 89       	ldd	r16, Y+22	; 0x16
     b0a:	2b 2f       	mov	r18, r27
     b0c:	3a 2f       	mov	r19, r26
     b0e:	41 2f       	mov	r20, r17
     b10:	50 2f       	mov	r21, r16
     b12:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
     b16:	16 2f       	mov	r17, r22
     b18:	07 2f       	mov	r16, r23
     b1a:	e8 2e       	mov	r14, r24
     b1c:	a9 2e       	mov	r10, r25
     b1e:	86 2f       	mov	r24, r22
     b20:	90 2f       	mov	r25, r16
     b22:	ae 2d       	mov	r26, r14
     b24:	ba 2d       	mov	r27, r10
     b26:	89 83       	std	Y+1, r24	; 0x01
     b28:	9a 83       	std	Y+2, r25	; 0x02
     b2a:	ab 83       	std	Y+3, r26	; 0x03
     b2c:	bc 83       	std	Y+4, r27	; 0x04
			distanceW+=S_distanceW;
     b2e:	6d 81       	ldd	r22, Y+5	; 0x05
     b30:	7e 81       	ldd	r23, Y+6	; 0x06
     b32:	8f 81       	ldd	r24, Y+7	; 0x07
     b34:	98 85       	ldd	r25, Y+8	; 0x08
     b36:	d2 01       	movw	r26, r4
     b38:	f1 01       	movw	r30, r2
     b3a:	2b 2f       	mov	r18, r27
     b3c:	34 2d       	mov	r19, r4
     b3e:	4f 2f       	mov	r20, r31
     b40:	52 2d       	mov	r21, r2
     b42:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
     b46:	26 2f       	mov	r18, r22
     b48:	37 2f       	mov	r19, r23
     b4a:	48 2f       	mov	r20, r24
     b4c:	59 2f       	mov	r21, r25
     b4e:	2d 83       	std	Y+5, r18	; 0x05
     b50:	3e 83       	std	Y+6, r19	; 0x06
     b52:	4f 83       	std	Y+7, r20	; 0x07
     b54:	58 87       	std	Y+8, r21	; 0x08
			if(distance>=stop && stop!=0)next_speed=100;
     b56:	6f 89       	ldd	r22, Y+23	; 0x17
     b58:	78 8d       	ldd	r23, Y+24	; 0x18
     b5a:	89 8d       	ldd	r24, Y+25	; 0x19
     b5c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b5e:	0e 94 0f 14 	call	0x281e	; 0x281e <__floatunsisf>
     b62:	9b 01       	movw	r18, r22
     b64:	ac 01       	movw	r20, r24
     b66:	61 2f       	mov	r22, r17
     b68:	70 2f       	mov	r23, r16
     b6a:	8e 2d       	mov	r24, r14
     b6c:	9a 2d       	mov	r25, r10
     b6e:	0e 94 cd 12 	call	0x259a	; 0x259a <__gesf2>
     b72:	87 fd       	sbrc	r24, 7
     b74:	10 c0       	rjmp	.+32     	; 0xb96 <Turn_and_Drive+0x30e>
     b76:	ab 85       	ldd	r26, Y+11	; 0x0b
     b78:	bc 85       	ldd	r27, Y+12	; 0x0c
     b7a:	10 97       	sbiw	r26, 0x00	; 0
     b7c:	61 f0       	breq	.+24     	; 0xb96 <Turn_and_Drive+0x30e>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	a8 ec       	ldi	r26, 0xC8	; 200
     b84:	b2 e4       	ldi	r27, 0x42	; 66
     b86:	80 93 3c 02 	sts	0x023C, r24
     b8a:	90 93 3d 02 	sts	0x023D, r25
     b8e:	a0 93 3e 02 	sts	0x023E, r26
     b92:	b0 93 3f 02 	sts	0x023F, r27
			if(fabs(distanceW)>=wstop && wstop!=0){
     b96:	ad 80       	ldd	r10, Y+5	; 0x05
     b98:	be 80       	ldd	r11, Y+6	; 0x06
     b9a:	cf 80       	ldd	r12, Y+7	; 0x07
     b9c:	d8 84       	ldd	r13, Y+8	; 0x08
     b9e:	e8 94       	clt
     ba0:	d7 f8       	bld	r13, 7
     ba2:	6b 8d       	ldd	r22, Y+27	; 0x1b
     ba4:	7c 8d       	ldd	r23, Y+28	; 0x1c
     ba6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ba8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     baa:	0e 94 0f 14 	call	0x281e	; 0x281e <__floatunsisf>
     bae:	9b 01       	movw	r18, r22
     bb0:	ac 01       	movw	r20, r24
     bb2:	c6 01       	movw	r24, r12
     bb4:	b5 01       	movw	r22, r10
     bb6:	0e 94 cd 12 	call	0x259a	; 0x259a <__gesf2>
     bba:	87 fd       	sbrc	r24, 7
     bbc:	2b c0       	rjmp	.+86     	; 0xc14 <Turn_and_Drive+0x38c>
     bbe:	ad 85       	ldd	r26, Y+13	; 0x0d
     bc0:	be 85       	ldd	r27, Y+14	; 0x0e
     bc2:	10 97       	sbiw	r26, 0x00	; 0
     bc4:	39 f1       	breq	.+78     	; 0xc14 <Turn_and_Drive+0x38c>
				next_wspeed=20;
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a0 ea       	ldi	r26, 0xA0	; 160
     bcc:	b1 e4       	ldi	r27, 0x41	; 65
     bce:	80 93 44 02 	sts	0x0244, r24
     bd2:	90 93 45 02 	sts	0x0245, r25
     bd6:	a0 93 46 02 	sts	0x0246, r26
     bda:	b0 93 47 02 	sts	0x0247, r27
				if(wspeed<=0)next_wspeed=-20;
     bde:	60 91 40 02 	lds	r22, 0x0240
     be2:	70 91 41 02 	lds	r23, 0x0241
     be6:	80 91 42 02 	lds	r24, 0x0242
     bea:	90 91 43 02 	lds	r25, 0x0243
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	a9 01       	movw	r20, r18
     bf4:	0e 94 2d 13 	call	0x265a	; 0x265a <__lesf2>
     bf8:	18 16       	cp	r1, r24
     bfa:	64 f0       	brlt	.+24     	; 0xc14 <Turn_and_Drive+0x38c>
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	a0 ea       	ldi	r26, 0xA0	; 160
     c02:	b1 ec       	ldi	r27, 0xC1	; 193
     c04:	80 93 44 02 	sts	0x0244, r24
     c08:	90 93 45 02 	sts	0x0245, r25
     c0c:	a0 93 46 02 	sts	0x0246, r26
     c10:	b0 93 47 02 	sts	0x0247, r27
			}

			if(distance>=mm || (distance*-1)>=mm){
     c14:	6f 8d       	ldd	r22, Y+31	; 0x1f
     c16:	78 a1       	ldd	r23, Y+32	; 0x20
     c18:	89 a1       	ldd	r24, Y+33	; 0x21
     c1a:	9a a1       	ldd	r25, Y+34	; 0x22
     c1c:	0e 94 0f 14 	call	0x281e	; 0x281e <__floatunsisf>
     c20:	7b 01       	movw	r14, r22
     c22:	8c 01       	movw	r16, r24
     c24:	69 81       	ldd	r22, Y+1	; 0x01
     c26:	7a 81       	ldd	r23, Y+2	; 0x02
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	9c 81       	ldd	r25, Y+4	; 0x04
     c2c:	a8 01       	movw	r20, r16
     c2e:	97 01       	movw	r18, r14
     c30:	0e 94 cd 12 	call	0x259a	; 0x259a <__gesf2>
     c34:	87 ff       	sbrs	r24, 7
     c36:	0b c0       	rjmp	.+22     	; 0xc4e <Turn_and_Drive+0x3c6>
     c38:	69 81       	ldd	r22, Y+1	; 0x01
     c3a:	7a 81       	ldd	r23, Y+2	; 0x02
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	9c 81       	ldd	r25, Y+4	; 0x04
     c40:	90 58       	subi	r25, 0x80	; 128
     c42:	a8 01       	movw	r20, r16
     c44:	97 01       	movw	r18, r14
     c46:	0e 94 cd 12 	call	0x259a	; 0x259a <__gesf2>
     c4a:	87 fd       	sbrc	r24, 7
     c4c:	15 c0       	rjmp	.+42     	; 0xc78 <Turn_and_Drive+0x3f0>
				flg0=1;
				next_speed=0;
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	dc 01       	movw	r26, r24
     c54:	80 93 3c 02 	sts	0x023C, r24
     c58:	90 93 3d 02 	sts	0x023D, r25
     c5c:	a0 93 3e 02 	sts	0x023E, r26
     c60:	b0 93 3f 02 	sts	0x023F, r27
				speed=0;
     c64:	80 93 38 02 	sts	0x0238, r24
     c68:	90 93 39 02 	sts	0x0239, r25
     c6c:	a0 93 3a 02 	sts	0x023A, r26
     c70:	b0 93 3b 02 	sts	0x023B, r27
				next_wspeed=20;
				if(wspeed<=0)next_wspeed=-20;
			}

			if(distance>=mm || (distance*-1)>=mm){
				flg0=1;
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	99 87       	std	Y+9, r25	; 0x09
				next_speed=0;
				speed=0;
			}
			if(fabs(distanceW)>=dgree){
     c78:	6b a1       	ldd	r22, Y+35	; 0x23
     c7a:	7c a1       	ldd	r23, Y+36	; 0x24
     c7c:	8d a1       	ldd	r24, Y+37	; 0x25
     c7e:	9e a1       	ldd	r25, Y+38	; 0x26
     c80:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__floatsisf>
     c84:	9b 01       	movw	r18, r22
     c86:	ac 01       	movw	r20, r24
     c88:	c6 01       	movw	r24, r12
     c8a:	b5 01       	movw	r22, r10
     c8c:	0e 94 cd 12 	call	0x259a	; 0x259a <__gesf2>
     c90:	87 fd       	sbrc	r24, 7
     c92:	15 c0       	rjmp	.+42     	; 0xcbe <Turn_and_Drive+0x436>
				flg1=1;
				next_wspeed=0;
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	dc 01       	movw	r26, r24
     c9a:	80 93 44 02 	sts	0x0244, r24
     c9e:	90 93 45 02 	sts	0x0245, r25
     ca2:	a0 93 46 02 	sts	0x0246, r26
     ca6:	b0 93 47 02 	sts	0x0247, r27
				wspeed=0;
     caa:	80 93 40 02 	sts	0x0240, r24
     cae:	90 93 41 02 	sts	0x0241, r25
     cb2:	a0 93 42 02 	sts	0x0242, r26
     cb6:	b0 93 43 02 	sts	0x0243, r27
				flg0=1;
				next_speed=0;
				speed=0;
			}
			if(fabs(distanceW)>=dgree){
				flg1=1;
     cba:	a1 e0       	ldi	r26, 0x01	; 1
     cbc:	aa 87       	std	Y+10, r26	; 0x0a
				next_wspeed=0;
				wspeed=0;
			}
		}
		if(flg0 && flg1)
     cbe:	b9 85       	ldd	r27, Y+9	; 0x09
     cc0:	bb 23       	and	r27, r27
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <Turn_and_Drive+0x43e>
     cc4:	73 ce       	rjmp	.-794    	; 0x9ac <Turn_and_Drive+0x124>
     cc6:	ea 85       	ldd	r30, Y+10	; 0x0a
     cc8:	ee 23       	and	r30, r30
     cca:	09 f4       	brne	.+2      	; 0xcce <Turn_and_Drive+0x446>
     ccc:	6f ce       	rjmp	.-802    	; 0x9ac <Turn_and_Drive+0x124>
			break;
	}
}
     cce:	a6 96       	adiw	r28, 0x26	; 38
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	cf 91       	pop	r28
     cdc:	df 91       	pop	r29
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	df 90       	pop	r13
     ce8:	cf 90       	pop	r12
     cea:	bf 90       	pop	r11
     cec:	af 90       	pop	r10
     cee:	9f 90       	pop	r9
     cf0:	8f 90       	pop	r8
     cf2:	7f 90       	pop	r7
     cf4:	6f 90       	pop	r6
     cf6:	5f 90       	pop	r5
     cf8:	4f 90       	pop	r4
     cfa:	3f 90       	pop	r3
     cfc:	2f 90       	pop	r2
     cfe:	08 95       	ret

00000d00 <non_Holonomic>:
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
}

void non_Holonomic(long Fx, long Fy, long Fw){
     d00:	2f 92       	push	r2
     d02:	3f 92       	push	r3
     d04:	4f 92       	push	r4
     d06:	5f 92       	push	r5
     d08:	6f 92       	push	r6
     d0a:	7f 92       	push	r7
     d0c:	8f 92       	push	r8
     d0e:	9f 92       	push	r9
     d10:	af 92       	push	r10
     d12:	bf 92       	push	r11
     d14:	cf 92       	push	r12
     d16:	df 92       	push	r13
     d18:	ef 92       	push	r14
     d1a:	ff 92       	push	r15
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	2d 97       	sbiw	r28, 0x0d	; 13
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	3b 01       	movw	r6, r22
     d36:	4c 01       	movw	r8, r24
     d38:	59 01       	movw	r10, r18
     d3a:	6a 01       	movw	r12, r20

	unsigned char i=0;
	double V[3]={0,0,0};
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	dc 01       	movw	r26, r24
     d42:	89 83       	std	Y+1, r24	; 0x01
     d44:	9a 83       	std	Y+2, r25	; 0x02
     d46:	ab 83       	std	Y+3, r26	; 0x03
     d48:	bc 83       	std	Y+4, r27	; 0x04
     d4a:	8d 83       	std	Y+5, r24	; 0x05
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	af 83       	std	Y+7, r26	; 0x07
     d50:	b8 87       	std	Y+8, r27	; 0x08
     d52:	89 87       	std	Y+9, r24	; 0x09
     d54:	9a 87       	std	Y+10, r25	; 0x0a
     d56:	ab 87       	std	Y+11, r26	; 0x0b
     d58:	bc 87       	std	Y+12, r27	; 0x0c

	if(Fx==0 && Fy==0 && Fw==0)StopMotion(STOP_ABRUPTLY);
     d5a:	61 14       	cp	r6, r1
     d5c:	71 04       	cpc	r7, r1
     d5e:	81 04       	cpc	r8, r1
     d60:	91 04       	cpc	r9, r1
     d62:	71 f4       	brne	.+28     	; 0xd80 <non_Holonomic+0x80>
     d64:	21 15       	cp	r18, r1
     d66:	31 05       	cpc	r19, r1
     d68:	41 05       	cpc	r20, r1
     d6a:	51 05       	cpc	r21, r1
     d6c:	49 f4       	brne	.+18     	; 0xd80 <non_Holonomic+0x80>
     d6e:	e1 14       	cp	r14, r1
     d70:	f1 04       	cpc	r15, r1
     d72:	01 05       	cpc	r16, r1
     d74:	11 05       	cpc	r17, r1
     d76:	21 f4       	brne	.+8      	; 0xd80 <non_Holonomic+0x80>
     d78:	89 e0       	ldi	r24, 0x09	; 9
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <StopMotion>

	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
     d80:	c4 01       	movw	r24, r8
     d82:	b3 01       	movw	r22, r6
     d84:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__floatsisf>
     d88:	1b 01       	movw	r2, r22
     d8a:	2c 01       	movw	r4, r24
     d8c:	c6 01       	movw	r24, r12
     d8e:	b5 01       	movw	r22, r10
     d90:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__floatsisf>
     d94:	3b 01       	movw	r6, r22
     d96:	4c 01       	movw	r8, r24
     d98:	22 e0       	ldi	r18, 0x02	; 2
     d9a:	3b e2       	ldi	r19, 0x2B	; 43
     d9c:	47 e0       	ldi	r20, 0x07	; 7
     d9e:	5d e3       	ldi	r21, 0x3D	; 61
     da0:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
     da4:	d6 2e       	mov	r13, r22
     da6:	c7 2e       	mov	r12, r23
     da8:	b8 2e       	mov	r11, r24
     daa:	9d 87       	std	Y+13, r25	; 0x0d
     dac:	c8 01       	movw	r24, r16
     dae:	b7 01       	movw	r22, r14
     db0:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__floatsisf>
     db4:	29 e2       	ldi	r18, 0x29	; 41
     db6:	3c e5       	ldi	r19, 0x5C	; 92
     db8:	4f e0       	ldi	r20, 0x0F	; 15
     dba:	5e e3       	ldi	r21, 0x3E	; 62
     dbc:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
     dc0:	a6 2e       	mov	r10, r22
     dc2:	e7 2e       	mov	r14, r23
     dc4:	8c 01       	movw	r16, r24
     dc6:	c2 01       	movw	r24, r4
     dc8:	b1 01       	movw	r22, r2
     dca:	22 e4       	ldi	r18, 0x42	; 66
     dcc:	30 e6       	ldi	r19, 0x60	; 96
     dce:	45 e6       	ldi	r20, 0x65	; 101
     dd0:	5d e3       	ldi	r21, 0x3D	; 61
     dd2:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
     dd6:	d6 01       	movw	r26, r12
     dd8:	ed 85       	ldd	r30, Y+13	; 0x0d
     dda:	2b 2f       	mov	r18, r27
     ddc:	3a 2f       	mov	r19, r26
     dde:	4b 2d       	mov	r20, r11
     de0:	5e 2f       	mov	r21, r30
     de2:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
     de6:	2a 2d       	mov	r18, r10
     de8:	3e 2d       	mov	r19, r14
     dea:	40 2f       	mov	r20, r16
     dec:	51 2f       	mov	r21, r17
     dee:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
     df2:	69 83       	std	Y+1, r22	; 0x01
     df4:	7a 83       	std	Y+2, r23	; 0x02
     df6:	8b 83       	std	Y+3, r24	; 0x03
     df8:	9c 83       	std	Y+4, r25	; 0x04
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
     dfa:	c4 01       	movw	r24, r8
     dfc:	b3 01       	movw	r22, r6
     dfe:	28 eb       	ldi	r18, 0xB8	; 184
     e00:	3e e1       	ldi	r19, 0x1E	; 30
     e02:	45 e8       	ldi	r20, 0x85	; 133
     e04:	5d eb       	ldi	r21, 0xBD	; 189
     e06:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
     e0a:	2a 2d       	mov	r18, r10
     e0c:	3e 2d       	mov	r19, r14
     e0e:	40 2f       	mov	r20, r16
     e10:	51 2f       	mov	r21, r17
     e12:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
     e16:	6d 83       	std	Y+5, r22	; 0x05
     e18:	7e 83       	std	Y+6, r23	; 0x06
     e1a:	8f 83       	std	Y+7, r24	; 0x07
     e1c:	98 87       	std	Y+8, r25	; 0x08
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
     e1e:	c2 01       	movw	r24, r4
     e20:	b1 01       	movw	r22, r2
     e22:	22 e4       	ldi	r18, 0x42	; 66
     e24:	30 e6       	ldi	r19, 0x60	; 96
     e26:	45 e6       	ldi	r20, 0x65	; 101
     e28:	5d eb       	ldi	r21, 0xBD	; 189
     e2a:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
     e2e:	d6 01       	movw	r26, r12
     e30:	ed 85       	ldd	r30, Y+13	; 0x0d
     e32:	2b 2f       	mov	r18, r27
     e34:	3a 2f       	mov	r19, r26
     e36:	4b 2d       	mov	r20, r11
     e38:	5e 2f       	mov	r21, r30
     e3a:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
     e3e:	2a 2d       	mov	r18, r10
     e40:	3e 2d       	mov	r19, r14
     e42:	40 2f       	mov	r20, r16
     e44:	51 2f       	mov	r21, r17
     e46:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
     e4a:	69 87       	std	Y+9, r22	; 0x09
     e4c:	7a 87       	std	Y+10, r23	; 0x0a
     e4e:	8b 87       	std	Y+11, r24	; 0x0b
     e50:	9c 87       	std	Y+12, r25	; 0x0c
     e52:	8e 01       	movw	r16, r28
     e54:	0f 5f       	subi	r16, 0xFF	; 255
     e56:	1f 4f       	sbci	r17, 0xFF	; 255

	for(i=0;i<3;++i){
     e58:	ee 24       	eor	r14, r14
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
}

void non_Holonomic(long Fx, long Fy, long Fw){
     e5a:	58 01       	movw	r10, r16
	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));

	for(i=0;i<3;++i){
		if(V[i]>=40)V[i]=40;
     e5c:	f8 01       	movw	r30, r16
     e5e:	60 81       	ld	r22, Z
     e60:	71 81       	ldd	r23, Z+1	; 0x01
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e2       	ldi	r20, 0x20	; 32
     e6c:	52 e4       	ldi	r21, 0x42	; 66
     e6e:	0e 94 cd 12 	call	0x259a	; 0x259a <__gesf2>
     e72:	87 fd       	sbrc	r24, 7
     e74:	09 c0       	rjmp	.+18     	; 0xe88 <non_Holonomic+0x188>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	a0 e2       	ldi	r26, 0x20	; 32
     e7c:	b2 e4       	ldi	r27, 0x42	; 66
     e7e:	f8 01       	movw	r30, r16
     e80:	80 83       	st	Z, r24
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	a2 83       	std	Z+2, r26	; 0x02
     e86:	b3 83       	std	Z+3, r27	; 0x03
		if(V[i]<=(-40))V[i]=-40;
     e88:	f8 01       	movw	r30, r16
     e8a:	60 81       	ld	r22, Z
     e8c:	71 81       	ldd	r23, Z+1	; 0x01
     e8e:	82 81       	ldd	r24, Z+2	; 0x02
     e90:	93 81       	ldd	r25, Z+3	; 0x03
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	40 e2       	ldi	r20, 0x20	; 32
     e98:	52 ec       	ldi	r21, 0xC2	; 194
     e9a:	0e 94 2d 13 	call	0x265a	; 0x265a <__lesf2>
     e9e:	18 16       	cp	r1, r24
     ea0:	4c f0       	brlt	.+18     	; 0xeb4 <non_Holonomic+0x1b4>
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	a0 e2       	ldi	r26, 0x20	; 32
     ea8:	b2 ec       	ldi	r27, 0xC2	; 194
     eaa:	f8 01       	movw	r30, r16
     eac:	80 83       	st	Z, r24
     eae:	91 83       	std	Z+1, r25	; 0x01
     eb0:	a2 83       	std	Z+2, r26	; 0x02
     eb2:	b3 83       	std	Z+3, r27	; 0x03
     eb4:	0c 5f       	subi	r16, 0xFC	; 252
     eb6:	1f 4f       	sbci	r17, 0xFF	; 255
		SetVelocity(i, V[i]*65536);
     eb8:	f5 01       	movw	r30, r10
     eba:	60 81       	ld	r22, Z
     ebc:	71 81       	ldd	r23, Z+1	; 0x01
     ebe:	82 81       	ldd	r24, Z+2	; 0x02
     ec0:	93 81       	ldd	r25, Z+3	; 0x03
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	40 e8       	ldi	r20, 0x80	; 128
     ec8:	57 e4       	ldi	r21, 0x47	; 71
     eca:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
     ece:	0e 94 bd 13 	call	0x277a	; 0x277a <__fixsfsi>
     ed2:	ab 01       	movw	r20, r22
     ed4:	bc 01       	movw	r22, r24
     ed6:	8e 2d       	mov	r24, r14
     ed8:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <SetVelocity>

	V[0]=((( 0.056*Fx)+(0.033*Fy)+(0.14*Fw)));
	V[1]=(((-0.065*Fy)+(0.14*Fw)));
	V[2]=(((-0.056*Fx)+(0.033*Fy)+(0.14*Fw)));

	for(i=0;i<3;++i){
     edc:	e3 94       	inc	r14
     ede:	fe 2d       	mov	r31, r14
     ee0:	f3 30       	cpi	r31, 0x03	; 3
     ee2:	09 f0       	breq	.+2      	; 0xee6 <non_Holonomic+0x1e6>
     ee4:	ba cf       	rjmp	.-140    	; 0xe5a <non_Holonomic+0x15a>
		if(V[i]>=40)V[i]=40;
		if(V[i]<=(-40))V[i]=-40;
		SetVelocity(i, V[i]*65536);
	}
	StartMotion();
     ee6:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <StartMotion>
}
     eea:	2d 96       	adiw	r28, 0x0d	; 13
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	bf 90       	pop	r11
     f08:	af 90       	pop	r10
     f0a:	9f 90       	pop	r9
     f0c:	8f 90       	pop	r8
     f0e:	7f 90       	pop	r7
     f10:	6f 90       	pop	r6
     f12:	5f 90       	pop	r5
     f14:	4f 90       	pop	r4
     f16:	3f 90       	pop	r3
     f18:	2f 90       	pop	r2
     f1a:	08 95       	ret

00000f1c <right_fix>:
		non_Holonomic(psd_value[5]-170,psd_value[3]-215,(psd_value[4]-30)-psd_value[5]);
	}
	non_Holonomic(0,0,0);
}

void right_fix(){
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
	sec = 0;
     f28:	10 92 37 02 	sts	0x0237, r1
     f2c:	10 92 36 02 	sts	0x0236, r1
	while(sec != 500){
		non_Holonomic(-(200-psd_value[5]),-(psd_value[7]-190),(psd_value[4]-30)-psd_value[5]);
     f30:	ce eb       	ldi	r28, 0xBE	; 190
     f32:	d0 e0       	ldi	r29, 0x00	; 0
	non_Holonomic(0,0,0);
}

void right_fix(){
	sec = 0;
	while(sec != 500){
     f34:	22 c0       	rjmp	.+68     	; 0xf7a <right_fix+0x5e>
		non_Holonomic(-(200-psd_value[5]),-(psd_value[7]-190),(psd_value[4]-30)-psd_value[5]);
     f36:	60 91 7d 02 	lds	r22, 0x027D
     f3a:	20 91 7f 02 	lds	r18, 0x027F
     f3e:	e0 91 7c 02 	lds	r30, 0x027C
     f42:	a0 91 7d 02 	lds	r26, 0x027D
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	68 5c       	subi	r22, 0xC8	; 200
     f4a:	70 40       	sbci	r23, 0x00	; 0
     f4c:	88 27       	eor	r24, r24
     f4e:	77 fd       	sbrc	r23, 7
     f50:	80 95       	com	r24
     f52:	98 2f       	mov	r25, r24
     f54:	ae 01       	movw	r20, r28
     f56:	42 1b       	sub	r20, r18
     f58:	51 09       	sbc	r21, r1
     f5a:	9a 01       	movw	r18, r20
     f5c:	44 27       	eor	r20, r20
     f5e:	37 fd       	sbrc	r19, 7
     f60:	40 95       	com	r20
     f62:	54 2f       	mov	r21, r20
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	7e 97       	sbiw	r30, 0x1e	; 30
     f68:	ea 1b       	sub	r30, r26
     f6a:	f1 09       	sbc	r31, r1
     f6c:	7f 01       	movw	r14, r30
     f6e:	00 27       	eor	r16, r16
     f70:	f7 fc       	sbrc	r15, 7
     f72:	00 95       	com	r16
     f74:	10 2f       	mov	r17, r16
     f76:	0e 94 80 06 	call	0xd00	; 0xd00 <non_Holonomic>
	non_Holonomic(0,0,0);
}

void right_fix(){
	sec = 0;
	while(sec != 500){
     f7a:	80 91 36 02 	lds	r24, 0x0236
     f7e:	90 91 37 02 	lds	r25, 0x0237
     f82:	51 e0       	ldi	r21, 0x01	; 1
     f84:	84 3f       	cpi	r24, 0xF4	; 244
     f86:	95 07       	cpc	r25, r21
     f88:	b1 f6       	brne	.-84     	; 0xf36 <right_fix+0x1a>
		non_Holonomic(-(200-psd_value[5]),-(psd_value[7]-190),(psd_value[4]-30)-psd_value[5]);
	}
}
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	ff 90       	pop	r15
     f94:	ef 90       	pop	r14
     f96:	08 95       	ret

00000f98 <left_fix>:
		non_Holonomic(-100,0,0);
	}

}

void left_fix(){
     f98:	ef 92       	push	r14
     f9a:	ff 92       	push	r15
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
	sec = 0;
     fa0:	10 92 37 02 	sts	0x0237, r1
     fa4:	10 92 36 02 	sts	0x0236, r1
	while(sec != 500){
     fa8:	21 c0       	rjmp	.+66     	; 0xfec <left_fix+0x54>
		non_Holonomic(psd_value[5]-170,psd_value[3]-215,(psd_value[4]-30)-psd_value[5]);
     faa:	60 91 7d 02 	lds	r22, 0x027D
     fae:	20 91 7b 02 	lds	r18, 0x027B
     fb2:	e0 91 7c 02 	lds	r30, 0x027C
     fb6:	a0 91 7d 02 	lds	r26, 0x027D
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	6a 5a       	subi	r22, 0xAA	; 170
     fbe:	70 40       	sbci	r23, 0x00	; 0
     fc0:	88 27       	eor	r24, r24
     fc2:	77 fd       	sbrc	r23, 7
     fc4:	80 95       	com	r24
     fc6:	98 2f       	mov	r25, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	27 5d       	subi	r18, 0xD7	; 215
     fcc:	30 40       	sbci	r19, 0x00	; 0
     fce:	44 27       	eor	r20, r20
     fd0:	37 fd       	sbrc	r19, 7
     fd2:	40 95       	com	r20
     fd4:	54 2f       	mov	r21, r20
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	7e 97       	sbiw	r30, 0x1e	; 30
     fda:	ea 1b       	sub	r30, r26
     fdc:	f1 09       	sbc	r31, r1
     fde:	7f 01       	movw	r14, r30
     fe0:	00 27       	eor	r16, r16
     fe2:	f7 fc       	sbrc	r15, 7
     fe4:	00 95       	com	r16
     fe6:	10 2f       	mov	r17, r16
     fe8:	0e 94 80 06 	call	0xd00	; 0xd00 <non_Holonomic>

}

void left_fix(){
	sec = 0;
	while(sec != 500){
     fec:	80 91 36 02 	lds	r24, 0x0236
     ff0:	90 91 37 02 	lds	r25, 0x0237
     ff4:	21 e0       	ldi	r18, 0x01	; 1
     ff6:	84 3f       	cpi	r24, 0xF4	; 244
     ff8:	92 07       	cpc	r25, r18
     ffa:	b9 f6       	brne	.-82     	; 0xfaa <left_fix+0x12>
		non_Holonomic(psd_value[5]-170,psd_value[3]-215,(psd_value[4]-30)-psd_value[5]);
	}
	non_Holonomic(0,0,0);
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	cb 01       	movw	r24, r22
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	a9 01       	movw	r20, r18
    1008:	ee 24       	eor	r14, r14
    100a:	ff 24       	eor	r15, r15
    100c:	87 01       	movw	r16, r14
    100e:	0e 94 80 06 	call	0xd00	; 0xd00 <non_Holonomic>
}
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	ef 90       	pop	r14
    101a:	08 95       	ret

0000101c <PUSH>:
//1=앞벽감지,그냥 돌면 됨 
//2=구멍 찾음, 보정 후 나가면 됨 



void PUSH(){
    101c:	ef 92       	push	r14
    101e:	ff 92       	push	r15
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
	while(psd_value[0]<150){
    1024:	0c c0       	rjmp	.+24     	; 0x103e <PUSH+0x22>
		non_Holonomic(100,0,0);
    1026:	64 e6       	ldi	r22, 0x64	; 100
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	a9 01       	movw	r20, r18
    1034:	ee 24       	eor	r14, r14
    1036:	ff 24       	eor	r15, r15
    1038:	87 01       	movw	r16, r14
    103a:	0e 94 80 06 	call	0xd00	; 0xd00 <non_Holonomic>
//2=구멍 찾음, 보정 후 나가면 됨 



void PUSH(){
	while(psd_value[0]<150){
    103e:	80 91 78 02 	lds	r24, 0x0278
    1042:	86 39       	cpi	r24, 0x96	; 150
    1044:	80 f3       	brcs	.-32     	; 0x1026 <PUSH+0xa>
    1046:	0c c0       	rjmp	.+24     	; 0x1060 <PUSH+0x44>
		non_Holonomic(100,0,0);
	}
	while(psd_value[5]<225){
		non_Holonomic(-100,0,0);
    1048:	6c e9       	ldi	r22, 0x9C	; 156
    104a:	7f ef       	ldi	r23, 0xFF	; 255
    104c:	8f ef       	ldi	r24, 0xFF	; 255
    104e:	9f ef       	ldi	r25, 0xFF	; 255
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	a9 01       	movw	r20, r18
    1056:	ee 24       	eor	r14, r14
    1058:	ff 24       	eor	r15, r15
    105a:	87 01       	movw	r16, r14
    105c:	0e 94 80 06 	call	0xd00	; 0xd00 <non_Holonomic>

void PUSH(){
	while(psd_value[0]<150){
		non_Holonomic(100,0,0);
	}
	while(psd_value[5]<225){
    1060:	80 91 7d 02 	lds	r24, 0x027D
    1064:	81 3e       	cpi	r24, 0xE1	; 225
    1066:	80 f3       	brcs	.-32     	; 0x1048 <PUSH+0x2c>
		non_Holonomic(-100,0,0);
	}

}
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	08 95       	ret

00001072 <main>:
				display_char(3,10,psd_value[5]);
			}
}

int main(void)
{    
    1072:	af 92       	push	r10
    1074:	bf 92       	push	r11
    1076:	cf 92       	push	r12
    1078:	df 92       	push	r13
    107a:	ef 92       	push	r14
    107c:	ff 92       	push	r15
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17

    Interface_init(); //인터페이스 초기화
    1082:	0e 94 ae 00 	call	0x15c	; 0x15c <Interface_init>

	LM629_HW_Reset();
    1086:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LM629_HW_Reset>
	MCU_init();	   // MCU 초기화
    108a:	0e 94 76 00 	call	0xec	; 0xec <MCU_init>
	Motor_init();  // Motor 드라이버 초기화
    108e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <Motor_init>

	Sensor_init();
    1092:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <Sensor_init>

	DDRB=0x0F;		//LED, BZ, SW
    1096:	8f e0       	ldi	r24, 0x0F	; 15
    1098:	87 bb       	out	0x17, r24	; 23
	TCCR1A=0x00;	// Clock value: 14.400 kHz
    109a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x05;
    109c:	85 e0       	ldi	r24, 0x05	; 5
    109e:	8e bd       	out	0x2e, r24	; 46

	TCNT1H=0xFF;	//0.01초
    10a0:	8f ef       	ldi	r24, 0xFF	; 255
    10a2:	8d bd       	out	0x2d, r24	; 45
	TCNT1L=0x70;
    10a4:	80 e7       	ldi	r24, 0x70	; 112
    10a6:	8c bd       	out	0x2c, r24	; 44
	TIMSK=0x04;
    10a8:	84 e0       	ldi	r24, 0x04	; 4
    10aa:	87 bf       	out	0x37, r24	; 55

	sei();
    10ac:	78 94       	sei



	while(1){
		if(SW1)
    10ae:	b4 99       	sbic	0x16, 4	; 22
    10b0:	64 c0       	rjmp	.+200    	; 0x117a <__stack+0x7b>
		{
			find_way();
    10b2:	0e 94 1c 03 	call	0x638	; 0x638 <find_way>
			non_Holonomic(0,0,0);
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	cb 01       	movw	r24, r22
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	a9 01       	movw	r20, r18
    10c2:	ee 24       	eor	r14, r14
    10c4:	ff 24       	eor	r15, r15
    10c6:	87 01       	movw	r16, r14
    10c8:	0e 94 80 06 	call	0xd00	; 0xd00 <non_Holonomic>
			if(tape == 1){
    10cc:	80 91 64 02 	lds	r24, 0x0264
    10d0:	90 91 65 02 	lds	r25, 0x0265
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	09 f0       	breq	.+2      	; 0x10dc <main+0x6a>
    10da:	4f c0       	rjmp	.+158    	; 0x117a <__stack+0x7b>
				Turn_and_Drive(0,150,-50,225,90,0,0);
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	cb 01       	movw	r24, r22
    10e2:	46 e9       	ldi	r20, 0x96	; 150
    10e4:	50 e0       	ldi	r21, 0x00	; 0
    10e6:	2e ec       	ldi	r18, 0xCE	; 206
    10e8:	3f ef       	ldi	r19, 0xFF	; 255
    10ea:	01 ee       	ldi	r16, 0xE1	; 225
    10ec:	10 e0       	ldi	r17, 0x00	; 0
    10ee:	ea e5       	ldi	r30, 0x5A	; 90
    10f0:	ee 2e       	mov	r14, r30
    10f2:	f1 2c       	mov	r15, r1
    10f4:	cc 24       	eor	r12, r12
    10f6:	dd 24       	eor	r13, r13
    10f8:	aa 24       	eor	r10, r10
    10fa:	bb 24       	eor	r11, r11
    10fc:	0e 94 44 04 	call	0x888	; 0x888 <Turn_and_Drive>
				Turn_and_Drive(0,250,-30,700,95,0,0);
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	cb 01       	movw	r24, r22
    1106:	4a ef       	ldi	r20, 0xFA	; 250
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	22 ee       	ldi	r18, 0xE2	; 226
    110c:	3f ef       	ldi	r19, 0xFF	; 255
    110e:	0c eb       	ldi	r16, 0xBC	; 188
    1110:	12 e0       	ldi	r17, 0x02	; 2
    1112:	bf e5       	ldi	r27, 0x5F	; 95
    1114:	eb 2e       	mov	r14, r27
    1116:	f1 2c       	mov	r15, r1
    1118:	0e 94 44 04 	call	0x888	; 0x888 <Turn_and_Drive>
				while(psd_value[5]<120){
    111c:	0c c0       	rjmp	.+24     	; 0x1136 <__stack+0x37>
					non_Holonomic(-150,0,0);
    111e:	6a e6       	ldi	r22, 0x6A	; 106
    1120:	7f ef       	ldi	r23, 0xFF	; 255
    1122:	8f ef       	ldi	r24, 0xFF	; 255
    1124:	9f ef       	ldi	r25, 0xFF	; 255
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	a9 01       	movw	r20, r18
    112c:	ee 24       	eor	r14, r14
    112e:	ff 24       	eor	r15, r15
    1130:	87 01       	movw	r16, r14
    1132:	0e 94 80 06 	call	0xd00	; 0xd00 <non_Holonomic>
			find_way();
			non_Holonomic(0,0,0);
			if(tape == 1){
				Turn_and_Drive(0,150,-50,225,90,0,0);
				Turn_and_Drive(0,250,-30,700,95,0,0);
				while(psd_value[5]<120){
    1136:	80 91 7d 02 	lds	r24, 0x027D
    113a:	88 37       	cpi	r24, 0x78	; 120
    113c:	80 f3       	brcs	.-32     	; 0x111e <__stack+0x1f>
					non_Holonomic(-150,0,0);
				}
				left_fix();
    113e:	0e 94 cc 07 	call	0xf98	; 0xf98 <left_fix>
				while(psd_value[0]<90){
    1142:	0c c0       	rjmp	.+24     	; 0x115c <__stack+0x5d>
					non_Holonomic(250,0,0);
    1144:	6a ef       	ldi	r22, 0xFA	; 250
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	a9 01       	movw	r20, r18
    1152:	ee 24       	eor	r14, r14
    1154:	ff 24       	eor	r15, r15
    1156:	87 01       	movw	r16, r14
    1158:	0e 94 80 06 	call	0xd00	; 0xd00 <non_Holonomic>
				Turn_and_Drive(0,250,-30,700,95,0,0);
				while(psd_value[5]<120){
					non_Holonomic(-150,0,0);
				}
				left_fix();
				while(psd_value[0]<90){
    115c:	80 91 78 02 	lds	r24, 0x0278
    1160:	8a 35       	cpi	r24, 0x5A	; 90
    1162:	80 f3       	brcs	.-32     	; 0x1144 <__stack+0x45>
					non_Holonomic(250,0,0);
				}

				non_Holonomic(0,0,0);
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	cb 01       	movw	r24, r22
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	a9 01       	movw	r20, r18
    1170:	ee 24       	eor	r14, r14
    1172:	ff 24       	eor	r15, r15
    1174:	87 01       	movw	r16, r14
    1176:	0e 94 80 06 	call	0xd00	; 0xd00 <non_Holonomic>
//4. 이동거리
//5. 회전이동거리 (회전 각도)
//6. 정지 시점
//7. 회전정지시점
int camera = 0;
		if(SW2)
    117a:	b5 99       	sbic	0x16, 5	; 22
    117c:	62 c1       	rjmp	.+708    	; 0x1442 <__stack+0x343>
		{
			find_way();
    117e:	0e 94 1c 03 	call	0x638	; 0x638 <find_way>
			Turn_and_Drive(0,100,-60,225,90,0,0);
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	cb 01       	movw	r24, r22
    1188:	44 e6       	ldi	r20, 0x64	; 100
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	24 ec       	ldi	r18, 0xC4	; 196
    118e:	3f ef       	ldi	r19, 0xFF	; 255
    1190:	01 ee       	ldi	r16, 0xE1	; 225
    1192:	10 e0       	ldi	r17, 0x00	; 0
    1194:	aa e5       	ldi	r26, 0x5A	; 90
    1196:	ea 2e       	mov	r14, r26
    1198:	f1 2c       	mov	r15, r1
    119a:	cc 24       	eor	r12, r12
    119c:	dd 24       	eor	r13, r13
    119e:	aa 24       	eor	r10, r10
    11a0:	bb 24       	eor	r11, r11
    11a2:	0e 94 44 04 	call	0x888	; 0x888 <Turn_and_Drive>
			display_char(0,0,tape);
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	40 91 64 02 	lds	r20, 0x0264
    11ae:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
			Turn_and_Drive(0,200,0,500,0,0,0);
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	cb 01       	movw	r24, r22
    11b8:	48 ec       	ldi	r20, 0xC8	; 200
    11ba:	50 e0       	ldi	r21, 0x00	; 0
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	04 ef       	ldi	r16, 0xF4	; 244
    11c2:	11 e0       	ldi	r17, 0x01	; 1
    11c4:	ee 24       	eor	r14, r14
    11c6:	ff 24       	eor	r15, r15
    11c8:	0e 94 44 04 	call	0x888	; 0x888 <Turn_and_Drive>
			
			
			if(tape == 1){
    11cc:	80 91 64 02 	lds	r24, 0x0264
    11d0:	90 91 65 02 	lds	r25, 0x0265
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	91 05       	cpc	r25, r1
    11d8:	09 f0       	breq	.+2      	; 0x11dc <__stack+0xdd>
    11da:	d8 c0       	rjmp	.+432    	; 0x138c <__stack+0x28d>
				Turn_and_Drive(0,150,50,150,90,0,0);
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	cb 01       	movw	r24, r22
    11e2:	46 e9       	ldi	r20, 0x96	; 150
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	22 e3       	ldi	r18, 0x32	; 50
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	06 e9       	ldi	r16, 0x96	; 150
    11ec:	10 e0       	ldi	r17, 0x00	; 0
    11ee:	fa e5       	ldi	r31, 0x5A	; 90
    11f0:	ef 2e       	mov	r14, r31
    11f2:	f1 2c       	mov	r15, r1
    11f4:	0e 94 44 04 	call	0x888	; 0x888 <Turn_and_Drive>
				while(psd_value[5]<200){
    11f8:	0c c0       	rjmp	.+24     	; 0x1212 <__stack+0x113>
					non_Holonomic(-200,0,0);
    11fa:	68 e3       	ldi	r22, 0x38	; 56
    11fc:	7f ef       	ldi	r23, 0xFF	; 255
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	9f ef       	ldi	r25, 0xFF	; 255
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	a9 01       	movw	r20, r18
    1208:	ee 24       	eor	r14, r14
    120a:	ff 24       	eor	r15, r15
    120c:	87 01       	movw	r16, r14
    120e:	0e 94 80 06 	call	0xd00	; 0xd00 <non_Holonomic>
			Turn_and_Drive(0,200,0,500,0,0,0);
			
			
			if(tape == 1){
				Turn_and_Drive(0,150,50,150,90,0,0);
				while(psd_value[5]<200){
    1212:	80 91 7d 02 	lds	r24, 0x027D
    1216:	88 3c       	cpi	r24, 0xC8	; 200
    1218:	80 f3       	brcs	.-32     	; 0x11fa <__stack+0xfb>
    121a:	0c c0       	rjmp	.+24     	; 0x1234 <__stack+0x135>
					non_Holonomic(-200,0,0);
				}

				while(psd_value[0]<70){
					non_Holonomic(200,0,0);
    121c:	68 ec       	ldi	r22, 0xC8	; 200
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	a9 01       	movw	r20, r18
    122a:	ee 24       	eor	r14, r14
    122c:	ff 24       	eor	r15, r15
    122e:	87 01       	movw	r16, r14
    1230:	0e 94 80 06 	call	0xd00	; 0xd00 <non_Holonomic>
				Turn_and_Drive(0,150,50,150,90,0,0);
				while(psd_value[5]<200){
					non_Holonomic(-200,0,0);
				}

				while(psd_value[0]<70){
    1234:	80 91 78 02 	lds	r24, 0x0278
    1238:	86 34       	cpi	r24, 0x46	; 70
    123a:	80 f3       	brcs	.-32     	; 0x121c <__stack+0x11d>
					non_Holonomic(200,0,0);
				}

				Turn_and_Drive(0,150,-50,235,90,0,0);
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	cb 01       	movw	r24, r22
    1242:	46 e9       	ldi	r20, 0x96	; 150
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	2e ec       	ldi	r18, 0xCE	; 206
    1248:	3f ef       	ldi	r19, 0xFF	; 255
    124a:	0b ee       	ldi	r16, 0xEB	; 235
    124c:	10 e0       	ldi	r17, 0x00	; 0
    124e:	ea e5       	ldi	r30, 0x5A	; 90
    1250:	ee 2e       	mov	r14, r30
    1252:	f1 2c       	mov	r15, r1
    1254:	cc 24       	eor	r12, r12
    1256:	dd 24       	eor	r13, r13
    1258:	aa 24       	eor	r10, r10
    125a:	bb 24       	eor	r11, r11
    125c:	0e 94 44 04 	call	0x888	; 0x888 <Turn_and_Drive>

				BZ_ON();
    1260:	c3 9a       	sbi	0x18, 3	; 24
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	9f e3       	ldi	r25, 0x3F	; 63
    1266:	a2 e0       	ldi	r26, 0x02	; 2
    1268:	81 50       	subi	r24, 0x01	; 1
    126a:	90 40       	sbci	r25, 0x00	; 0
    126c:	a0 40       	sbci	r26, 0x00	; 0
    126e:	e1 f7       	brne	.-8      	; 0x1268 <__stack+0x169>
    1270:	00 c0       	rjmp	.+0      	; 0x1272 <__stack+0x173>
    1272:	00 00       	nop
				_delay_ms(50);
				BZ_OFF();
    1274:	c3 98       	cbi	0x18, 3	; 24
				
				sec = 0;
    1276:	10 92 37 02 	sts	0x0237, r1
    127a:	10 92 36 02 	sts	0x0236, r1
				while(sec!=300){
    127e:	1c c0       	rjmp	.+56     	; 0x12b8 <__stack+0x1b9>
					camera = Camera_Cmd(2,102);
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	66 e6       	ldi	r22, 0x66	; 102
    1284:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <Camera_Cmd>
    1288:	d8 2e       	mov	r13, r24
					non_Holonomic(0,(camera-116)*5,0);
    128a:	95 e0       	ldi	r25, 0x05	; 5
    128c:	89 9f       	mul	r24, r25
    128e:	90 01       	movw	r18, r0
    1290:	11 24       	eor	r1, r1
    1292:	24 54       	subi	r18, 0x44	; 68
    1294:	32 40       	sbci	r19, 0x02	; 2
    1296:	44 27       	eor	r20, r20
    1298:	37 fd       	sbrc	r19, 7
    129a:	40 95       	com	r20
    129c:	54 2f       	mov	r21, r20
    129e:	60 e0       	ldi	r22, 0x00	; 0
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	cb 01       	movw	r24, r22
    12a4:	ee 24       	eor	r14, r14
    12a6:	ff 24       	eor	r15, r15
    12a8:	87 01       	movw	r16, r14
    12aa:	0e 94 80 06 	call	0xd00	; 0xd00 <non_Holonomic>
					display_char(0,2,camera);
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	62 e0       	ldi	r22, 0x02	; 2
    12b2:	4d 2d       	mov	r20, r13
    12b4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
				BZ_ON();
				_delay_ms(50);
				BZ_OFF();
				
				sec = 0;
				while(sec!=300){
    12b8:	80 91 36 02 	lds	r24, 0x0236
    12bc:	90 91 37 02 	lds	r25, 0x0237
    12c0:	a1 e0       	ldi	r26, 0x01	; 1
    12c2:	8c 32       	cpi	r24, 0x2C	; 44
    12c4:	9a 07       	cpc	r25, r26
    12c6:	e1 f6       	brne	.-72     	; 0x1280 <__stack+0x181>
					camera = Camera_Cmd(2,102);
					non_Holonomic(0,(camera-116)*5,0);
					display_char(0,2,camera);
				}
				PUSH();
    12c8:	0e 94 0e 08 	call	0x101c	; 0x101c <PUSH>
				Turn_and_Drive(0,0,-35,0,90,0,0);
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	cb 01       	movw	r24, r22
    12d2:	40 e0       	ldi	r20, 0x00	; 0
    12d4:	50 e0       	ldi	r21, 0x00	; 0
    12d6:	2d ed       	ldi	r18, 0xDD	; 221
    12d8:	3f ef       	ldi	r19, 0xFF	; 255
    12da:	00 e0       	ldi	r16, 0x00	; 0
    12dc:	10 e0       	ldi	r17, 0x00	; 0
    12de:	ba e5       	ldi	r27, 0x5A	; 90
    12e0:	eb 2e       	mov	r14, r27
    12e2:	f1 2c       	mov	r15, r1
    12e4:	cc 24       	eor	r12, r12
    12e6:	dd 24       	eor	r13, r13
    12e8:	aa 24       	eor	r10, r10
    12ea:	bb 24       	eor	r11, r11
    12ec:	0e 94 44 04 	call	0x888	; 0x888 <Turn_and_Drive>
				while(psd_value[0]<70){
    12f0:	0c c0       	rjmp	.+24     	; 0x130a <__stack+0x20b>
					non_Holonomic(200,0,0);
    12f2:	68 ec       	ldi	r22, 0xC8	; 200
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	a9 01       	movw	r20, r18
    1300:	ee 24       	eor	r14, r14
    1302:	ff 24       	eor	r15, r15
    1304:	87 01       	movw	r16, r14
    1306:	0e 94 80 06 	call	0xd00	; 0xd00 <non_Holonomic>
					non_Holonomic(0,(camera-116)*5,0);
					display_char(0,2,camera);
				}
				PUSH();
				Turn_and_Drive(0,0,-35,0,90,0,0);
				while(psd_value[0]<70){
    130a:	80 91 78 02 	lds	r24, 0x0278
    130e:	86 34       	cpi	r24, 0x46	; 70
    1310:	80 f3       	brcs	.-32     	; 0x12f2 <__stack+0x1f3>
					non_Holonomic(200,0,0);
				}

				Turn_and_Drive(0,150,50,235,90,0,0);
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	cb 01       	movw	r24, r22
    1318:	46 e9       	ldi	r20, 0x96	; 150
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	22 e3       	ldi	r18, 0x32	; 50
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	0b ee       	ldi	r16, 0xEB	; 235
    1322:	10 e0       	ldi	r17, 0x00	; 0
    1324:	aa e5       	ldi	r26, 0x5A	; 90
    1326:	ea 2e       	mov	r14, r26
    1328:	f1 2c       	mov	r15, r1
    132a:	cc 24       	eor	r12, r12
    132c:	dd 24       	eor	r13, r13
    132e:	aa 24       	eor	r10, r10
    1330:	bb 24       	eor	r11, r11
    1332:	0e 94 44 04 	call	0x888	; 0x888 <Turn_and_Drive>
				sec = 0;
    1336:	10 92 37 02 	sts	0x0237, r1
    133a:	10 92 36 02 	sts	0x0236, r1
				while(sec!=300){
    133e:	1c c0       	rjmp	.+56     	; 0x1378 <__stack+0x279>
					camera = Camera_Cmd(1,102);
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	66 e6       	ldi	r22, 0x66	; 102
    1344:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <Camera_Cmd>
    1348:	d8 2e       	mov	r13, r24
					non_Holonomic(0,(camera-116)*5,0);
    134a:	b5 e0       	ldi	r27, 0x05	; 5
    134c:	8b 9f       	mul	r24, r27
    134e:	90 01       	movw	r18, r0
    1350:	11 24       	eor	r1, r1
    1352:	24 54       	subi	r18, 0x44	; 68
    1354:	32 40       	sbci	r19, 0x02	; 2
    1356:	44 27       	eor	r20, r20
    1358:	37 fd       	sbrc	r19, 7
    135a:	40 95       	com	r20
    135c:	54 2f       	mov	r21, r20
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	cb 01       	movw	r24, r22
    1364:	ee 24       	eor	r14, r14
    1366:	ff 24       	eor	r15, r15
    1368:	87 01       	movw	r16, r14
    136a:	0e 94 80 06 	call	0xd00	; 0xd00 <non_Holonomic>
					display_char(0,2,camera);
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	62 e0       	ldi	r22, 0x02	; 2
    1372:	4d 2d       	mov	r20, r13
    1374:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_char>
					non_Holonomic(200,0,0);
				}

				Turn_and_Drive(0,150,50,235,90,0,0);
				sec = 0;
				while(sec!=300){
    1378:	80 91 36 02 	lds	r24, 0x0236
    137c:	90 91 37 02 	lds	r25, 0x0237
    1380:	21 e0       	ldi	r18, 0x01	; 1
    1382:	8c 32       	cpi	r24, 0x2C	; 44
    1384:	92 07       	cpc	r25, r18
    1386:	e1 f6       	brne	.-72     	; 0x1340 <__stack+0x241>
					camera = Camera_Cmd(1,102);
					non_Holonomic(0,(camera-116)*5,0);
					display_char(0,2,camera);
				}
				PUSH();
    1388:	0e 94 0e 08 	call	0x101c	; 0x101c <PUSH>


			}
			if(tape == 2){
    138c:	80 91 64 02 	lds	r24, 0x0264
    1390:	90 91 65 02 	lds	r25, 0x0265
    1394:	82 30       	cpi	r24, 0x02	; 2
    1396:	91 05       	cpc	r25, r1
    1398:	09 f0       	breq	.+2      	; 0x139c <__stack+0x29d>
    139a:	48 c0       	rjmp	.+144    	; 0x142c <__stack+0x32d>
				Turn_and_Drive(0,150,-50,250,90,0,0);
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	cb 01       	movw	r24, r22
    13a2:	46 e9       	ldi	r20, 0x96	; 150
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	2e ec       	ldi	r18, 0xCE	; 206
    13a8:	3f ef       	ldi	r19, 0xFF	; 255
    13aa:	0a ef       	ldi	r16, 0xFA	; 250
    13ac:	10 e0       	ldi	r17, 0x00	; 0
    13ae:	fa e5       	ldi	r31, 0x5A	; 90
    13b0:	ef 2e       	mov	r14, r31
    13b2:	f1 2c       	mov	r15, r1
    13b4:	cc 24       	eor	r12, r12
    13b6:	dd 24       	eor	r13, r13
    13b8:	aa 24       	eor	r10, r10
    13ba:	bb 24       	eor	r11, r11
    13bc:	0e 94 44 04 	call	0x888	; 0x888 <Turn_and_Drive>
				while(psd_value[5]<200){
    13c0:	0c c0       	rjmp	.+24     	; 0x13da <__stack+0x2db>
					non_Holonomic(-150,0,0);
    13c2:	6a e6       	ldi	r22, 0x6A	; 106
    13c4:	7f ef       	ldi	r23, 0xFF	; 255
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	9f ef       	ldi	r25, 0xFF	; 255
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	a9 01       	movw	r20, r18
    13d0:	ee 24       	eor	r14, r14
    13d2:	ff 24       	eor	r15, r15
    13d4:	87 01       	movw	r16, r14
    13d6:	0e 94 80 06 	call	0xd00	; 0xd00 <non_Holonomic>


			}
			if(tape == 2){
				Turn_and_Drive(0,150,-50,250,90,0,0);
				while(psd_value[5]<200){
    13da:	80 91 7d 02 	lds	r24, 0x027D
    13de:	88 3c       	cpi	r24, 0xC8	; 200
    13e0:	80 f3       	brcs	.-32     	; 0x13c2 <__stack+0x2c3>
					non_Holonomic(-150,0,0);
				}
				left_fix();
    13e2:	0e 94 cc 07 	call	0xf98	; 0xf98 <left_fix>
				while(psd_value[0]<70){
    13e6:	0c c0       	rjmp	.+24     	; 0x1400 <__stack+0x301>
					non_Holonomic(150,0,0);
    13e8:	66 e9       	ldi	r22, 0x96	; 150
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	a9 01       	movw	r20, r18
    13f6:	ee 24       	eor	r14, r14
    13f8:	ff 24       	eor	r15, r15
    13fa:	87 01       	movw	r16, r14
    13fc:	0e 94 80 06 	call	0xd00	; 0xd00 <non_Holonomic>
				Turn_and_Drive(0,150,-50,250,90,0,0);
				while(psd_value[5]<200){
					non_Holonomic(-150,0,0);
				}
				left_fix();
				while(psd_value[0]<70){
    1400:	80 91 78 02 	lds	r24, 0x0278
    1404:	86 34       	cpi	r24, 0x46	; 70
    1406:	80 f3       	brcs	.-32     	; 0x13e8 <__stack+0x2e9>
					non_Holonomic(150,0,0);
				}
				Turn_and_Drive(0,150,-50,235,90,0,0);
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	cb 01       	movw	r24, r22
    140e:	46 e9       	ldi	r20, 0x96	; 150
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	2e ec       	ldi	r18, 0xCE	; 206
    1414:	3f ef       	ldi	r19, 0xFF	; 255
    1416:	0b ee       	ldi	r16, 0xEB	; 235
    1418:	10 e0       	ldi	r17, 0x00	; 0
    141a:	ea e5       	ldi	r30, 0x5A	; 90
    141c:	ee 2e       	mov	r14, r30
    141e:	f1 2c       	mov	r15, r1
    1420:	cc 24       	eor	r12, r12
    1422:	dd 24       	eor	r13, r13
    1424:	aa 24       	eor	r10, r10
    1426:	bb 24       	eor	r11, r11
    1428:	0e 94 44 04 	call	0x888	; 0x888 <Turn_and_Drive>
			}

			non_Holonomic(0,0,0);
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	cb 01       	movw	r24, r22
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	a9 01       	movw	r20, r18
    1438:	ee 24       	eor	r14, r14
    143a:	ff 24       	eor	r15, r15
    143c:	87 01       	movw	r16, r14
    143e:	0e 94 80 06 	call	0xd00	; 0xd00 <non_Holonomic>
		}


		if(SW3)
    1442:	b6 99       	sbic	0x16, 6	; 22
    1444:	34 ce       	rjmp	.-920    	; 0x10ae <main+0x3c>
		{	
			
			display_sensor();
    1446:	0e 94 97 01 	call	0x32e	; 0x32e <display_sensor>
    144a:	31 ce       	rjmp	.-926    	; 0x10ae <main+0x3c>

0000144c <between_fix>:
		else if(disMD>=stop) next_speed=50;
	}
}


void between_fix(){
    144c:	ef 92       	push	r14
    144e:	ff 92       	push	r15
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
	sec = 0;
    1454:	10 92 37 02 	sts	0x0237, r1
    1458:	10 92 36 02 	sts	0x0236, r1
	while(sec!=300){
    145c:	13 c0       	rjmp	.+38     	; 0x1484 <between_fix+0x38>
		non_Holonomic(0,psd_value[2]-psd_value[7],0);
    145e:	20 91 7a 02 	lds	r18, 0x027A
    1462:	80 91 7f 02 	lds	r24, 0x027F
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	28 1b       	sub	r18, r24
    146a:	31 09       	sbc	r19, r1
    146c:	44 27       	eor	r20, r20
    146e:	37 fd       	sbrc	r19, 7
    1470:	40 95       	com	r20
    1472:	54 2f       	mov	r21, r20
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	cb 01       	movw	r24, r22
    147a:	ee 24       	eor	r14, r14
    147c:	ff 24       	eor	r15, r15
    147e:	87 01       	movw	r16, r14
    1480:	0e 94 80 06 	call	0xd00	; 0xd00 <non_Holonomic>
}


void between_fix(){
	sec = 0;
	while(sec!=300){
    1484:	80 91 36 02 	lds	r24, 0x0236
    1488:	90 91 37 02 	lds	r25, 0x0237
    148c:	21 e0       	ldi	r18, 0x01	; 1
    148e:	8c 32       	cpi	r24, 0x2C	; 44
    1490:	92 07       	cpc	r25, r18
    1492:	29 f7       	brne	.-54     	; 0x145e <between_fix+0x12>
		non_Holonomic(0,psd_value[2]-psd_value[7],0);
	}
}
    1494:	1f 91       	pop	r17
    1496:	0f 91       	pop	r16
    1498:	ff 90       	pop	r15
    149a:	ef 90       	pop	r14
    149c:	08 95       	ret

0000149e <__vector_14>:
}



ISR (TIMER1_OVF_vect)
{
    149e:	1f 92       	push	r1
    14a0:	0f 92       	push	r0
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	0f 92       	push	r0
    14a6:	0b b6       	in	r0, 0x3b	; 59
    14a8:	0f 92       	push	r0
    14aa:	11 24       	eor	r1, r1
    14ac:	ef 92       	push	r14
    14ae:	ff 92       	push	r15
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	2f 93       	push	r18
    14b6:	3f 93       	push	r19
    14b8:	4f 93       	push	r20
    14ba:	5f 93       	push	r21
    14bc:	6f 93       	push	r22
    14be:	7f 93       	push	r23
    14c0:	8f 93       	push	r24
    14c2:	9f 93       	push	r25
    14c4:	af 93       	push	r26
    14c6:	bf 93       	push	r27
    14c8:	ef 93       	push	r30
    14ca:	ff 93       	push	r31
	TCNT1H=0xFF; TCNT1L=0x70; //0.01초
    14cc:	8f ef       	ldi	r24, 0xFF	; 255
    14ce:	8d bd       	out	0x2d, r24	; 45
    14d0:	80 e7       	ldi	r24, 0x70	; 112
    14d2:	8c bd       	out	0x2c, r24	; 44
	++sec;
    14d4:	80 91 36 02 	lds	r24, 0x0236
    14d8:	90 91 37 02 	lds	r25, 0x0237
    14dc:	01 96       	adiw	r24, 0x01	; 1
    14de:	90 93 37 02 	sts	0x0237, r25
    14e2:	80 93 36 02 	sts	0x0236, r24
	
	disMD+=speed*0.01;
    14e6:	e0 90 54 02 	lds	r14, 0x0254
    14ea:	f0 90 55 02 	lds	r15, 0x0255
    14ee:	00 91 56 02 	lds	r16, 0x0256
    14f2:	10 91 57 02 	lds	r17, 0x0257
    14f6:	60 91 38 02 	lds	r22, 0x0238
    14fa:	70 91 39 02 	lds	r23, 0x0239
    14fe:	80 91 3a 02 	lds	r24, 0x023A
    1502:	90 91 3b 02 	lds	r25, 0x023B
    1506:	2a e0       	ldi	r18, 0x0A	; 10
    1508:	37 ed       	ldi	r19, 0xD7	; 215
    150a:	43 e2       	ldi	r20, 0x23	; 35
    150c:	5c e3       	ldi	r21, 0x3C	; 60
    150e:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
    1512:	9b 01       	movw	r18, r22
    1514:	ac 01       	movw	r20, r24
    1516:	c8 01       	movw	r24, r16
    1518:	b7 01       	movw	r22, r14
    151a:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
    151e:	9b 01       	movw	r18, r22
    1520:	ac 01       	movw	r20, r24
    1522:	20 93 54 02 	sts	0x0254, r18
    1526:	30 93 55 02 	sts	0x0255, r19
    152a:	40 93 56 02 	sts	0x0256, r20
    152e:	50 93 57 02 	sts	0x0257, r21
	disW+=speedW*0.01;
    1532:	e0 90 50 02 	lds	r14, 0x0250
    1536:	f0 90 51 02 	lds	r15, 0x0251
    153a:	00 91 52 02 	lds	r16, 0x0252
    153e:	10 91 53 02 	lds	r17, 0x0253
    1542:	60 91 60 02 	lds	r22, 0x0260
    1546:	70 91 61 02 	lds	r23, 0x0261
    154a:	80 91 62 02 	lds	r24, 0x0262
    154e:	90 91 63 02 	lds	r25, 0x0263
    1552:	2a e0       	ldi	r18, 0x0A	; 10
    1554:	37 ed       	ldi	r19, 0xD7	; 215
    1556:	43 e2       	ldi	r20, 0x23	; 35
    1558:	5c e3       	ldi	r21, 0x3C	; 60
    155a:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
    155e:	9b 01       	movw	r18, r22
    1560:	ac 01       	movw	r20, r24
    1562:	c8 01       	movw	r24, r16
    1564:	b7 01       	movw	r22, r14
    1566:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
    156a:	9b 01       	movw	r18, r22
    156c:	ac 01       	movw	r20, r24
    156e:	20 93 50 02 	sts	0x0250, r18
    1572:	30 93 51 02 	sts	0x0251, r19
    1576:	40 93 52 02 	sts	0x0252, r20
    157a:	50 93 53 02 	sts	0x0253, r21
	disX+=(speedX*0.01);
    157e:	e0 90 48 02 	lds	r14, 0x0248
    1582:	f0 90 49 02 	lds	r15, 0x0249
    1586:	00 91 4a 02 	lds	r16, 0x024A
    158a:	10 91 4b 02 	lds	r17, 0x024B
    158e:	60 91 58 02 	lds	r22, 0x0258
    1592:	70 91 59 02 	lds	r23, 0x0259
    1596:	80 91 5a 02 	lds	r24, 0x025A
    159a:	90 91 5b 02 	lds	r25, 0x025B
    159e:	2a e0       	ldi	r18, 0x0A	; 10
    15a0:	37 ed       	ldi	r19, 0xD7	; 215
    15a2:	43 e2       	ldi	r20, 0x23	; 35
    15a4:	5c e3       	ldi	r21, 0x3C	; 60
    15a6:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
    15aa:	9b 01       	movw	r18, r22
    15ac:	ac 01       	movw	r20, r24
    15ae:	c8 01       	movw	r24, r16
    15b0:	b7 01       	movw	r22, r14
    15b2:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
    15b6:	9b 01       	movw	r18, r22
    15b8:	ac 01       	movw	r20, r24
    15ba:	20 93 48 02 	sts	0x0248, r18
    15be:	30 93 49 02 	sts	0x0249, r19
    15c2:	40 93 4a 02 	sts	0x024A, r20
    15c6:	50 93 4b 02 	sts	0x024B, r21
	disY+=(speedY*0.01);
    15ca:	e0 90 4c 02 	lds	r14, 0x024C
    15ce:	f0 90 4d 02 	lds	r15, 0x024D
    15d2:	00 91 4e 02 	lds	r16, 0x024E
    15d6:	10 91 4f 02 	lds	r17, 0x024F
    15da:	60 91 5c 02 	lds	r22, 0x025C
    15de:	70 91 5d 02 	lds	r23, 0x025D
    15e2:	80 91 5e 02 	lds	r24, 0x025E
    15e6:	90 91 5f 02 	lds	r25, 0x025F
    15ea:	2a e0       	ldi	r18, 0x0A	; 10
    15ec:	37 ed       	ldi	r19, 0xD7	; 215
    15ee:	43 e2       	ldi	r20, 0x23	; 35
    15f0:	5c e3       	ldi	r21, 0x3C	; 60
    15f2:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
    15f6:	9b 01       	movw	r18, r22
    15f8:	ac 01       	movw	r20, r24
    15fa:	c8 01       	movw	r24, r16
    15fc:	b7 01       	movw	r22, r14
    15fe:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
    1602:	9b 01       	movw	r18, r22
    1604:	ac 01       	movw	r20, r24
    1606:	20 93 4c 02 	sts	0x024C, r18
    160a:	30 93 4d 02 	sts	0x024D, r19
    160e:	40 93 4e 02 	sts	0x024E, r20
    1612:	50 93 4f 02 	sts	0x024F, r21

	if(next_speed>speed){
    1616:	60 91 3c 02 	lds	r22, 0x023C
    161a:	70 91 3d 02 	lds	r23, 0x023D
    161e:	80 91 3e 02 	lds	r24, 0x023E
    1622:	90 91 3f 02 	lds	r25, 0x023F
    1626:	20 91 38 02 	lds	r18, 0x0238
    162a:	30 91 39 02 	lds	r19, 0x0239
    162e:	40 91 3a 02 	lds	r20, 0x023A
    1632:	50 91 3b 02 	lds	r21, 0x023B
    1636:	0e 94 9d 12 	call	0x253a	; 0x253a <__gtsf2>
    163a:	18 16       	cp	r1, r24
    163c:	94 f5       	brge	.+100    	; 0x16a2 <__vector_14+0x204>
		speed+=acc;
    163e:	60 91 38 02 	lds	r22, 0x0238
    1642:	70 91 39 02 	lds	r23, 0x0239
    1646:	80 91 3a 02 	lds	r24, 0x023A
    164a:	90 91 3b 02 	lds	r25, 0x023B
    164e:	20 91 00 01 	lds	r18, 0x0100
    1652:	30 91 01 01 	lds	r19, 0x0101
    1656:	40 91 02 01 	lds	r20, 0x0102
    165a:	50 91 03 01 	lds	r21, 0x0103
    165e:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
    1662:	9b 01       	movw	r18, r22
    1664:	ac 01       	movw	r20, r24
    1666:	20 93 38 02 	sts	0x0238, r18
    166a:	30 93 39 02 	sts	0x0239, r19
    166e:	40 93 3a 02 	sts	0x023A, r20
    1672:	50 93 3b 02 	sts	0x023B, r21
		if(next_speed<=speed)speed=next_speed;
    1676:	60 91 3c 02 	lds	r22, 0x023C
    167a:	70 91 3d 02 	lds	r23, 0x023D
    167e:	80 91 3e 02 	lds	r24, 0x023E
    1682:	90 91 3f 02 	lds	r25, 0x023F
    1686:	20 91 38 02 	lds	r18, 0x0238
    168a:	30 91 39 02 	lds	r19, 0x0239
    168e:	40 91 3a 02 	lds	r20, 0x023A
    1692:	50 91 3b 02 	lds	r21, 0x023B
    1696:	0e 94 2d 13 	call	0x265a	; 0x265a <__lesf2>
    169a:	18 16       	cp	r1, r24
    169c:	0c f4       	brge	.+2      	; 0x16a0 <__vector_14+0x202>
    169e:	55 c0       	rjmp	.+170    	; 0x174a <__vector_14+0x2ac>
    16a0:	44 c0       	rjmp	.+136    	; 0x172a <__vector_14+0x28c>
	}
	else if(next_speed<speed){
    16a2:	60 91 3c 02 	lds	r22, 0x023C
    16a6:	70 91 3d 02 	lds	r23, 0x023D
    16aa:	80 91 3e 02 	lds	r24, 0x023E
    16ae:	90 91 3f 02 	lds	r25, 0x023F
    16b2:	20 91 38 02 	lds	r18, 0x0238
    16b6:	30 91 39 02 	lds	r19, 0x0239
    16ba:	40 91 3a 02 	lds	r20, 0x023A
    16be:	50 91 3b 02 	lds	r21, 0x023B
    16c2:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__ltsf2>
    16c6:	87 ff       	sbrs	r24, 7
    16c8:	40 c0       	rjmp	.+128    	; 0x174a <__vector_14+0x2ac>
		speed-=acc;
    16ca:	60 91 38 02 	lds	r22, 0x0238
    16ce:	70 91 39 02 	lds	r23, 0x0239
    16d2:	80 91 3a 02 	lds	r24, 0x023A
    16d6:	90 91 3b 02 	lds	r25, 0x023B
    16da:	20 91 00 01 	lds	r18, 0x0100
    16de:	30 91 01 01 	lds	r19, 0x0101
    16e2:	40 91 02 01 	lds	r20, 0x0102
    16e6:	50 91 03 01 	lds	r21, 0x0103
    16ea:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__subsf3>
    16ee:	9b 01       	movw	r18, r22
    16f0:	ac 01       	movw	r20, r24
    16f2:	20 93 38 02 	sts	0x0238, r18
    16f6:	30 93 39 02 	sts	0x0239, r19
    16fa:	40 93 3a 02 	sts	0x023A, r20
    16fe:	50 93 3b 02 	sts	0x023B, r21
		if(next_speed>=speed)speed=next_speed;
    1702:	60 91 3c 02 	lds	r22, 0x023C
    1706:	70 91 3d 02 	lds	r23, 0x023D
    170a:	80 91 3e 02 	lds	r24, 0x023E
    170e:	90 91 3f 02 	lds	r25, 0x023F
    1712:	20 91 38 02 	lds	r18, 0x0238
    1716:	30 91 39 02 	lds	r19, 0x0239
    171a:	40 91 3a 02 	lds	r20, 0x023A
    171e:	50 91 3b 02 	lds	r21, 0x023B
    1722:	0e 94 cd 12 	call	0x259a	; 0x259a <__gesf2>
    1726:	87 fd       	sbrc	r24, 7
    1728:	10 c0       	rjmp	.+32     	; 0x174a <__vector_14+0x2ac>
    172a:	80 91 3c 02 	lds	r24, 0x023C
    172e:	90 91 3d 02 	lds	r25, 0x023D
    1732:	a0 91 3e 02 	lds	r26, 0x023E
    1736:	b0 91 3f 02 	lds	r27, 0x023F
    173a:	80 93 38 02 	sts	0x0238, r24
    173e:	90 93 39 02 	sts	0x0239, r25
    1742:	a0 93 3a 02 	sts	0x023A, r26
    1746:	b0 93 3b 02 	sts	0x023B, r27
	}
	if(next_wspeed>wspeed){
    174a:	60 91 44 02 	lds	r22, 0x0244
    174e:	70 91 45 02 	lds	r23, 0x0245
    1752:	80 91 46 02 	lds	r24, 0x0246
    1756:	90 91 47 02 	lds	r25, 0x0247
    175a:	20 91 40 02 	lds	r18, 0x0240
    175e:	30 91 41 02 	lds	r19, 0x0241
    1762:	40 91 42 02 	lds	r20, 0x0242
    1766:	50 91 43 02 	lds	r21, 0x0243
    176a:	0e 94 9d 12 	call	0x253a	; 0x253a <__gtsf2>
    176e:	18 16       	cp	r1, r24
    1770:	94 f5       	brge	.+100    	; 0x17d6 <__vector_14+0x338>
		wspeed+=accW;
    1772:	60 91 40 02 	lds	r22, 0x0240
    1776:	70 91 41 02 	lds	r23, 0x0241
    177a:	80 91 42 02 	lds	r24, 0x0242
    177e:	90 91 43 02 	lds	r25, 0x0243
    1782:	20 91 04 01 	lds	r18, 0x0104
    1786:	30 91 05 01 	lds	r19, 0x0105
    178a:	40 91 06 01 	lds	r20, 0x0106
    178e:	50 91 07 01 	lds	r21, 0x0107
    1792:	0e 94 45 11 	call	0x228a	; 0x228a <__addsf3>
    1796:	9b 01       	movw	r18, r22
    1798:	ac 01       	movw	r20, r24
    179a:	20 93 40 02 	sts	0x0240, r18
    179e:	30 93 41 02 	sts	0x0241, r19
    17a2:	40 93 42 02 	sts	0x0242, r20
    17a6:	50 93 43 02 	sts	0x0243, r21
		if(next_wspeed<=wspeed)wspeed=next_wspeed;
    17aa:	60 91 44 02 	lds	r22, 0x0244
    17ae:	70 91 45 02 	lds	r23, 0x0245
    17b2:	80 91 46 02 	lds	r24, 0x0246
    17b6:	90 91 47 02 	lds	r25, 0x0247
    17ba:	20 91 40 02 	lds	r18, 0x0240
    17be:	30 91 41 02 	lds	r19, 0x0241
    17c2:	40 91 42 02 	lds	r20, 0x0242
    17c6:	50 91 43 02 	lds	r21, 0x0243
    17ca:	0e 94 2d 13 	call	0x265a	; 0x265a <__lesf2>
    17ce:	18 16       	cp	r1, r24
    17d0:	0c f4       	brge	.+2      	; 0x17d4 <__vector_14+0x336>
    17d2:	55 c0       	rjmp	.+170    	; 0x187e <__vector_14+0x3e0>
    17d4:	44 c0       	rjmp	.+136    	; 0x185e <__vector_14+0x3c0>
	}
	else if(next_wspeed<wspeed){
    17d6:	60 91 44 02 	lds	r22, 0x0244
    17da:	70 91 45 02 	lds	r23, 0x0245
    17de:	80 91 46 02 	lds	r24, 0x0246
    17e2:	90 91 47 02 	lds	r25, 0x0247
    17e6:	20 91 40 02 	lds	r18, 0x0240
    17ea:	30 91 41 02 	lds	r19, 0x0241
    17ee:	40 91 42 02 	lds	r20, 0x0242
    17f2:	50 91 43 02 	lds	r21, 0x0243
    17f6:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__ltsf2>
    17fa:	87 ff       	sbrs	r24, 7
    17fc:	40 c0       	rjmp	.+128    	; 0x187e <__vector_14+0x3e0>
		wspeed-=accW;
    17fe:	60 91 40 02 	lds	r22, 0x0240
    1802:	70 91 41 02 	lds	r23, 0x0241
    1806:	80 91 42 02 	lds	r24, 0x0242
    180a:	90 91 43 02 	lds	r25, 0x0243
    180e:	20 91 04 01 	lds	r18, 0x0104
    1812:	30 91 05 01 	lds	r19, 0x0105
    1816:	40 91 06 01 	lds	r20, 0x0106
    181a:	50 91 07 01 	lds	r21, 0x0107
    181e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__subsf3>
    1822:	9b 01       	movw	r18, r22
    1824:	ac 01       	movw	r20, r24
    1826:	20 93 40 02 	sts	0x0240, r18
    182a:	30 93 41 02 	sts	0x0241, r19
    182e:	40 93 42 02 	sts	0x0242, r20
    1832:	50 93 43 02 	sts	0x0243, r21
		if(next_wspeed>=wspeed)wspeed=next_wspeed;
    1836:	60 91 44 02 	lds	r22, 0x0244
    183a:	70 91 45 02 	lds	r23, 0x0245
    183e:	80 91 46 02 	lds	r24, 0x0246
    1842:	90 91 47 02 	lds	r25, 0x0247
    1846:	20 91 40 02 	lds	r18, 0x0240
    184a:	30 91 41 02 	lds	r19, 0x0241
    184e:	40 91 42 02 	lds	r20, 0x0242
    1852:	50 91 43 02 	lds	r21, 0x0243
    1856:	0e 94 cd 12 	call	0x259a	; 0x259a <__gesf2>
    185a:	87 fd       	sbrc	r24, 7
    185c:	10 c0       	rjmp	.+32     	; 0x187e <__vector_14+0x3e0>
    185e:	80 91 44 02 	lds	r24, 0x0244
    1862:	90 91 45 02 	lds	r25, 0x0245
    1866:	a0 91 46 02 	lds	r26, 0x0246
    186a:	b0 91 47 02 	lds	r27, 0x0247
    186e:	80 93 40 02 	sts	0x0240, r24
    1872:	90 93 41 02 	sts	0x0241, r25
    1876:	a0 93 42 02 	sts	0x0242, r26
    187a:	b0 93 43 02 	sts	0x0243, r27
	}
}
    187e:	ff 91       	pop	r31
    1880:	ef 91       	pop	r30
    1882:	bf 91       	pop	r27
    1884:	af 91       	pop	r26
    1886:	9f 91       	pop	r25
    1888:	8f 91       	pop	r24
    188a:	7f 91       	pop	r23
    188c:	6f 91       	pop	r22
    188e:	5f 91       	pop	r21
    1890:	4f 91       	pop	r20
    1892:	3f 91       	pop	r19
    1894:	2f 91       	pop	r18
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	ff 90       	pop	r15
    189c:	ef 90       	pop	r14
    189e:	0f 90       	pop	r0
    18a0:	0b be       	out	0x3b, r0	; 59
    18a2:	0f 90       	pop	r0
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	0f 90       	pop	r0
    18a8:	1f 90       	pop	r1
    18aa:	18 95       	reti

000018ac <ReadData>:
unsigned char ReadData(unsigned char motor)
{
    unsigned char data;

    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	fc 01       	movw	r30, r24
    18b0:	b0 96       	adiw	r30, 0x20	; 32
    18b2:	fe 2f       	mov	r31, r30
    18b4:	ee 27       	eor	r30, r30
    18b6:	20 81       	ld	r18, Z
    18b8:	20 93 74 02 	sts	0x0274, r18
    18bc:	20 fd       	sbrc	r18, 0
    18be:	fb cf       	rjmp	.-10     	; 0x18b6 <ReadData+0xa>
    // 데이터 입력
    data = MOTOR_DATA(motor);
    18c0:	88 96       	adiw	r24, 0x28	; 40
    18c2:	b8 2f       	mov	r27, r24
    18c4:	aa 27       	eor	r26, r26
    18c6:	8c 91       	ld	r24, X

	CHECK_BUSY(motor, status);
    18c8:	90 81       	ld	r25, Z
    18ca:	90 93 74 02 	sts	0x0274, r25
    18ce:	90 fd       	sbrc	r25, 0
    18d0:	fb cf       	rjmp	.-10     	; 0x18c8 <ReadData+0x1c>
    // 입력된 데이터 리턴
    return data;
}    
    18d2:	08 95       	ret

000018d4 <WriteCommand>:
// Return    : 없음

void WriteCommand(unsigned char motor, unsigned char cmd)
{
    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	80 96       	adiw	r24, 0x20	; 32
    18d8:	f8 2f       	mov	r31, r24
    18da:	ee 27       	eor	r30, r30
    18dc:	80 81       	ld	r24, Z
    18de:	80 93 74 02 	sts	0x0274, r24
    18e2:	80 fd       	sbrc	r24, 0
    18e4:	fb cf       	rjmp	.-10     	; 0x18dc <WriteCommand+0x8>
    // 커맨드 출력
    MOTOR_CMD(motor) = cmd;
    18e6:	60 83       	st	Z, r22

	CHECK_BUSY(motor, status);
    18e8:	80 81       	ld	r24, Z
    18ea:	80 93 74 02 	sts	0x0274, r24
    18ee:	80 fd       	sbrc	r24, 0
    18f0:	fb cf       	rjmp	.-10     	; 0x18e8 <WriteCommand+0x14>
}
    18f2:	08 95       	ret

000018f4 <WriteDataTwoByte>:
//      data  - 쓸 데이터
// Return    : 없음
void WriteDataTwoByte(unsigned char motor, int data)
{
    // Status Byte의 Busy Bit 체크
    CHECK_BUSY(motor, status);
    18f4:	a8 2f       	mov	r26, r24
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	fd 01       	movw	r30, r26
    18fa:	b0 96       	adiw	r30, 0x20	; 32
    18fc:	fe 2f       	mov	r31, r30
    18fe:	ee 27       	eor	r30, r30
    1900:	80 81       	ld	r24, Z
    1902:	80 93 74 02 	sts	0x0274, r24
    1906:	80 fd       	sbrc	r24, 0
    1908:	fb cf       	rjmp	.-10     	; 0x1900 <WriteDataTwoByte+0xc>
    // 2 바이트 데이터 출력
    MOTOR_DATA(motor) = (uint8_t)((data >> 8)&0xFF);
    190a:	98 96       	adiw	r26, 0x28	; 40
    190c:	ba 2f       	mov	r27, r26
    190e:	aa 27       	eor	r26, r26
    1910:	87 2f       	mov	r24, r23
    1912:	99 27       	eor	r25, r25
    1914:	87 fd       	sbrc	r24, 7
    1916:	9a 95       	dec	r25
    1918:	8c 93       	st	X, r24
	CHECK_BUSY(motor, status);
    191a:	80 81       	ld	r24, Z
    191c:	80 93 74 02 	sts	0x0274, r24
    1920:	80 fd       	sbrc	r24, 0
    1922:	fb cf       	rjmp	.-10     	; 0x191a <WriteDataTwoByte+0x26>
    MOTOR_DATA(motor) = (uint8_t)(data&0xFF);
    1924:	6c 93       	st	X, r22
	CHECK_BUSY(motor, status);
    1926:	80 81       	ld	r24, Z
    1928:	80 93 74 02 	sts	0x0274, r24
    192c:	80 fd       	sbrc	r24, 0
    192e:	fb cf       	rjmp	.-10     	; 0x1926 <WriteDataTwoByte+0x32>
}
    1930:	08 95       	ret

00001932 <WriteDataFourByte>:
// Parameter :
//      motor - 선택할 모터
//      data  - 쓸 데이터
// Return    : 없음
void WriteDataFourByte(unsigned char motor, long data)
{
    1932:	df 92       	push	r13
    1934:	ef 92       	push	r14
    1936:	ff 92       	push	r15
    1938:	0f 93       	push	r16
    193a:	1f 93       	push	r17
    193c:	d8 2e       	mov	r13, r24
    193e:	7a 01       	movw	r14, r20
    1940:	8b 01       	movw	r16, r22
    // 4 바이트의 데이터를 둘로 나누어서 WriteDataTwoByte함수를 두번 호출
    WriteDataTwoByte(motor, (int16_t)(data >> 16));
    1942:	9b 01       	movw	r18, r22
    1944:	55 27       	eor	r21, r21
    1946:	37 fd       	sbrc	r19, 7
    1948:	50 95       	com	r21
    194a:	45 2f       	mov	r20, r21
    194c:	b9 01       	movw	r22, r18
    194e:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <WriteDataTwoByte>
    WriteDataTwoByte(motor, (int16_t)(data));
    1952:	8d 2d       	mov	r24, r13
    1954:	b7 01       	movw	r22, r14
    1956:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <WriteDataTwoByte>
}
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16
    195e:	ff 90       	pop	r15
    1960:	ef 90       	pop	r14
    1962:	df 90       	pop	r13
    1964:	08 95       	ret

00001966 <Motor_Reset>:
// Function  : LM629를 리셋한다.
// Parameter :
//      motor - 선택할 모터
// Return    : 없음
void Motor_Reset(uint8_t motor)
{
    1966:	1f 93       	push	r17
    1968:	18 2f       	mov	r17, r24
    // RESET 커맨드 출력
    WriteCommand(motor, RESET);
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <WriteCommand>
    1970:	8c ec       	ldi	r24, 0xCC	; 204
    1972:	9c e1       	ldi	r25, 0x1C	; 28
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <Motor_Reset+0xe>
    1978:	00 c0       	rjmp	.+0      	; 0x197a <Motor_Reset+0x14>
    197a:	00 00       	nop
    // 리셋이 완료될 때까지 최소 1.5ms이상 대기
    _delay_ms(2);
	// Morot1 인터럽트 마스크 리셋
    WriteCommand(motor, RSTI);
    197c:	81 2f       	mov	r24, r17
    197e:	6d e1       	ldi	r22, 0x1D	; 29
    1980:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <WriteCommand>
    WriteDataTwoByte(motor, 0x0000);
    1984:	81 2f       	mov	r24, r17
    1986:	60 e0       	ldi	r22, 0x00	; 0
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <WriteDataTwoByte>
}
    198e:	1f 91       	pop	r17
    1990:	08 95       	ret

00001992 <SetGain>:
//      kp    - P값
//      ki    - I값
//      kd    - D값
// Return    : 없음
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
{
    1992:	af 92       	push	r10
    1994:	bf 92       	push	r11
    1996:	cf 92       	push	r12
    1998:	df 92       	push	r13
    199a:	ef 92       	push	r14
    199c:	ff 92       	push	r15
    199e:	0f 93       	push	r16
    19a0:	1f 93       	push	r17
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	f8 2e       	mov	r15, r24
    19a8:	6b 01       	movw	r12, r22
    19aa:	ea 01       	movw	r28, r20
    19ac:	89 01       	movw	r16, r18
//      motor - 선택할 모터
//      kp    - P값
//      ki    - I값
//      kd    - D값
// Return    : 없음
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
    19ae:	aa 24       	eor	r10, r10
    19b0:	a3 94       	inc	r10
    19b2:	61 15       	cp	r22, r1
    19b4:	71 05       	cpc	r23, r1
    19b6:	09 f4       	brne	.+2      	; 0x19ba <SetGain+0x28>
    19b8:	aa 24       	eor	r10, r10
    19ba:	bb 24       	eor	r11, r11
    19bc:	b3 94       	inc	r11
    19be:	20 97       	sbiw	r28, 0x00	; 0
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <SetGain+0x32>
    19c2:	bb 24       	eor	r11, r11
    19c4:	ee 24       	eor	r14, r14
    19c6:	e3 94       	inc	r14
    19c8:	01 15       	cp	r16, r1
    19ca:	11 05       	cpc	r17, r1
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <SetGain+0x3e>
    19ce:	ee 24       	eor	r14, r14
	if(ki)LD_ki=1;
	else LD_ki=0;
	if(kd)LD_kd=1;
	else LD_kd=0;
	// LFIL 커맨드 출력
    WriteCommand(motor, LFIL);
    19d0:	8f 2d       	mov	r24, r15
    19d2:	6e e1       	ldi	r22, 0x1E	; 30
    19d4:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <WriteCommand>
    // 컨트롤 워드 출력, sampling interval은 341us 고정
    WriteDataTwoByte(motor, (0x0000) | (LD_kp << 3) | (LD_ki << 2) | (LD_kd << 1)  );
    19d8:	6b 2d       	mov	r22, r11
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	66 0f       	add	r22, r22
    19de:	77 1f       	adc	r23, r23
    19e0:	66 0f       	add	r22, r22
    19e2:	77 1f       	adc	r23, r23
    19e4:	8a 2d       	mov	r24, r10
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	43 e0       	ldi	r20, 0x03	; 3
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	4a 95       	dec	r20
    19f0:	e1 f7       	brne	.-8      	; 0x19ea <SetGain+0x58>
    19f2:	68 2b       	or	r22, r24
    19f4:	79 2b       	or	r23, r25
    19f6:	8e 2d       	mov	r24, r14
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	68 2b       	or	r22, r24
    1a00:	79 2b       	or	r23, r25
    1a02:	8f 2d       	mov	r24, r15
    1a04:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <WriteDataTwoByte>
    ////////////////////////////
	// P값 출력
	if(kp)WriteDataTwoByte(motor, kp);
    1a08:	aa 20       	and	r10, r10
    1a0a:	21 f0       	breq	.+8      	; 0x1a14 <SetGain+0x82>
    1a0c:	8f 2d       	mov	r24, r15
    1a0e:	b6 01       	movw	r22, r12
    1a10:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <WriteDataTwoByte>
    // I값 출력
    if(ki)WriteDataTwoByte(motor, ki);
    1a14:	bb 20       	and	r11, r11
    1a16:	21 f0       	breq	.+8      	; 0x1a20 <SetGain+0x8e>
    1a18:	8f 2d       	mov	r24, r15
    1a1a:	be 01       	movw	r22, r28
    1a1c:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <WriteDataTwoByte>
    // D값 출력
    if(kd)WriteDataTwoByte(motor, kd);
    1a20:	ee 20       	and	r14, r14
    1a22:	21 f0       	breq	.+8      	; 0x1a2c <SetGain+0x9a>
    1a24:	8f 2d       	mov	r24, r15
    1a26:	b8 01       	movw	r22, r16
    1a28:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <WriteDataTwoByte>
    // 필터 업데이트
    WriteCommand(motor, UDF);
    1a2c:	8f 2d       	mov	r24, r15
    1a2e:	64 e0       	ldi	r22, 0x04	; 4
    1a30:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <WriteCommand>
}
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	1f 91       	pop	r17
    1a3a:	0f 91       	pop	r16
    1a3c:	ff 90       	pop	r15
    1a3e:	ef 90       	pop	r14
    1a40:	df 90       	pop	r13
    1a42:	cf 90       	pop	r12
    1a44:	bf 90       	pop	r11
    1a46:	af 90       	pop	r10
    1a48:	08 95       	ret

00001a4a <SetAcceleration>:
// Parameter :
//      motor - 선택할 모터
//      acc   - 가속도값
// Return    : 없음
void SetAcceleration(uint8_t motor, int32_t acc)
{
    1a4a:	df 92       	push	r13
    1a4c:	ef 92       	push	r14
    1a4e:	ff 92       	push	r15
    1a50:	0f 93       	push	r16
    1a52:	1f 93       	push	r17
    1a54:	d8 2e       	mov	r13, r24
    1a56:	7a 01       	movw	r14, r20
    1a58:	8b 01       	movw	r16, r22
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);
    1a5a:	6f e1       	ldi	r22, 0x1F	; 31
    1a5c:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(motor, (1 << ACC_LOAD));
    1a60:	8d 2d       	mov	r24, r13
    1a62:	60 e2       	ldi	r22, 0x20	; 32
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <WriteDataTwoByte>
    // 가속도값 출력
    WriteDataFourByte(motor, acc);
    1a6a:	8d 2d       	mov	r24, r13
    1a6c:	b8 01       	movw	r22, r16
    1a6e:	a7 01       	movw	r20, r14
    1a70:	0e 94 99 0c 	call	0x1932	; 0x1932 <WriteDataFourByte>
}
    1a74:	1f 91       	pop	r17
    1a76:	0f 91       	pop	r16
    1a78:	ff 90       	pop	r15
    1a7a:	ef 90       	pop	r14
    1a7c:	df 90       	pop	r13
    1a7e:	08 95       	ret

00001a80 <Motor_init>:
// Parameter : 없음
// Return    : 없음
void Motor_init(void)
{	
    // Motor1 게인 설정
    SetGain(MOTOR0, 7, 3, 1);
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	67 e0       	ldi	r22, 0x07	; 7
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	43 e0       	ldi	r20, 0x03	; 3
    1a88:	50 e0       	ldi	r21, 0x00	; 0
    1a8a:	21 e0       	ldi	r18, 0x01	; 1
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	0e 94 c9 0c 	call	0x1992	; 0x1992 <SetGain>
    // Motor2 게인 설정
    SetGain(MOTOR1, 7, 3, 1);
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	67 e0       	ldi	r22, 0x07	; 7
    1a96:	70 e0       	ldi	r23, 0x00	; 0
    1a98:	43 e0       	ldi	r20, 0x03	; 3
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	21 e0       	ldi	r18, 0x01	; 1
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	0e 94 c9 0c 	call	0x1992	; 0x1992 <SetGain>
    // Motor3 게인 설정
    SetGain(MOTOR2, 7, 3, 1);
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	67 e0       	ldi	r22, 0x07	; 7
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	43 e0       	ldi	r20, 0x03	; 3
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	21 e0       	ldi	r18, 0x01	; 1
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	0e 94 c9 0c 	call	0x1992	; 0x1992 <SetGain>

    SetAcceleration(MOTOR0, 0x3FFFFFFF);
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	4f ef       	ldi	r20, 0xFF	; 255
    1aba:	5f ef       	ldi	r21, 0xFF	; 255
    1abc:	6f ef       	ldi	r22, 0xFF	; 255
    1abe:	7f e3       	ldi	r23, 0x3F	; 63
    1ac0:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <SetAcceleration>
    SetAcceleration(MOTOR1, 0x3FFFFFFF);
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	4f ef       	ldi	r20, 0xFF	; 255
    1ac8:	5f ef       	ldi	r21, 0xFF	; 255
    1aca:	6f ef       	ldi	r22, 0xFF	; 255
    1acc:	7f e3       	ldi	r23, 0x3F	; 63
    1ace:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <SetAcceleration>
    SetAcceleration(MOTOR2, 0x3FFFFFFF);
    1ad2:	82 e0       	ldi	r24, 0x02	; 2
    1ad4:	4f ef       	ldi	r20, 0xFF	; 255
    1ad6:	5f ef       	ldi	r21, 0xFF	; 255
    1ad8:	6f ef       	ldi	r22, 0xFF	; 255
    1ada:	7f e3       	ldi	r23, 0x3F	; 63
    1adc:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <SetAcceleration>
}
    1ae0:	08 95       	ret

00001ae2 <SetVelocity>:
// Parameter :
//      motor    - 선택할 모터
//      velocity - 속도 설정  (0 ~ 1,073,741,823) 음수 입력시 역방향으로 회전
// Return    : 없음
void SetVelocity(uint8_t motor, int32_t velocity)
{
    1ae2:	df 92       	push	r13
    1ae4:	ef 92       	push	r14
    1ae6:	ff 92       	push	r15
    1ae8:	0f 93       	push	r16
    1aea:	1f 93       	push	r17
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	0f 92       	push	r0
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	d8 2e       	mov	r13, r24
    1af8:	7a 01       	movw	r14, r20
    1afa:	8b 01       	movw	r16, r22
	unsigned char dir=1;

	if(velocity<0){
    1afc:	77 ff       	sbrs	r23, 7
    1afe:	0a c0       	rjmp	.+20     	; 0x1b14 <SetVelocity+0x32>
		velocity*=(-1);
    1b00:	10 95       	com	r17
    1b02:	00 95       	com	r16
    1b04:	f0 94       	com	r15
    1b06:	e0 94       	com	r14
    1b08:	e1 1c       	adc	r14, r1
    1b0a:	f1 1c       	adc	r15, r1
    1b0c:	01 1d       	adc	r16, r1
    1b0e:	11 1d       	adc	r17, r1
		dir=0;
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	01 c0       	rjmp	.+2      	; 0x1b16 <SetVelocity+0x34>
//      motor    - 선택할 모터
//      velocity - 속도 설정  (0 ~ 1,073,741,823) 음수 입력시 역방향으로 회전
// Return    : 없음
void SetVelocity(uint8_t motor, int32_t velocity)
{
	unsigned char dir=1;
    1b14:	91 e0       	ldi	r25, 0x01	; 1
	if(velocity<0){
		velocity*=(-1);
		dir=0;
	}
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);        
    1b16:	8d 2d       	mov	r24, r13
    1b18:	6f e1       	ldi	r22, 0x1F	; 31
    1b1a:	99 83       	std	Y+1, r25	; 0x01
    1b1c:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <WriteCommand>
    // 컨트롤 워드 출력        
    WriteDataTwoByte(motor,  (dir << FORWARD_DIR) | (1 << VELOCITY_MODE) | (1 << VELOCITY_LOAD));
    1b20:	99 81       	ldd	r25, Y+1	; 0x01
    1b22:	79 2f       	mov	r23, r25
    1b24:	72 95       	swap	r23
    1b26:	70 7f       	andi	r23, 0xF0	; 240
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	68 60       	ori	r22, 0x08	; 8
    1b2c:	78 60       	ori	r23, 0x08	; 8
    1b2e:	8d 2d       	mov	r24, r13
    1b30:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <WriteDataTwoByte>
    // 속도값 출력
    WriteDataFourByte(motor, velocity);
    1b34:	8d 2d       	mov	r24, r13
    1b36:	b8 01       	movw	r22, r16
    1b38:	a7 01       	movw	r20, r14
    1b3a:	0e 94 99 0c 	call	0x1932	; 0x1932 <WriteDataFourByte>
}
    1b3e:	0f 90       	pop	r0
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	ff 90       	pop	r15
    1b4a:	ef 90       	pop	r14
    1b4c:	df 90       	pop	r13
    1b4e:	08 95       	ret

00001b50 <SetPosition>:
//		acc   - 가속도 설정  (0 ~ 1,073,741,823)
//   velocity - 속도 설정    (0 ~ 1,073,741,823)
//   position - 모터위치설정 (-1,073,741,824 ~ 1,073,741,823)counts
// Return    : 없음
void SetPosition(uint8_t motor, uint8_t mode, int32_t acc,int32_t velocity,int32_t position)
{
    1b50:	4f 92       	push	r4
    1b52:	5f 92       	push	r5
    1b54:	6f 92       	push	r6
    1b56:	7f 92       	push	r7
    1b58:	8f 92       	push	r8
    1b5a:	9f 92       	push	r9
    1b5c:	af 92       	push	r10
    1b5e:	bf 92       	push	r11
    1b60:	cf 92       	push	r12
    1b62:	df 92       	push	r13
    1b64:	ef 92       	push	r14
    1b66:	ff 92       	push	r15
    1b68:	0f 93       	push	r16
    1b6a:	1f 93       	push	r17
    1b6c:	98 2e       	mov	r9, r24
    1b6e:	86 2e       	mov	r8, r22
    1b70:	29 01       	movw	r4, r18
    1b72:	3a 01       	movw	r6, r20
    // LTRJ 커맨드 출력
    WriteCommand(motor, LTRJ);
    1b74:	6f e1       	ldi	r22, 0x1F	; 31
    1b76:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <WriteCommand>
    // 컨트롤 워드 출력
    // mode : 0 - Absolute Position, 1 - Relative Position
    // Position Mode로 설정
    
	WriteDataTwoByte(motor, (1 << ACC_LOAD) | (1 << VELOCITY_LOAD) | (1 << POSITION_LOAD) | (mode << POSITION_RELATIVE) );//WriteDataTwoByte(motor, 0x2A|mode);
    1b7a:	68 2d       	mov	r22, r8
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	6a 62       	ori	r22, 0x2A	; 42
    1b80:	89 2d       	mov	r24, r9
    1b82:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <WriteDataTwoByte>
    // 위치값 출력
	WriteDataFourByte(motor, acc);    
    1b86:	89 2d       	mov	r24, r9
    1b88:	b3 01       	movw	r22, r6
    1b8a:	a2 01       	movw	r20, r4
    1b8c:	0e 94 99 0c 	call	0x1932	; 0x1932 <WriteDataFourByte>
	WriteDataFourByte(motor, velocity);
    1b90:	89 2d       	mov	r24, r9
    1b92:	b8 01       	movw	r22, r16
    1b94:	a7 01       	movw	r20, r14
    1b96:	0e 94 99 0c 	call	0x1932	; 0x1932 <WriteDataFourByte>
    WriteDataFourByte(motor, position);
    1b9a:	89 2d       	mov	r24, r9
    1b9c:	b6 01       	movw	r22, r12
    1b9e:	a5 01       	movw	r20, r10
    1ba0:	0e 94 99 0c 	call	0x1932	; 0x1932 <WriteDataFourByte>
}
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	ff 90       	pop	r15
    1baa:	ef 90       	pop	r14
    1bac:	df 90       	pop	r13
    1bae:	cf 90       	pop	r12
    1bb0:	bf 90       	pop	r11
    1bb2:	af 90       	pop	r10
    1bb4:	9f 90       	pop	r9
    1bb6:	8f 90       	pop	r8
    1bb8:	7f 90       	pop	r7
    1bba:	6f 90       	pop	r6
    1bbc:	5f 90       	pop	r5
    1bbe:	4f 90       	pop	r4
    1bc0:	08 95       	ret

00001bc2 <LM629_HW_Reset>:

// Function  : LM629 H/W Reset. 최초 전원 인가시 반드시 실행해야한다.
// Parameter : 없음
// Return    : 없음
void LM629_HW_Reset(void){
    1bc2:	8f 92       	push	r8
    1bc4:	9f 92       	push	r9
    1bc6:	af 92       	push	r10
    1bc8:	bf 92       	push	r11
    1bca:	cf 92       	push	r12
    1bcc:	df 92       	push	r13
    1bce:	ef 92       	push	r14
    1bd0:	ff 92       	push	r15
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <LM629_HW_Reset+0x1a>
    1bdc:	0f 92       	push	r0
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
	unsigned char status[3]={0, }, i=0, step=0;
	
	DDRA=0x00;
    1be2:	1a ba       	out	0x1a, r1	; 26

	PORTC=0x00;
    1be4:	15 ba       	out	0x15, r1	; 21
	DDRC=0xFF;
    1be6:	8f ef       	ldi	r24, 0xFF	; 255
    1be8:	84 bb       	out	0x14, r24	; 20

	PORTG=0x00;
    1bea:	10 92 65 00 	sts	0x0065, r1
	DDRG=0x03;
    1bee:	83 e0       	ldi	r24, 0x03	; 3
    1bf0:	80 93 64 00 	sts	0x0064, r24
			}
		}
		
		if(step==1){
			// SRE : 외부 데이터 메모리 영역 활성화
			MCUCR = (1 << SRE) | (0 << SRW10);
    1bf4:	e0 e8       	ldi	r30, 0x80	; 128
    1bf6:	9e 2e       	mov	r9, r30
		    // SRL(0) : Upper Sector로만 사용 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
    1bf8:	72 e0       	ldi	r23, 0x02	; 2
    1bfa:	a7 2e       	mov	r10, r23
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
    1bfc:	64 e8       	ldi	r22, 0x84	; 132
    1bfe:	b6 2e       	mov	r11, r22
    1c00:	6e 01       	movw	r12, r28
    1c02:	08 94       	sec
    1c04:	c1 1c       	adc	r12, r1
    1c06:	d1 1c       	adc	r13, r1
	DDRG=0x03;

	while(1){
		if(step==0){
			while(1){
				PORTC |= 0x05; //Hw Rst Hi(decoder = Low)
    1c08:	85 b3       	in	r24, 0x15	; 21
    1c0a:	85 60       	ori	r24, 0x05	; 5
    1c0c:	85 bb       	out	0x15, r24	; 21
    1c0e:	83 e3       	ldi	r24, 0x33	; 51
    1c10:	9b e2       	ldi	r25, 0x2B	; 43
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	f1 f7       	brne	.-4      	; 0x1c12 <LM629_HW_Reset+0x50>
				_delay_ms(3);
				PORTC &= ~0x05; //Hw Rst Low(decoder = Hi)
    1c16:	85 b3       	in	r24, 0x15	; 21
    1c18:	8a 7f       	andi	r24, 0xFA	; 250
    1c1a:	85 bb       	out	0x15, r24	; 21
    1c1c:	ec ec       	ldi	r30, 0xCC	; 204
    1c1e:	fc e1       	ldi	r31, 0x1C	; 28
    1c20:	31 97       	sbiw	r30, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LM629_HW_Reset+0x5e>
    1c24:	00 c0       	rjmp	.+0      	; 0x1c26 <LM629_HW_Reset+0x64>
    1c26:	00 00       	nop
				_delay_ms(2);

				PORTG &= ~0x02; //RD low
    1c28:	80 91 65 00 	lds	r24, 0x0065
    1c2c:	8d 7f       	andi	r24, 0xFD	; 253
    1c2e:	80 93 65 00 	sts	0x0065, r24
				PORTC &= ~0x08; //PS low
    1c32:	ab 98       	cbi	0x15, 3	; 21
		
				PORTC &=~0x07;	//cs motor0
    1c34:	85 b3       	in	r24, 0x15	; 21
    1c36:	88 7f       	andi	r24, 0xF8	; 248
    1c38:	85 bb       	out	0x15, r24	; 21
				status[0]=PINA; //Read status motor0
    1c3a:	29 b3       	in	r18, 0x19	; 25
    1c3c:	29 83       	std	Y+1, r18	; 0x01
				
				PORTC |=0x01;	//cs motor1
    1c3e:	a8 9a       	sbi	0x15, 0	; 21
				status[1]=PINA; //Read status motor0
    1c40:	99 b3       	in	r25, 0x19	; 25
    1c42:	9a 83       	std	Y+2, r25	; 0x02
				
				PORTC = (PORTC&0xF8)|0x02; 	//cs motor2
    1c44:	85 b3       	in	r24, 0x15	; 21
    1c46:	88 7f       	andi	r24, 0xF8	; 248
    1c48:	82 60       	ori	r24, 0x02	; 2
    1c4a:	85 bb       	out	0x15, r24	; 21
				status[2]=PINA;  //Read status motor0
    1c4c:	89 b3       	in	r24, 0x19	; 25
    1c4e:	8b 83       	std	Y+3, r24	; 0x03

				if( (status[0]==0xC4||status[0]==0x84) && 
    1c50:	24 3c       	cpi	r18, 0xC4	; 196
    1c52:	11 f0       	breq	.+4      	; 0x1c58 <LM629_HW_Reset+0x96>
    1c54:	24 38       	cpi	r18, 0x84	; 132
    1c56:	c1 f5       	brne	.+112    	; 0x1cc8 <LM629_HW_Reset+0x106>
    1c58:	94 3c       	cpi	r25, 0xC4	; 196
    1c5a:	11 f0       	breq	.+4      	; 0x1c60 <LM629_HW_Reset+0x9e>
					(status[1]==0xC4||status[1]==0x84) && 
    1c5c:	94 38       	cpi	r25, 0x84	; 132
    1c5e:	a1 f5       	brne	.+104    	; 0x1cc8 <LM629_HW_Reset+0x106>
    1c60:	84 3c       	cpi	r24, 0xC4	; 196
    1c62:	11 f0       	breq	.+4      	; 0x1c68 <LM629_HW_Reset+0xa6>
					(status[2]==0xC4||status[2]==0x84) ){
    1c64:	84 38       	cpi	r24, 0x84	; 132
    1c66:	81 f5       	brne	.+96     	; 0x1cc8 <LM629_HW_Reset+0x106>
			}
		}
		
		if(step==1){
			// SRE : 외부 데이터 메모리 영역 활성화
			MCUCR = (1 << SRE) | (0 << SRW10);
    1c68:	95 be       	out	0x35, r9	; 53
		    // SRL(0) : Upper Sector로만 사용 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
    1c6a:	a0 92 6d 00 	sts	0x006D, r10
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
    1c6e:	b0 92 6c 00 	sts	0x006C, r11
    1c72:	76 01       	movw	r14, r12
    1c74:	00 e0       	ldi	r16, 0x00	; 0
    1c76:	10 e2       	ldi	r17, 0x20	; 32
    1c78:	8e 2c       	mov	r8, r14
    1c7a:	8c 18       	sub	r8, r12
			while(1){
				for(i=0;i<3;++i){
		        	WriteCommand(i, RSTI);
    1c7c:	88 2d       	mov	r24, r8
    1c7e:	6d e1       	ldi	r22, 0x1D	; 29
    1c80:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <WriteCommand>
					WriteDataTwoByte(i, 0x0000);
    1c84:	88 2d       	mov	r24, r8
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <WriteDataTwoByte>
					READ_STATUS(i, status[i]);
    1c8e:	f8 01       	movw	r30, r16
    1c90:	80 81       	ld	r24, Z
    1c92:	f7 01       	movw	r30, r14
    1c94:	81 93       	st	Z+, r24
    1c96:	7f 01       	movw	r14, r30
    1c98:	00 50       	subi	r16, 0x00	; 0
    1c9a:	1f 4f       	sbci	r17, 0xFF	; 255
		    // SRW11:SRW10(1:0) - Read/Write 신호에 2개의 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8까지만 외부 메모리 포트로 사용
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
			while(1){
				for(i=0;i<3;++i){
    1c9c:	f3 e2       	ldi	r31, 0x23	; 35
    1c9e:	00 30       	cpi	r16, 0x00	; 0
    1ca0:	1f 07       	cpc	r17, r31
    1ca2:	51 f7       	brne	.-44     	; 0x1c78 <LM629_HW_Reset+0xb6>
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	80 3c       	cpi	r24, 0xC0	; 192
    1ca8:	11 f0       	breq	.+4      	; 0x1cae <LM629_HW_Reset+0xec>
    1caa:	80 38       	cpi	r24, 0x80	; 128
    1cac:	51 f4       	brne	.+20     	; 0x1cc2 <LM629_HW_Reset+0x100>
					(status[1]==0xC0||status[1]==0x80) && 
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
				for(i=0;i<3;++i){
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
    1cb0:	80 3c       	cpi	r24, 0xC0	; 192
    1cb2:	11 f0       	breq	.+4      	; 0x1cb8 <LM629_HW_Reset+0xf6>
					(status[1]==0xC0||status[1]==0x80) && 
    1cb4:	80 38       	cpi	r24, 0x80	; 128
    1cb6:	29 f4       	brne	.+10     	; 0x1cc2 <LM629_HW_Reset+0x100>
					(status[2]==0xC0||status[2]==0x80) ){
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				if( (status[0]==0xC0||status[0]==0x80) && 
					(status[1]==0xC0||status[1]==0x80) && 
    1cba:	80 3c       	cpi	r24, 0xC0	; 192
    1cbc:	69 f0       	breq	.+26     	; 0x1cd8 <LM629_HW_Reset+0x116>
					(status[2]==0xC0||status[2]==0x80) ){
    1cbe:	80 38       	cpi	r24, 0x80	; 128
    1cc0:	59 f0       	breq	.+22     	; 0x1cd8 <LM629_HW_Reset+0x116>
					break;
				}
				else{	//다시 처음부터 LM629초기화
					step=0;	
					// SRE : 외부 데이터 메모리 영역 비활성화
					MCUCR &= ~(1 << SRE) & ~(1 << SRW10);
    1cc2:	85 b7       	in	r24, 0x35	; 53
    1cc4:	8f 73       	andi	r24, 0x3F	; 63
    1cc6:	85 bf       	out	0x35, r24	; 53
					PORTC=0x00;
    1cc8:	15 ba       	out	0x15, r1	; 21
					lcd_display_str(0,0,"Error. Restart");
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	60 e0       	ldi	r22, 0x00	; 0
    1cce:	48 e0       	ldi	r20, 0x08	; 8
    1cd0:	51 e0       	ldi	r21, 0x01	; 1
    1cd2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_display_str>
    1cd6:	98 cf       	rjmp	.-208    	; 0x1c08 <LM629_HW_Reset+0x46>
					break;
				}
			}
		}
		if(step==2){
			lcd_display_str(0,0,"Initialize success.");
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	47 e1       	ldi	r20, 0x17	; 23
    1cde:	51 e0       	ldi	r21, 0x01	; 1
    1ce0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_display_str>
    1ce4:	83 e0       	ldi	r24, 0x03	; 3
			for(i=0;i<3;++i){
				PORTB|=0x07;
    1ce6:	98 b3       	in	r25, 0x18	; 24
    1ce8:	97 60       	ori	r25, 0x07	; 7
    1cea:	98 bb       	out	0x18, r25	; 24
    1cec:	2f ef       	ldi	r18, 0xFF	; 255
    1cee:	3f eb       	ldi	r19, 0xBF	; 191
    1cf0:	46 e0       	ldi	r20, 0x06	; 6
    1cf2:	21 50       	subi	r18, 0x01	; 1
    1cf4:	30 40       	sbci	r19, 0x00	; 0
    1cf6:	40 40       	sbci	r20, 0x00	; 0
    1cf8:	e1 f7       	brne	.-8      	; 0x1cf2 <LM629_HW_Reset+0x130>
    1cfa:	00 c0       	rjmp	.+0      	; 0x1cfc <LM629_HW_Reset+0x13a>
    1cfc:	00 00       	nop
				_delay_ms(150);
				PORTB&=~0x07;
    1cfe:	98 b3       	in	r25, 0x18	; 24
    1d00:	98 7f       	andi	r25, 0xF8	; 248
    1d02:	98 bb       	out	0x18, r25	; 24
    1d04:	2f ef       	ldi	r18, 0xFF	; 255
    1d06:	3f eb       	ldi	r19, 0xBF	; 191
    1d08:	46 e0       	ldi	r20, 0x06	; 6
    1d0a:	21 50       	subi	r18, 0x01	; 1
    1d0c:	30 40       	sbci	r19, 0x00	; 0
    1d0e:	40 40       	sbci	r20, 0x00	; 0
    1d10:	e1 f7       	brne	.-8      	; 0x1d0a <LM629_HW_Reset+0x148>
    1d12:	00 c0       	rjmp	.+0      	; 0x1d14 <LM629_HW_Reset+0x152>
    1d14:	00 00       	nop
    1d16:	81 50       	subi	r24, 0x01	; 1
				}
			}
		}
		if(step==2){
			lcd_display_str(0,0,"Initialize success.");
			for(i=0;i<3;++i){
    1d18:	31 f7       	brne	.-52     	; 0x1ce6 <LM629_HW_Reset+0x124>
				PORTB|=0x07;
				_delay_ms(150);
				PORTB&=~0x07;
				_delay_ms(150);
			}
			lcd_clear_screen();
    1d1a:	0e 94 44 01 	call	0x288	; 0x288 <lcd_clear_screen>
			break;
		}
	}
}
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	ff 90       	pop	r15
    1d2e:	ef 90       	pop	r14
    1d30:	df 90       	pop	r13
    1d32:	cf 90       	pop	r12
    1d34:	bf 90       	pop	r11
    1d36:	af 90       	pop	r10
    1d38:	9f 90       	pop	r9
    1d3a:	8f 90       	pop	r8
    1d3c:	08 95       	ret

00001d3e <StartMotion>:
// Function  : 모든 모터의 모션을 시작한다.
// Parameter : 없음
// Return    : 없음
void StartMotion(void)
{
    WriteCommand(MOTOR0, STT);
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	61 e0       	ldi	r22, 0x01	; 1
    1d42:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <WriteCommand>
    WriteCommand(MOTOR1, STT);
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	61 e0       	ldi	r22, 0x01	; 1
    1d4a:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <WriteCommand>
    WriteCommand(MOTOR2, STT);
    1d4e:	82 e0       	ldi	r24, 0x02	; 2
    1d50:	61 e0       	ldi	r22, 0x01	; 1
    1d52:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <WriteCommand>
}
    1d56:	08 95       	ret

00001d58 <StopMotion>:

// Function  : 모든 모터의 모션을 정지한다.
// Parameter : 없음
// Return    : 없음
void StopMotion(uint16_t mode)
{
    1d58:	1f 93       	push	r17
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	18 2f       	mov	r17, r24
    // Motor1 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR0, LTRJ);
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	6f e1       	ldi	r22, 0x1F	; 31
    1d64:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR0, (1 << mode));
    1d68:	c1 e0       	ldi	r28, 0x01	; 1
    1d6a:	d0 e0       	ldi	r29, 0x00	; 0
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <StopMotion+0x1a>
    1d6e:	cc 0f       	add	r28, r28
    1d70:	dd 1f       	adc	r29, r29
    1d72:	1a 95       	dec	r17
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <StopMotion+0x16>
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	be 01       	movw	r22, r28
    1d7a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <WriteDataTwoByte>

    // Motor2 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR1, LTRJ);
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	6f e1       	ldi	r22, 0x1F	; 31
    1d82:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR1, (1 << mode));
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	be 01       	movw	r22, r28
    1d8a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <WriteDataTwoByte>

    // Motor3 정지
    // LTRJ 커맨드 출력
    WriteCommand(MOTOR2, LTRJ);
    1d8e:	82 e0       	ldi	r24, 0x02	; 2
    1d90:	6f e1       	ldi	r22, 0x1F	; 31
    1d92:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <WriteCommand>
    // 컨트롤 워드 출력
    WriteDataTwoByte(MOTOR2, (1 << mode));
    1d96:	82 e0       	ldi	r24, 0x02	; 2
    1d98:	be 01       	movw	r22, r28
    1d9a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <WriteDataTwoByte>

    // 모션 정지
    WriteCommand(MOTOR0, STT);
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	61 e0       	ldi	r22, 0x01	; 1
    1da2:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <WriteCommand>
    WriteCommand(MOTOR1, STT);
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	61 e0       	ldi	r22, 0x01	; 1
    1daa:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <WriteCommand>
    WriteCommand(MOTOR2, STT);
    1dae:	82 e0       	ldi	r24, 0x02	; 2
    1db0:	61 e0       	ldi	r22, 0x01	; 1
    1db2:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <WriteCommand>
}
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	1f 91       	pop	r17
    1dbc:	08 95       	ret

00001dbe <MOTOR_CTR>:

void MOTOR_CTR(long MT0,long MT1,long MT2){
    1dbe:	af 92       	push	r10
    1dc0:	bf 92       	push	r11
    1dc2:	cf 92       	push	r12
    1dc4:	df 92       	push	r13
    1dc6:	ef 92       	push	r14
    1dc8:	ff 92       	push	r15
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	2c 97       	sbiw	r28, 0x0c	; 12
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	f8 94       	cli
    1ddc:	de bf       	out	0x3e, r29	; 62
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	cd bf       	out	0x3d, r28	; 61
    1de2:	59 01       	movw	r10, r18
    1de4:	6a 01       	movw	r12, r20
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};
    1de6:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__floatsisf>
    1dea:	69 83       	std	Y+1, r22	; 0x01
    1dec:	7a 83       	std	Y+2, r23	; 0x02
    1dee:	8b 83       	std	Y+3, r24	; 0x03
    1df0:	9c 83       	std	Y+4, r25	; 0x04
    1df2:	c6 01       	movw	r24, r12
    1df4:	b5 01       	movw	r22, r10
    1df6:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__floatsisf>
    1dfa:	6d 83       	std	Y+5, r22	; 0x05
    1dfc:	7e 83       	std	Y+6, r23	; 0x06
    1dfe:	8f 83       	std	Y+7, r24	; 0x07
    1e00:	98 87       	std	Y+8, r25	; 0x08
    1e02:	c8 01       	movw	r24, r16
    1e04:	b7 01       	movw	r22, r14
    1e06:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__floatsisf>
    1e0a:	69 87       	std	Y+9, r22	; 0x09
    1e0c:	7a 87       	std	Y+10, r23	; 0x0a
    1e0e:	8b 87       	std	Y+11, r24	; 0x0b
    1e10:	9c 87       	std	Y+12, r25	; 0x0c
    1e12:	8e 01       	movw	r16, r28
    1e14:	0f 5f       	subi	r16, 0xFF	; 255
    1e16:	1f 4f       	sbci	r17, 0xFF	; 255

	for(i=0;i<3;++i){
    1e18:	ee 24       	eor	r14, r14
		
		V[i]=V[i]*0.2728;
    1e1a:	f8 01       	movw	r30, r16
    1e1c:	60 81       	ld	r22, Z
    1e1e:	71 81       	ldd	r23, Z+1	; 0x01
    1e20:	82 81       	ldd	r24, Z+2	; 0x02
    1e22:	93 81       	ldd	r25, Z+3	; 0x03
    1e24:	21 e7       	ldi	r18, 0x71	; 113
    1e26:	3c ea       	ldi	r19, 0xAC	; 172
    1e28:	4b e8       	ldi	r20, 0x8B	; 139
    1e2a:	5e e3       	ldi	r21, 0x3E	; 62
    1e2c:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
    1e30:	9b 01       	movw	r18, r22
    1e32:	ac 01       	movw	r20, r24
    1e34:	f8 01       	movw	r30, r16
    1e36:	21 93       	st	Z+, r18
    1e38:	31 93       	st	Z+, r19
    1e3a:	41 93       	st	Z+, r20
    1e3c:	51 93       	st	Z+, r21
    1e3e:	8f 01       	movw	r16, r30

		SetVelocity(i, V[i]*65536);
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e8       	ldi	r20, 0x80	; 128
    1e46:	57 e4       	ldi	r21, 0x47	; 71
    1e48:	0e 94 a3 11 	call	0x2346	; 0x2346 <__mulsf3>
    1e4c:	0e 94 bd 13 	call	0x277a	; 0x277a <__fixsfsi>
    1e50:	ab 01       	movw	r20, r22
    1e52:	bc 01       	movw	r22, r24
    1e54:	8e 2d       	mov	r24, r14
    1e56:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <SetVelocity>
void MOTOR_CTR(long MT0,long MT1,long MT2){
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};

	for(i=0;i<3;++i){
    1e5a:	e3 94       	inc	r14
    1e5c:	fe 2d       	mov	r31, r14
    1e5e:	f3 30       	cpi	r31, 0x03	; 3
    1e60:	e1 f6       	brne	.-72     	; 0x1e1a <MOTOR_CTR+0x5c>
		
		V[i]=V[i]*0.2728;

		SetVelocity(i, V[i]*65536);
	}
	StartMotion();	
    1e62:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <StartMotion>
}
    1e66:	2c 96       	adiw	r28, 0x0c	; 12
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	ff 90       	pop	r15
    1e7c:	ef 90       	pop	r14
    1e7e:	df 90       	pop	r13
    1e80:	cf 90       	pop	r12
    1e82:	bf 90       	pop	r11
    1e84:	af 90       	pop	r10
    1e86:	08 95       	ret

00001e88 <Camera_init>:


void Camera_init(void){
	unsigned char buff=0;
	while(1){	//우선순위 큰것부터
		putchar1(11);
    1e88:	8b e0       	ldi	r24, 0x0B	; 11
    1e8a:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		while(!rx1_flg); 
    1e8e:	80 91 34 02 	lds	r24, 0x0234
    1e92:	88 23       	and	r24, r24
    1e94:	e1 f3       	breq	.-8      	; 0x1e8e <Camera_init+0x6>
		buff=getchar1();
    1e96:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
		if(buff){
    1e9a:	88 23       	and	r24, r24
    1e9c:	a9 f3       	breq	.-22     	; 0x1e88 <Camera_init>
			buff=0;
			break;
		}
	}
	while(1){	//추적 할 최소 픽셀수  255픽셀
		putchar1(17);
    1e9e:	81 e1       	ldi	r24, 0x11	; 17
    1ea0:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		putchar1(255);
    1ea4:	8f ef       	ldi	r24, 0xFF	; 255
    1ea6:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
		while(!rx1_flg);
    1eaa:	80 91 34 02 	lds	r24, 0x0234
    1eae:	88 23       	and	r24, r24
    1eb0:	e1 f3       	breq	.-8      	; 0x1eaa <Camera_init+0x22>
		buff=getchar1();
    1eb2:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
		if(buff)break;
    1eb6:	88 23       	and	r24, r24
    1eb8:	91 f3       	breq	.-28     	; 0x1e9e <Camera_init+0x16>
	}
}
    1eba:	08 95       	ret

00001ebc <Camera_Cmd>:

unsigned char Camera_Cmd(unsigned char color, unsigned char cmd){
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <Camera_Cmd+0x6>
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
	
	volatile unsigned char buff=0, data=0;
    1ec6:	19 82       	std	Y+1, r1	; 0x01
    1ec8:	1a 82       	std	Y+2, r1	; 0x02
	
	data=cmd+(color*10);
    1eca:	88 0f       	add	r24, r24
    1ecc:	98 2f       	mov	r25, r24
    1ece:	99 0f       	add	r25, r25
    1ed0:	99 0f       	add	r25, r25
    1ed2:	98 0f       	add	r25, r24
    1ed4:	69 0f       	add	r22, r25
    1ed6:	6a 83       	std	Y+2, r22	; 0x02

	putchar1(data);
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	0e 94 a7 00 	call	0x14e	; 0x14e <putchar1>
	while(!rx1_flg);
    1ede:	80 91 34 02 	lds	r24, 0x0234
    1ee2:	88 23       	and	r24, r24
    1ee4:	e1 f3       	breq	.-8      	; 0x1ede <Camera_Cmd+0x22>
	buff=getchar1();
    1ee6:	0e 94 9e 00 	call	0x13c	; 0x13c <getchar1>
    1eea:	89 83       	std	Y+1, r24	; 0x01
	
	return buff;
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <Sensor_init>:
// Function  : IR, PSD 센서를 초기화
// Parameter : 없음
// Return    : 없음
void Sensor_init(void)
{
    DDRE  &= ~0x1C;
    1ef8:	82 b1       	in	r24, 0x02	; 2
    1efa:	83 7e       	andi	r24, 0xE3	; 227
    1efc:	82 b9       	out	0x02, r24	; 2
    DDRG  &= ~0x18;
    1efe:	e4 e6       	ldi	r30, 0x64	; 100
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	87 7e       	andi	r24, 0xE7	; 231
    1f06:	80 83       	st	Z, r24

    UCSR0A = 0x00;
    1f08:	1b b8       	out	0x0b, r1	; 11
    UCSR0B = 0x98;
    1f0a:	88 e9       	ldi	r24, 0x98	; 152
    1f0c:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = 0x06;
    1f0e:	86 e0       	ldi	r24, 0x06	; 6
    1f10:	80 93 95 00 	sts	0x0095, r24
    UBRR0H = 0x00;
    1f14:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 0x0F;
    1f18:	8f e0       	ldi	r24, 0x0F	; 15
    1f1a:	89 b9       	out	0x09, r24	; 9

    sei();
    1f1c:	78 94       	sei
}
    1f1e:	08 95       	ret

00001f20 <__vector_18>:

// Function  : USART를 통해 전송되는 PSD 센서값을 전역변수에 저장하는 ISR
// Parameter : 없음
// Return    : 없음
ISR(USART0_RX_vect)
{
    1f20:	1f 92       	push	r1
    1f22:	0f 92       	push	r0
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	0f 92       	push	r0
    1f28:	0b b6       	in	r0, 0x3b	; 59
    1f2a:	0f 92       	push	r0
    1f2c:	11 24       	eor	r1, r1
    1f2e:	2f 93       	push	r18
    1f30:	3f 93       	push	r19
    1f32:	8f 93       	push	r24
    1f34:	9f 93       	push	r25
    1f36:	ef 93       	push	r30
    1f38:	ff 93       	push	r31
    volatile static unsigned char rx_cnt = 0;
    volatile static unsigned char chksum = 0;
    volatile static unsigned char buf[11] = {0, };
    uint8_t rxbuf = 0, i;

    rxbuf = UDR0;
    1f3a:	9c b1       	in	r25, 0x0c	; 12
    //수신완료 및 에러 검출되지 않을시
    while(!(UCSR0A & 0xB8));
    1f3c:	8b b1       	in	r24, 0x0b	; 11
    1f3e:	88 7b       	andi	r24, 0xB8	; 184
    1f40:	e9 f3       	breq	.-6      	; 0x1f3c <__vector_18+0x1c>

    if(rxbuf == 0xFF)
    1f42:	9f 3f       	cpi	r25, 0xFF	; 255
    1f44:	21 f4       	brne	.+8      	; 0x1f4e <__vector_18+0x2e>
    {
        //시작 버퍼 수신
        rx_en = 1;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	80 93 73 02 	sts	0x0273, r24
    1f4c:	47 c0       	rjmp	.+142    	; 0x1fdc <__vector_18+0xbc>
    }
    else if(rx_en == 1)
    1f4e:	80 91 73 02 	lds	r24, 0x0273
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	09 f0       	breq	.+2      	; 0x1f58 <__vector_18+0x38>
    1f56:	42 c0       	rjmp	.+132    	; 0x1fdc <__vector_18+0xbc>
    {
        //데이터 받기
        //0번지부터 PSD0 저장
        buf[rx_cnt++] = rxbuf;
    1f58:	80 91 72 02 	lds	r24, 0x0272
    1f5c:	e8 2f       	mov	r30, r24
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	ea 59       	subi	r30, 0x9A	; 154
    1f62:	fd 4f       	sbci	r31, 0xFD	; 253
    1f64:	90 83       	st	Z, r25
    1f66:	8f 5f       	subi	r24, 0xFF	; 255
    1f68:	80 93 72 02 	sts	0x0272, r24

        if(rx_cnt > 10)
    1f6c:	80 91 72 02 	lds	r24, 0x0272
    1f70:	8b 30       	cpi	r24, 0x0B	; 11
    1f72:	a0 f1       	brcs	.+104    	; 0x1fdc <__vector_18+0xbc>
        {
            // PSD 10개, 체크섬 1개 수신 완료되면
            //플래그 리셋
            rx_en = rx_cnt = 0;
    1f74:	10 92 72 02 	sts	0x0272, r1
    1f78:	80 91 72 02 	lds	r24, 0x0272
    1f7c:	80 93 73 02 	sts	0x0273, r24
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	90 e0       	ldi	r25, 0x00	; 0

            // 체크섬 계산
            for(i = 0 ; i < 10 ; i++)
                chksum += buf[i];
    1f84:	30 91 71 02 	lds	r19, 0x0271
    1f88:	fc 01       	movw	r30, r24
    1f8a:	ea 59       	subi	r30, 0x9A	; 154
    1f8c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f8e:	20 81       	ld	r18, Z
    1f90:	23 0f       	add	r18, r19
    1f92:	20 93 71 02 	sts	0x0271, r18
    1f96:	01 96       	adiw	r24, 0x01	; 1
            // PSD 10개, 체크섬 1개 수신 완료되면
            //플래그 리셋
            rx_en = rx_cnt = 0;

            // 체크섬 계산
            for(i = 0 ; i < 10 ; i++)
    1f98:	8a 30       	cpi	r24, 0x0A	; 10
    1f9a:	91 05       	cpc	r25, r1
    1f9c:	99 f7       	brne	.-26     	; 0x1f84 <__vector_18+0x64>
                chksum += buf[i];

            //00~FE 이므로 FF나오면 +1 (오류방지)
            if(chksum == 0xFF)chksum++;
    1f9e:	80 91 71 02 	lds	r24, 0x0271
    1fa2:	8f 3f       	cpi	r24, 0xFF	; 255
    1fa4:	29 f4       	brne	.+10     	; 0x1fb0 <__vector_18+0x90>
    1fa6:	80 91 71 02 	lds	r24, 0x0271
    1faa:	8f 5f       	subi	r24, 0xFF	; 255
    1fac:	80 93 71 02 	sts	0x0271, r24

            // 체크섬이 올바른지 체크 후 맞으면 전역변수로 이동
            if(chksum == buf[10])
    1fb0:	90 91 71 02 	lds	r25, 0x0271
    1fb4:	80 91 70 02 	lds	r24, 0x0270
    1fb8:	98 17       	cp	r25, r24
    1fba:	71 f4       	brne	.+28     	; 0x1fd8 <__vector_18+0xb8>
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
                for(i = 0 ; i < 10 ; i++)
                    psd_value[i] = buf[i];
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	ea 59       	subi	r30, 0x9A	; 154
    1fc4:	fd 4f       	sbci	r31, 0xFD	; 253
    1fc6:	20 81       	ld	r18, Z
    1fc8:	fc 01       	movw	r30, r24
    1fca:	e8 58       	subi	r30, 0x88	; 136
    1fcc:	fd 4f       	sbci	r31, 0xFD	; 253
    1fce:	20 83       	st	Z, r18
    1fd0:	01 96       	adiw	r24, 0x01	; 1
            //00~FE 이므로 FF나오면 +1 (오류방지)
            if(chksum == 0xFF)chksum++;

            // 체크섬이 올바른지 체크 후 맞으면 전역변수로 이동
            if(chksum == buf[10])
                for(i = 0 ; i < 10 ; i++)
    1fd2:	8a 30       	cpi	r24, 0x0A	; 10
    1fd4:	91 05       	cpc	r25, r1
    1fd6:	a1 f7       	brne	.-24     	; 0x1fc0 <__vector_18+0xa0>
                    psd_value[i] = buf[i];

            //체크섬 리셋
            chksum = 0;
    1fd8:	10 92 71 02 	sts	0x0271, r1
    	}
    }
}
    1fdc:	ff 91       	pop	r31
    1fde:	ef 91       	pop	r30
    1fe0:	9f 91       	pop	r25
    1fe2:	8f 91       	pop	r24
    1fe4:	3f 91       	pop	r19
    1fe6:	2f 91       	pop	r18
    1fe8:	0f 90       	pop	r0
    1fea:	0b be       	out	0x3b, r0	; 59
    1fec:	0f 90       	pop	r0
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	0f 90       	pop	r0
    1ff2:	1f 90       	pop	r1
    1ff4:	18 95       	reti

00001ff6 <_fpadd_parts>:
    1ff6:	a0 e0       	ldi	r26, 0x00	; 0
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e1 e0       	ldi	r30, 0x01	; 1
    1ffc:	f0 e1       	ldi	r31, 0x10	; 16
    1ffe:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__prologue_saves__+0x8>
    2002:	fc 01       	movw	r30, r24
    2004:	ea 01       	movw	r28, r20
    2006:	80 81       	ld	r24, Z
    2008:	82 30       	cpi	r24, 0x02	; 2
    200a:	08 f4       	brcc	.+2      	; 0x200e <_fpadd_parts+0x18>
    200c:	38 c1       	rjmp	.+624    	; 0x227e <_fpadd_parts+0x288>
    200e:	db 01       	movw	r26, r22
    2010:	9c 91       	ld	r25, X
    2012:	92 30       	cpi	r25, 0x02	; 2
    2014:	08 f4       	brcc	.+2      	; 0x2018 <_fpadd_parts+0x22>
    2016:	30 c1       	rjmp	.+608    	; 0x2278 <_fpadd_parts+0x282>
    2018:	84 30       	cpi	r24, 0x04	; 4
    201a:	59 f4       	brne	.+22     	; 0x2032 <_fpadd_parts+0x3c>
    201c:	94 30       	cpi	r25, 0x04	; 4
    201e:	09 f0       	breq	.+2      	; 0x2022 <_fpadd_parts+0x2c>
    2020:	2e c1       	rjmp	.+604    	; 0x227e <_fpadd_parts+0x288>
    2022:	91 81       	ldd	r25, Z+1	; 0x01
    2024:	11 96       	adiw	r26, 0x01	; 1
    2026:	8c 91       	ld	r24, X
    2028:	11 97       	sbiw	r26, 0x01	; 1
    202a:	98 17       	cp	r25, r24
    202c:	09 f0       	breq	.+2      	; 0x2030 <_fpadd_parts+0x3a>
    202e:	21 c1       	rjmp	.+578    	; 0x2272 <_fpadd_parts+0x27c>
    2030:	26 c1       	rjmp	.+588    	; 0x227e <_fpadd_parts+0x288>
    2032:	94 30       	cpi	r25, 0x04	; 4
    2034:	09 f4       	brne	.+2      	; 0x2038 <_fpadd_parts+0x42>
    2036:	20 c1       	rjmp	.+576    	; 0x2278 <_fpadd_parts+0x282>
    2038:	92 30       	cpi	r25, 0x02	; 2
    203a:	b1 f4       	brne	.+44     	; 0x2068 <_fpadd_parts+0x72>
    203c:	82 30       	cpi	r24, 0x02	; 2
    203e:	09 f0       	breq	.+2      	; 0x2042 <_fpadd_parts+0x4c>
    2040:	1e c1       	rjmp	.+572    	; 0x227e <_fpadd_parts+0x288>
    2042:	ca 01       	movw	r24, r20
    2044:	af 01       	movw	r20, r30
    2046:	28 e0       	ldi	r18, 0x08	; 8
    2048:	da 01       	movw	r26, r20
    204a:	0d 90       	ld	r0, X+
    204c:	ad 01       	movw	r20, r26
    204e:	dc 01       	movw	r26, r24
    2050:	0d 92       	st	X+, r0
    2052:	cd 01       	movw	r24, r26
    2054:	21 50       	subi	r18, 0x01	; 1
    2056:	c1 f7       	brne	.-16     	; 0x2048 <_fpadd_parts+0x52>
    2058:	db 01       	movw	r26, r22
    205a:	11 96       	adiw	r26, 0x01	; 1
    205c:	8c 91       	ld	r24, X
    205e:	11 97       	sbiw	r26, 0x01	; 1
    2060:	91 81       	ldd	r25, Z+1	; 0x01
    2062:	89 23       	and	r24, r25
    2064:	89 83       	std	Y+1, r24	; 0x01
    2066:	0a c1       	rjmp	.+532    	; 0x227c <_fpadd_parts+0x286>
    2068:	82 30       	cpi	r24, 0x02	; 2
    206a:	09 f4       	brne	.+2      	; 0x206e <_fpadd_parts+0x78>
    206c:	05 c1       	rjmp	.+522    	; 0x2278 <_fpadd_parts+0x282>
    206e:	c2 80       	ldd	r12, Z+2	; 0x02
    2070:	d3 80       	ldd	r13, Z+3	; 0x03
    2072:	db 01       	movw	r26, r22
    2074:	12 96       	adiw	r26, 0x02	; 2
    2076:	6d 90       	ld	r6, X+
    2078:	7c 90       	ld	r7, X
    207a:	13 97       	sbiw	r26, 0x03	; 3
    207c:	24 81       	ldd	r18, Z+4	; 0x04
    207e:	35 81       	ldd	r19, Z+5	; 0x05
    2080:	46 81       	ldd	r20, Z+6	; 0x06
    2082:	57 81       	ldd	r21, Z+7	; 0x07
    2084:	14 96       	adiw	r26, 0x04	; 4
    2086:	ed 90       	ld	r14, X+
    2088:	fd 90       	ld	r15, X+
    208a:	0d 91       	ld	r16, X+
    208c:	1c 91       	ld	r17, X
    208e:	17 97       	sbiw	r26, 0x07	; 7
    2090:	c6 01       	movw	r24, r12
    2092:	86 19       	sub	r24, r6
    2094:	97 09       	sbc	r25, r7
    2096:	5c 01       	movw	r10, r24
    2098:	97 ff       	sbrs	r25, 7
    209a:	04 c0       	rjmp	.+8      	; 0x20a4 <_fpadd_parts+0xae>
    209c:	aa 24       	eor	r10, r10
    209e:	bb 24       	eor	r11, r11
    20a0:	a8 1a       	sub	r10, r24
    20a2:	b9 0a       	sbc	r11, r25
    20a4:	b0 e2       	ldi	r27, 0x20	; 32
    20a6:	ab 16       	cp	r10, r27
    20a8:	b1 04       	cpc	r11, r1
    20aa:	0c f0       	brlt	.+2      	; 0x20ae <_fpadd_parts+0xb8>
    20ac:	61 c0       	rjmp	.+194    	; 0x2170 <_fpadd_parts+0x17a>
    20ae:	18 16       	cp	r1, r24
    20b0:	19 06       	cpc	r1, r25
    20b2:	6c f5       	brge	.+90     	; 0x210e <_fpadd_parts+0x118>
    20b4:	37 01       	movw	r6, r14
    20b6:	48 01       	movw	r8, r16
    20b8:	0a 2c       	mov	r0, r10
    20ba:	04 c0       	rjmp	.+8      	; 0x20c4 <_fpadd_parts+0xce>
    20bc:	96 94       	lsr	r9
    20be:	87 94       	ror	r8
    20c0:	77 94       	ror	r7
    20c2:	67 94       	ror	r6
    20c4:	0a 94       	dec	r0
    20c6:	d2 f7       	brpl	.-12     	; 0x20bc <_fpadd_parts+0xc6>
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	a0 e0       	ldi	r26, 0x00	; 0
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	0a 2c       	mov	r0, r10
    20d2:	04 c0       	rjmp	.+8      	; 0x20dc <_fpadd_parts+0xe6>
    20d4:	88 0f       	add	r24, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	aa 1f       	adc	r26, r26
    20da:	bb 1f       	adc	r27, r27
    20dc:	0a 94       	dec	r0
    20de:	d2 f7       	brpl	.-12     	; 0x20d4 <_fpadd_parts+0xde>
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	a1 09       	sbc	r26, r1
    20e4:	b1 09       	sbc	r27, r1
    20e6:	8e 21       	and	r24, r14
    20e8:	9f 21       	and	r25, r15
    20ea:	a0 23       	and	r26, r16
    20ec:	b1 23       	and	r27, r17
    20ee:	ee 24       	eor	r14, r14
    20f0:	ff 24       	eor	r15, r15
    20f2:	87 01       	movw	r16, r14
    20f4:	e3 94       	inc	r14
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	a1 05       	cpc	r26, r1
    20fa:	b1 05       	cpc	r27, r1
    20fc:	19 f4       	brne	.+6      	; 0x2104 <_fpadd_parts+0x10e>
    20fe:	ee 24       	eor	r14, r14
    2100:	ff 24       	eor	r15, r15
    2102:	87 01       	movw	r16, r14
    2104:	e6 28       	or	r14, r6
    2106:	f7 28       	or	r15, r7
    2108:	08 29       	or	r16, r8
    210a:	19 29       	or	r17, r9
    210c:	3c c0       	rjmp	.+120    	; 0x2186 <_fpadd_parts+0x190>
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	d1 f1       	breq	.+116    	; 0x2186 <_fpadd_parts+0x190>
    2112:	ca 0c       	add	r12, r10
    2114:	db 1c       	adc	r13, r11
    2116:	39 01       	movw	r6, r18
    2118:	4a 01       	movw	r8, r20
    211a:	0a 2c       	mov	r0, r10
    211c:	04 c0       	rjmp	.+8      	; 0x2126 <_fpadd_parts+0x130>
    211e:	96 94       	lsr	r9
    2120:	87 94       	ror	r8
    2122:	77 94       	ror	r7
    2124:	67 94       	ror	r6
    2126:	0a 94       	dec	r0
    2128:	d2 f7       	brpl	.-12     	; 0x211e <_fpadd_parts+0x128>
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a0 e0       	ldi	r26, 0x00	; 0
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	0a 2c       	mov	r0, r10
    2134:	04 c0       	rjmp	.+8      	; 0x213e <_fpadd_parts+0x148>
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	aa 1f       	adc	r26, r26
    213c:	bb 1f       	adc	r27, r27
    213e:	0a 94       	dec	r0
    2140:	d2 f7       	brpl	.-12     	; 0x2136 <_fpadd_parts+0x140>
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	a1 09       	sbc	r26, r1
    2146:	b1 09       	sbc	r27, r1
    2148:	82 23       	and	r24, r18
    214a:	93 23       	and	r25, r19
    214c:	a4 23       	and	r26, r20
    214e:	b5 23       	and	r27, r21
    2150:	21 e0       	ldi	r18, 0x01	; 1
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	50 e0       	ldi	r21, 0x00	; 0
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	a1 05       	cpc	r26, r1
    215c:	b1 05       	cpc	r27, r1
    215e:	19 f4       	brne	.+6      	; 0x2166 <_fpadd_parts+0x170>
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	a9 01       	movw	r20, r18
    2166:	26 29       	or	r18, r6
    2168:	37 29       	or	r19, r7
    216a:	48 29       	or	r20, r8
    216c:	59 29       	or	r21, r9
    216e:	0b c0       	rjmp	.+22     	; 0x2186 <_fpadd_parts+0x190>
    2170:	6c 14       	cp	r6, r12
    2172:	7d 04       	cpc	r7, r13
    2174:	24 f4       	brge	.+8      	; 0x217e <_fpadd_parts+0x188>
    2176:	ee 24       	eor	r14, r14
    2178:	ff 24       	eor	r15, r15
    217a:	87 01       	movw	r16, r14
    217c:	04 c0       	rjmp	.+8      	; 0x2186 <_fpadd_parts+0x190>
    217e:	63 01       	movw	r12, r6
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	a9 01       	movw	r20, r18
    2186:	81 81       	ldd	r24, Z+1	; 0x01
    2188:	fb 01       	movw	r30, r22
    218a:	91 81       	ldd	r25, Z+1	; 0x01
    218c:	89 17       	cp	r24, r25
    218e:	09 f4       	brne	.+2      	; 0x2192 <_fpadd_parts+0x19c>
    2190:	45 c0       	rjmp	.+138    	; 0x221c <_fpadd_parts+0x226>
    2192:	88 23       	and	r24, r24
    2194:	49 f0       	breq	.+18     	; 0x21a8 <_fpadd_parts+0x1b2>
    2196:	d8 01       	movw	r26, r16
    2198:	c7 01       	movw	r24, r14
    219a:	82 1b       	sub	r24, r18
    219c:	93 0b       	sbc	r25, r19
    219e:	a4 0b       	sbc	r26, r20
    21a0:	b5 0b       	sbc	r27, r21
    21a2:	9c 01       	movw	r18, r24
    21a4:	ad 01       	movw	r20, r26
    21a6:	04 c0       	rjmp	.+8      	; 0x21b0 <_fpadd_parts+0x1ba>
    21a8:	2e 19       	sub	r18, r14
    21aa:	3f 09       	sbc	r19, r15
    21ac:	40 0b       	sbc	r20, r16
    21ae:	51 0b       	sbc	r21, r17
    21b0:	57 fd       	sbrc	r21, 7
    21b2:	04 c0       	rjmp	.+8      	; 0x21bc <_fpadd_parts+0x1c6>
    21b4:	19 82       	std	Y+1, r1	; 0x01
    21b6:	db 82       	std	Y+3, r13	; 0x03
    21b8:	ca 82       	std	Y+2, r12	; 0x02
    21ba:	0b c0       	rjmp	.+22     	; 0x21d2 <_fpadd_parts+0x1dc>
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	89 83       	std	Y+1, r24	; 0x01
    21c0:	db 82       	std	Y+3, r13	; 0x03
    21c2:	ca 82       	std	Y+2, r12	; 0x02
    21c4:	50 95       	com	r21
    21c6:	40 95       	com	r20
    21c8:	30 95       	com	r19
    21ca:	21 95       	neg	r18
    21cc:	3f 4f       	sbci	r19, 0xFF	; 255
    21ce:	4f 4f       	sbci	r20, 0xFF	; 255
    21d0:	5f 4f       	sbci	r21, 0xFF	; 255
    21d2:	2c 83       	std	Y+4, r18	; 0x04
    21d4:	3d 83       	std	Y+5, r19	; 0x05
    21d6:	4e 83       	std	Y+6, r20	; 0x06
    21d8:	5f 83       	std	Y+7, r21	; 0x07
    21da:	0d c0       	rjmp	.+26     	; 0x21f6 <_fpadd_parts+0x200>
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	aa 1f       	adc	r26, r26
    21e2:	bb 1f       	adc	r27, r27
    21e4:	8c 83       	std	Y+4, r24	; 0x04
    21e6:	9d 83       	std	Y+5, r25	; 0x05
    21e8:	ae 83       	std	Y+6, r26	; 0x06
    21ea:	bf 83       	std	Y+7, r27	; 0x07
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	9b 81       	ldd	r25, Y+3	; 0x03
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	9b 83       	std	Y+3, r25	; 0x03
    21f4:	8a 83       	std	Y+2, r24	; 0x02
    21f6:	8c 81       	ldd	r24, Y+4	; 0x04
    21f8:	9d 81       	ldd	r25, Y+5	; 0x05
    21fa:	ae 81       	ldd	r26, Y+6	; 0x06
    21fc:	bf 81       	ldd	r27, Y+7	; 0x07
    21fe:	9c 01       	movw	r18, r24
    2200:	ad 01       	movw	r20, r26
    2202:	21 50       	subi	r18, 0x01	; 1
    2204:	30 40       	sbci	r19, 0x00	; 0
    2206:	40 40       	sbci	r20, 0x00	; 0
    2208:	50 40       	sbci	r21, 0x00	; 0
    220a:	2f 3f       	cpi	r18, 0xFF	; 255
    220c:	ef ef       	ldi	r30, 0xFF	; 255
    220e:	3e 07       	cpc	r19, r30
    2210:	ef ef       	ldi	r30, 0xFF	; 255
    2212:	4e 07       	cpc	r20, r30
    2214:	ef e3       	ldi	r30, 0x3F	; 63
    2216:	5e 07       	cpc	r21, r30
    2218:	08 f3       	brcs	.-62     	; 0x21dc <_fpadd_parts+0x1e6>
    221a:	0b c0       	rjmp	.+22     	; 0x2232 <_fpadd_parts+0x23c>
    221c:	89 83       	std	Y+1, r24	; 0x01
    221e:	db 82       	std	Y+3, r13	; 0x03
    2220:	ca 82       	std	Y+2, r12	; 0x02
    2222:	2e 0d       	add	r18, r14
    2224:	3f 1d       	adc	r19, r15
    2226:	40 1f       	adc	r20, r16
    2228:	51 1f       	adc	r21, r17
    222a:	2c 83       	std	Y+4, r18	; 0x04
    222c:	3d 83       	std	Y+5, r19	; 0x05
    222e:	4e 83       	std	Y+6, r20	; 0x06
    2230:	5f 83       	std	Y+7, r21	; 0x07
    2232:	83 e0       	ldi	r24, 0x03	; 3
    2234:	88 83       	st	Y, r24
    2236:	2c 81       	ldd	r18, Y+4	; 0x04
    2238:	3d 81       	ldd	r19, Y+5	; 0x05
    223a:	4e 81       	ldd	r20, Y+6	; 0x06
    223c:	5f 81       	ldd	r21, Y+7	; 0x07
    223e:	57 ff       	sbrs	r21, 7
    2240:	1d c0       	rjmp	.+58     	; 0x227c <_fpadd_parts+0x286>
    2242:	da 01       	movw	r26, r20
    2244:	c9 01       	movw	r24, r18
    2246:	81 70       	andi	r24, 0x01	; 1
    2248:	90 70       	andi	r25, 0x00	; 0
    224a:	a0 70       	andi	r26, 0x00	; 0
    224c:	b0 70       	andi	r27, 0x00	; 0
    224e:	56 95       	lsr	r21
    2250:	47 95       	ror	r20
    2252:	37 95       	ror	r19
    2254:	27 95       	ror	r18
    2256:	82 2b       	or	r24, r18
    2258:	93 2b       	or	r25, r19
    225a:	a4 2b       	or	r26, r20
    225c:	b5 2b       	or	r27, r21
    225e:	8c 83       	std	Y+4, r24	; 0x04
    2260:	9d 83       	std	Y+5, r25	; 0x05
    2262:	ae 83       	std	Y+6, r26	; 0x06
    2264:	bf 83       	std	Y+7, r27	; 0x07
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	9b 81       	ldd	r25, Y+3	; 0x03
    226a:	01 96       	adiw	r24, 0x01	; 1
    226c:	9b 83       	std	Y+3, r25	; 0x03
    226e:	8a 83       	std	Y+2, r24	; 0x02
    2270:	05 c0       	rjmp	.+10     	; 0x227c <_fpadd_parts+0x286>
    2272:	eb e2       	ldi	r30, 0x2B	; 43
    2274:	f1 e0       	ldi	r31, 0x01	; 1
    2276:	03 c0       	rjmp	.+6      	; 0x227e <_fpadd_parts+0x288>
    2278:	fb 01       	movw	r30, r22
    227a:	01 c0       	rjmp	.+2      	; 0x227e <_fpadd_parts+0x288>
    227c:	fe 01       	movw	r30, r28
    227e:	cf 01       	movw	r24, r30
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	ee e0       	ldi	r30, 0x0E	; 14
    2286:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__epilogue_restores__+0x8>

0000228a <__addsf3>:
    228a:	a0 e2       	ldi	r26, 0x20	; 32
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	eb e4       	ldi	r30, 0x4B	; 75
    2290:	f1 e1       	ldi	r31, 0x11	; 17
    2292:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x18>
    2296:	69 83       	std	Y+1, r22	; 0x01
    2298:	7a 83       	std	Y+2, r23	; 0x02
    229a:	8b 83       	std	Y+3, r24	; 0x03
    229c:	9c 83       	std	Y+4, r25	; 0x04
    229e:	2d 83       	std	Y+5, r18	; 0x05
    22a0:	3e 83       	std	Y+6, r19	; 0x06
    22a2:	4f 83       	std	Y+7, r20	; 0x07
    22a4:	58 87       	std	Y+8, r21	; 0x08
    22a6:	89 e0       	ldi	r24, 0x09	; 9
    22a8:	e8 2e       	mov	r14, r24
    22aa:	f1 2c       	mov	r15, r1
    22ac:	ec 0e       	add	r14, r28
    22ae:	fd 1e       	adc	r15, r29
    22b0:	ce 01       	movw	r24, r28
    22b2:	01 96       	adiw	r24, 0x01	; 1
    22b4:	b7 01       	movw	r22, r14
    22b6:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__unpack_f>
    22ba:	8e 01       	movw	r16, r28
    22bc:	0f 5e       	subi	r16, 0xEF	; 239
    22be:	1f 4f       	sbci	r17, 0xFF	; 255
    22c0:	ce 01       	movw	r24, r28
    22c2:	05 96       	adiw	r24, 0x05	; 5
    22c4:	b8 01       	movw	r22, r16
    22c6:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__unpack_f>
    22ca:	c7 01       	movw	r24, r14
    22cc:	b8 01       	movw	r22, r16
    22ce:	ae 01       	movw	r20, r28
    22d0:	47 5e       	subi	r20, 0xE7	; 231
    22d2:	5f 4f       	sbci	r21, 0xFF	; 255
    22d4:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_fpadd_parts>
    22d8:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__pack_f>
    22dc:	a0 96       	adiw	r28, 0x20	; 32
    22de:	e6 e0       	ldi	r30, 0x06	; 6
    22e0:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x18>

000022e4 <__subsf3>:
    22e4:	a0 e2       	ldi	r26, 0x20	; 32
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e8 e7       	ldi	r30, 0x78	; 120
    22ea:	f1 e1       	ldi	r31, 0x11	; 17
    22ec:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x18>
    22f0:	69 83       	std	Y+1, r22	; 0x01
    22f2:	7a 83       	std	Y+2, r23	; 0x02
    22f4:	8b 83       	std	Y+3, r24	; 0x03
    22f6:	9c 83       	std	Y+4, r25	; 0x04
    22f8:	2d 83       	std	Y+5, r18	; 0x05
    22fa:	3e 83       	std	Y+6, r19	; 0x06
    22fc:	4f 83       	std	Y+7, r20	; 0x07
    22fe:	58 87       	std	Y+8, r21	; 0x08
    2300:	8e 01       	movw	r16, r28
    2302:	07 5f       	subi	r16, 0xF7	; 247
    2304:	1f 4f       	sbci	r17, 0xFF	; 255
    2306:	ce 01       	movw	r24, r28
    2308:	01 96       	adiw	r24, 0x01	; 1
    230a:	b8 01       	movw	r22, r16
    230c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__unpack_f>
    2310:	91 e1       	ldi	r25, 0x11	; 17
    2312:	e9 2e       	mov	r14, r25
    2314:	f1 2c       	mov	r15, r1
    2316:	ec 0e       	add	r14, r28
    2318:	fd 1e       	adc	r15, r29
    231a:	ce 01       	movw	r24, r28
    231c:	05 96       	adiw	r24, 0x05	; 5
    231e:	b7 01       	movw	r22, r14
    2320:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__unpack_f>
    2324:	8a 89       	ldd	r24, Y+18	; 0x12
    2326:	91 e0       	ldi	r25, 0x01	; 1
    2328:	89 27       	eor	r24, r25
    232a:	8a 8b       	std	Y+18, r24	; 0x12
    232c:	c8 01       	movw	r24, r16
    232e:	b7 01       	movw	r22, r14
    2330:	ae 01       	movw	r20, r28
    2332:	47 5e       	subi	r20, 0xE7	; 231
    2334:	5f 4f       	sbci	r21, 0xFF	; 255
    2336:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_fpadd_parts>
    233a:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__pack_f>
    233e:	a0 96       	adiw	r28, 0x20	; 32
    2340:	e6 e0       	ldi	r30, 0x06	; 6
    2342:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x18>

00002346 <__mulsf3>:
    2346:	a0 e2       	ldi	r26, 0x20	; 32
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e9 ea       	ldi	r30, 0xA9	; 169
    234c:	f1 e1       	ldi	r31, 0x11	; 17
    234e:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__prologue_saves__>
    2352:	69 83       	std	Y+1, r22	; 0x01
    2354:	7a 83       	std	Y+2, r23	; 0x02
    2356:	8b 83       	std	Y+3, r24	; 0x03
    2358:	9c 83       	std	Y+4, r25	; 0x04
    235a:	2d 83       	std	Y+5, r18	; 0x05
    235c:	3e 83       	std	Y+6, r19	; 0x06
    235e:	4f 83       	std	Y+7, r20	; 0x07
    2360:	58 87       	std	Y+8, r21	; 0x08
    2362:	ce 01       	movw	r24, r28
    2364:	01 96       	adiw	r24, 0x01	; 1
    2366:	be 01       	movw	r22, r28
    2368:	67 5f       	subi	r22, 0xF7	; 247
    236a:	7f 4f       	sbci	r23, 0xFF	; 255
    236c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__unpack_f>
    2370:	ce 01       	movw	r24, r28
    2372:	05 96       	adiw	r24, 0x05	; 5
    2374:	be 01       	movw	r22, r28
    2376:	6f 5e       	subi	r22, 0xEF	; 239
    2378:	7f 4f       	sbci	r23, 0xFF	; 255
    237a:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__unpack_f>
    237e:	99 85       	ldd	r25, Y+9	; 0x09
    2380:	92 30       	cpi	r25, 0x02	; 2
    2382:	78 f0       	brcs	.+30     	; 0x23a2 <__mulsf3+0x5c>
    2384:	89 89       	ldd	r24, Y+17	; 0x11
    2386:	82 30       	cpi	r24, 0x02	; 2
    2388:	c0 f0       	brcs	.+48     	; 0x23ba <__mulsf3+0x74>
    238a:	94 30       	cpi	r25, 0x04	; 4
    238c:	19 f4       	brne	.+6      	; 0x2394 <__mulsf3+0x4e>
    238e:	82 30       	cpi	r24, 0x02	; 2
    2390:	41 f4       	brne	.+16     	; 0x23a2 <__mulsf3+0x5c>
    2392:	cb c0       	rjmp	.+406    	; 0x252a <__mulsf3+0x1e4>
    2394:	84 30       	cpi	r24, 0x04	; 4
    2396:	19 f4       	brne	.+6      	; 0x239e <__mulsf3+0x58>
    2398:	92 30       	cpi	r25, 0x02	; 2
    239a:	79 f4       	brne	.+30     	; 0x23ba <__mulsf3+0x74>
    239c:	c6 c0       	rjmp	.+396    	; 0x252a <__mulsf3+0x1e4>
    239e:	92 30       	cpi	r25, 0x02	; 2
    23a0:	51 f4       	brne	.+20     	; 0x23b6 <__mulsf3+0x70>
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	2a 85       	ldd	r18, Y+10	; 0x0a
    23a6:	9a 89       	ldd	r25, Y+18	; 0x12
    23a8:	29 17       	cp	r18, r25
    23aa:	09 f4       	brne	.+2      	; 0x23ae <__mulsf3+0x68>
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	8a 87       	std	Y+10, r24	; 0x0a
    23b0:	ce 01       	movw	r24, r28
    23b2:	09 96       	adiw	r24, 0x09	; 9
    23b4:	bc c0       	rjmp	.+376    	; 0x252e <__mulsf3+0x1e8>
    23b6:	82 30       	cpi	r24, 0x02	; 2
    23b8:	51 f4       	brne	.+20     	; 0x23ce <__mulsf3+0x88>
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	2a 85       	ldd	r18, Y+10	; 0x0a
    23be:	9a 89       	ldd	r25, Y+18	; 0x12
    23c0:	29 17       	cp	r18, r25
    23c2:	09 f4       	brne	.+2      	; 0x23c6 <__mulsf3+0x80>
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	8a 8b       	std	Y+18, r24	; 0x12
    23c8:	ce 01       	movw	r24, r28
    23ca:	41 96       	adiw	r24, 0x11	; 17
    23cc:	b0 c0       	rjmp	.+352    	; 0x252e <__mulsf3+0x1e8>
    23ce:	6d 84       	ldd	r6, Y+13	; 0x0d
    23d0:	7e 84       	ldd	r7, Y+14	; 0x0e
    23d2:	8f 84       	ldd	r8, Y+15	; 0x0f
    23d4:	98 88       	ldd	r9, Y+16	; 0x10
    23d6:	ed 88       	ldd	r14, Y+21	; 0x15
    23d8:	fe 88       	ldd	r15, Y+22	; 0x16
    23da:	0f 89       	ldd	r16, Y+23	; 0x17
    23dc:	18 8d       	ldd	r17, Y+24	; 0x18
    23de:	e0 e2       	ldi	r30, 0x20	; 32
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	dc 01       	movw	r26, r24
    23e8:	aa 24       	eor	r10, r10
    23ea:	bb 24       	eor	r11, r11
    23ec:	65 01       	movw	r12, r10
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	a9 01       	movw	r20, r18
    23f4:	b3 01       	movw	r22, r6
    23f6:	61 70       	andi	r22, 0x01	; 1
    23f8:	70 70       	andi	r23, 0x00	; 0
    23fa:	61 15       	cp	r22, r1
    23fc:	71 05       	cpc	r23, r1
    23fe:	d1 f0       	breq	.+52     	; 0x2434 <__mulsf3+0xee>
    2400:	2e 0d       	add	r18, r14
    2402:	3f 1d       	adc	r19, r15
    2404:	40 1f       	adc	r20, r16
    2406:	51 1f       	adc	r21, r17
    2408:	15 01       	movw	r2, r10
    240a:	26 01       	movw	r4, r12
    240c:	28 0e       	add	r2, r24
    240e:	39 1e       	adc	r3, r25
    2410:	4a 1e       	adc	r4, r26
    2412:	5b 1e       	adc	r5, r27
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	a0 e0       	ldi	r26, 0x00	; 0
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	2e 15       	cp	r18, r14
    241e:	3f 05       	cpc	r19, r15
    2420:	40 07       	cpc	r20, r16
    2422:	51 07       	cpc	r21, r17
    2424:	18 f0       	brcs	.+6      	; 0x242c <__mulsf3+0xe6>
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	dc 01       	movw	r26, r24
    242c:	82 0d       	add	r24, r2
    242e:	93 1d       	adc	r25, r3
    2430:	a4 1d       	adc	r26, r4
    2432:	b5 1d       	adc	r27, r5
    2434:	aa 0c       	add	r10, r10
    2436:	bb 1c       	adc	r11, r11
    2438:	cc 1c       	adc	r12, r12
    243a:	dd 1c       	adc	r13, r13
    243c:	17 ff       	sbrs	r17, 7
    243e:	09 c0       	rjmp	.+18     	; 0x2452 <__mulsf3+0x10c>
    2440:	61 e0       	ldi	r22, 0x01	; 1
    2442:	26 2e       	mov	r2, r22
    2444:	31 2c       	mov	r3, r1
    2446:	41 2c       	mov	r4, r1
    2448:	51 2c       	mov	r5, r1
    244a:	a2 28       	or	r10, r2
    244c:	b3 28       	or	r11, r3
    244e:	c4 28       	or	r12, r4
    2450:	d5 28       	or	r13, r5
    2452:	31 97       	sbiw	r30, 0x01	; 1
    2454:	49 f0       	breq	.+18     	; 0x2468 <__mulsf3+0x122>
    2456:	ee 0c       	add	r14, r14
    2458:	ff 1c       	adc	r15, r15
    245a:	00 1f       	adc	r16, r16
    245c:	11 1f       	adc	r17, r17
    245e:	96 94       	lsr	r9
    2460:	87 94       	ror	r8
    2462:	77 94       	ror	r7
    2464:	67 94       	ror	r6
    2466:	c6 cf       	rjmp	.-116    	; 0x23f4 <__mulsf3+0xae>
    2468:	6b 89       	ldd	r22, Y+19	; 0x13
    246a:	7c 89       	ldd	r23, Y+20	; 0x14
    246c:	eb 85       	ldd	r30, Y+11	; 0x0b
    246e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2470:	6e 0f       	add	r22, r30
    2472:	7f 1f       	adc	r23, r31
    2474:	6e 5f       	subi	r22, 0xFE	; 254
    2476:	7f 4f       	sbci	r23, 0xFF	; 255
    2478:	7c 8f       	std	Y+28, r23	; 0x1c
    247a:	6b 8f       	std	Y+27, r22	; 0x1b
    247c:	61 e0       	ldi	r22, 0x01	; 1
    247e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2480:	7a 89       	ldd	r23, Y+18	; 0x12
    2482:	e7 17       	cp	r30, r23
    2484:	09 f4       	brne	.+2      	; 0x2488 <__mulsf3+0x142>
    2486:	60 e0       	ldi	r22, 0x00	; 0
    2488:	6a 8f       	std	Y+26, r22	; 0x1a
    248a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    248c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    248e:	10 c0       	rjmp	.+32     	; 0x24b0 <__mulsf3+0x16a>
    2490:	fc 01       	movw	r30, r24
    2492:	e1 70       	andi	r30, 0x01	; 1
    2494:	f0 70       	andi	r31, 0x00	; 0
    2496:	30 97       	sbiw	r30, 0x00	; 0
    2498:	29 f0       	breq	.+10     	; 0x24a4 <__mulsf3+0x15e>
    249a:	56 95       	lsr	r21
    249c:	47 95       	ror	r20
    249e:	37 95       	ror	r19
    24a0:	27 95       	ror	r18
    24a2:	50 68       	ori	r21, 0x80	; 128
    24a4:	b6 95       	lsr	r27
    24a6:	a7 95       	ror	r26
    24a8:	97 95       	ror	r25
    24aa:	87 95       	ror	r24
    24ac:	6f 5f       	subi	r22, 0xFF	; 255
    24ae:	7f 4f       	sbci	r23, 0xFF	; 255
    24b0:	b7 fd       	sbrc	r27, 7
    24b2:	ee cf       	rjmp	.-36     	; 0x2490 <__mulsf3+0x14a>
    24b4:	0c c0       	rjmp	.+24     	; 0x24ce <__mulsf3+0x188>
    24b6:	88 0f       	add	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	aa 1f       	adc	r26, r26
    24bc:	bb 1f       	adc	r27, r27
    24be:	57 fd       	sbrc	r21, 7
    24c0:	81 60       	ori	r24, 0x01	; 1
    24c2:	22 0f       	add	r18, r18
    24c4:	33 1f       	adc	r19, r19
    24c6:	44 1f       	adc	r20, r20
    24c8:	55 1f       	adc	r21, r21
    24ca:	61 50       	subi	r22, 0x01	; 1
    24cc:	70 40       	sbci	r23, 0x00	; 0
    24ce:	80 30       	cpi	r24, 0x00	; 0
    24d0:	e0 e0       	ldi	r30, 0x00	; 0
    24d2:	9e 07       	cpc	r25, r30
    24d4:	e0 e0       	ldi	r30, 0x00	; 0
    24d6:	ae 07       	cpc	r26, r30
    24d8:	e0 e4       	ldi	r30, 0x40	; 64
    24da:	be 07       	cpc	r27, r30
    24dc:	60 f3       	brcs	.-40     	; 0x24b6 <__mulsf3+0x170>
    24de:	6b 8f       	std	Y+27, r22	; 0x1b
    24e0:	7c 8f       	std	Y+28, r23	; 0x1c
    24e2:	6f e7       	ldi	r22, 0x7F	; 127
    24e4:	e6 2e       	mov	r14, r22
    24e6:	f1 2c       	mov	r15, r1
    24e8:	01 2d       	mov	r16, r1
    24ea:	11 2d       	mov	r17, r1
    24ec:	e8 22       	and	r14, r24
    24ee:	f9 22       	and	r15, r25
    24f0:	0a 23       	and	r16, r26
    24f2:	1b 23       	and	r17, r27
    24f4:	60 e4       	ldi	r22, 0x40	; 64
    24f6:	e6 16       	cp	r14, r22
    24f8:	f1 04       	cpc	r15, r1
    24fa:	01 05       	cpc	r16, r1
    24fc:	11 05       	cpc	r17, r1
    24fe:	61 f4       	brne	.+24     	; 0x2518 <__mulsf3+0x1d2>
    2500:	87 fd       	sbrc	r24, 7
    2502:	0a c0       	rjmp	.+20     	; 0x2518 <__mulsf3+0x1d2>
    2504:	21 15       	cp	r18, r1
    2506:	31 05       	cpc	r19, r1
    2508:	41 05       	cpc	r20, r1
    250a:	51 05       	cpc	r21, r1
    250c:	29 f0       	breq	.+10     	; 0x2518 <__mulsf3+0x1d2>
    250e:	80 5c       	subi	r24, 0xC0	; 192
    2510:	9f 4f       	sbci	r25, 0xFF	; 255
    2512:	af 4f       	sbci	r26, 0xFF	; 255
    2514:	bf 4f       	sbci	r27, 0xFF	; 255
    2516:	80 78       	andi	r24, 0x80	; 128
    2518:	8d 8f       	std	Y+29, r24	; 0x1d
    251a:	9e 8f       	std	Y+30, r25	; 0x1e
    251c:	af 8f       	std	Y+31, r26	; 0x1f
    251e:	b8 a3       	std	Y+32, r27	; 0x20
    2520:	83 e0       	ldi	r24, 0x03	; 3
    2522:	89 8f       	std	Y+25, r24	; 0x19
    2524:	ce 01       	movw	r24, r28
    2526:	49 96       	adiw	r24, 0x19	; 25
    2528:	02 c0       	rjmp	.+4      	; 0x252e <__mulsf3+0x1e8>
    252a:	8b e2       	ldi	r24, 0x2B	; 43
    252c:	91 e0       	ldi	r25, 0x01	; 1
    252e:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__pack_f>
    2532:	a0 96       	adiw	r28, 0x20	; 32
    2534:	e2 e1       	ldi	r30, 0x12	; 18
    2536:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__epilogue_restores__>

0000253a <__gtsf2>:
    253a:	a8 e1       	ldi	r26, 0x18	; 24
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e3 ea       	ldi	r30, 0xA3	; 163
    2540:	f2 e1       	ldi	r31, 0x12	; 18
    2542:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x18>
    2546:	69 83       	std	Y+1, r22	; 0x01
    2548:	7a 83       	std	Y+2, r23	; 0x02
    254a:	8b 83       	std	Y+3, r24	; 0x03
    254c:	9c 83       	std	Y+4, r25	; 0x04
    254e:	2d 83       	std	Y+5, r18	; 0x05
    2550:	3e 83       	std	Y+6, r19	; 0x06
    2552:	4f 83       	std	Y+7, r20	; 0x07
    2554:	58 87       	std	Y+8, r21	; 0x08
    2556:	8e 01       	movw	r16, r28
    2558:	07 5f       	subi	r16, 0xF7	; 247
    255a:	1f 4f       	sbci	r17, 0xFF	; 255
    255c:	ce 01       	movw	r24, r28
    255e:	01 96       	adiw	r24, 0x01	; 1
    2560:	b8 01       	movw	r22, r16
    2562:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__unpack_f>
    2566:	81 e1       	ldi	r24, 0x11	; 17
    2568:	e8 2e       	mov	r14, r24
    256a:	f1 2c       	mov	r15, r1
    256c:	ec 0e       	add	r14, r28
    256e:	fd 1e       	adc	r15, r29
    2570:	ce 01       	movw	r24, r28
    2572:	05 96       	adiw	r24, 0x05	; 5
    2574:	b7 01       	movw	r22, r14
    2576:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__unpack_f>
    257a:	89 85       	ldd	r24, Y+9	; 0x09
    257c:	82 30       	cpi	r24, 0x02	; 2
    257e:	40 f0       	brcs	.+16     	; 0x2590 <__gtsf2+0x56>
    2580:	89 89       	ldd	r24, Y+17	; 0x11
    2582:	82 30       	cpi	r24, 0x02	; 2
    2584:	28 f0       	brcs	.+10     	; 0x2590 <__gtsf2+0x56>
    2586:	c8 01       	movw	r24, r16
    2588:	b7 01       	movw	r22, r14
    258a:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__fpcmp_parts_f>
    258e:	01 c0       	rjmp	.+2      	; 0x2592 <__gtsf2+0x58>
    2590:	8f ef       	ldi	r24, 0xFF	; 255
    2592:	68 96       	adiw	r28, 0x18	; 24
    2594:	e6 e0       	ldi	r30, 0x06	; 6
    2596:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x18>

0000259a <__gesf2>:
    259a:	a8 e1       	ldi	r26, 0x18	; 24
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	e3 ed       	ldi	r30, 0xD3	; 211
    25a0:	f2 e1       	ldi	r31, 0x12	; 18
    25a2:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x18>
    25a6:	69 83       	std	Y+1, r22	; 0x01
    25a8:	7a 83       	std	Y+2, r23	; 0x02
    25aa:	8b 83       	std	Y+3, r24	; 0x03
    25ac:	9c 83       	std	Y+4, r25	; 0x04
    25ae:	2d 83       	std	Y+5, r18	; 0x05
    25b0:	3e 83       	std	Y+6, r19	; 0x06
    25b2:	4f 83       	std	Y+7, r20	; 0x07
    25b4:	58 87       	std	Y+8, r21	; 0x08
    25b6:	8e 01       	movw	r16, r28
    25b8:	07 5f       	subi	r16, 0xF7	; 247
    25ba:	1f 4f       	sbci	r17, 0xFF	; 255
    25bc:	ce 01       	movw	r24, r28
    25be:	01 96       	adiw	r24, 0x01	; 1
    25c0:	b8 01       	movw	r22, r16
    25c2:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__unpack_f>
    25c6:	81 e1       	ldi	r24, 0x11	; 17
    25c8:	e8 2e       	mov	r14, r24
    25ca:	f1 2c       	mov	r15, r1
    25cc:	ec 0e       	add	r14, r28
    25ce:	fd 1e       	adc	r15, r29
    25d0:	ce 01       	movw	r24, r28
    25d2:	05 96       	adiw	r24, 0x05	; 5
    25d4:	b7 01       	movw	r22, r14
    25d6:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__unpack_f>
    25da:	89 85       	ldd	r24, Y+9	; 0x09
    25dc:	82 30       	cpi	r24, 0x02	; 2
    25de:	40 f0       	brcs	.+16     	; 0x25f0 <__gesf2+0x56>
    25e0:	89 89       	ldd	r24, Y+17	; 0x11
    25e2:	82 30       	cpi	r24, 0x02	; 2
    25e4:	28 f0       	brcs	.+10     	; 0x25f0 <__gesf2+0x56>
    25e6:	c8 01       	movw	r24, r16
    25e8:	b7 01       	movw	r22, r14
    25ea:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__fpcmp_parts_f>
    25ee:	01 c0       	rjmp	.+2      	; 0x25f2 <__gesf2+0x58>
    25f0:	8f ef       	ldi	r24, 0xFF	; 255
    25f2:	68 96       	adiw	r28, 0x18	; 24
    25f4:	e6 e0       	ldi	r30, 0x06	; 6
    25f6:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x18>

000025fa <__ltsf2>:
    25fa:	a8 e1       	ldi	r26, 0x18	; 24
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e3 e0       	ldi	r30, 0x03	; 3
    2600:	f3 e1       	ldi	r31, 0x13	; 19
    2602:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x18>
    2606:	69 83       	std	Y+1, r22	; 0x01
    2608:	7a 83       	std	Y+2, r23	; 0x02
    260a:	8b 83       	std	Y+3, r24	; 0x03
    260c:	9c 83       	std	Y+4, r25	; 0x04
    260e:	2d 83       	std	Y+5, r18	; 0x05
    2610:	3e 83       	std	Y+6, r19	; 0x06
    2612:	4f 83       	std	Y+7, r20	; 0x07
    2614:	58 87       	std	Y+8, r21	; 0x08
    2616:	8e 01       	movw	r16, r28
    2618:	07 5f       	subi	r16, 0xF7	; 247
    261a:	1f 4f       	sbci	r17, 0xFF	; 255
    261c:	ce 01       	movw	r24, r28
    261e:	01 96       	adiw	r24, 0x01	; 1
    2620:	b8 01       	movw	r22, r16
    2622:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__unpack_f>
    2626:	81 e1       	ldi	r24, 0x11	; 17
    2628:	e8 2e       	mov	r14, r24
    262a:	f1 2c       	mov	r15, r1
    262c:	ec 0e       	add	r14, r28
    262e:	fd 1e       	adc	r15, r29
    2630:	ce 01       	movw	r24, r28
    2632:	05 96       	adiw	r24, 0x05	; 5
    2634:	b7 01       	movw	r22, r14
    2636:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__unpack_f>
    263a:	89 85       	ldd	r24, Y+9	; 0x09
    263c:	82 30       	cpi	r24, 0x02	; 2
    263e:	40 f0       	brcs	.+16     	; 0x2650 <__ltsf2+0x56>
    2640:	89 89       	ldd	r24, Y+17	; 0x11
    2642:	82 30       	cpi	r24, 0x02	; 2
    2644:	28 f0       	brcs	.+10     	; 0x2650 <__ltsf2+0x56>
    2646:	c8 01       	movw	r24, r16
    2648:	b7 01       	movw	r22, r14
    264a:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__fpcmp_parts_f>
    264e:	01 c0       	rjmp	.+2      	; 0x2652 <__ltsf2+0x58>
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	68 96       	adiw	r28, 0x18	; 24
    2654:	e6 e0       	ldi	r30, 0x06	; 6
    2656:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x18>

0000265a <__lesf2>:
    265a:	a8 e1       	ldi	r26, 0x18	; 24
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	e3 e3       	ldi	r30, 0x33	; 51
    2660:	f3 e1       	ldi	r31, 0x13	; 19
    2662:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x18>
    2666:	69 83       	std	Y+1, r22	; 0x01
    2668:	7a 83       	std	Y+2, r23	; 0x02
    266a:	8b 83       	std	Y+3, r24	; 0x03
    266c:	9c 83       	std	Y+4, r25	; 0x04
    266e:	2d 83       	std	Y+5, r18	; 0x05
    2670:	3e 83       	std	Y+6, r19	; 0x06
    2672:	4f 83       	std	Y+7, r20	; 0x07
    2674:	58 87       	std	Y+8, r21	; 0x08
    2676:	8e 01       	movw	r16, r28
    2678:	07 5f       	subi	r16, 0xF7	; 247
    267a:	1f 4f       	sbci	r17, 0xFF	; 255
    267c:	ce 01       	movw	r24, r28
    267e:	01 96       	adiw	r24, 0x01	; 1
    2680:	b8 01       	movw	r22, r16
    2682:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__unpack_f>
    2686:	81 e1       	ldi	r24, 0x11	; 17
    2688:	e8 2e       	mov	r14, r24
    268a:	f1 2c       	mov	r15, r1
    268c:	ec 0e       	add	r14, r28
    268e:	fd 1e       	adc	r15, r29
    2690:	ce 01       	movw	r24, r28
    2692:	05 96       	adiw	r24, 0x05	; 5
    2694:	b7 01       	movw	r22, r14
    2696:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__unpack_f>
    269a:	89 85       	ldd	r24, Y+9	; 0x09
    269c:	82 30       	cpi	r24, 0x02	; 2
    269e:	40 f0       	brcs	.+16     	; 0x26b0 <__lesf2+0x56>
    26a0:	89 89       	ldd	r24, Y+17	; 0x11
    26a2:	82 30       	cpi	r24, 0x02	; 2
    26a4:	28 f0       	brcs	.+10     	; 0x26b0 <__lesf2+0x56>
    26a6:	c8 01       	movw	r24, r16
    26a8:	b7 01       	movw	r22, r14
    26aa:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__fpcmp_parts_f>
    26ae:	01 c0       	rjmp	.+2      	; 0x26b2 <__lesf2+0x58>
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	68 96       	adiw	r28, 0x18	; 24
    26b4:	e6 e0       	ldi	r30, 0x06	; 6
    26b6:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x18>

000026ba <__floatsisf>:
    26ba:	a8 e0       	ldi	r26, 0x08	; 8
    26bc:	b0 e0       	ldi	r27, 0x00	; 0
    26be:	e3 e6       	ldi	r30, 0x63	; 99
    26c0:	f3 e1       	ldi	r31, 0x13	; 19
    26c2:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x18>
    26c6:	7b 01       	movw	r14, r22
    26c8:	8c 01       	movw	r16, r24
    26ca:	83 e0       	ldi	r24, 0x03	; 3
    26cc:	89 83       	std	Y+1, r24	; 0x01
    26ce:	d8 01       	movw	r26, r16
    26d0:	c7 01       	movw	r24, r14
    26d2:	88 27       	eor	r24, r24
    26d4:	b7 fd       	sbrc	r27, 7
    26d6:	83 95       	inc	r24
    26d8:	99 27       	eor	r25, r25
    26da:	aa 27       	eor	r26, r26
    26dc:	bb 27       	eor	r27, r27
    26de:	28 2f       	mov	r18, r24
    26e0:	8a 83       	std	Y+2, r24	; 0x02
    26e2:	e1 14       	cp	r14, r1
    26e4:	f1 04       	cpc	r15, r1
    26e6:	01 05       	cpc	r16, r1
    26e8:	11 05       	cpc	r17, r1
    26ea:	19 f4       	brne	.+6      	; 0x26f2 <__floatsisf+0x38>
    26ec:	82 e0       	ldi	r24, 0x02	; 2
    26ee:	89 83       	std	Y+1, r24	; 0x01
    26f0:	37 c0       	rjmp	.+110    	; 0x2760 <__floatsisf+0xa6>
    26f2:	8e e1       	ldi	r24, 0x1E	; 30
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	9c 83       	std	Y+4, r25	; 0x04
    26f8:	8b 83       	std	Y+3, r24	; 0x03
    26fa:	22 23       	and	r18, r18
    26fc:	89 f0       	breq	.+34     	; 0x2720 <__floatsisf+0x66>
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	e8 16       	cp	r14, r24
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	f8 06       	cpc	r15, r24
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	08 07       	cpc	r16, r24
    270a:	80 e8       	ldi	r24, 0x80	; 128
    270c:	18 07       	cpc	r17, r24
    270e:	69 f1       	breq	.+90     	; 0x276a <__floatsisf+0xb0>
    2710:	10 95       	com	r17
    2712:	00 95       	com	r16
    2714:	f0 94       	com	r15
    2716:	e0 94       	com	r14
    2718:	e1 1c       	adc	r14, r1
    271a:	f1 1c       	adc	r15, r1
    271c:	01 1d       	adc	r16, r1
    271e:	11 1d       	adc	r17, r1
    2720:	ed 82       	std	Y+5, r14	; 0x05
    2722:	fe 82       	std	Y+6, r15	; 0x06
    2724:	0f 83       	std	Y+7, r16	; 0x07
    2726:	18 87       	std	Y+8, r17	; 0x08
    2728:	c8 01       	movw	r24, r16
    272a:	b7 01       	movw	r22, r14
    272c:	0e 94 87 14 	call	0x290e	; 0x290e <__clzsi2>
    2730:	9c 01       	movw	r18, r24
    2732:	21 50       	subi	r18, 0x01	; 1
    2734:	30 40       	sbci	r19, 0x00	; 0
    2736:	12 16       	cp	r1, r18
    2738:	13 06       	cpc	r1, r19
    273a:	94 f4       	brge	.+36     	; 0x2760 <__floatsisf+0xa6>
    273c:	02 2e       	mov	r0, r18
    273e:	04 c0       	rjmp	.+8      	; 0x2748 <__floatsisf+0x8e>
    2740:	ee 0c       	add	r14, r14
    2742:	ff 1c       	adc	r15, r15
    2744:	00 1f       	adc	r16, r16
    2746:	11 1f       	adc	r17, r17
    2748:	0a 94       	dec	r0
    274a:	d2 f7       	brpl	.-12     	; 0x2740 <__floatsisf+0x86>
    274c:	ed 82       	std	Y+5, r14	; 0x05
    274e:	fe 82       	std	Y+6, r15	; 0x06
    2750:	0f 83       	std	Y+7, r16	; 0x07
    2752:	18 87       	std	Y+8, r17	; 0x08
    2754:	8e e1       	ldi	r24, 0x1E	; 30
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	82 1b       	sub	r24, r18
    275a:	93 0b       	sbc	r25, r19
    275c:	9c 83       	std	Y+4, r25	; 0x04
    275e:	8b 83       	std	Y+3, r24	; 0x03
    2760:	ce 01       	movw	r24, r28
    2762:	01 96       	adiw	r24, 0x01	; 1
    2764:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__pack_f>
    2768:	04 c0       	rjmp	.+8      	; 0x2772 <__floatsisf+0xb8>
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	70 e0       	ldi	r23, 0x00	; 0
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	9f ec       	ldi	r25, 0xCF	; 207
    2772:	28 96       	adiw	r28, 0x08	; 8
    2774:	e6 e0       	ldi	r30, 0x06	; 6
    2776:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x18>

0000277a <__fixsfsi>:
    277a:	ac e0       	ldi	r26, 0x0C	; 12
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e3 ec       	ldi	r30, 0xC3	; 195
    2780:	f3 e1       	ldi	r31, 0x13	; 19
    2782:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__+0x20>
    2786:	69 83       	std	Y+1, r22	; 0x01
    2788:	7a 83       	std	Y+2, r23	; 0x02
    278a:	8b 83       	std	Y+3, r24	; 0x03
    278c:	9c 83       	std	Y+4, r25	; 0x04
    278e:	ce 01       	movw	r24, r28
    2790:	01 96       	adiw	r24, 0x01	; 1
    2792:	be 01       	movw	r22, r28
    2794:	6b 5f       	subi	r22, 0xFB	; 251
    2796:	7f 4f       	sbci	r23, 0xFF	; 255
    2798:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__unpack_f>
    279c:	8d 81       	ldd	r24, Y+5	; 0x05
    279e:	82 30       	cpi	r24, 0x02	; 2
    27a0:	81 f1       	breq	.+96     	; 0x2802 <__fixsfsi+0x88>
    27a2:	82 30       	cpi	r24, 0x02	; 2
    27a4:	70 f1       	brcs	.+92     	; 0x2802 <__fixsfsi+0x88>
    27a6:	84 30       	cpi	r24, 0x04	; 4
    27a8:	21 f4       	brne	.+8      	; 0x27b2 <__fixsfsi+0x38>
    27aa:	8e 81       	ldd	r24, Y+6	; 0x06
    27ac:	88 23       	and	r24, r24
    27ae:	69 f1       	breq	.+90     	; 0x280a <__fixsfsi+0x90>
    27b0:	0a c0       	rjmp	.+20     	; 0x27c6 <__fixsfsi+0x4c>
    27b2:	2f 81       	ldd	r18, Y+7	; 0x07
    27b4:	38 85       	ldd	r19, Y+8	; 0x08
    27b6:	37 fd       	sbrc	r19, 7
    27b8:	24 c0       	rjmp	.+72     	; 0x2802 <__fixsfsi+0x88>
    27ba:	6e 81       	ldd	r22, Y+6	; 0x06
    27bc:	2f 31       	cpi	r18, 0x1F	; 31
    27be:	31 05       	cpc	r19, r1
    27c0:	3c f0       	brlt	.+14     	; 0x27d0 <__fixsfsi+0x56>
    27c2:	66 23       	and	r22, r22
    27c4:	11 f1       	breq	.+68     	; 0x280a <__fixsfsi+0x90>
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	40 e0       	ldi	r20, 0x00	; 0
    27cc:	50 e8       	ldi	r21, 0x80	; 128
    27ce:	21 c0       	rjmp	.+66     	; 0x2812 <__fixsfsi+0x98>
    27d0:	8e e1       	ldi	r24, 0x1E	; 30
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	82 1b       	sub	r24, r18
    27d6:	93 0b       	sbc	r25, r19
    27d8:	29 85       	ldd	r18, Y+9	; 0x09
    27da:	3a 85       	ldd	r19, Y+10	; 0x0a
    27dc:	4b 85       	ldd	r20, Y+11	; 0x0b
    27de:	5c 85       	ldd	r21, Y+12	; 0x0c
    27e0:	04 c0       	rjmp	.+8      	; 0x27ea <__fixsfsi+0x70>
    27e2:	56 95       	lsr	r21
    27e4:	47 95       	ror	r20
    27e6:	37 95       	ror	r19
    27e8:	27 95       	ror	r18
    27ea:	8a 95       	dec	r24
    27ec:	d2 f7       	brpl	.-12     	; 0x27e2 <__fixsfsi+0x68>
    27ee:	66 23       	and	r22, r22
    27f0:	81 f0       	breq	.+32     	; 0x2812 <__fixsfsi+0x98>
    27f2:	50 95       	com	r21
    27f4:	40 95       	com	r20
    27f6:	30 95       	com	r19
    27f8:	21 95       	neg	r18
    27fa:	3f 4f       	sbci	r19, 0xFF	; 255
    27fc:	4f 4f       	sbci	r20, 0xFF	; 255
    27fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2800:	08 c0       	rjmp	.+16     	; 0x2812 <__fixsfsi+0x98>
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	a9 01       	movw	r20, r18
    2808:	04 c0       	rjmp	.+8      	; 0x2812 <__fixsfsi+0x98>
    280a:	2f ef       	ldi	r18, 0xFF	; 255
    280c:	3f ef       	ldi	r19, 0xFF	; 255
    280e:	4f ef       	ldi	r20, 0xFF	; 255
    2810:	5f e7       	ldi	r21, 0x7F	; 127
    2812:	b9 01       	movw	r22, r18
    2814:	ca 01       	movw	r24, r20
    2816:	2c 96       	adiw	r28, 0x0c	; 12
    2818:	e2 e0       	ldi	r30, 0x02	; 2
    281a:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__+0x20>

0000281e <__floatunsisf>:
    281e:	a8 e0       	ldi	r26, 0x08	; 8
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	e5 e1       	ldi	r30, 0x15	; 21
    2824:	f4 e1       	ldi	r31, 0x14	; 20
    2826:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <__prologue_saves__+0x14>
    282a:	7b 01       	movw	r14, r22
    282c:	8c 01       	movw	r16, r24
    282e:	1a 82       	std	Y+2, r1	; 0x02
    2830:	61 15       	cp	r22, r1
    2832:	71 05       	cpc	r23, r1
    2834:	81 05       	cpc	r24, r1
    2836:	91 05       	cpc	r25, r1
    2838:	19 f4       	brne	.+6      	; 0x2840 <__floatunsisf+0x22>
    283a:	82 e0       	ldi	r24, 0x02	; 2
    283c:	89 83       	std	Y+1, r24	; 0x01
    283e:	5f c0       	rjmp	.+190    	; 0x28fe <__floatunsisf+0xe0>
    2840:	83 e0       	ldi	r24, 0x03	; 3
    2842:	89 83       	std	Y+1, r24	; 0x01
    2844:	8e e1       	ldi	r24, 0x1E	; 30
    2846:	c8 2e       	mov	r12, r24
    2848:	d1 2c       	mov	r13, r1
    284a:	dc 82       	std	Y+4, r13	; 0x04
    284c:	cb 82       	std	Y+3, r12	; 0x03
    284e:	ed 82       	std	Y+5, r14	; 0x05
    2850:	fe 82       	std	Y+6, r15	; 0x06
    2852:	0f 83       	std	Y+7, r16	; 0x07
    2854:	18 87       	std	Y+8, r17	; 0x08
    2856:	c8 01       	movw	r24, r16
    2858:	b7 01       	movw	r22, r14
    285a:	0e 94 87 14 	call	0x290e	; 0x290e <__clzsi2>
    285e:	fc 01       	movw	r30, r24
    2860:	31 97       	sbiw	r30, 0x01	; 1
    2862:	f7 ff       	sbrs	r31, 7
    2864:	3a c0       	rjmp	.+116    	; 0x28da <__floatunsisf+0xbc>
    2866:	aa 27       	eor	r26, r26
    2868:	bb 27       	eor	r27, r27
    286a:	ae 1b       	sub	r26, r30
    286c:	bf 0b       	sbc	r27, r31
    286e:	21 e0       	ldi	r18, 0x01	; 1
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	40 e0       	ldi	r20, 0x00	; 0
    2874:	50 e0       	ldi	r21, 0x00	; 0
    2876:	0a 2e       	mov	r0, r26
    2878:	04 c0       	rjmp	.+8      	; 0x2882 <__floatunsisf+0x64>
    287a:	22 0f       	add	r18, r18
    287c:	33 1f       	adc	r19, r19
    287e:	44 1f       	adc	r20, r20
    2880:	55 1f       	adc	r21, r21
    2882:	0a 94       	dec	r0
    2884:	d2 f7       	brpl	.-12     	; 0x287a <__floatunsisf+0x5c>
    2886:	21 50       	subi	r18, 0x01	; 1
    2888:	30 40       	sbci	r19, 0x00	; 0
    288a:	40 40       	sbci	r20, 0x00	; 0
    288c:	50 40       	sbci	r21, 0x00	; 0
    288e:	2e 21       	and	r18, r14
    2890:	3f 21       	and	r19, r15
    2892:	40 23       	and	r20, r16
    2894:	51 23       	and	r21, r17
    2896:	61 e0       	ldi	r22, 0x01	; 1
    2898:	70 e0       	ldi	r23, 0x00	; 0
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	21 15       	cp	r18, r1
    28a0:	31 05       	cpc	r19, r1
    28a2:	41 05       	cpc	r20, r1
    28a4:	51 05       	cpc	r21, r1
    28a6:	19 f4       	brne	.+6      	; 0x28ae <__floatunsisf+0x90>
    28a8:	60 e0       	ldi	r22, 0x00	; 0
    28aa:	70 e0       	ldi	r23, 0x00	; 0
    28ac:	cb 01       	movw	r24, r22
    28ae:	04 c0       	rjmp	.+8      	; 0x28b8 <__floatunsisf+0x9a>
    28b0:	16 95       	lsr	r17
    28b2:	07 95       	ror	r16
    28b4:	f7 94       	ror	r15
    28b6:	e7 94       	ror	r14
    28b8:	aa 95       	dec	r26
    28ba:	d2 f7       	brpl	.-12     	; 0x28b0 <__floatunsisf+0x92>
    28bc:	e6 2a       	or	r14, r22
    28be:	f7 2a       	or	r15, r23
    28c0:	08 2b       	or	r16, r24
    28c2:	19 2b       	or	r17, r25
    28c4:	ed 82       	std	Y+5, r14	; 0x05
    28c6:	fe 82       	std	Y+6, r15	; 0x06
    28c8:	0f 83       	std	Y+7, r16	; 0x07
    28ca:	18 87       	std	Y+8, r17	; 0x08
    28cc:	8e e1       	ldi	r24, 0x1E	; 30
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	8e 1b       	sub	r24, r30
    28d2:	9f 0b       	sbc	r25, r31
    28d4:	9c 83       	std	Y+4, r25	; 0x04
    28d6:	8b 83       	std	Y+3, r24	; 0x03
    28d8:	12 c0       	rjmp	.+36     	; 0x28fe <__floatunsisf+0xe0>
    28da:	30 97       	sbiw	r30, 0x00	; 0
    28dc:	81 f0       	breq	.+32     	; 0x28fe <__floatunsisf+0xe0>
    28de:	0e 2e       	mov	r0, r30
    28e0:	04 c0       	rjmp	.+8      	; 0x28ea <__floatunsisf+0xcc>
    28e2:	ee 0c       	add	r14, r14
    28e4:	ff 1c       	adc	r15, r15
    28e6:	00 1f       	adc	r16, r16
    28e8:	11 1f       	adc	r17, r17
    28ea:	0a 94       	dec	r0
    28ec:	d2 f7       	brpl	.-12     	; 0x28e2 <__floatunsisf+0xc4>
    28ee:	ed 82       	std	Y+5, r14	; 0x05
    28f0:	fe 82       	std	Y+6, r15	; 0x06
    28f2:	0f 83       	std	Y+7, r16	; 0x07
    28f4:	18 87       	std	Y+8, r17	; 0x08
    28f6:	ce 1a       	sub	r12, r30
    28f8:	df 0a       	sbc	r13, r31
    28fa:	dc 82       	std	Y+4, r13	; 0x04
    28fc:	cb 82       	std	Y+3, r12	; 0x03
    28fe:	ce 01       	movw	r24, r28
    2900:	01 96       	adiw	r24, 0x01	; 1
    2902:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__pack_f>
    2906:	28 96       	adiw	r28, 0x08	; 8
    2908:	e8 e0       	ldi	r30, 0x08	; 8
    290a:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__epilogue_restores__+0x14>

0000290e <__clzsi2>:
    290e:	af 92       	push	r10
    2910:	bf 92       	push	r11
    2912:	cf 92       	push	r12
    2914:	df 92       	push	r13
    2916:	ef 92       	push	r14
    2918:	ff 92       	push	r15
    291a:	0f 93       	push	r16
    291c:	1f 93       	push	r17
    291e:	7b 01       	movw	r14, r22
    2920:	8c 01       	movw	r16, r24
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	e8 16       	cp	r14, r24
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	f8 06       	cpc	r15, r24
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	08 07       	cpc	r16, r24
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	18 07       	cpc	r17, r24
    2932:	58 f4       	brcc	.+22     	; 0x294a <__clzsi2+0x3c>
    2934:	ef ef       	ldi	r30, 0xFF	; 255
    2936:	ee 16       	cp	r14, r30
    2938:	f1 04       	cpc	r15, r1
    293a:	01 05       	cpc	r16, r1
    293c:	11 05       	cpc	r17, r1
    293e:	09 f0       	breq	.+2      	; 0x2942 <__clzsi2+0x34>
    2940:	90 f4       	brcc	.+36     	; 0x2966 <__clzsi2+0x58>
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	dc 01       	movw	r26, r24
    2948:	17 c0       	rjmp	.+46     	; 0x2978 <__clzsi2+0x6a>
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	ef 16       	cp	r14, r31
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	ff 06       	cpc	r15, r31
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	0f 07       	cpc	r16, r31
    2956:	f1 e0       	ldi	r31, 0x01	; 1
    2958:	1f 07       	cpc	r17, r31
    295a:	50 f4       	brcc	.+20     	; 0x2970 <__clzsi2+0x62>
    295c:	80 e1       	ldi	r24, 0x10	; 16
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	a0 e0       	ldi	r26, 0x00	; 0
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	09 c0       	rjmp	.+18     	; 0x2978 <__clzsi2+0x6a>
    2966:	88 e0       	ldi	r24, 0x08	; 8
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	a0 e0       	ldi	r26, 0x00	; 0
    296c:	b0 e0       	ldi	r27, 0x00	; 0
    296e:	04 c0       	rjmp	.+8      	; 0x2978 <__clzsi2+0x6a>
    2970:	88 e1       	ldi	r24, 0x18	; 24
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	a0 e0       	ldi	r26, 0x00	; 0
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	20 e2       	ldi	r18, 0x20	; 32
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	40 e0       	ldi	r20, 0x00	; 0
    297e:	50 e0       	ldi	r21, 0x00	; 0
    2980:	28 1b       	sub	r18, r24
    2982:	39 0b       	sbc	r19, r25
    2984:	4a 0b       	sbc	r20, r26
    2986:	5b 0b       	sbc	r21, r27
    2988:	57 01       	movw	r10, r14
    298a:	68 01       	movw	r12, r16
    298c:	04 c0       	rjmp	.+8      	; 0x2996 <__clzsi2+0x88>
    298e:	d6 94       	lsr	r13
    2990:	c7 94       	ror	r12
    2992:	b7 94       	ror	r11
    2994:	a7 94       	ror	r10
    2996:	8a 95       	dec	r24
    2998:	d2 f7       	brpl	.-12     	; 0x298e <__clzsi2+0x80>
    299a:	d6 01       	movw	r26, r12
    299c:	c5 01       	movw	r24, r10
    299e:	8d 5c       	subi	r24, 0xCD	; 205
    29a0:	9e 4f       	sbci	r25, 0xFE	; 254
    29a2:	fc 01       	movw	r30, r24
    29a4:	80 81       	ld	r24, Z
    29a6:	28 1b       	sub	r18, r24
    29a8:	31 09       	sbc	r19, r1
    29aa:	41 09       	sbc	r20, r1
    29ac:	51 09       	sbc	r21, r1
    29ae:	c9 01       	movw	r24, r18
    29b0:	1f 91       	pop	r17
    29b2:	0f 91       	pop	r16
    29b4:	ff 90       	pop	r15
    29b6:	ef 90       	pop	r14
    29b8:	df 90       	pop	r13
    29ba:	cf 90       	pop	r12
    29bc:	bf 90       	pop	r11
    29be:	af 90       	pop	r10
    29c0:	08 95       	ret

000029c2 <__pack_f>:
    29c2:	ef 92       	push	r14
    29c4:	ff 92       	push	r15
    29c6:	0f 93       	push	r16
    29c8:	1f 93       	push	r17
    29ca:	cf 93       	push	r28
    29cc:	df 93       	push	r29
    29ce:	fc 01       	movw	r30, r24
    29d0:	24 81       	ldd	r18, Z+4	; 0x04
    29d2:	35 81       	ldd	r19, Z+5	; 0x05
    29d4:	46 81       	ldd	r20, Z+6	; 0x06
    29d6:	57 81       	ldd	r21, Z+7	; 0x07
    29d8:	61 81       	ldd	r22, Z+1	; 0x01
    29da:	80 81       	ld	r24, Z
    29dc:	82 30       	cpi	r24, 0x02	; 2
    29de:	20 f4       	brcc	.+8      	; 0x29e8 <__pack_f+0x26>
    29e0:	40 61       	ori	r20, 0x10	; 16
    29e2:	ef ef       	ldi	r30, 0xFF	; 255
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	a3 c0       	rjmp	.+326    	; 0x2b2e <__pack_f+0x16c>
    29e8:	84 30       	cpi	r24, 0x04	; 4
    29ea:	09 f4       	brne	.+2      	; 0x29ee <__pack_f+0x2c>
    29ec:	9b c0       	rjmp	.+310    	; 0x2b24 <__pack_f+0x162>
    29ee:	82 30       	cpi	r24, 0x02	; 2
    29f0:	09 f4       	brne	.+2      	; 0x29f4 <__pack_f+0x32>
    29f2:	92 c0       	rjmp	.+292    	; 0x2b18 <__pack_f+0x156>
    29f4:	21 15       	cp	r18, r1
    29f6:	31 05       	cpc	r19, r1
    29f8:	41 05       	cpc	r20, r1
    29fa:	51 05       	cpc	r21, r1
    29fc:	09 f4       	brne	.+2      	; 0x2a00 <__pack_f+0x3e>
    29fe:	8f c0       	rjmp	.+286    	; 0x2b1e <__pack_f+0x15c>
    2a00:	02 80       	ldd	r0, Z+2	; 0x02
    2a02:	f3 81       	ldd	r31, Z+3	; 0x03
    2a04:	e0 2d       	mov	r30, r0
    2a06:	8f ef       	ldi	r24, 0xFF	; 255
    2a08:	e2 38       	cpi	r30, 0x82	; 130
    2a0a:	f8 07       	cpc	r31, r24
    2a0c:	0c f0       	brlt	.+2      	; 0x2a10 <__pack_f+0x4e>
    2a0e:	5a c0       	rjmp	.+180    	; 0x2ac4 <__pack_f+0x102>
    2a10:	c2 e8       	ldi	r28, 0x82	; 130
    2a12:	df ef       	ldi	r29, 0xFF	; 255
    2a14:	ce 1b       	sub	r28, r30
    2a16:	df 0b       	sbc	r29, r31
    2a18:	ca 31       	cpi	r28, 0x1A	; 26
    2a1a:	d1 05       	cpc	r29, r1
    2a1c:	6c f5       	brge	.+90     	; 0x2a78 <__pack_f+0xb6>
    2a1e:	79 01       	movw	r14, r18
    2a20:	8a 01       	movw	r16, r20
    2a22:	0c 2e       	mov	r0, r28
    2a24:	04 c0       	rjmp	.+8      	; 0x2a2e <__pack_f+0x6c>
    2a26:	16 95       	lsr	r17
    2a28:	07 95       	ror	r16
    2a2a:	f7 94       	ror	r15
    2a2c:	e7 94       	ror	r14
    2a2e:	0a 94       	dec	r0
    2a30:	d2 f7       	brpl	.-12     	; 0x2a26 <__pack_f+0x64>
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	a0 e0       	ldi	r26, 0x00	; 0
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	0c 2e       	mov	r0, r28
    2a3c:	04 c0       	rjmp	.+8      	; 0x2a46 <__pack_f+0x84>
    2a3e:	88 0f       	add	r24, r24
    2a40:	99 1f       	adc	r25, r25
    2a42:	aa 1f       	adc	r26, r26
    2a44:	bb 1f       	adc	r27, r27
    2a46:	0a 94       	dec	r0
    2a48:	d2 f7       	brpl	.-12     	; 0x2a3e <__pack_f+0x7c>
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	a1 09       	sbc	r26, r1
    2a4e:	b1 09       	sbc	r27, r1
    2a50:	82 23       	and	r24, r18
    2a52:	93 23       	and	r25, r19
    2a54:	a4 23       	and	r26, r20
    2a56:	b5 23       	and	r27, r21
    2a58:	21 e0       	ldi	r18, 0x01	; 1
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e0       	ldi	r20, 0x00	; 0
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	a1 05       	cpc	r26, r1
    2a64:	b1 05       	cpc	r27, r1
    2a66:	19 f4       	brne	.+6      	; 0x2a6e <__pack_f+0xac>
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	a9 01       	movw	r20, r18
    2a6e:	2e 29       	or	r18, r14
    2a70:	3f 29       	or	r19, r15
    2a72:	40 2b       	or	r20, r16
    2a74:	51 2b       	or	r21, r17
    2a76:	03 c0       	rjmp	.+6      	; 0x2a7e <__pack_f+0xbc>
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	a9 01       	movw	r20, r18
    2a7e:	da 01       	movw	r26, r20
    2a80:	c9 01       	movw	r24, r18
    2a82:	8f 77       	andi	r24, 0x7F	; 127
    2a84:	90 70       	andi	r25, 0x00	; 0
    2a86:	a0 70       	andi	r26, 0x00	; 0
    2a88:	b0 70       	andi	r27, 0x00	; 0
    2a8a:	80 34       	cpi	r24, 0x40	; 64
    2a8c:	91 05       	cpc	r25, r1
    2a8e:	a1 05       	cpc	r26, r1
    2a90:	b1 05       	cpc	r27, r1
    2a92:	39 f4       	brne	.+14     	; 0x2aa2 <__pack_f+0xe0>
    2a94:	27 ff       	sbrs	r18, 7
    2a96:	09 c0       	rjmp	.+18     	; 0x2aaa <__pack_f+0xe8>
    2a98:	20 5c       	subi	r18, 0xC0	; 192
    2a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a9c:	4f 4f       	sbci	r20, 0xFF	; 255
    2a9e:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa0:	04 c0       	rjmp	.+8      	; 0x2aaa <__pack_f+0xe8>
    2aa2:	21 5c       	subi	r18, 0xC1	; 193
    2aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa6:	4f 4f       	sbci	r20, 0xFF	; 255
    2aa8:	5f 4f       	sbci	r21, 0xFF	; 255
    2aaa:	e1 e0       	ldi	r30, 0x01	; 1
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	20 30       	cpi	r18, 0x00	; 0
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	38 07       	cpc	r19, r24
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	48 07       	cpc	r20, r24
    2ab8:	80 e4       	ldi	r24, 0x40	; 64
    2aba:	58 07       	cpc	r21, r24
    2abc:	28 f5       	brcc	.+74     	; 0x2b08 <__pack_f+0x146>
    2abe:	e0 e0       	ldi	r30, 0x00	; 0
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	22 c0       	rjmp	.+68     	; 0x2b08 <__pack_f+0x146>
    2ac4:	e0 38       	cpi	r30, 0x80	; 128
    2ac6:	f1 05       	cpc	r31, r1
    2ac8:	6c f5       	brge	.+90     	; 0x2b24 <__pack_f+0x162>
    2aca:	e1 58       	subi	r30, 0x81	; 129
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	da 01       	movw	r26, r20
    2ad0:	c9 01       	movw	r24, r18
    2ad2:	8f 77       	andi	r24, 0x7F	; 127
    2ad4:	90 70       	andi	r25, 0x00	; 0
    2ad6:	a0 70       	andi	r26, 0x00	; 0
    2ad8:	b0 70       	andi	r27, 0x00	; 0
    2ada:	80 34       	cpi	r24, 0x40	; 64
    2adc:	91 05       	cpc	r25, r1
    2ade:	a1 05       	cpc	r26, r1
    2ae0:	b1 05       	cpc	r27, r1
    2ae2:	39 f4       	brne	.+14     	; 0x2af2 <__pack_f+0x130>
    2ae4:	27 ff       	sbrs	r18, 7
    2ae6:	09 c0       	rjmp	.+18     	; 0x2afa <__pack_f+0x138>
    2ae8:	20 5c       	subi	r18, 0xC0	; 192
    2aea:	3f 4f       	sbci	r19, 0xFF	; 255
    2aec:	4f 4f       	sbci	r20, 0xFF	; 255
    2aee:	5f 4f       	sbci	r21, 0xFF	; 255
    2af0:	04 c0       	rjmp	.+8      	; 0x2afa <__pack_f+0x138>
    2af2:	21 5c       	subi	r18, 0xC1	; 193
    2af4:	3f 4f       	sbci	r19, 0xFF	; 255
    2af6:	4f 4f       	sbci	r20, 0xFF	; 255
    2af8:	5f 4f       	sbci	r21, 0xFF	; 255
    2afa:	57 ff       	sbrs	r21, 7
    2afc:	05 c0       	rjmp	.+10     	; 0x2b08 <__pack_f+0x146>
    2afe:	56 95       	lsr	r21
    2b00:	47 95       	ror	r20
    2b02:	37 95       	ror	r19
    2b04:	27 95       	ror	r18
    2b06:	31 96       	adiw	r30, 0x01	; 1
    2b08:	87 e0       	ldi	r24, 0x07	; 7
    2b0a:	56 95       	lsr	r21
    2b0c:	47 95       	ror	r20
    2b0e:	37 95       	ror	r19
    2b10:	27 95       	ror	r18
    2b12:	8a 95       	dec	r24
    2b14:	d1 f7       	brne	.-12     	; 0x2b0a <__pack_f+0x148>
    2b16:	0b c0       	rjmp	.+22     	; 0x2b2e <__pack_f+0x16c>
    2b18:	e0 e0       	ldi	r30, 0x00	; 0
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	05 c0       	rjmp	.+10     	; 0x2b28 <__pack_f+0x166>
    2b1e:	e0 e0       	ldi	r30, 0x00	; 0
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	05 c0       	rjmp	.+10     	; 0x2b2e <__pack_f+0x16c>
    2b24:	ef ef       	ldi	r30, 0xFF	; 255
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	a9 01       	movw	r20, r18
    2b2e:	8e 2f       	mov	r24, r30
    2b30:	87 95       	ror	r24
    2b32:	88 27       	eor	r24, r24
    2b34:	87 95       	ror	r24
    2b36:	94 2f       	mov	r25, r20
    2b38:	9f 77       	andi	r25, 0x7F	; 127
    2b3a:	67 95       	ror	r22
    2b3c:	66 27       	eor	r22, r22
    2b3e:	67 95       	ror	r22
    2b40:	e6 95       	lsr	r30
    2b42:	e2 2e       	mov	r14, r18
    2b44:	a9 2f       	mov	r26, r25
    2b46:	a8 2b       	or	r26, r24
    2b48:	fe 2f       	mov	r31, r30
    2b4a:	f6 2b       	or	r31, r22
    2b4c:	62 2f       	mov	r22, r18
    2b4e:	73 2f       	mov	r23, r19
    2b50:	8a 2f       	mov	r24, r26
    2b52:	9f 2f       	mov	r25, r31
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	e6 e0       	ldi	r30, 0x06	; 6
    2b5a:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x18>

00002b5e <__unpack_f>:
    2b5e:	dc 01       	movw	r26, r24
    2b60:	fb 01       	movw	r30, r22
    2b62:	2c 91       	ld	r18, X
    2b64:	11 96       	adiw	r26, 0x01	; 1
    2b66:	3c 91       	ld	r19, X
    2b68:	11 97       	sbiw	r26, 0x01	; 1
    2b6a:	12 96       	adiw	r26, 0x02	; 2
    2b6c:	8c 91       	ld	r24, X
    2b6e:	12 97       	sbiw	r26, 0x02	; 2
    2b70:	48 2f       	mov	r20, r24
    2b72:	4f 77       	andi	r20, 0x7F	; 127
    2b74:	50 e0       	ldi	r21, 0x00	; 0
    2b76:	98 2f       	mov	r25, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	99 27       	eor	r25, r25
    2b7c:	99 1f       	adc	r25, r25
    2b7e:	13 96       	adiw	r26, 0x03	; 3
    2b80:	6c 91       	ld	r22, X
    2b82:	13 97       	sbiw	r26, 0x03	; 3
    2b84:	86 2f       	mov	r24, r22
    2b86:	88 0f       	add	r24, r24
    2b88:	89 2b       	or	r24, r25
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	66 1f       	adc	r22, r22
    2b8e:	66 27       	eor	r22, r22
    2b90:	66 1f       	adc	r22, r22
    2b92:	61 83       	std	Z+1, r22	; 0x01
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	39 f5       	brne	.+78     	; 0x2be6 <__unpack_f+0x88>
    2b98:	21 15       	cp	r18, r1
    2b9a:	31 05       	cpc	r19, r1
    2b9c:	41 05       	cpc	r20, r1
    2b9e:	51 05       	cpc	r21, r1
    2ba0:	11 f4       	brne	.+4      	; 0x2ba6 <__unpack_f+0x48>
    2ba2:	82 e0       	ldi	r24, 0x02	; 2
    2ba4:	29 c0       	rjmp	.+82     	; 0x2bf8 <__unpack_f+0x9a>
    2ba6:	82 e8       	ldi	r24, 0x82	; 130
    2ba8:	9f ef       	ldi	r25, 0xFF	; 255
    2baa:	93 83       	std	Z+3, r25	; 0x03
    2bac:	82 83       	std	Z+2, r24	; 0x02
    2bae:	67 e0       	ldi	r22, 0x07	; 7
    2bb0:	22 0f       	add	r18, r18
    2bb2:	33 1f       	adc	r19, r19
    2bb4:	44 1f       	adc	r20, r20
    2bb6:	55 1f       	adc	r21, r21
    2bb8:	6a 95       	dec	r22
    2bba:	d1 f7       	brne	.-12     	; 0x2bb0 <__unpack_f+0x52>
    2bbc:	83 e0       	ldi	r24, 0x03	; 3
    2bbe:	80 83       	st	Z, r24
    2bc0:	09 c0       	rjmp	.+18     	; 0x2bd4 <__unpack_f+0x76>
    2bc2:	22 0f       	add	r18, r18
    2bc4:	33 1f       	adc	r19, r19
    2bc6:	44 1f       	adc	r20, r20
    2bc8:	55 1f       	adc	r21, r21
    2bca:	82 81       	ldd	r24, Z+2	; 0x02
    2bcc:	93 81       	ldd	r25, Z+3	; 0x03
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	93 83       	std	Z+3, r25	; 0x03
    2bd2:	82 83       	std	Z+2, r24	; 0x02
    2bd4:	20 30       	cpi	r18, 0x00	; 0
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	38 07       	cpc	r19, r24
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	48 07       	cpc	r20, r24
    2bde:	80 e4       	ldi	r24, 0x40	; 64
    2be0:	58 07       	cpc	r21, r24
    2be2:	78 f3       	brcs	.-34     	; 0x2bc2 <__unpack_f+0x64>
    2be4:	20 c0       	rjmp	.+64     	; 0x2c26 <__unpack_f+0xc8>
    2be6:	8f 3f       	cpi	r24, 0xFF	; 255
    2be8:	91 05       	cpc	r25, r1
    2bea:	79 f4       	brne	.+30     	; 0x2c0a <__unpack_f+0xac>
    2bec:	21 15       	cp	r18, r1
    2bee:	31 05       	cpc	r19, r1
    2bf0:	41 05       	cpc	r20, r1
    2bf2:	51 05       	cpc	r21, r1
    2bf4:	19 f4       	brne	.+6      	; 0x2bfc <__unpack_f+0x9e>
    2bf6:	84 e0       	ldi	r24, 0x04	; 4
    2bf8:	80 83       	st	Z, r24
    2bfa:	08 95       	ret
    2bfc:	44 ff       	sbrs	r20, 4
    2bfe:	03 c0       	rjmp	.+6      	; 0x2c06 <__unpack_f+0xa8>
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	80 83       	st	Z, r24
    2c04:	10 c0       	rjmp	.+32     	; 0x2c26 <__unpack_f+0xc8>
    2c06:	10 82       	st	Z, r1
    2c08:	0e c0       	rjmp	.+28     	; 0x2c26 <__unpack_f+0xc8>
    2c0a:	8f 57       	subi	r24, 0x7F	; 127
    2c0c:	90 40       	sbci	r25, 0x00	; 0
    2c0e:	93 83       	std	Z+3, r25	; 0x03
    2c10:	82 83       	std	Z+2, r24	; 0x02
    2c12:	83 e0       	ldi	r24, 0x03	; 3
    2c14:	80 83       	st	Z, r24
    2c16:	87 e0       	ldi	r24, 0x07	; 7
    2c18:	22 0f       	add	r18, r18
    2c1a:	33 1f       	adc	r19, r19
    2c1c:	44 1f       	adc	r20, r20
    2c1e:	55 1f       	adc	r21, r21
    2c20:	8a 95       	dec	r24
    2c22:	d1 f7       	brne	.-12     	; 0x2c18 <__unpack_f+0xba>
    2c24:	50 64       	ori	r21, 0x40	; 64
    2c26:	24 83       	std	Z+4, r18	; 0x04
    2c28:	35 83       	std	Z+5, r19	; 0x05
    2c2a:	46 83       	std	Z+6, r20	; 0x06
    2c2c:	57 83       	std	Z+7, r21	; 0x07
    2c2e:	08 95       	ret

00002c30 <__fpcmp_parts_f>:
    2c30:	fc 01       	movw	r30, r24
    2c32:	db 01       	movw	r26, r22
    2c34:	90 81       	ld	r25, Z
    2c36:	92 30       	cpi	r25, 0x02	; 2
    2c38:	08 f4       	brcc	.+2      	; 0x2c3c <__fpcmp_parts_f+0xc>
    2c3a:	49 c0       	rjmp	.+146    	; 0x2cce <__fpcmp_parts_f+0x9e>
    2c3c:	8c 91       	ld	r24, X
    2c3e:	82 30       	cpi	r24, 0x02	; 2
    2c40:	08 f4       	brcc	.+2      	; 0x2c44 <__fpcmp_parts_f+0x14>
    2c42:	45 c0       	rjmp	.+138    	; 0x2cce <__fpcmp_parts_f+0x9e>
    2c44:	94 30       	cpi	r25, 0x04	; 4
    2c46:	51 f4       	brne	.+20     	; 0x2c5c <__fpcmp_parts_f+0x2c>
    2c48:	61 81       	ldd	r22, Z+1	; 0x01
    2c4a:	84 30       	cpi	r24, 0x04	; 4
    2c4c:	b1 f5       	brne	.+108    	; 0x2cba <__fpcmp_parts_f+0x8a>
    2c4e:	11 96       	adiw	r26, 0x01	; 1
    2c50:	2c 91       	ld	r18, X
    2c52:	11 97       	sbiw	r26, 0x01	; 1
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	26 1b       	sub	r18, r22
    2c58:	31 09       	sbc	r19, r1
    2c5a:	41 c0       	rjmp	.+130    	; 0x2cde <__fpcmp_parts_f+0xae>
    2c5c:	84 30       	cpi	r24, 0x04	; 4
    2c5e:	21 f0       	breq	.+8      	; 0x2c68 <__fpcmp_parts_f+0x38>
    2c60:	92 30       	cpi	r25, 0x02	; 2
    2c62:	41 f4       	brne	.+16     	; 0x2c74 <__fpcmp_parts_f+0x44>
    2c64:	82 30       	cpi	r24, 0x02	; 2
    2c66:	b1 f1       	breq	.+108    	; 0x2cd4 <__fpcmp_parts_f+0xa4>
    2c68:	11 96       	adiw	r26, 0x01	; 1
    2c6a:	8c 91       	ld	r24, X
    2c6c:	11 97       	sbiw	r26, 0x01	; 1
    2c6e:	88 23       	and	r24, r24
    2c70:	a1 f1       	breq	.+104    	; 0x2cda <__fpcmp_parts_f+0xaa>
    2c72:	2d c0       	rjmp	.+90     	; 0x2cce <__fpcmp_parts_f+0x9e>
    2c74:	61 81       	ldd	r22, Z+1	; 0x01
    2c76:	82 30       	cpi	r24, 0x02	; 2
    2c78:	01 f1       	breq	.+64     	; 0x2cba <__fpcmp_parts_f+0x8a>
    2c7a:	11 96       	adiw	r26, 0x01	; 1
    2c7c:	8c 91       	ld	r24, X
    2c7e:	11 97       	sbiw	r26, 0x01	; 1
    2c80:	68 17       	cp	r22, r24
    2c82:	d9 f4       	brne	.+54     	; 0x2cba <__fpcmp_parts_f+0x8a>
    2c84:	22 81       	ldd	r18, Z+2	; 0x02
    2c86:	33 81       	ldd	r19, Z+3	; 0x03
    2c88:	12 96       	adiw	r26, 0x02	; 2
    2c8a:	8d 91       	ld	r24, X+
    2c8c:	9c 91       	ld	r25, X
    2c8e:	13 97       	sbiw	r26, 0x03	; 3
    2c90:	82 17       	cp	r24, r18
    2c92:	93 07       	cpc	r25, r19
    2c94:	94 f0       	brlt	.+36     	; 0x2cba <__fpcmp_parts_f+0x8a>
    2c96:	28 17       	cp	r18, r24
    2c98:	39 07       	cpc	r19, r25
    2c9a:	bc f0       	brlt	.+46     	; 0x2cca <__fpcmp_parts_f+0x9a>
    2c9c:	24 81       	ldd	r18, Z+4	; 0x04
    2c9e:	35 81       	ldd	r19, Z+5	; 0x05
    2ca0:	46 81       	ldd	r20, Z+6	; 0x06
    2ca2:	57 81       	ldd	r21, Z+7	; 0x07
    2ca4:	14 96       	adiw	r26, 0x04	; 4
    2ca6:	8d 91       	ld	r24, X+
    2ca8:	9d 91       	ld	r25, X+
    2caa:	0d 90       	ld	r0, X+
    2cac:	bc 91       	ld	r27, X
    2cae:	a0 2d       	mov	r26, r0
    2cb0:	82 17       	cp	r24, r18
    2cb2:	93 07       	cpc	r25, r19
    2cb4:	a4 07       	cpc	r26, r20
    2cb6:	b5 07       	cpc	r27, r21
    2cb8:	18 f4       	brcc	.+6      	; 0x2cc0 <__fpcmp_parts_f+0x90>
    2cba:	66 23       	and	r22, r22
    2cbc:	41 f0       	breq	.+16     	; 0x2cce <__fpcmp_parts_f+0x9e>
    2cbe:	0d c0       	rjmp	.+26     	; 0x2cda <__fpcmp_parts_f+0xaa>
    2cc0:	28 17       	cp	r18, r24
    2cc2:	39 07       	cpc	r19, r25
    2cc4:	4a 07       	cpc	r20, r26
    2cc6:	5b 07       	cpc	r21, r27
    2cc8:	28 f4       	brcc	.+10     	; 0x2cd4 <__fpcmp_parts_f+0xa4>
    2cca:	66 23       	and	r22, r22
    2ccc:	31 f0       	breq	.+12     	; 0x2cda <__fpcmp_parts_f+0xaa>
    2cce:	21 e0       	ldi	r18, 0x01	; 1
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	05 c0       	rjmp	.+10     	; 0x2cde <__fpcmp_parts_f+0xae>
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <__fpcmp_parts_f+0xae>
    2cda:	2f ef       	ldi	r18, 0xFF	; 255
    2cdc:	3f ef       	ldi	r19, 0xFF	; 255
    2cde:	c9 01       	movw	r24, r18
    2ce0:	08 95       	ret

00002ce2 <__udivmodqi4>:
    2ce2:	99 1b       	sub	r25, r25
    2ce4:	79 e0       	ldi	r23, 0x09	; 9
    2ce6:	04 c0       	rjmp	.+8      	; 0x2cf0 <__udivmodqi4_ep>

00002ce8 <__udivmodqi4_loop>:
    2ce8:	99 1f       	adc	r25, r25
    2cea:	96 17       	cp	r25, r22
    2cec:	08 f0       	brcs	.+2      	; 0x2cf0 <__udivmodqi4_ep>
    2cee:	96 1b       	sub	r25, r22

00002cf0 <__udivmodqi4_ep>:
    2cf0:	88 1f       	adc	r24, r24
    2cf2:	7a 95       	dec	r23
    2cf4:	c9 f7       	brne	.-14     	; 0x2ce8 <__udivmodqi4_loop>
    2cf6:	80 95       	com	r24
    2cf8:	08 95       	ret

00002cfa <__prologue_saves__>:
    2cfa:	2f 92       	push	r2
    2cfc:	3f 92       	push	r3
    2cfe:	4f 92       	push	r4
    2d00:	5f 92       	push	r5
    2d02:	6f 92       	push	r6
    2d04:	7f 92       	push	r7
    2d06:	8f 92       	push	r8
    2d08:	9f 92       	push	r9
    2d0a:	af 92       	push	r10
    2d0c:	bf 92       	push	r11
    2d0e:	cf 92       	push	r12
    2d10:	df 92       	push	r13
    2d12:	ef 92       	push	r14
    2d14:	ff 92       	push	r15
    2d16:	0f 93       	push	r16
    2d18:	1f 93       	push	r17
    2d1a:	cf 93       	push	r28
    2d1c:	df 93       	push	r29
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
    2d22:	ca 1b       	sub	r28, r26
    2d24:	db 0b       	sbc	r29, r27
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	cd bf       	out	0x3d, r28	; 61
    2d30:	09 94       	ijmp

00002d32 <__epilogue_restores__>:
    2d32:	2a 88       	ldd	r2, Y+18	; 0x12
    2d34:	39 88       	ldd	r3, Y+17	; 0x11
    2d36:	48 88       	ldd	r4, Y+16	; 0x10
    2d38:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d3a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d3c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d3e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d40:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d42:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d44:	b9 84       	ldd	r11, Y+9	; 0x09
    2d46:	c8 84       	ldd	r12, Y+8	; 0x08
    2d48:	df 80       	ldd	r13, Y+7	; 0x07
    2d4a:	ee 80       	ldd	r14, Y+6	; 0x06
    2d4c:	fd 80       	ldd	r15, Y+5	; 0x05
    2d4e:	0c 81       	ldd	r16, Y+4	; 0x04
    2d50:	1b 81       	ldd	r17, Y+3	; 0x03
    2d52:	aa 81       	ldd	r26, Y+2	; 0x02
    2d54:	b9 81       	ldd	r27, Y+1	; 0x01
    2d56:	ce 0f       	add	r28, r30
    2d58:	d1 1d       	adc	r29, r1
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	f8 94       	cli
    2d5e:	de bf       	out	0x3e, r29	; 62
    2d60:	0f be       	out	0x3f, r0	; 63
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	ed 01       	movw	r28, r26
    2d66:	08 95       	ret

00002d68 <cos>:
    2d68:	03 d0       	rcall	.+6      	; 0x2d70 <__fp_rempio2>
    2d6a:	e3 95       	inc	r30
    2d6c:	28 c0       	rjmp	.+80     	; 0x2dbe <__fp_sinus>
    2d6e:	ce c0       	rjmp	.+412    	; 0x2f0c <__fp_nan>

00002d70 <__fp_rempio2>:
    2d70:	3f d0       	rcall	.+126    	; 0x2df0 <__fp_splitA>
    2d72:	e8 f3       	brcs	.-6      	; 0x2d6e <cos+0x6>
    2d74:	e8 94       	clt
    2d76:	e0 e0       	ldi	r30, 0x00	; 0
    2d78:	bb 27       	eor	r27, r27
    2d7a:	9f 57       	subi	r25, 0x7F	; 127
    2d7c:	f0 f0       	brcs	.+60     	; 0x2dba <__fp_rempio2+0x4a>
    2d7e:	2a ed       	ldi	r18, 0xDA	; 218
    2d80:	3f e0       	ldi	r19, 0x0F	; 15
    2d82:	49 ec       	ldi	r20, 0xC9	; 201
    2d84:	06 c0       	rjmp	.+12     	; 0x2d92 <__fp_rempio2+0x22>
    2d86:	ee 0f       	add	r30, r30
    2d88:	bb 0f       	add	r27, r27
    2d8a:	66 1f       	adc	r22, r22
    2d8c:	77 1f       	adc	r23, r23
    2d8e:	88 1f       	adc	r24, r24
    2d90:	28 f0       	brcs	.+10     	; 0x2d9c <__fp_rempio2+0x2c>
    2d92:	b2 3a       	cpi	r27, 0xA2	; 162
    2d94:	62 07       	cpc	r22, r18
    2d96:	73 07       	cpc	r23, r19
    2d98:	84 07       	cpc	r24, r20
    2d9a:	28 f0       	brcs	.+10     	; 0x2da6 <__fp_rempio2+0x36>
    2d9c:	b2 5a       	subi	r27, 0xA2	; 162
    2d9e:	62 0b       	sbc	r22, r18
    2da0:	73 0b       	sbc	r23, r19
    2da2:	84 0b       	sbc	r24, r20
    2da4:	e3 95       	inc	r30
    2da6:	9a 95       	dec	r25
    2da8:	72 f7       	brpl	.-36     	; 0x2d86 <__fp_rempio2+0x16>
    2daa:	80 38       	cpi	r24, 0x80	; 128
    2dac:	30 f4       	brcc	.+12     	; 0x2dba <__fp_rempio2+0x4a>
    2dae:	9a 95       	dec	r25
    2db0:	bb 0f       	add	r27, r27
    2db2:	66 1f       	adc	r22, r22
    2db4:	77 1f       	adc	r23, r23
    2db6:	88 1f       	adc	r24, r24
    2db8:	d2 f7       	brpl	.-12     	; 0x2dae <__fp_rempio2+0x3e>
    2dba:	90 48       	sbci	r25, 0x80	; 128
    2dbc:	9b c0       	rjmp	.+310    	; 0x2ef4 <__fp_mpack_finite>

00002dbe <__fp_sinus>:
    2dbe:	ef 93       	push	r30
    2dc0:	e0 ff       	sbrs	r30, 0
    2dc2:	06 c0       	rjmp	.+12     	; 0x2dd0 <__fp_sinus+0x12>
    2dc4:	a2 ea       	ldi	r26, 0xA2	; 162
    2dc6:	2a ed       	ldi	r18, 0xDA	; 218
    2dc8:	3f e0       	ldi	r19, 0x0F	; 15
    2dca:	49 ec       	ldi	r20, 0xC9	; 201
    2dcc:	5f eb       	ldi	r21, 0xBF	; 191
    2dce:	37 d0       	rcall	.+110    	; 0x2e3e <__addsf3x>
    2dd0:	bf d0       	rcall	.+382    	; 0x2f50 <__fp_round>
    2dd2:	0f 90       	pop	r0
    2dd4:	03 94       	inc	r0
    2dd6:	01 fc       	sbrc	r0, 1
    2dd8:	90 58       	subi	r25, 0x80	; 128
    2dda:	ec e8       	ldi	r30, 0x8C	; 140
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	99 c0       	rjmp	.+306    	; 0x2f12 <__fp_powsodd>

00002de0 <__fp_split3>:
    2de0:	57 fd       	sbrc	r21, 7
    2de2:	90 58       	subi	r25, 0x80	; 128
    2de4:	44 0f       	add	r20, r20
    2de6:	55 1f       	adc	r21, r21
    2de8:	59 f0       	breq	.+22     	; 0x2e00 <__fp_splitA+0x10>
    2dea:	5f 3f       	cpi	r21, 0xFF	; 255
    2dec:	71 f0       	breq	.+28     	; 0x2e0a <__fp_splitA+0x1a>
    2dee:	47 95       	ror	r20

00002df0 <__fp_splitA>:
    2df0:	88 0f       	add	r24, r24
    2df2:	97 fb       	bst	r25, 7
    2df4:	99 1f       	adc	r25, r25
    2df6:	61 f0       	breq	.+24     	; 0x2e10 <__fp_splitA+0x20>
    2df8:	9f 3f       	cpi	r25, 0xFF	; 255
    2dfa:	79 f0       	breq	.+30     	; 0x2e1a <__fp_splitA+0x2a>
    2dfc:	87 95       	ror	r24
    2dfe:	08 95       	ret
    2e00:	12 16       	cp	r1, r18
    2e02:	13 06       	cpc	r1, r19
    2e04:	14 06       	cpc	r1, r20
    2e06:	55 1f       	adc	r21, r21
    2e08:	f2 cf       	rjmp	.-28     	; 0x2dee <__fp_split3+0xe>
    2e0a:	46 95       	lsr	r20
    2e0c:	f1 df       	rcall	.-30     	; 0x2df0 <__fp_splitA>
    2e0e:	08 c0       	rjmp	.+16     	; 0x2e20 <__fp_splitA+0x30>
    2e10:	16 16       	cp	r1, r22
    2e12:	17 06       	cpc	r1, r23
    2e14:	18 06       	cpc	r1, r24
    2e16:	99 1f       	adc	r25, r25
    2e18:	f1 cf       	rjmp	.-30     	; 0x2dfc <__fp_splitA+0xc>
    2e1a:	86 95       	lsr	r24
    2e1c:	71 05       	cpc	r23, r1
    2e1e:	61 05       	cpc	r22, r1
    2e20:	08 94       	sec
    2e22:	08 95       	ret
    2e24:	87 d0       	rcall	.+270    	; 0x2f34 <__fp_pscA>
    2e26:	30 f0       	brcs	.+12     	; 0x2e34 <__fp_splitA+0x44>
    2e28:	8c d0       	rcall	.+280    	; 0x2f42 <__fp_pscB>
    2e2a:	20 f0       	brcs	.+8      	; 0x2e34 <__fp_splitA+0x44>
    2e2c:	31 f4       	brne	.+12     	; 0x2e3a <__fp_splitA+0x4a>
    2e2e:	9f 3f       	cpi	r25, 0xFF	; 255
    2e30:	11 f4       	brne	.+4      	; 0x2e36 <__fp_splitA+0x46>
    2e32:	1e f4       	brtc	.+6      	; 0x2e3a <__fp_splitA+0x4a>
    2e34:	6b c0       	rjmp	.+214    	; 0x2f0c <__fp_nan>
    2e36:	0e f4       	brtc	.+2      	; 0x2e3a <__fp_splitA+0x4a>
    2e38:	e0 95       	com	r30
    2e3a:	e7 fb       	bst	r30, 7
    2e3c:	53 c0       	rjmp	.+166    	; 0x2ee4 <__fp_inf>

00002e3e <__addsf3x>:
    2e3e:	e9 2f       	mov	r30, r25
    2e40:	cf df       	rcall	.-98     	; 0x2de0 <__fp_split3>
    2e42:	80 f3       	brcs	.-32     	; 0x2e24 <__fp_splitA+0x34>
    2e44:	ba 17       	cp	r27, r26
    2e46:	62 07       	cpc	r22, r18
    2e48:	73 07       	cpc	r23, r19
    2e4a:	84 07       	cpc	r24, r20
    2e4c:	95 07       	cpc	r25, r21
    2e4e:	18 f0       	brcs	.+6      	; 0x2e56 <__addsf3x+0x18>
    2e50:	71 f4       	brne	.+28     	; 0x2e6e <__addsf3x+0x30>
    2e52:	9e f5       	brtc	.+102    	; 0x2eba <__addsf3x+0x7c>
    2e54:	8e c0       	rjmp	.+284    	; 0x2f72 <__fp_zero>
    2e56:	0e f4       	brtc	.+2      	; 0x2e5a <__addsf3x+0x1c>
    2e58:	e0 95       	com	r30
    2e5a:	0b 2e       	mov	r0, r27
    2e5c:	ba 2f       	mov	r27, r26
    2e5e:	a0 2d       	mov	r26, r0
    2e60:	0b 01       	movw	r0, r22
    2e62:	b9 01       	movw	r22, r18
    2e64:	90 01       	movw	r18, r0
    2e66:	0c 01       	movw	r0, r24
    2e68:	ca 01       	movw	r24, r20
    2e6a:	a0 01       	movw	r20, r0
    2e6c:	11 24       	eor	r1, r1
    2e6e:	ff 27       	eor	r31, r31
    2e70:	59 1b       	sub	r21, r25
    2e72:	99 f0       	breq	.+38     	; 0x2e9a <__addsf3x+0x5c>
    2e74:	59 3f       	cpi	r21, 0xF9	; 249
    2e76:	50 f4       	brcc	.+20     	; 0x2e8c <__addsf3x+0x4e>
    2e78:	50 3e       	cpi	r21, 0xE0	; 224
    2e7a:	68 f1       	brcs	.+90     	; 0x2ed6 <__addsf3x+0x98>
    2e7c:	1a 16       	cp	r1, r26
    2e7e:	f0 40       	sbci	r31, 0x00	; 0
    2e80:	a2 2f       	mov	r26, r18
    2e82:	23 2f       	mov	r18, r19
    2e84:	34 2f       	mov	r19, r20
    2e86:	44 27       	eor	r20, r20
    2e88:	58 5f       	subi	r21, 0xF8	; 248
    2e8a:	f3 cf       	rjmp	.-26     	; 0x2e72 <__addsf3x+0x34>
    2e8c:	46 95       	lsr	r20
    2e8e:	37 95       	ror	r19
    2e90:	27 95       	ror	r18
    2e92:	a7 95       	ror	r26
    2e94:	f0 40       	sbci	r31, 0x00	; 0
    2e96:	53 95       	inc	r21
    2e98:	c9 f7       	brne	.-14     	; 0x2e8c <__addsf3x+0x4e>
    2e9a:	7e f4       	brtc	.+30     	; 0x2eba <__addsf3x+0x7c>
    2e9c:	1f 16       	cp	r1, r31
    2e9e:	ba 0b       	sbc	r27, r26
    2ea0:	62 0b       	sbc	r22, r18
    2ea2:	73 0b       	sbc	r23, r19
    2ea4:	84 0b       	sbc	r24, r20
    2ea6:	ba f0       	brmi	.+46     	; 0x2ed6 <__addsf3x+0x98>
    2ea8:	91 50       	subi	r25, 0x01	; 1
    2eaa:	a1 f0       	breq	.+40     	; 0x2ed4 <__addsf3x+0x96>
    2eac:	ff 0f       	add	r31, r31
    2eae:	bb 1f       	adc	r27, r27
    2eb0:	66 1f       	adc	r22, r22
    2eb2:	77 1f       	adc	r23, r23
    2eb4:	88 1f       	adc	r24, r24
    2eb6:	c2 f7       	brpl	.-16     	; 0x2ea8 <__addsf3x+0x6a>
    2eb8:	0e c0       	rjmp	.+28     	; 0x2ed6 <__addsf3x+0x98>
    2eba:	ba 0f       	add	r27, r26
    2ebc:	62 1f       	adc	r22, r18
    2ebe:	73 1f       	adc	r23, r19
    2ec0:	84 1f       	adc	r24, r20
    2ec2:	48 f4       	brcc	.+18     	; 0x2ed6 <__addsf3x+0x98>
    2ec4:	87 95       	ror	r24
    2ec6:	77 95       	ror	r23
    2ec8:	67 95       	ror	r22
    2eca:	b7 95       	ror	r27
    2ecc:	f7 95       	ror	r31
    2ece:	9e 3f       	cpi	r25, 0xFE	; 254
    2ed0:	08 f0       	brcs	.+2      	; 0x2ed4 <__addsf3x+0x96>
    2ed2:	b3 cf       	rjmp	.-154    	; 0x2e3a <__fp_splitA+0x4a>
    2ed4:	93 95       	inc	r25
    2ed6:	88 0f       	add	r24, r24
    2ed8:	08 f0       	brcs	.+2      	; 0x2edc <__addsf3x+0x9e>
    2eda:	99 27       	eor	r25, r25
    2edc:	ee 0f       	add	r30, r30
    2ede:	97 95       	ror	r25
    2ee0:	87 95       	ror	r24
    2ee2:	08 95       	ret

00002ee4 <__fp_inf>:
    2ee4:	97 f9       	bld	r25, 7
    2ee6:	9f 67       	ori	r25, 0x7F	; 127
    2ee8:	80 e8       	ldi	r24, 0x80	; 128
    2eea:	70 e0       	ldi	r23, 0x00	; 0
    2eec:	60 e0       	ldi	r22, 0x00	; 0
    2eee:	08 95       	ret

00002ef0 <__fp_mpack>:
    2ef0:	9f 3f       	cpi	r25, 0xFF	; 255
    2ef2:	31 f0       	breq	.+12     	; 0x2f00 <__fp_mpack_finite+0xc>

00002ef4 <__fp_mpack_finite>:
    2ef4:	91 50       	subi	r25, 0x01	; 1
    2ef6:	20 f4       	brcc	.+8      	; 0x2f00 <__fp_mpack_finite+0xc>
    2ef8:	87 95       	ror	r24
    2efa:	77 95       	ror	r23
    2efc:	67 95       	ror	r22
    2efe:	b7 95       	ror	r27
    2f00:	88 0f       	add	r24, r24
    2f02:	91 1d       	adc	r25, r1
    2f04:	96 95       	lsr	r25
    2f06:	87 95       	ror	r24
    2f08:	97 f9       	bld	r25, 7
    2f0a:	08 95       	ret

00002f0c <__fp_nan>:
    2f0c:	9f ef       	ldi	r25, 0xFF	; 255
    2f0e:	80 ec       	ldi	r24, 0xC0	; 192
    2f10:	08 95       	ret

00002f12 <__fp_powsodd>:
    2f12:	9f 93       	push	r25
    2f14:	8f 93       	push	r24
    2f16:	7f 93       	push	r23
    2f18:	6f 93       	push	r22
    2f1a:	ff 93       	push	r31
    2f1c:	ef 93       	push	r30
    2f1e:	9b 01       	movw	r18, r22
    2f20:	ac 01       	movw	r20, r24
    2f22:	11 da       	rcall	.-3038   	; 0x2346 <__mulsf3>
    2f24:	ef 91       	pop	r30
    2f26:	ff 91       	pop	r31
    2f28:	2b d0       	rcall	.+86     	; 0x2f80 <__fp_powser>
    2f2a:	2f 91       	pop	r18
    2f2c:	3f 91       	pop	r19
    2f2e:	4f 91       	pop	r20
    2f30:	5f 91       	pop	r21
    2f32:	09 ca       	rjmp	.-3054   	; 0x2346 <__mulsf3>

00002f34 <__fp_pscA>:
    2f34:	00 24       	eor	r0, r0
    2f36:	0a 94       	dec	r0
    2f38:	16 16       	cp	r1, r22
    2f3a:	17 06       	cpc	r1, r23
    2f3c:	18 06       	cpc	r1, r24
    2f3e:	09 06       	cpc	r0, r25
    2f40:	08 95       	ret

00002f42 <__fp_pscB>:
    2f42:	00 24       	eor	r0, r0
    2f44:	0a 94       	dec	r0
    2f46:	12 16       	cp	r1, r18
    2f48:	13 06       	cpc	r1, r19
    2f4a:	14 06       	cpc	r1, r20
    2f4c:	05 06       	cpc	r0, r21
    2f4e:	08 95       	ret

00002f50 <__fp_round>:
    2f50:	09 2e       	mov	r0, r25
    2f52:	03 94       	inc	r0
    2f54:	00 0c       	add	r0, r0
    2f56:	11 f4       	brne	.+4      	; 0x2f5c <__fp_round+0xc>
    2f58:	88 23       	and	r24, r24
    2f5a:	52 f0       	brmi	.+20     	; 0x2f70 <__fp_round+0x20>
    2f5c:	bb 0f       	add	r27, r27
    2f5e:	40 f4       	brcc	.+16     	; 0x2f70 <__fp_round+0x20>
    2f60:	bf 2b       	or	r27, r31
    2f62:	11 f4       	brne	.+4      	; 0x2f68 <__fp_round+0x18>
    2f64:	60 ff       	sbrs	r22, 0
    2f66:	04 c0       	rjmp	.+8      	; 0x2f70 <__fp_round+0x20>
    2f68:	6f 5f       	subi	r22, 0xFF	; 255
    2f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f6c:	8f 4f       	sbci	r24, 0xFF	; 255
    2f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f70:	08 95       	ret

00002f72 <__fp_zero>:
    2f72:	e8 94       	clt

00002f74 <__fp_szero>:
    2f74:	bb 27       	eor	r27, r27
    2f76:	66 27       	eor	r22, r22
    2f78:	77 27       	eor	r23, r23
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	97 f9       	bld	r25, 7
    2f7e:	08 95       	ret

00002f80 <__fp_powser>:
    2f80:	df 93       	push	r29
    2f82:	cf 93       	push	r28
    2f84:	1f 93       	push	r17
    2f86:	0f 93       	push	r16
    2f88:	ff 92       	push	r15
    2f8a:	ef 92       	push	r14
    2f8c:	df 92       	push	r13
    2f8e:	7b 01       	movw	r14, r22
    2f90:	8c 01       	movw	r16, r24
    2f92:	68 94       	set
    2f94:	05 c0       	rjmp	.+10     	; 0x2fa0 <__fp_powser+0x20>
    2f96:	da 2e       	mov	r13, r26
    2f98:	ef 01       	movw	r28, r30
    2f9a:	21 d0       	rcall	.+66     	; 0x2fde <__mulsf3x>
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	e8 94       	clt
    2fa0:	a5 91       	lpm	r26, Z+
    2fa2:	25 91       	lpm	r18, Z+
    2fa4:	35 91       	lpm	r19, Z+
    2fa6:	45 91       	lpm	r20, Z+
    2fa8:	55 91       	lpm	r21, Z+
    2faa:	ae f3       	brts	.-22     	; 0x2f96 <__fp_powser+0x16>
    2fac:	ef 01       	movw	r28, r30
    2fae:	47 df       	rcall	.-370    	; 0x2e3e <__addsf3x>
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	97 01       	movw	r18, r14
    2fb4:	a8 01       	movw	r20, r16
    2fb6:	da 94       	dec	r13
    2fb8:	79 f7       	brne	.-34     	; 0x2f98 <__fp_powser+0x18>
    2fba:	df 90       	pop	r13
    2fbc:	ef 90       	pop	r14
    2fbe:	ff 90       	pop	r15
    2fc0:	0f 91       	pop	r16
    2fc2:	1f 91       	pop	r17
    2fc4:	cf 91       	pop	r28
    2fc6:	df 91       	pop	r29
    2fc8:	08 95       	ret
    2fca:	b4 df       	rcall	.-152    	; 0x2f34 <__fp_pscA>
    2fcc:	28 f0       	brcs	.+10     	; 0x2fd8 <__fp_powser+0x58>
    2fce:	b9 df       	rcall	.-142    	; 0x2f42 <__fp_pscB>
    2fd0:	18 f0       	brcs	.+6      	; 0x2fd8 <__fp_powser+0x58>
    2fd2:	95 23       	and	r25, r21
    2fd4:	09 f0       	breq	.+2      	; 0x2fd8 <__fp_powser+0x58>
    2fd6:	86 cf       	rjmp	.-244    	; 0x2ee4 <__fp_inf>
    2fd8:	99 cf       	rjmp	.-206    	; 0x2f0c <__fp_nan>
    2fda:	11 24       	eor	r1, r1
    2fdc:	cb cf       	rjmp	.-106    	; 0x2f74 <__fp_szero>

00002fde <__mulsf3x>:
    2fde:	00 df       	rcall	.-512    	; 0x2de0 <__fp_split3>
    2fe0:	a0 f3       	brcs	.-24     	; 0x2fca <__fp_powser+0x4a>

00002fe2 <__mulsf3_pse>:
    2fe2:	95 9f       	mul	r25, r21
    2fe4:	d1 f3       	breq	.-12     	; 0x2fda <__fp_powser+0x5a>
    2fe6:	95 0f       	add	r25, r21
    2fe8:	50 e0       	ldi	r21, 0x00	; 0
    2fea:	55 1f       	adc	r21, r21
    2fec:	62 9f       	mul	r22, r18
    2fee:	f0 01       	movw	r30, r0
    2ff0:	72 9f       	mul	r23, r18
    2ff2:	bb 27       	eor	r27, r27
    2ff4:	f0 0d       	add	r31, r0
    2ff6:	b1 1d       	adc	r27, r1
    2ff8:	63 9f       	mul	r22, r19
    2ffa:	aa 27       	eor	r26, r26
    2ffc:	f0 0d       	add	r31, r0
    2ffe:	b1 1d       	adc	r27, r1
    3000:	aa 1f       	adc	r26, r26
    3002:	64 9f       	mul	r22, r20
    3004:	66 27       	eor	r22, r22
    3006:	b0 0d       	add	r27, r0
    3008:	a1 1d       	adc	r26, r1
    300a:	66 1f       	adc	r22, r22
    300c:	82 9f       	mul	r24, r18
    300e:	22 27       	eor	r18, r18
    3010:	b0 0d       	add	r27, r0
    3012:	a1 1d       	adc	r26, r1
    3014:	62 1f       	adc	r22, r18
    3016:	73 9f       	mul	r23, r19
    3018:	b0 0d       	add	r27, r0
    301a:	a1 1d       	adc	r26, r1
    301c:	62 1f       	adc	r22, r18
    301e:	83 9f       	mul	r24, r19
    3020:	a0 0d       	add	r26, r0
    3022:	61 1d       	adc	r22, r1
    3024:	22 1f       	adc	r18, r18
    3026:	74 9f       	mul	r23, r20
    3028:	33 27       	eor	r19, r19
    302a:	a0 0d       	add	r26, r0
    302c:	61 1d       	adc	r22, r1
    302e:	23 1f       	adc	r18, r19
    3030:	84 9f       	mul	r24, r20
    3032:	60 0d       	add	r22, r0
    3034:	21 1d       	adc	r18, r1
    3036:	82 2f       	mov	r24, r18
    3038:	76 2f       	mov	r23, r22
    303a:	6a 2f       	mov	r22, r26
    303c:	11 24       	eor	r1, r1
    303e:	9f 57       	subi	r25, 0x7F	; 127
    3040:	50 40       	sbci	r21, 0x00	; 0
    3042:	8a f0       	brmi	.+34     	; 0x3066 <__mulsf3_pse+0x84>
    3044:	e1 f0       	breq	.+56     	; 0x307e <__mulsf3_pse+0x9c>
    3046:	88 23       	and	r24, r24
    3048:	4a f0       	brmi	.+18     	; 0x305c <__mulsf3_pse+0x7a>
    304a:	ee 0f       	add	r30, r30
    304c:	ff 1f       	adc	r31, r31
    304e:	bb 1f       	adc	r27, r27
    3050:	66 1f       	adc	r22, r22
    3052:	77 1f       	adc	r23, r23
    3054:	88 1f       	adc	r24, r24
    3056:	91 50       	subi	r25, 0x01	; 1
    3058:	50 40       	sbci	r21, 0x00	; 0
    305a:	a9 f7       	brne	.-22     	; 0x3046 <__mulsf3_pse+0x64>
    305c:	9e 3f       	cpi	r25, 0xFE	; 254
    305e:	51 05       	cpc	r21, r1
    3060:	70 f0       	brcs	.+28     	; 0x307e <__mulsf3_pse+0x9c>
    3062:	40 cf       	rjmp	.-384    	; 0x2ee4 <__fp_inf>
    3064:	87 cf       	rjmp	.-242    	; 0x2f74 <__fp_szero>
    3066:	5f 3f       	cpi	r21, 0xFF	; 255
    3068:	ec f3       	brlt	.-6      	; 0x3064 <__mulsf3_pse+0x82>
    306a:	98 3e       	cpi	r25, 0xE8	; 232
    306c:	dc f3       	brlt	.-10     	; 0x3064 <__mulsf3_pse+0x82>
    306e:	86 95       	lsr	r24
    3070:	77 95       	ror	r23
    3072:	67 95       	ror	r22
    3074:	b7 95       	ror	r27
    3076:	f7 95       	ror	r31
    3078:	e7 95       	ror	r30
    307a:	9f 5f       	subi	r25, 0xFF	; 255
    307c:	c1 f7       	brne	.-16     	; 0x306e <__mulsf3_pse+0x8c>
    307e:	fe 2b       	or	r31, r30
    3080:	88 0f       	add	r24, r24
    3082:	91 1d       	adc	r25, r1
    3084:	96 95       	lsr	r25
    3086:	87 95       	ror	r24
    3088:	97 f9       	bld	r25, 7
    308a:	08 95       	ret

0000308c <_exit>:
    308c:	f8 94       	cli

0000308e <__stop_program>:
    308e:	ff cf       	rjmp	.-2      	; 0x308e <__stop_program>
